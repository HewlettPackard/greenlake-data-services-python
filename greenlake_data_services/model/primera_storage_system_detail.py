"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from greenlake_data_services.exceptions import ApiAttributeError


def lazy_import():
    from greenlake_data_services.model.descriptors import Descriptors
    from greenlake_data_services.model.maintenance_mode import MaintenanceMode
    from greenlake_data_services.model.manufacturing_single import ManufacturingSingle
    from greenlake_data_services.model.parameters import Parameters
    from greenlake_data_services.model.primera_associated_links import PrimeraAssociatedLinks
    from greenlake_data_services.model.primera_storage_system_detail_device_type import PrimeraStorageSystemDetailDeviceType
    from greenlake_data_services.model.software_versions_solo import SoftwareVersionsSolo
    from greenlake_data_services.model.sys_log_status import SysLogStatus
    from greenlake_data_services.model.system_headroom import SystemHeadroom
    from greenlake_data_services.model.system_state import SystemState
    from greenlake_data_services.model.uptime import Uptime
    from greenlake_data_services.model.version import Version
    globals()['Descriptors'] = Descriptors
    globals()['MaintenanceMode'] = MaintenanceMode
    globals()['ManufacturingSingle'] = ManufacturingSingle
    globals()['Parameters'] = Parameters
    globals()['PrimeraAssociatedLinks'] = PrimeraAssociatedLinks
    globals()['PrimeraStorageSystemDetailDeviceType'] = PrimeraStorageSystemDetailDeviceType
    globals()['SoftwareVersionsSolo'] = SoftwareVersionsSolo
    globals()['SysLogStatus'] = SysLogStatus
    globals()['SystemHeadroom'] = SystemHeadroom
    globals()['SystemState'] = SystemState
    globals()['Uptime'] = Uptime
    globals()['Version'] = Version


class PrimeraStorageSystemDetail(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('cluster_led',): {
            'UNKNOWN': "LED_UNKNOWN",
            'OFF': "LED_OFF",
            'GREEN': "LED_GREEN",
            'GREEN_BLNK': "LED_GREEN_BLNK",
            'AMBER': "LED_AMBER",
            'AMBER_BLNK': "LED_AMBER_BLNK",
            'BLUE': "LED_BLUE",
            'BLUE_BLNK': "LED_BLUE_BLNK",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = True

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'associated_links': (PrimeraAssociatedLinks,),  # noqa: E501
            'centerplane_type': (str, none_type,),  # noqa: E501
            'chunklet_size_mi_b': (int, none_type,),  # noqa: E501
            'cluster_led': (str,),  # noqa: E501
            'console_uri': (str, none_type,),  # noqa: E501
            'customer_id': (str, none_type,),  # noqa: E501
            'descriptors': (Descriptors,),  # noqa: E501
            'device_id': (int, none_type,),  # noqa: E501
            'device_type': (PrimeraStorageSystemDetailDeviceType,),  # noqa: E501
            'displayname': (str, none_type,),  # noqa: E501
            'domain': (str, none_type,),  # noqa: E501
            'fqdn': (str, none_type,),  # noqa: E501
            'generation': (int, none_type,),  # noqa: E501
            'id': (str, none_type,),  # noqa: E501
            'in_cluster_nodes': ([int], none_type,),  # noqa: E501
            'is_fips_enabled': (bool, none_type,),  # noqa: E501
            'locate_enabled': (bool, none_type,),  # noqa: E501
            'maintenance_mode': (MaintenanceMode,),  # noqa: E501
            'manufacturing': (ManufacturingSingle,),  # noqa: E501
            'master_node': (int, none_type,),  # noqa: E501
            'minimum_password_length': (int, none_type,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'network_master_node': (int, none_type,),  # noqa: E501
            'node_memory': (str, none_type,),  # noqa: E501
            'nodes_count': (int, none_type,),  # noqa: E501
            'nodes_present': ([int], none_type,),  # noqa: E501
            'online_nodes': ([int], none_type,),  # noqa: E501
            'parameters': (Parameters,),  # noqa: E501
            'request_uri': (str, none_type,),  # noqa: E501
            'resource_uri': (str, none_type,),  # noqa: E501
            'safe_to_remove': (bool, none_type,),  # noqa: E501
            'software_versions': (SoftwareVersionsSolo,),  # noqa: E501
            'state': (SystemState,),  # noqa: E501
            'sys_log_status': (SysLogStatus,),  # noqa: E501
            'system_date': (int, none_type,),  # noqa: E501
            'system_headroom': (SystemHeadroom,),  # noqa: E501
            'system_wwn': (str, none_type,),  # noqa: E501
            'timezone': (str, none_type,),  # noqa: E501
            'type': (str, none_type,),  # noqa: E501
            'uptime': (Uptime,),  # noqa: E501
            'version': (Version,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'associated_links': 'associatedLinks',  # noqa: E501
        'centerplane_type': 'centerplaneType',  # noqa: E501
        'chunklet_size_mi_b': 'chunkletSizeMiB',  # noqa: E501
        'cluster_led': 'clusterLED',  # noqa: E501
        'console_uri': 'consoleUri',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'descriptors': 'descriptors',  # noqa: E501
        'device_id': 'deviceId',  # noqa: E501
        'device_type': 'deviceType',  # noqa: E501
        'displayname': 'displayname',  # noqa: E501
        'domain': 'domain',  # noqa: E501
        'fqdn': 'fqdn',  # noqa: E501
        'generation': 'generation',  # noqa: E501
        'id': 'id',  # noqa: E501
        'in_cluster_nodes': 'inClusterNodes',  # noqa: E501
        'is_fips_enabled': 'isFIPSEnabled',  # noqa: E501
        'locate_enabled': 'locateEnabled',  # noqa: E501
        'maintenance_mode': 'maintenanceMode',  # noqa: E501
        'manufacturing': 'manufacturing',  # noqa: E501
        'master_node': 'masterNode',  # noqa: E501
        'minimum_password_length': 'minimumPasswordLength',  # noqa: E501
        'name': 'name',  # noqa: E501
        'network_master_node': 'networkMasterNode',  # noqa: E501
        'node_memory': 'nodeMemory',  # noqa: E501
        'nodes_count': 'nodesCount',  # noqa: E501
        'nodes_present': 'nodesPresent',  # noqa: E501
        'online_nodes': 'onlineNodes',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
        'request_uri': 'requestUri',  # noqa: E501
        'resource_uri': 'resourceUri',  # noqa: E501
        'safe_to_remove': 'safeToRemove',  # noqa: E501
        'software_versions': 'softwareVersions',  # noqa: E501
        'state': 'state',  # noqa: E501
        'sys_log_status': 'sysLogStatus',  # noqa: E501
        'system_date': 'systemDate',  # noqa: E501
        'system_headroom': 'systemHeadroom',  # noqa: E501
        'system_wwn': 'systemWWN',  # noqa: E501
        'timezone': 'timezone',  # noqa: E501
        'type': 'type',  # noqa: E501
        'uptime': 'uptime',  # noqa: E501
        'version': 'version',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """PrimeraStorageSystemDetail - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            associated_links (PrimeraAssociatedLinks): [optional]  # noqa: E501
            centerplane_type (str, none_type): Centerplane type. [optional]  # noqa: E501
            chunklet_size_mi_b (int, none_type): Size of chunklet in MiB. [optional]  # noqa: E501
            cluster_led (str): Cluster LED state. [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            descriptors (Descriptors): [optional]  # noqa: E501
            device_id (int, none_type): Numeric ID of the resource. [optional]  # noqa: E501
            device_type (PrimeraStorageSystemDetailDeviceType): [optional]  # noqa: E501
            displayname (str, none_type): Array Display name. [optional]  # noqa: E501
            domain (str, none_type): Domain that the resource belongs to. [optional]  # noqa: E501
            fqdn (str, none_type): Fully qualified domain name of the system. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            id (str, none_type): SerialNumber/UUID string uniquely identifying the storage system object.. [optional]  # noqa: E501
            in_cluster_nodes ([int], none_type): IDs of the nodes that are in cluster. [optional]  # noqa: E501
            is_fips_enabled (bool, none_type): Flag for FIPS. [optional]  # noqa: E501
            locate_enabled (bool, none_type): Indicates if the locate beacon is enabled or not. [optional]  # noqa: E501
            maintenance_mode (MaintenanceMode): [optional]  # noqa: E501
            manufacturing (ManufacturingSingle): [optional]  # noqa: E501
            master_node (int, none_type): ID of the master node. [optional]  # noqa: E501
            minimum_password_length (int, none_type): Minimum length of password for users. [optional]  # noqa: E501
            name (str, none_type): Name of the resource. [optional]  # noqa: E501
            network_master_node (int, none_type): The Node ID of the current network master. [optional]  # noqa: E501
            node_memory (str, none_type): Node memory size. [optional]  # noqa: E501
            nodes_count (int, none_type): Number of nodes in the system. [optional]  # noqa: E501
            nodes_present ([int], none_type): IDs of the nodes that are present. [optional]  # noqa: E501
            online_nodes ([int], none_type): IDs of the nodes that are online. [optional]  # noqa: E501
            parameters (Parameters): [optional]  # noqa: E501
            request_uri (str, none_type): requestUri for detailed storage object. [optional]  # noqa: E501
            resource_uri (str, none_type): resourceUri for detailed storage object. [optional]  # noqa: E501
            safe_to_remove (bool, none_type): Indicates if the component is safe to remove. [optional]  # noqa: E501
            software_versions (SoftwareVersionsSolo): [optional]  # noqa: E501
            state (SystemState): [optional]  # noqa: E501
            sys_log_status (SysLogStatus): [optional]  # noqa: E501
            system_date (int, none_type): Current date of the system. [optional]  # noqa: E501
            system_headroom (SystemHeadroom): [optional]  # noqa: E501
            system_wwn (str, none_type): WWN of the array.. [optional]  # noqa: E501
            timezone (str, none_type): Current timezone of the system.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            uptime (Uptime): [optional]  # noqa: E501
            version (Version): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PrimeraStorageSystemDetail - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            associated_links (PrimeraAssociatedLinks): [optional]  # noqa: E501
            centerplane_type (str, none_type): Centerplane type. [optional]  # noqa: E501
            chunklet_size_mi_b (int, none_type): Size of chunklet in MiB. [optional]  # noqa: E501
            cluster_led (str): Cluster LED state. [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            descriptors (Descriptors): [optional]  # noqa: E501
            device_id (int, none_type): Numeric ID of the resource. [optional]  # noqa: E501
            device_type (PrimeraStorageSystemDetailDeviceType): [optional]  # noqa: E501
            displayname (str, none_type): Array Display name. [optional]  # noqa: E501
            domain (str, none_type): Domain that the resource belongs to. [optional]  # noqa: E501
            fqdn (str, none_type): Fully qualified domain name of the system. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            id (str, none_type): SerialNumber/UUID string uniquely identifying the storage system object.. [optional]  # noqa: E501
            in_cluster_nodes ([int], none_type): IDs of the nodes that are in cluster. [optional]  # noqa: E501
            is_fips_enabled (bool, none_type): Flag for FIPS. [optional]  # noqa: E501
            locate_enabled (bool, none_type): Indicates if the locate beacon is enabled or not. [optional]  # noqa: E501
            maintenance_mode (MaintenanceMode): [optional]  # noqa: E501
            manufacturing (ManufacturingSingle): [optional]  # noqa: E501
            master_node (int, none_type): ID of the master node. [optional]  # noqa: E501
            minimum_password_length (int, none_type): Minimum length of password for users. [optional]  # noqa: E501
            name (str, none_type): Name of the resource. [optional]  # noqa: E501
            network_master_node (int, none_type): The Node ID of the current network master. [optional]  # noqa: E501
            node_memory (str, none_type): Node memory size. [optional]  # noqa: E501
            nodes_count (int, none_type): Number of nodes in the system. [optional]  # noqa: E501
            nodes_present ([int], none_type): IDs of the nodes that are present. [optional]  # noqa: E501
            online_nodes ([int], none_type): IDs of the nodes that are online. [optional]  # noqa: E501
            parameters (Parameters): [optional]  # noqa: E501
            request_uri (str, none_type): requestUri for detailed storage object. [optional]  # noqa: E501
            resource_uri (str, none_type): resourceUri for detailed storage object. [optional]  # noqa: E501
            safe_to_remove (bool, none_type): Indicates if the component is safe to remove. [optional]  # noqa: E501
            software_versions (SoftwareVersionsSolo): [optional]  # noqa: E501
            state (SystemState): [optional]  # noqa: E501
            sys_log_status (SysLogStatus): [optional]  # noqa: E501
            system_date (int, none_type): Current date of the system. [optional]  # noqa: E501
            system_headroom (SystemHeadroom): [optional]  # noqa: E501
            system_wwn (str, none_type): WWN of the array.. [optional]  # noqa: E501
            timezone (str, none_type): Current timezone of the system.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            uptime (Uptime): [optional]  # noqa: E501
            version (Version): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
