"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from greenlake_data_services.exceptions import ApiAttributeError


def lazy_import():
    from greenlake_data_services.model.calendar import Calendar
    from greenlake_data_services.model.policy import Policy
    from greenlake_data_services.model.primera_application_set_details_initiators import PrimeraApplicationSetDetailsInitiators
    from greenlake_data_services.model.primera_volume_details_associated_links import PrimeraVolumeDetailsAssociatedLinks
    from greenlake_data_services.model.snapshot_tdvvsize import SnapshotTdvvsize
    from greenlake_data_services.model.space import Space
    from greenlake_data_services.model.state import STATE
    from greenlake_data_services.model.user_allocation_settings_single import UserAllocationSettingsSingle
    from greenlake_data_services.model.volume_performance import VolumePerformance
    globals()['Calendar'] = Calendar
    globals()['Policy'] = Policy
    globals()['PrimeraApplicationSetDetailsInitiators'] = PrimeraApplicationSetDetailsInitiators
    globals()['PrimeraVolumeDetailsAssociatedLinks'] = PrimeraVolumeDetailsAssociatedLinks
    globals()['STATE'] = STATE
    globals()['SnapshotTdvvsize'] = SnapshotTdvvsize
    globals()['Space'] = Space
    globals()['UserAllocationSettingsSingle'] = UserAllocationSettingsSingle
    globals()['VolumePerformance'] = VolumePerformance


class PrimeraVolumeDetails(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('conversion_type',): {
            'None': None,
            'CONVERSIONTYPE_THIN': "CONVERSIONTYPE_THIN",
            'CONVERSIONTYPE_DDS': "CONVERSIONTYPE_DDS",
            'CONVERSIONTYPE_V1': "CONVERSIONTYPE_V1",
            'CONVERSIONTYPE_V2': "CONVERSIONTYPE_V2",
            'NULL': "null",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = True

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'admin_allocation_settings': (UserAllocationSettingsSingle,),  # noqa: E501
            'admin_space': (Space,),  # noqa: E501
            'associated_links': ([PrimeraVolumeDetailsAssociatedLinks], none_type,),  # noqa: E501
            'base_id': (int, none_type,),  # noqa: E501
            'comment': (str, none_type,),  # noqa: E501
            'compact_efficiency': (float, none_type,),  # noqa: E501
            'compression_efficiency': (float, none_type,),  # noqa: E501
            'compression_policy': (str, none_type,),  # noqa: E501
            'console_uri': (str, none_type,),  # noqa: E501
            'conversion_type': (str, none_type,),  # noqa: E501
            'copied_mb': (float, none_type,),  # noqa: E501
            'copied_perc': (int, none_type,),  # noqa: E501
            'copy_of_id': (int, none_type,),  # noqa: E501
            'creation_time': (Calendar,),  # noqa: E501
            'customer_id': (str, none_type,),  # noqa: E501
            'data_reduction': (str, none_type,),  # noqa: E501
            'ddc_size': (float, none_type,),  # noqa: E501
            'dds_size': (float, none_type,),  # noqa: E501
            'dedup': (str, none_type,),  # noqa: E501
            'dedup_savings_size': (float, none_type,),  # noqa: E501
            'dedup_written_size': (float, none_type,),  # noqa: E501
            'dev_type': (str, none_type,),  # noqa: E501
            'displayname': (str, none_type,),  # noqa: E501
            'domain': (str, none_type,),  # noqa: E501
            'efficiency_update_time': (Calendar,),  # noqa: E501
            'expiration_time': (Calendar,),  # noqa: E501
            'fully_provisioned': (bool, none_type,),  # noqa: E501
            'generation': (int, none_type,),  # noqa: E501
            'heads_per_cylinder': (int, none_type,),  # noqa: E501
            'health_state': (int, none_type,),  # noqa: E501
            'hidden': (bool, none_type,),  # noqa: E501
            'host_written_mi_b': (float, none_type,),  # noqa: E501
            'host_written_to_virtual_percent': (float, none_type,),  # noqa: E501
            'id': (str, none_type,),  # noqa: E501
            'initiators': ([PrimeraApplicationSetDetailsInitiators], none_type,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'parent_id': (int, none_type,),  # noqa: E501
            'phys_parent_id': (int, none_type,),  # noqa: E501
            'physical_copy': (bool, none_type,),  # noqa: E501
            'policy': (Policy,),  # noqa: E501
            'prov_type': (str, none_type,),  # noqa: E501
            'raid': (str, none_type,),  # noqa: E501
            'rcopy_status': (str, none_type,),  # noqa: E501
            'read_only': (bool, none_type,),  # noqa: E501
            'request_uri': (str, none_type,),  # noqa: E501
            'resource_uri': (str, none_type,),  # noqa: E501
            'retention_time': (Calendar,),  # noqa: E501
            'ro_child_id': (int, none_type,),  # noqa: E501
            'rw_child_id': (int, none_type,),  # noqa: E501
            'sectors_per_track': (int, none_type,),  # noqa: E501
            'shared_parent_id': (int, none_type,),  # noqa: E501
            'size_mi_b': (float, none_type,),  # noqa: E501
            'snap_shot_tier': (str, none_type,),  # noqa: E501
            'snapshot_alloc_limit': (int, none_type,),  # noqa: E501
            'snapshot_alloc_warning': (int, none_type,),  # noqa: E501
            'snapshot_allocation_settings': (UserAllocationSettingsSingle,),  # noqa: E501
            'snapshot_cpg_id': (int, none_type,),  # noqa: E501
            'snapshot_cpg_name': (str, none_type,),  # noqa: E501
            'snapshot_space': (Space,),  # noqa: E501
            'snapshot_tdvv_size': (SnapshotTdvvsize,),  # noqa: E501
            'snapshot_used_to_virtual_percent': (float, none_type,),  # noqa: E501
            'space_calculation_time': (Calendar,),  # noqa: E501
            'started': (bool, none_type,),  # noqa: E501
            'state': (STATE,),  # noqa: E501
            'storage_tier': (str, none_type,),  # noqa: E501
            'system_id': (str, none_type,),  # noqa: E501
            'thin_provisioned': (bool, none_type,),  # noqa: E501
            'thin_savings': (str, none_type,),  # noqa: E501
            'total_raw_reserved_mi_b': (float, none_type,),  # noqa: E501
            'total_reserved_mi_b': (float, none_type,),  # noqa: E501
            'total_space_mi_b': (float, none_type,),  # noqa: E501
            'type': (str, none_type,),  # noqa: E501
            'unref_space_freed_time': (Calendar,),  # noqa: E501
            'used_capacity': (float, none_type,),  # noqa: E501
            'used_size_mi_b': (float, none_type,),  # noqa: E501
            'user_alloc_limit': (int, none_type,),  # noqa: E501
            'user_alloc_warning': (int, none_type,),  # noqa: E501
            'user_allocation_settings': (UserAllocationSettingsSingle,),  # noqa: E501
            'user_cpg_id': (int, none_type,),  # noqa: E501
            'user_cpg_name': (str, none_type,),  # noqa: E501
            'user_reserved_to_virtual_percent': (float, none_type,),  # noqa: E501
            'user_space': (Space,),  # noqa: E501
            'user_used_to_virtual_percent': (float, none_type,),  # noqa: E501
            'vlun_sector_size': (int, none_type,),  # noqa: E501
            'volume_id': (int, none_type,),  # noqa: E501
            'volume_performance': (VolumePerformance,),  # noqa: E501
            'volume_type': (str, none_type,),  # noqa: E501
            'wwn': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'admin_allocation_settings': 'adminAllocationSettings',  # noqa: E501
        'admin_space': 'adminSpace',  # noqa: E501
        'associated_links': 'associatedLinks',  # noqa: E501
        'base_id': 'baseId',  # noqa: E501
        'comment': 'comment',  # noqa: E501
        'compact_efficiency': 'compactEfficiency',  # noqa: E501
        'compression_efficiency': 'compressionEfficiency',  # noqa: E501
        'compression_policy': 'compressionPolicy',  # noqa: E501
        'console_uri': 'consoleUri',  # noqa: E501
        'conversion_type': 'conversionType',  # noqa: E501
        'copied_mb': 'copiedMB',  # noqa: E501
        'copied_perc': 'copiedPerc',  # noqa: E501
        'copy_of_id': 'copyOfID',  # noqa: E501
        'creation_time': 'creationTime',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'data_reduction': 'dataReduction',  # noqa: E501
        'ddc_size': 'ddcSize',  # noqa: E501
        'dds_size': 'ddsSize',  # noqa: E501
        'dedup': 'dedup',  # noqa: E501
        'dedup_savings_size': 'dedupSavingsSize',  # noqa: E501
        'dedup_written_size': 'dedupWrittenSize',  # noqa: E501
        'dev_type': 'devType',  # noqa: E501
        'displayname': 'displayname',  # noqa: E501
        'domain': 'domain',  # noqa: E501
        'efficiency_update_time': 'efficiencyUpdateTime',  # noqa: E501
        'expiration_time': 'expirationTime',  # noqa: E501
        'fully_provisioned': 'fullyProvisioned',  # noqa: E501
        'generation': 'generation',  # noqa: E501
        'heads_per_cylinder': 'headsPerCylinder',  # noqa: E501
        'health_state': 'healthState',  # noqa: E501
        'hidden': 'hidden',  # noqa: E501
        'host_written_mi_b': 'hostWrittenMiB',  # noqa: E501
        'host_written_to_virtual_percent': 'hostWrittenToVirtualPercent',  # noqa: E501
        'id': 'id',  # noqa: E501
        'initiators': 'initiators',  # noqa: E501
        'name': 'name',  # noqa: E501
        'parent_id': 'parentID',  # noqa: E501
        'phys_parent_id': 'physParentID',  # noqa: E501
        'physical_copy': 'physicalCopy',  # noqa: E501
        'policy': 'policy',  # noqa: E501
        'prov_type': 'provType',  # noqa: E501
        'raid': 'raid',  # noqa: E501
        'rcopy_status': 'rcopyStatus',  # noqa: E501
        'read_only': 'readOnly',  # noqa: E501
        'request_uri': 'requestUri',  # noqa: E501
        'resource_uri': 'resourceUri',  # noqa: E501
        'retention_time': 'retentionTime',  # noqa: E501
        'ro_child_id': 'roChildID',  # noqa: E501
        'rw_child_id': 'rwChildID',  # noqa: E501
        'sectors_per_track': 'sectorsPerTrack',  # noqa: E501
        'shared_parent_id': 'sharedParentId',  # noqa: E501
        'size_mi_b': 'sizeMiB',  # noqa: E501
        'snap_shot_tier': 'snapShotTier',  # noqa: E501
        'snapshot_alloc_limit': 'snapshotAllocLimit',  # noqa: E501
        'snapshot_alloc_warning': 'snapshotAllocWarning',  # noqa: E501
        'snapshot_allocation_settings': 'snapshotAllocationSettings',  # noqa: E501
        'snapshot_cpg_id': 'snapshotCpgID',  # noqa: E501
        'snapshot_cpg_name': 'snapshotCpgName',  # noqa: E501
        'snapshot_space': 'snapshotSpace',  # noqa: E501
        'snapshot_tdvv_size': 'snapshotTdvvSize',  # noqa: E501
        'snapshot_used_to_virtual_percent': 'snapshotUsedToVirtualPercent',  # noqa: E501
        'space_calculation_time': 'spaceCalculationTime',  # noqa: E501
        'started': 'started',  # noqa: E501
        'state': 'state',  # noqa: E501
        'storage_tier': 'storageTier',  # noqa: E501
        'system_id': 'systemId',  # noqa: E501
        'thin_provisioned': 'thinProvisioned',  # noqa: E501
        'thin_savings': 'thinSavings',  # noqa: E501
        'total_raw_reserved_mi_b': 'totalRawReservedMiB',  # noqa: E501
        'total_reserved_mi_b': 'totalReservedMiB',  # noqa: E501
        'total_space_mi_b': 'totalSpaceMiB',  # noqa: E501
        'type': 'type',  # noqa: E501
        'unref_space_freed_time': 'unrefSpaceFreedTime',  # noqa: E501
        'used_capacity': 'usedCapacity',  # noqa: E501
        'used_size_mi_b': 'usedSizeMiB',  # noqa: E501
        'user_alloc_limit': 'userAllocLimit',  # noqa: E501
        'user_alloc_warning': 'userAllocWarning',  # noqa: E501
        'user_allocation_settings': 'userAllocationSettings',  # noqa: E501
        'user_cpg_id': 'userCpgID',  # noqa: E501
        'user_cpg_name': 'userCpgName',  # noqa: E501
        'user_reserved_to_virtual_percent': 'userReservedToVirtualPercent',  # noqa: E501
        'user_space': 'userSpace',  # noqa: E501
        'user_used_to_virtual_percent': 'userUsedToVirtualPercent',  # noqa: E501
        'vlun_sector_size': 'vlunSectorSize',  # noqa: E501
        'volume_id': 'volumeId',  # noqa: E501
        'volume_performance': 'volumePerformance',  # noqa: E501
        'volume_type': 'volumeType',  # noqa: E501
        'wwn': 'wwn',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """PrimeraVolumeDetails - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            admin_allocation_settings (UserAllocationSettingsSingle): [optional]  # noqa: E501
            admin_space (Space): [optional]  # noqa: E501
            associated_links ([PrimeraVolumeDetailsAssociatedLinks], none_type): Associated Links. [optional]  # noqa: E501
            base_id (int, none_type): snapshot Tdvv Size. [optional]  # noqa: E501
            comment (str, none_type): Comments. [optional]  # noqa: E501
            compact_efficiency (float, none_type): Compact Efficiency. [optional]  # noqa: E501
            compression_efficiency (float, none_type): Compression Efficiency. [optional]  # noqa: E501
            compression_policy (str, none_type): Compression Policy. [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            conversion_type (str, none_type): Conversion Type of Volume. [optional]  # noqa: E501
            copied_mb (float, none_type): Copied MB. [optional]  # noqa: E501
            copied_perc (int, none_type): Copied Perecentage. [optional]  # noqa: E501
            copy_of_id (int, none_type): Copy of Id. [optional]  # noqa: E501
            creation_time (Calendar): [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            data_reduction (str, none_type): Data Reduction type. [optional]  # noqa: E501
            ddc_size (float, none_type): [optional]  # noqa: E501
            dds_size (float, none_type): [optional]  # noqa: E501
            dedup (str, none_type): Dedup. [optional]  # noqa: E501
            dedup_savings_size (float, none_type): [optional]  # noqa: E501
            dedup_written_size (float, none_type): [optional]  # noqa: E501
            dev_type (str, none_type): Device Type. [optional]  # noqa: E501
            displayname (str, none_type): Display name of the volume. [optional]  # noqa: E501
            domain (str, none_type): Domain of the volume. [optional]  # noqa: E501
            efficiency_update_time (Calendar): [optional]  # noqa: E501
            expiration_time (Calendar): [optional]  # noqa: E501
            fully_provisioned (bool, none_type): [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            heads_per_cylinder (int, none_type): Heads per Cylinder. [optional]  # noqa: E501
            health_state (int, none_type): Health status of the Volume.. [optional]  # noqa: E501
            hidden (bool, none_type): Flag to know if the Volume is hidden or not. [optional]  # noqa: E501
            host_written_mi_b (float, none_type): Host written data size in MiB.. [optional]  # noqa: E501
            host_written_to_virtual_percent (float, none_type): Host written to virtual percent. [optional]  # noqa: E501
            id (str, none_type): UUID string uniquely identifying the storage system object.. [optional]  # noqa: E501
            initiators ([PrimeraApplicationSetDetailsInitiators], none_type): Initiator details. [optional]  # noqa: E501
            name (str, none_type): A user friendly name to identify the storage system volume (resourceName).. [optional]  # noqa: E501
            parent_id (int, none_type): Parent Id. [optional]  # noqa: E501
            phys_parent_id (int, none_type): physical Parent Id. [optional]  # noqa: E501
            physical_copy (bool, none_type): [optional]  # noqa: E501
            policy (Policy): [optional]  # noqa: E501
            prov_type (str, none_type): [optional]  # noqa: E501
            raid (str, none_type): Raid. [optional]  # noqa: E501
            rcopy_status (str, none_type): RemoteCopy Status. [optional]  # noqa: E501
            read_only (bool, none_type): [optional]  # noqa: E501
            request_uri (str, none_type): requestUri for detailed volume object. [optional]  # noqa: E501
            resource_uri (str, none_type): resourceUri for detailed volume object. [optional]  # noqa: E501
            retention_time (Calendar): [optional]  # noqa: E501
            ro_child_id (int, none_type): RO child id. [optional]  # noqa: E501
            rw_child_id (int, none_type): [optional]  # noqa: E501
            sectors_per_track (int, none_type): Sector per Track. [optional]  # noqa: E501
            shared_parent_id (int, none_type): Shared Parent Id. [optional]  # noqa: E501
            size_mi_b (float, none_type): Size in MiB. [optional]  # noqa: E501
            snap_shot_tier (str, none_type): Snapshot Tier. [optional]  # noqa: E501
            snapshot_alloc_limit (int, none_type): Snapshot alloc limit. [optional]  # noqa: E501
            snapshot_alloc_warning (int, none_type): Snapshot alloc Warning. [optional]  # noqa: E501
            snapshot_allocation_settings (UserAllocationSettingsSingle): [optional]  # noqa: E501
            snapshot_cpg_id (int, none_type): Snapshot CPG Id. [optional]  # noqa: E501
            snapshot_cpg_name (str, none_type): Snapshot CPG name. [optional]  # noqa: E501
            snapshot_space (Space): [optional]  # noqa: E501
            snapshot_tdvv_size (SnapshotTdvvsize): [optional]  # noqa: E501
            snapshot_used_to_virtual_percent (float, none_type): Snapshot used to virtual percent. [optional]  # noqa: E501
            space_calculation_time (Calendar): [optional]  # noqa: E501
            started (bool, none_type): [optional]  # noqa: E501
            state (STATE): [optional]  # noqa: E501
            storage_tier (str, none_type): Storage Tier. [optional]  # noqa: E501
            system_id (str, none_type): SystemUid/serialNumber of the array.. [optional]  # noqa: E501
            thin_provisioned (bool, none_type): [optional]  # noqa: E501
            thin_savings (str, none_type): Thin savings for the detailed volume object. [optional]  # noqa: E501
            total_raw_reserved_mi_b (float, none_type): Total Raw Reserved Space in MiB. [optional]  # noqa: E501
            total_reserved_mi_b (float, none_type): Description. [optional]  # noqa: E501
            total_space_mi_b (float, none_type): Total Space in MiB. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            unref_space_freed_time (Calendar): [optional]  # noqa: E501
            used_capacity (float, none_type): Used volume capacity.. [optional]  # noqa: E501
            used_size_mi_b (float, none_type): Used Size in MiB. [optional]  # noqa: E501
            user_alloc_limit (int, none_type): User alloc limit. [optional]  # noqa: E501
            user_alloc_warning (int, none_type): User alloc space limit warning. [optional]  # noqa: E501
            user_allocation_settings (UserAllocationSettingsSingle): [optional]  # noqa: E501
            user_cpg_id (int, none_type): User CPG Id. [optional]  # noqa: E501
            user_cpg_name (str, none_type): User CPG Name. [optional]  # noqa: E501
            user_reserved_to_virtual_percent (float, none_type): User reseved to virtual percent. [optional]  # noqa: E501
            user_space (Space): [optional]  # noqa: E501
            user_used_to_virtual_percent (float, none_type): User used to virtual percent. [optional]  # noqa: E501
            vlun_sector_size (int, none_type): VLUN sector size. [optional]  # noqa: E501
            volume_id (int, none_type): Numeric ID of the resource. [optional]  # noqa: E501
            volume_performance (VolumePerformance): [optional]  # noqa: E501
            volume_type (str, none_type): VV Type. [optional]  # noqa: E501
            wwn (str, none_type): Volume wwn.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PrimeraVolumeDetails - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            admin_allocation_settings (UserAllocationSettingsSingle): [optional]  # noqa: E501
            admin_space (Space): [optional]  # noqa: E501
            associated_links ([PrimeraVolumeDetailsAssociatedLinks], none_type): Associated Links. [optional]  # noqa: E501
            base_id (int, none_type): snapshot Tdvv Size. [optional]  # noqa: E501
            comment (str, none_type): Comments. [optional]  # noqa: E501
            compact_efficiency (float, none_type): Compact Efficiency. [optional]  # noqa: E501
            compression_efficiency (float, none_type): Compression Efficiency. [optional]  # noqa: E501
            compression_policy (str, none_type): Compression Policy. [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            conversion_type (str, none_type): Conversion Type of Volume. [optional]  # noqa: E501
            copied_mb (float, none_type): Copied MB. [optional]  # noqa: E501
            copied_perc (int, none_type): Copied Perecentage. [optional]  # noqa: E501
            copy_of_id (int, none_type): Copy of Id. [optional]  # noqa: E501
            creation_time (Calendar): [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            data_reduction (str, none_type): Data Reduction type. [optional]  # noqa: E501
            ddc_size (float, none_type): [optional]  # noqa: E501
            dds_size (float, none_type): [optional]  # noqa: E501
            dedup (str, none_type): Dedup. [optional]  # noqa: E501
            dedup_savings_size (float, none_type): [optional]  # noqa: E501
            dedup_written_size (float, none_type): [optional]  # noqa: E501
            dev_type (str, none_type): Device Type. [optional]  # noqa: E501
            displayname (str, none_type): Display name of the volume. [optional]  # noqa: E501
            domain (str, none_type): Domain of the volume. [optional]  # noqa: E501
            efficiency_update_time (Calendar): [optional]  # noqa: E501
            expiration_time (Calendar): [optional]  # noqa: E501
            fully_provisioned (bool, none_type): [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            heads_per_cylinder (int, none_type): Heads per Cylinder. [optional]  # noqa: E501
            health_state (int, none_type): Health status of the Volume.. [optional]  # noqa: E501
            hidden (bool, none_type): Flag to know if the Volume is hidden or not. [optional]  # noqa: E501
            host_written_mi_b (float, none_type): Host written data size in MiB.. [optional]  # noqa: E501
            host_written_to_virtual_percent (float, none_type): Host written to virtual percent. [optional]  # noqa: E501
            id (str, none_type): UUID string uniquely identifying the storage system object.. [optional]  # noqa: E501
            initiators ([PrimeraApplicationSetDetailsInitiators], none_type): Initiator details. [optional]  # noqa: E501
            name (str, none_type): A user friendly name to identify the storage system volume (resourceName).. [optional]  # noqa: E501
            parent_id (int, none_type): Parent Id. [optional]  # noqa: E501
            phys_parent_id (int, none_type): physical Parent Id. [optional]  # noqa: E501
            physical_copy (bool, none_type): [optional]  # noqa: E501
            policy (Policy): [optional]  # noqa: E501
            prov_type (str, none_type): [optional]  # noqa: E501
            raid (str, none_type): Raid. [optional]  # noqa: E501
            rcopy_status (str, none_type): RemoteCopy Status. [optional]  # noqa: E501
            read_only (bool, none_type): [optional]  # noqa: E501
            request_uri (str, none_type): requestUri for detailed volume object. [optional]  # noqa: E501
            resource_uri (str, none_type): resourceUri for detailed volume object. [optional]  # noqa: E501
            retention_time (Calendar): [optional]  # noqa: E501
            ro_child_id (int, none_type): RO child id. [optional]  # noqa: E501
            rw_child_id (int, none_type): [optional]  # noqa: E501
            sectors_per_track (int, none_type): Sector per Track. [optional]  # noqa: E501
            shared_parent_id (int, none_type): Shared Parent Id. [optional]  # noqa: E501
            size_mi_b (float, none_type): Size in MiB. [optional]  # noqa: E501
            snap_shot_tier (str, none_type): Snapshot Tier. [optional]  # noqa: E501
            snapshot_alloc_limit (int, none_type): Snapshot alloc limit. [optional]  # noqa: E501
            snapshot_alloc_warning (int, none_type): Snapshot alloc Warning. [optional]  # noqa: E501
            snapshot_allocation_settings (UserAllocationSettingsSingle): [optional]  # noqa: E501
            snapshot_cpg_id (int, none_type): Snapshot CPG Id. [optional]  # noqa: E501
            snapshot_cpg_name (str, none_type): Snapshot CPG name. [optional]  # noqa: E501
            snapshot_space (Space): [optional]  # noqa: E501
            snapshot_tdvv_size (SnapshotTdvvsize): [optional]  # noqa: E501
            snapshot_used_to_virtual_percent (float, none_type): Snapshot used to virtual percent. [optional]  # noqa: E501
            space_calculation_time (Calendar): [optional]  # noqa: E501
            started (bool, none_type): [optional]  # noqa: E501
            state (STATE): [optional]  # noqa: E501
            storage_tier (str, none_type): Storage Tier. [optional]  # noqa: E501
            system_id (str, none_type): SystemUid/serialNumber of the array.. [optional]  # noqa: E501
            thin_provisioned (bool, none_type): [optional]  # noqa: E501
            thin_savings (str, none_type): Thin savings for the detailed volume object. [optional]  # noqa: E501
            total_raw_reserved_mi_b (float, none_type): Total Raw Reserved Space in MiB. [optional]  # noqa: E501
            total_reserved_mi_b (float, none_type): Description. [optional]  # noqa: E501
            total_space_mi_b (float, none_type): Total Space in MiB. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            unref_space_freed_time (Calendar): [optional]  # noqa: E501
            used_capacity (float, none_type): Used volume capacity.. [optional]  # noqa: E501
            used_size_mi_b (float, none_type): Used Size in MiB. [optional]  # noqa: E501
            user_alloc_limit (int, none_type): User alloc limit. [optional]  # noqa: E501
            user_alloc_warning (int, none_type): User alloc space limit warning. [optional]  # noqa: E501
            user_allocation_settings (UserAllocationSettingsSingle): [optional]  # noqa: E501
            user_cpg_id (int, none_type): User CPG Id. [optional]  # noqa: E501
            user_cpg_name (str, none_type): User CPG Name. [optional]  # noqa: E501
            user_reserved_to_virtual_percent (float, none_type): User reseved to virtual percent. [optional]  # noqa: E501
            user_space (Space): [optional]  # noqa: E501
            user_used_to_virtual_percent (float, none_type): User used to virtual percent. [optional]  # noqa: E501
            vlun_sector_size (int, none_type): VLUN sector size. [optional]  # noqa: E501
            volume_id (int, none_type): Numeric ID of the resource. [optional]  # noqa: E501
            volume_performance (VolumePerformance): [optional]  # noqa: E501
            volume_type (str, none_type): VV Type. [optional]  # noqa: E501
            wwn (str, none_type): Volume wwn.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
