"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from greenlake_data_services.exceptions import ApiAttributeError


def lazy_import():
    from greenlake_data_services.model.replication_partner_list_policies import ReplicationPartnerListPolicies
    from greenlake_data_services.model.sync_time import SyncTime
    globals()['ReplicationPartnerListPolicies'] = ReplicationPartnerListPolicies
    globals()['SyncTime'] = SyncTime


class ReplicationPartnerList(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = True

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'customer_id': (str, none_type,),  # noqa: E501
            'display_name': (str, none_type,),  # noqa: E501
            'domain': (str, none_type,),  # noqa: E501
            'generation': (int, none_type,),  # noqa: E501
            'group_id': (str, none_type,),  # noqa: E501
            'group_last_sync_time': (SyncTime,),  # noqa: E501
            'group_name': (str, none_type,),  # noqa: E501
            'group_object_id': (int, none_type,),  # noqa: E501
            'id': (str, none_type,),  # noqa: E501
            'is_protection_policy_configured': (bool,),  # noqa: E501
            'is_remote_array_support_replication': (bool,),  # noqa: E501
            'is_source_array_support_replication': (bool,),  # noqa: E501
            'mode': (str, none_type,),  # noqa: E501
            'policies': (ReplicationPartnerListPolicies,),  # noqa: E501
            'protection_type': (str, none_type,),  # noqa: E501
            'remote_snp_cpg': (str, none_type,),  # noqa: E501
            'remote_usr_cpg': (str, none_type,),  # noqa: E501
            'remote_volume_set_name': (str, none_type,),  # noqa: E501
            'resource_uri': (str,),  # noqa: E501
            'role_reversed': (bool, none_type,),  # noqa: E501
            'snap_frequency_secs': (int, none_type,),  # noqa: E501
            'state': (str, none_type,),  # noqa: E501
            'sync_period': (int,),  # noqa: E501
            'system_id': (str, none_type,),  # noqa: E501
            'system_name': (str, none_type,),  # noqa: E501
            'system_wwn': (str, none_type,),  # noqa: E501
            'target_name': (str, none_type,),  # noqa: E501
            'type': (str, none_type,),  # noqa: E501
            'volume_count': (int, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'customer_id': 'customerId',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'domain': 'domain',  # noqa: E501
        'generation': 'generation',  # noqa: E501
        'group_id': 'groupId',  # noqa: E501
        'group_last_sync_time': 'groupLastSyncTime',  # noqa: E501
        'group_name': 'groupName',  # noqa: E501
        'group_object_id': 'groupObjectId',  # noqa: E501
        'id': 'id',  # noqa: E501
        'is_protection_policy_configured': 'isProtectionPolicyConfigured',  # noqa: E501
        'is_remote_array_support_replication': 'isRemoteArraySupportReplication',  # noqa: E501
        'is_source_array_support_replication': 'isSourceArraySupportReplication',  # noqa: E501
        'mode': 'mode',  # noqa: E501
        'policies': 'policies',  # noqa: E501
        'protection_type': 'protectionType',  # noqa: E501
        'remote_snp_cpg': 'remoteSnpCPG',  # noqa: E501
        'remote_usr_cpg': 'remoteUsrCPG',  # noqa: E501
        'remote_volume_set_name': 'remoteVolumeSetName',  # noqa: E501
        'resource_uri': 'resourceUri',  # noqa: E501
        'role_reversed': 'roleReversed',  # noqa: E501
        'snap_frequency_secs': 'snapFrequencySecs',  # noqa: E501
        'state': 'state',  # noqa: E501
        'sync_period': 'syncPeriod',  # noqa: E501
        'system_id': 'systemId',  # noqa: E501
        'system_name': 'systemName',  # noqa: E501
        'system_wwn': 'systemWWN',  # noqa: E501
        'target_name': 'targetName',  # noqa: E501
        'type': 'type',  # noqa: E501
        'volume_count': 'volumeCount',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ReplicationPartnerList - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            customer_id (str, none_type): customer ID. [optional]  # noqa: E501
            display_name (str, none_type): Replication partner display name.. [optional]  # noqa: E501
            domain (str, none_type): Domain that the resource belongs to.. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            group_id (str, none_type): Unique id of replication partner remote group. [optional]  # noqa: E501
            group_last_sync_time (SyncTime): [optional]  # noqa: E501
            group_name (str, none_type): Replication partner remote group name.. [optional]  # noqa: E501
            group_object_id (int, none_type): Replication partner group ID.. [optional]  # noqa: E501
            id (str, none_type): Unique Identifier of the replication partner.. [optional]  # noqa: E501
            is_protection_policy_configured (bool): Boolean value to indicate if protection policy is properly configured on the volume set. If it is set to false, user needs to either delete the policy or fix the policy configuration. All other operations will be blocked in this scenario.. [optional]  # noqa: E501
            is_remote_array_support_replication (bool): Boolean value to indicate if remote array OS version supports replication. [optional]  # noqa: E501
            is_source_array_support_replication (bool): Boolean value to indicate if source array OS version supports replication. [optional]  # noqa: E501
            mode (str, none_type): Replication partner group mode.. [optional]  # noqa: E501
            policies (ReplicationPartnerListPolicies): [optional]  # noqa: E501
            protection_type (str, none_type): Type of protection. [optional]  # noqa: E501
            remote_snp_cpg (str, none_type): Name for which the snapshot space is allocated on the remote target.. [optional]  # noqa: E501
            remote_usr_cpg (str, none_type): Name for which the user space is allocated on the remote target.. [optional]  # noqa: E501
            remote_volume_set_name (str, none_type): Target volume set name where remote protection is enabled. [optional]  # noqa: E501
            resource_uri (str): resourceUri for replication partner list where volume set is remote protected. [optional]  # noqa: E501
            role_reversed (bool, none_type): Remote group role switched due to a fail over.. [optional]  # noqa: E501
            snap_frequency_secs (int, none_type): Specifies the interval in seconds at which remote group takes coordinated snapshots. This field applies only to Async mode: it is set to -1 otherwise.. [optional]  # noqa: E501
            state (str, none_type): Status of the Remote group for the replication partner. Can be New, Starting, Started, Restart, Stopped, Backup, Failsafe or Logging. Null if unset.. [optional]  # noqa: E501
            sync_period (int): Time period in seconds for automatic resynchronization. The value must be at least five minutes and not more than one year. Defaults to 0.. [optional]  # noqa: E501
            system_id (str, none_type): Unique ID or serial number of the system.. [optional]  # noqa: E501
            system_name (str, none_type): Name of the system.. [optional]  # noqa: E501
            system_wwn (str, none_type): WWN of the system.. [optional]  # noqa: E501
            target_name (str, none_type): Target to which the volume group is mirrored. This is the same as replication partner.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            volume_count (int, none_type): Number of volumes in the group for a replication partner.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ReplicationPartnerList - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            customer_id (str, none_type): customer ID. [optional]  # noqa: E501
            display_name (str, none_type): Replication partner display name.. [optional]  # noqa: E501
            domain (str, none_type): Domain that the resource belongs to.. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            group_id (str, none_type): Unique id of replication partner remote group. [optional]  # noqa: E501
            group_last_sync_time (SyncTime): [optional]  # noqa: E501
            group_name (str, none_type): Replication partner remote group name.. [optional]  # noqa: E501
            group_object_id (int, none_type): Replication partner group ID.. [optional]  # noqa: E501
            id (str, none_type): Unique Identifier of the replication partner.. [optional]  # noqa: E501
            is_protection_policy_configured (bool): Boolean value to indicate if protection policy is properly configured on the volume set. If it is set to false, user needs to either delete the policy or fix the policy configuration. All other operations will be blocked in this scenario.. [optional]  # noqa: E501
            is_remote_array_support_replication (bool): Boolean value to indicate if remote array OS version supports replication. [optional]  # noqa: E501
            is_source_array_support_replication (bool): Boolean value to indicate if source array OS version supports replication. [optional]  # noqa: E501
            mode (str, none_type): Replication partner group mode.. [optional]  # noqa: E501
            policies (ReplicationPartnerListPolicies): [optional]  # noqa: E501
            protection_type (str, none_type): Type of protection. [optional]  # noqa: E501
            remote_snp_cpg (str, none_type): Name for which the snapshot space is allocated on the remote target.. [optional]  # noqa: E501
            remote_usr_cpg (str, none_type): Name for which the user space is allocated on the remote target.. [optional]  # noqa: E501
            remote_volume_set_name (str, none_type): Target volume set name where remote protection is enabled. [optional]  # noqa: E501
            resource_uri (str): resourceUri for replication partner list where volume set is remote protected. [optional]  # noqa: E501
            role_reversed (bool, none_type): Remote group role switched due to a fail over.. [optional]  # noqa: E501
            snap_frequency_secs (int, none_type): Specifies the interval in seconds at which remote group takes coordinated snapshots. This field applies only to Async mode: it is set to -1 otherwise.. [optional]  # noqa: E501
            state (str, none_type): Status of the Remote group for the replication partner. Can be New, Starting, Started, Restart, Stopped, Backup, Failsafe or Logging. Null if unset.. [optional]  # noqa: E501
            sync_period (int): Time period in seconds for automatic resynchronization. The value must be at least five minutes and not more than one year. Defaults to 0.. [optional]  # noqa: E501
            system_id (str, none_type): Unique ID or serial number of the system.. [optional]  # noqa: E501
            system_name (str, none_type): Name of the system.. [optional]  # noqa: E501
            system_wwn (str, none_type): WWN of the system.. [optional]  # noqa: E501
            target_name (str, none_type): Target to which the volume group is mirrored. This is the same as replication partner.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            volume_count (int, none_type): Number of volumes in the group for a replication partner.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
