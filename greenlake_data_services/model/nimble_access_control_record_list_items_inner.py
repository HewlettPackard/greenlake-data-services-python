"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from greenlake_data_services.exceptions import ApiAttributeError


def lazy_import():
    from greenlake_data_services.model.associated_links import AssociatedLinks
    from greenlake_data_services.model.nimble_access_control_record_details import NimbleAccessControlRecordDetails
    from greenlake_data_services.model.nimble_access_control_record_fields_with_sort_key import NimbleAccessControlRecordFieldsWithSortKey
    from greenlake_data_services.model.nimble_ns_snap_lun_info import NimbleNsSnapLunInfo
    globals()['AssociatedLinks'] = AssociatedLinks
    globals()['NimbleAccessControlRecordDetails'] = NimbleAccessControlRecordDetails
    globals()['NimbleAccessControlRecordFieldsWithSortKey'] = NimbleAccessControlRecordFieldsWithSortKey
    globals()['NimbleNsSnapLunInfo'] = NimbleNsSnapLunInfo


class NimbleAccessControlRecordListItemsInner(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'access_protocol': (str, none_type,),  # noqa: E501
            'chap_user_id': (str, none_type,),  # noqa: E501
            'chap_user_name': (str, none_type,),  # noqa: E501
            'creation_time': (int, none_type,),  # noqa: E501
            'id': (str, none_type,),  # noqa: E501
            'initiator_group_id': (str, none_type,),  # noqa: E501
            'initiator_group_name': (str, none_type,),  # noqa: E501
            'last_modified': (int, none_type,),  # noqa: E501
            'lun': (int, none_type,),  # noqa: E501
            'pe_id': (str, none_type,),  # noqa: E501
            'pe_lun': (int, none_type,),  # noqa: E501
            'pe_name': (str, none_type,),  # noqa: E501
            'snap_id': (str, none_type,),  # noqa: E501
            'snap_name': (str, none_type,),  # noqa: E501
            'vol_id': (str, none_type,),  # noqa: E501
            'vol_name': (str, none_type,),  # noqa: E501
            'apply_to': (str, none_type,),  # noqa: E501
            'associated_links': (AssociatedLinks,),  # noqa: E501
            'console_uri': (str, none_type,),  # noqa: E501
            'customer_id': (str, none_type,),  # noqa: E501
            'generation': (int, none_type,),  # noqa: E501
            'pe_ids': ([str, none_type], none_type,),  # noqa: E501
            'resource_uri': (str, none_type,),  # noqa: E501
            'snapluns': ([NimbleNsSnapLunInfo], none_type,),  # noqa: E501
            'type': (str, none_type,),  # noqa: E501
            'vol_agent_type': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'access_protocol': 'access_protocol',  # noqa: E501
        'chap_user_id': 'chap_user_id',  # noqa: E501
        'chap_user_name': 'chap_user_name',  # noqa: E501
        'creation_time': 'creation_time',  # noqa: E501
        'id': 'id',  # noqa: E501
        'initiator_group_id': 'initiator_group_id',  # noqa: E501
        'initiator_group_name': 'initiator_group_name',  # noqa: E501
        'last_modified': 'last_modified',  # noqa: E501
        'lun': 'lun',  # noqa: E501
        'pe_id': 'pe_id',  # noqa: E501
        'pe_lun': 'pe_lun',  # noqa: E501
        'pe_name': 'pe_name',  # noqa: E501
        'snap_id': 'snap_id',  # noqa: E501
        'snap_name': 'snap_name',  # noqa: E501
        'vol_id': 'vol_id',  # noqa: E501
        'vol_name': 'vol_name',  # noqa: E501
        'apply_to': 'apply_to',  # noqa: E501
        'associated_links': 'associated_links',  # noqa: E501
        'console_uri': 'consoleUri',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'generation': 'generation',  # noqa: E501
        'pe_ids': 'pe_ids',  # noqa: E501
        'resource_uri': 'resourceUri',  # noqa: E501
        'snapluns': 'snapluns',  # noqa: E501
        'type': 'type',  # noqa: E501
        'vol_agent_type': 'vol_agent_type',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """NimbleAccessControlRecordListItemsInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            access_protocol (str, none_type): Access protocol of the volume. Possible values:'iscsi', 'fc'. `Filter, Sort`. [optional]  # noqa: E501
            chap_user_id (str, none_type): Identifier for the CHAP user. `Filter, Sort`. [optional]  # noqa: E501
            chap_user_name (str, none_type): Flag denoting if data in the associated volume should be compressed. `Filter, Sort`. [optional]  # noqa: E501
            creation_time (int, none_type): Time when this access control record was created. `Filter, Sort`. [optional]  # noqa: E501
            id (str, none_type): Identifier for the access control record. `Filter`. [optional]  # noqa: E501
            initiator_group_id (str, none_type): Identifier for the initiator group. `Filter, Sort`. [optional]  # noqa: E501
            initiator_group_name (str, none_type): Name of the initiator group. `Filter, Sort`. [optional]  # noqa: E501
            last_modified (int, none_type): Time when this access control record was last modified. `Filter, Sort`. [optional]  # noqa: E501
            lun (int, none_type): If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null. `Filter, Sort`. [optional]  # noqa: E501
            pe_id (str, none_type): Identifier for the protocol endpoint this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            pe_lun (int, none_type): LUN (Logical Unit Number) to associate with this protocol endpoint. Valid LUNs are in the 0-2047 range. `Filter, Sort`. [optional]  # noqa: E501
            pe_name (str, none_type): Name of the protocol endpoint this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            snap_id (str, none_type): Identifier for the snapshot this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            snap_name (str, none_type): Name of the snapshot this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            vol_id (str, none_type): Identifier for the volume this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            vol_name (str, none_type): Name of the volume this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            apply_to (str, none_type): External management agent type. Possible values:'volume', 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.. [optional]  # noqa: E501
            associated_links (AssociatedLinks): [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            pe_ids ([str, none_type], none_type): List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume.. [optional]  # noqa: E501
            resource_uri (str, none_type): Link to the object URI. [optional]  # noqa: E501
            snapluns ([NimbleNsSnapLunInfo], none_type): Information about the snapshot LUNs associated with this access control record. This field is meaningful when the online snapshot can be accessed as a LUN in the group.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            vol_agent_type (str, none_type): External management agent type. Possible values:'smis', 'vvol', 'openstack', 'openstackv2', 'none'.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """NimbleAccessControlRecordListItemsInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            access_protocol (str, none_type): Access protocol of the volume. Possible values:'iscsi', 'fc'. `Filter, Sort`. [optional]  # noqa: E501
            chap_user_id (str, none_type): Identifier for the CHAP user. `Filter, Sort`. [optional]  # noqa: E501
            chap_user_name (str, none_type): Flag denoting if data in the associated volume should be compressed. `Filter, Sort`. [optional]  # noqa: E501
            creation_time (int, none_type): Time when this access control record was created. `Filter, Sort`. [optional]  # noqa: E501
            id (str, none_type): Identifier for the access control record. `Filter`. [optional]  # noqa: E501
            initiator_group_id (str, none_type): Identifier for the initiator group. `Filter, Sort`. [optional]  # noqa: E501
            initiator_group_name (str, none_type): Name of the initiator group. `Filter, Sort`. [optional]  # noqa: E501
            last_modified (int, none_type): Time when this access control record was last modified. `Filter, Sort`. [optional]  # noqa: E501
            lun (int, none_type): If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null. `Filter, Sort`. [optional]  # noqa: E501
            pe_id (str, none_type): Identifier for the protocol endpoint this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            pe_lun (int, none_type): LUN (Logical Unit Number) to associate with this protocol endpoint. Valid LUNs are in the 0-2047 range. `Filter, Sort`. [optional]  # noqa: E501
            pe_name (str, none_type): Name of the protocol endpoint this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            snap_id (str, none_type): Identifier for the snapshot this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            snap_name (str, none_type): Name of the snapshot this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            vol_id (str, none_type): Identifier for the volume this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            vol_name (str, none_type): Name of the volume this access control record applies to. `Filter, Sort`. [optional]  # noqa: E501
            apply_to (str, none_type): External management agent type. Possible values:'volume', 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.. [optional]  # noqa: E501
            associated_links (AssociatedLinks): [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            pe_ids ([str, none_type], none_type): List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume.. [optional]  # noqa: E501
            resource_uri (str, none_type): Link to the object URI. [optional]  # noqa: E501
            snapluns ([NimbleNsSnapLunInfo], none_type): Information about the snapshot LUNs associated with this access control record. This field is meaningful when the online snapshot can be accessed as a LUN in the group.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            vol_agent_type (str, none_type): External management agent type. Possible values:'smis', 'vvol', 'openstack', 'openstackv2', 'none'.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              NimbleAccessControlRecordDetails,
              NimbleAccessControlRecordFieldsWithSortKey,
          ],
          'oneOf': [
          ],
        }
