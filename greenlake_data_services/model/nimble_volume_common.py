"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from greenlake_data_services.exceptions import ApiAttributeError


def lazy_import():
    from greenlake_data_services.model.access_control_record import AccessControlRecord
    from greenlake_data_services.model.associated_links import AssociatedLinks
    from greenlake_data_services.model.key_value import KeyValue
    from greenlake_data_services.model.snap_summary import SnapSummary
    from greenlake_data_services.model.snapshot_from_volume import SnapshotFromVolume
    globals()['AccessControlRecord'] = AccessControlRecord
    globals()['AssociatedLinks'] = AssociatedLinks
    globals()['KeyValue'] = KeyValue
    globals()['SnapSummary'] = SnapSummary
    globals()['SnapshotFromVolume'] = SnapshotFromVolume


class NimbleVolumeCommon(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = True

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'access_control_records': ([AccessControlRecord], none_type,),  # noqa: E501
            'agent_type': (str, none_type,),  # noqa: E501
            'app_category': (str, none_type,),  # noqa: E501
            'app_uuid': (str, none_type,),  # noqa: E501
            'associated_links': (AssociatedLinks,),  # noqa: E501
            'block_size': (int, none_type,),  # noqa: E501
            'cache_needed_for_pin': (int, none_type,),  # noqa: E501
            'cache_pinned': (bool, none_type,),  # noqa: E501
            'cache_policy': (str, none_type,),  # noqa: E501
            'caching_enabled': (bool, none_type,),  # noqa: E501
            'cksum_last_verified': (int, none_type,),  # noqa: E501
            'console_uri': (str, none_type,),  # noqa: E501
            'content_repl_errors_found': (bool, none_type,),  # noqa: E501
            'creation_time': (int, none_type,),  # noqa: E501
            'customer_id': (str, none_type,),  # noqa: E501
            'dedupe_enabled': (bool, none_type,),  # noqa: E501
            'description': (str, none_type,),  # noqa: E501
            'encryption_cipher': (str, none_type,),  # noqa: E501
            'force': (bool, none_type,),  # noqa: E501
            'full_name': (str, none_type,),  # noqa: E501
            'generation': (int, none_type,),  # noqa: E501
            'inherit_acl': (bool, none_type,),  # noqa: E501
            'iscsi_target_scope': (str, none_type,),  # noqa: E501
            'last_content_snap_br_cg_uid': (int, none_type,),  # noqa: E501
            'last_content_snap_br_gid': (int, none_type,),  # noqa: E501
            'last_content_snap_id': (int, none_type,),  # noqa: E501
            'last_modified': (int, none_type,),  # noqa: E501
            'last_snap': (SnapSummary,),  # noqa: E501
            'limit': (int, none_type,),  # noqa: E501
            'limit_iops': (int, none_type,),  # noqa: E501
            'limit_mbps': (int, none_type,),  # noqa: E501
            'metadata': ([KeyValue], none_type,),  # noqa: E501
            'move_aborting': (bool, none_type,),  # noqa: E501
            'move_bytes_migrated': (int, none_type,),  # noqa: E501
            'move_bytes_remaining': (int, none_type,),  # noqa: E501
            'move_est_compl_time': (int, none_type,),  # noqa: E501
            'move_start_time': (int, none_type,),  # noqa: E501
            'multi_initiator': (bool, none_type,),  # noqa: E501
            'needs_content_repl': (bool, none_type,),  # noqa: E501
            'num_snaps': (int, none_type,),  # noqa: E501
            'offline_reason': (str, none_type,),  # noqa: E501
            'online_snaps': ([SnapshotFromVolume], none_type,),  # noqa: E501
            'pinned_cache_size': (int, none_type,),  # noqa: E501
            'pre_filter': (str, none_type,),  # noqa: E501
            'previously_deduped': (bool, none_type,),  # noqa: E501
            'projected_num_snaps': (int, none_type,),  # noqa: E501
            'protection_type': (str, none_type,),  # noqa: E501
            'reserve': (int, none_type,),  # noqa: E501
            'resource_uri': (str, none_type,),  # noqa: E501
            'search_name': (str, none_type,),  # noqa: E501
            'snap_reserve': (int, none_type,),  # noqa: E501
            'snap_usage_compressed_bytes': (int, none_type,),  # noqa: E501
            'snap_usage_populated_bytes': (int, none_type,),  # noqa: E501
            'snap_usage_uncompressed_bytes': (int, none_type,),  # noqa: E501
            'snap_warn_level': (int, none_type,),  # noqa: E501
            'space_usage_level': (str,),  # noqa: E501
            'srep_last_sync': (int, none_type,),  # noqa: E501
            'srep_resync_sync': (int, none_type,),  # noqa: E501
            'thinly_provisioned': (bool, none_type,),  # noqa: E501
            'total_usage_bytes': (int, none_type,),  # noqa: E501
            'type': (str, none_type,),  # noqa: E501
            'upstream_cache_pinned': (bool, none_type,),  # noqa: E501
            'usage_valid': (bool, none_type,),  # noqa: E501
            'vol_state': (str, none_type,),  # noqa: E501
            'vol_usage_compressed_bytes': (int, none_type,),  # noqa: E501
            'vol_usage_uncompressed_bytes': (int, none_type,),  # noqa: E501
            'vpd_ieee0': (str, none_type,),  # noqa: E501
            'vpd_ieee1': (str, none_type,),  # noqa: E501
            'vpd_t10': (str, none_type,),  # noqa: E501
            'warn_level': (int, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'access_control_records': 'access_control_records',  # noqa: E501
        'agent_type': 'agent_type',  # noqa: E501
        'app_category': 'app_category',  # noqa: E501
        'app_uuid': 'app_uuid',  # noqa: E501
        'associated_links': 'associated_links',  # noqa: E501
        'block_size': 'block_size',  # noqa: E501
        'cache_needed_for_pin': 'cache_needed_for_pin',  # noqa: E501
        'cache_pinned': 'cache_pinned',  # noqa: E501
        'cache_policy': 'cache_policy',  # noqa: E501
        'caching_enabled': 'caching_enabled',  # noqa: E501
        'cksum_last_verified': 'cksum_last_verified',  # noqa: E501
        'console_uri': 'consoleUri',  # noqa: E501
        'content_repl_errors_found': 'content_repl_errors_found',  # noqa: E501
        'creation_time': 'creation_time',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'dedupe_enabled': 'dedupe_enabled',  # noqa: E501
        'description': 'description',  # noqa: E501
        'encryption_cipher': 'encryption_cipher',  # noqa: E501
        'force': 'force',  # noqa: E501
        'full_name': 'full_name',  # noqa: E501
        'generation': 'generation',  # noqa: E501
        'inherit_acl': 'inherit_acl',  # noqa: E501
        'iscsi_target_scope': 'iscsi_target_scope',  # noqa: E501
        'last_content_snap_br_cg_uid': 'last_content_snap_br_cg_uid',  # noqa: E501
        'last_content_snap_br_gid': 'last_content_snap_br_gid',  # noqa: E501
        'last_content_snap_id': 'last_content_snap_id',  # noqa: E501
        'last_modified': 'last_modified',  # noqa: E501
        'last_snap': 'last_snap',  # noqa: E501
        'limit': 'limit',  # noqa: E501
        'limit_iops': 'limit_iops',  # noqa: E501
        'limit_mbps': 'limit_mbps',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'move_aborting': 'move_aborting',  # noqa: E501
        'move_bytes_migrated': 'move_bytes_migrated',  # noqa: E501
        'move_bytes_remaining': 'move_bytes_remaining',  # noqa: E501
        'move_est_compl_time': 'move_est_compl_time',  # noqa: E501
        'move_start_time': 'move_start_time',  # noqa: E501
        'multi_initiator': 'multi_initiator',  # noqa: E501
        'needs_content_repl': 'needs_content_repl',  # noqa: E501
        'num_snaps': 'num_snaps',  # noqa: E501
        'offline_reason': 'offline_reason',  # noqa: E501
        'online_snaps': 'online_snaps',  # noqa: E501
        'pinned_cache_size': 'pinned_cache_size',  # noqa: E501
        'pre_filter': 'pre_filter',  # noqa: E501
        'previously_deduped': 'previously_deduped',  # noqa: E501
        'projected_num_snaps': 'projected_num_snaps',  # noqa: E501
        'protection_type': 'protection_type',  # noqa: E501
        'reserve': 'reserve',  # noqa: E501
        'resource_uri': 'resourceUri',  # noqa: E501
        'search_name': 'search_name',  # noqa: E501
        'snap_reserve': 'snap_reserve',  # noqa: E501
        'snap_usage_compressed_bytes': 'snap_usage_compressed_bytes',  # noqa: E501
        'snap_usage_populated_bytes': 'snap_usage_populated_bytes',  # noqa: E501
        'snap_usage_uncompressed_bytes': 'snap_usage_uncompressed_bytes',  # noqa: E501
        'snap_warn_level': 'snap_warn_level',  # noqa: E501
        'space_usage_level': 'space_usage_level',  # noqa: E501
        'srep_last_sync': 'srep_last_sync',  # noqa: E501
        'srep_resync_sync': 'srep_resync_sync',  # noqa: E501
        'thinly_provisioned': 'thinly_provisioned',  # noqa: E501
        'total_usage_bytes': 'total_usage_bytes',  # noqa: E501
        'type': 'type',  # noqa: E501
        'upstream_cache_pinned': 'upstream_cache_pinned',  # noqa: E501
        'usage_valid': 'usage_valid',  # noqa: E501
        'vol_state': 'vol_state',  # noqa: E501
        'vol_usage_compressed_bytes': 'vol_usage_compressed_bytes',  # noqa: E501
        'vol_usage_uncompressed_bytes': 'vol_usage_uncompressed_bytes',  # noqa: E501
        'vpd_ieee0': 'vpd_ieee0',  # noqa: E501
        'vpd_ieee1': 'vpd_ieee1',  # noqa: E501
        'vpd_t10': 'vpd_t10',  # noqa: E501
        'warn_level': 'warn_level',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """NimbleVolumeCommon - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            access_control_records ([AccessControlRecord], none_type): List of access control records that apply to this volume. List of access control records associated with a volume or snapshot or protocol endpoint.. [optional]  # noqa: E501
            agent_type (str, none_type): External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.. [optional]  # noqa: E501
            app_category (str, none_type): Application category that the volume belongs to. Plain string.. [optional]  # noqa: E501
            app_uuid (str, none_type): Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.. [optional]  # noqa: E501
            associated_links (AssociatedLinks): [optional]  # noqa: E501
            block_size (int, none_type): Size in bytes of blocks in the volume.. [optional]  # noqa: E501
            cache_needed_for_pin (int, none_type): The amount of flash needed to pin the volume.. [optional]  # noqa: E501
            cache_pinned (bool, none_type): If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume.. [optional]  # noqa: E501
            cache_policy (str, none_type): Cache policy applied to the volume. Possible values: 'disabled', 'normal', 'aggressive', 'no_write', 'aggressive_read_no_write'.. [optional]  # noqa: E501
            caching_enabled (bool, none_type): Indicate caching the volume is enabled.. [optional]  # noqa: E501
            cksum_last_verified (int, none_type): Last checksum verification time.. [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            content_repl_errors_found (bool, none_type): Indicates whether the last content based replication had errors.. [optional]  # noqa: E501
            creation_time (int, none_type): Time when this volume was created. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            dedupe_enabled (bool, none_type): Indicate whether dedupe is enabled.. [optional]  # noqa: E501
            description (str, none_type): Text description of volume. String of up to 255 printable ASCII characters.. [optional]  # noqa: E501
            encryption_cipher (str, none_type): The encryption cipher of the volume. Possible values: 'none', 'aes_256_xts'.. [optional]  # noqa: E501
            force (bool, none_type): Forcibly offline, reduce size or change read-only status a volume.. [optional]  # noqa: E501
            full_name (str, none_type): Fully qualified name of volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            inherit_acl (bool, none_type): In a volume clone operation, if both the parent and the clone have no external management agent (their agent_type property is \"none\"), then inherit_acl controls whether the clone will inherit a copy of the parent's access control list. If either the parent or the clone have an external management agent, then the clone will not inherit the parent's access control list.. [optional]  # noqa: E501
            iscsi_target_scope (str, none_type): This indicates whether volume is exported under iSCSI Group Target or iSCSI Volume Target. This attribute is only meaningful to iSCSI system. On FC system, all volumes are exported under the FC Group Target. In create operation, the volume's target type will be set by this attribute. If not specified, it will be set as the group-setting. In clone operation, the clone's target type will inherit from the parent' setting. Possible values: 'volume', 'group'.. [optional]  # noqa: E501
            last_content_snap_br_cg_uid (int, none_type): The branch cg uid of the content based snapshot that was last replicated.. [optional]  # noqa: E501
            last_content_snap_br_gid (int, none_type): The branch gid of the content based snapshot that was last replicated.. [optional]  # noqa: E501
            last_content_snap_id (int, none_type): The ID of the content based snapshot that was last replicated.. [optional]  # noqa: E501
            last_modified (int, none_type): Time when this volume was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            last_snap (SnapSummary): [optional]  # noqa: E501
            limit (int, none_type): Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100.. [optional]  # noqa: E501
            limit_iops (int, none_type): IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).. [optional]  # noqa: E501
            limit_mbps (int, none_type): Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).. [optional]  # noqa: E501
            metadata ([KeyValue], none_type): Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.. [optional]  # noqa: E501
            move_aborting (bool, none_type): This indicates whether the move of the volume is aborting or not.. [optional]  # noqa: E501
            move_bytes_migrated (int, none_type): The bytes of volume which have been moved.. [optional]  # noqa: E501
            move_bytes_remaining (int, none_type): The bytes of volume which have not been moved.. [optional]  # noqa: E501
            move_est_compl_time (int, none_type): The estimated time of completion of a move. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            move_start_time (int, none_type): The Start time when this volume was moved. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            multi_initiator (bool, none_type): This indicates whether volume and its snapshots are multi-initiator accessible. This attribute applies only to volumes and snapshots available to iSCSI initiators.Online state of volume, available for host initiators to establish connections.. [optional]  # noqa: E501
            needs_content_repl (bool, none_type): Indicates whether the volume needs content based replication.. [optional]  # noqa: E501
            num_snaps (int, none_type): Number of live, non-hidden snapshots for this volume.. [optional]  # noqa: E501
            offline_reason (str, none_type): Volume offline reason. Possible values: 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'over_snapshot_reserve', 'nvram_loss_recovery', 'serial_number_collision', 'encryption_inactive', 'encryption_key_deleted', 'vvol_unbind', 'cache_unpin_in_progress'.. [optional]  # noqa: E501
            online_snaps ([SnapshotFromVolume], none_type): The list of online snapshots of this volume. Snapshot list as presented in volumes object set.. [optional]  # noqa: E501
            pinned_cache_size (int, none_type): The amount of flash pinned on the volume.. [optional]  # noqa: E501
            pre_filter (str, none_type): Pre-filtering criteria. Plain string.. [optional]  # noqa: E501
            previously_deduped (bool, none_type): Indicate whether dedupe has ever been enabled on this volume.. [optional]  # noqa: E501
            projected_num_snaps (int, none_type): Depricated. Projected number of snapshots (including schedued and manual) for this volume.. [optional]  # noqa: E501
            protection_type (str, none_type): Specifies if volume is protected with schedules. If protected, indicate whether replication is setup. Volume Collection or volume is protected locally or remotely or unprotected. Possible values: 'local', 'remote' or 'unprotected'.. [optional]  # noqa: E501
            reserve (int, none_type): Amount of space to reserve for this volume as a percentage of volume size. Percentage as integer from 0 to 100.. [optional]  # noqa: E501
            resource_uri (str, none_type): Link to the object URI. [optional]  # noqa: E501
            search_name (str, none_type): Name of volume used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.. [optional]  # noqa: E501
            snap_reserve (int, none_type): Amount of space to reserve for snapshots of this volume as a percentage of volume size.. [optional]  # noqa: E501
            snap_usage_compressed_bytes (int, none_type): Sum of compressed backup data in bytes stored in snapshots of this volume.. [optional]  # noqa: E501
            snap_usage_populated_bytes (int, none_type): Sum of backup data in bytes stored in snapshots of this volume without accounting for the sharing of data between snapshots.. [optional]  # noqa: E501
            snap_usage_uncompressed_bytes (int, none_type): Sum of uncompressed unique backup data in bytes stored in snapshots of this volume.. [optional]  # noqa: E501
            snap_warn_level (int, none_type): Threshold for available space as a percentage of volume size below which an alert is raised.. [optional]  # noqa: E501
            space_usage_level (str): Indicates space usage level based on warning level. Possible values: 'normal', 'warning', 'critical'.. [optional]  # noqa: E501
            srep_last_sync (int, none_type): Time when synchronously replicated volume was last synchronized.. [optional]  # noqa: E501
            srep_resync_sync (int, none_type): Percentage of resync progress for synchronously replicated volume.. [optional]  # noqa: E501
            thinly_provisioned (bool, none_type): Allow volume to be advertised as thinly provisioned to initiators supporting thin provisioning. For such volumes, soft limit notification is set to initiators when the volume space usage crosses its volume_warn_level. Default is yes. This change takes effect only for new connections to the volume. Initiators must disconnect and reconnect for the new setting to be take effect at the initiator level consistently.. [optional]  # noqa: E501
            total_usage_bytes (int, none_type): Sum of compressed data and compressed backup data in bytes of this volume.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            upstream_cache_pinned (bool, none_type): This indicates whether the upstream volume is cache pinned or not.. [optional]  # noqa: E501
            usage_valid (bool, none_type): This indicates whether usage information of volume and snapshots are valid or not.. [optional]  # noqa: E501
            vol_state (str, none_type): Status of the volume.  Possible values: 'online', 'offline', 'non_writable', 'read_only', 'login_only'.. [optional]  # noqa: E501
            vol_usage_compressed_bytes (int, none_type): Compressed data in bytes for this volume.. [optional]  # noqa: E501
            vol_usage_uncompressed_bytes (int, none_type): Uncompressed data in bytes for this volume.. [optional]  # noqa: E501
            vpd_ieee0 (str, none_type): The first 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. Plain string.. [optional]  # noqa: E501
            vpd_ieee1 (str, none_type): The last 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. Plain string.. [optional]  # noqa: E501
            vpd_t10 (str, none_type): The volume's T10 Vendor ID-based identifier. Plain string.. [optional]  # noqa: E501
            warn_level (int, none_type): Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """NimbleVolumeCommon - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            access_control_records ([AccessControlRecord], none_type): List of access control records that apply to this volume. List of access control records associated with a volume or snapshot or protocol endpoint.. [optional]  # noqa: E501
            agent_type (str, none_type): External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.. [optional]  # noqa: E501
            app_category (str, none_type): Application category that the volume belongs to. Plain string.. [optional]  # noqa: E501
            app_uuid (str, none_type): Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.. [optional]  # noqa: E501
            associated_links (AssociatedLinks): [optional]  # noqa: E501
            block_size (int, none_type): Size in bytes of blocks in the volume.. [optional]  # noqa: E501
            cache_needed_for_pin (int, none_type): The amount of flash needed to pin the volume.. [optional]  # noqa: E501
            cache_pinned (bool, none_type): If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume.. [optional]  # noqa: E501
            cache_policy (str, none_type): Cache policy applied to the volume. Possible values: 'disabled', 'normal', 'aggressive', 'no_write', 'aggressive_read_no_write'.. [optional]  # noqa: E501
            caching_enabled (bool, none_type): Indicate caching the volume is enabled.. [optional]  # noqa: E501
            cksum_last_verified (int, none_type): Last checksum verification time.. [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            content_repl_errors_found (bool, none_type): Indicates whether the last content based replication had errors.. [optional]  # noqa: E501
            creation_time (int, none_type): Time when this volume was created. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            dedupe_enabled (bool, none_type): Indicate whether dedupe is enabled.. [optional]  # noqa: E501
            description (str, none_type): Text description of volume. String of up to 255 printable ASCII characters.. [optional]  # noqa: E501
            encryption_cipher (str, none_type): The encryption cipher of the volume. Possible values: 'none', 'aes_256_xts'.. [optional]  # noqa: E501
            force (bool, none_type): Forcibly offline, reduce size or change read-only status a volume.. [optional]  # noqa: E501
            full_name (str, none_type): Fully qualified name of volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            inherit_acl (bool, none_type): In a volume clone operation, if both the parent and the clone have no external management agent (their agent_type property is \"none\"), then inherit_acl controls whether the clone will inherit a copy of the parent's access control list. If either the parent or the clone have an external management agent, then the clone will not inherit the parent's access control list.. [optional]  # noqa: E501
            iscsi_target_scope (str, none_type): This indicates whether volume is exported under iSCSI Group Target or iSCSI Volume Target. This attribute is only meaningful to iSCSI system. On FC system, all volumes are exported under the FC Group Target. In create operation, the volume's target type will be set by this attribute. If not specified, it will be set as the group-setting. In clone operation, the clone's target type will inherit from the parent' setting. Possible values: 'volume', 'group'.. [optional]  # noqa: E501
            last_content_snap_br_cg_uid (int, none_type): The branch cg uid of the content based snapshot that was last replicated.. [optional]  # noqa: E501
            last_content_snap_br_gid (int, none_type): The branch gid of the content based snapshot that was last replicated.. [optional]  # noqa: E501
            last_content_snap_id (int, none_type): The ID of the content based snapshot that was last replicated.. [optional]  # noqa: E501
            last_modified (int, none_type): Time when this volume was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            last_snap (SnapSummary): [optional]  # noqa: E501
            limit (int, none_type): Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100.. [optional]  # noqa: E501
            limit_iops (int, none_type): IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).. [optional]  # noqa: E501
            limit_mbps (int, none_type): Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).. [optional]  # noqa: E501
            metadata ([KeyValue], none_type): Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.. [optional]  # noqa: E501
            move_aborting (bool, none_type): This indicates whether the move of the volume is aborting or not.. [optional]  # noqa: E501
            move_bytes_migrated (int, none_type): The bytes of volume which have been moved.. [optional]  # noqa: E501
            move_bytes_remaining (int, none_type): The bytes of volume which have not been moved.. [optional]  # noqa: E501
            move_est_compl_time (int, none_type): The estimated time of completion of a move. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            move_start_time (int, none_type): The Start time when this volume was moved. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            multi_initiator (bool, none_type): This indicates whether volume and its snapshots are multi-initiator accessible. This attribute applies only to volumes and snapshots available to iSCSI initiators.Online state of volume, available for host initiators to establish connections.. [optional]  # noqa: E501
            needs_content_repl (bool, none_type): Indicates whether the volume needs content based replication.. [optional]  # noqa: E501
            num_snaps (int, none_type): Number of live, non-hidden snapshots for this volume.. [optional]  # noqa: E501
            offline_reason (str, none_type): Volume offline reason. Possible values: 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'over_snapshot_reserve', 'nvram_loss_recovery', 'serial_number_collision', 'encryption_inactive', 'encryption_key_deleted', 'vvol_unbind', 'cache_unpin_in_progress'.. [optional]  # noqa: E501
            online_snaps ([SnapshotFromVolume], none_type): The list of online snapshots of this volume. Snapshot list as presented in volumes object set.. [optional]  # noqa: E501
            pinned_cache_size (int, none_type): The amount of flash pinned on the volume.. [optional]  # noqa: E501
            pre_filter (str, none_type): Pre-filtering criteria. Plain string.. [optional]  # noqa: E501
            previously_deduped (bool, none_type): Indicate whether dedupe has ever been enabled on this volume.. [optional]  # noqa: E501
            projected_num_snaps (int, none_type): Depricated. Projected number of snapshots (including schedued and manual) for this volume.. [optional]  # noqa: E501
            protection_type (str, none_type): Specifies if volume is protected with schedules. If protected, indicate whether replication is setup. Volume Collection or volume is protected locally or remotely or unprotected. Possible values: 'local', 'remote' or 'unprotected'.. [optional]  # noqa: E501
            reserve (int, none_type): Amount of space to reserve for this volume as a percentage of volume size. Percentage as integer from 0 to 100.. [optional]  # noqa: E501
            resource_uri (str, none_type): Link to the object URI. [optional]  # noqa: E501
            search_name (str, none_type): Name of volume used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.. [optional]  # noqa: E501
            snap_reserve (int, none_type): Amount of space to reserve for snapshots of this volume as a percentage of volume size.. [optional]  # noqa: E501
            snap_usage_compressed_bytes (int, none_type): Sum of compressed backup data in bytes stored in snapshots of this volume.. [optional]  # noqa: E501
            snap_usage_populated_bytes (int, none_type): Sum of backup data in bytes stored in snapshots of this volume without accounting for the sharing of data between snapshots.. [optional]  # noqa: E501
            snap_usage_uncompressed_bytes (int, none_type): Sum of uncompressed unique backup data in bytes stored in snapshots of this volume.. [optional]  # noqa: E501
            snap_warn_level (int, none_type): Threshold for available space as a percentage of volume size below which an alert is raised.. [optional]  # noqa: E501
            space_usage_level (str): Indicates space usage level based on warning level. Possible values: 'normal', 'warning', 'critical'.. [optional]  # noqa: E501
            srep_last_sync (int, none_type): Time when synchronously replicated volume was last synchronized.. [optional]  # noqa: E501
            srep_resync_sync (int, none_type): Percentage of resync progress for synchronously replicated volume.. [optional]  # noqa: E501
            thinly_provisioned (bool, none_type): Allow volume to be advertised as thinly provisioned to initiators supporting thin provisioning. For such volumes, soft limit notification is set to initiators when the volume space usage crosses its volume_warn_level. Default is yes. This change takes effect only for new connections to the volume. Initiators must disconnect and reconnect for the new setting to be take effect at the initiator level consistently.. [optional]  # noqa: E501
            total_usage_bytes (int, none_type): Sum of compressed data and compressed backup data in bytes of this volume.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            upstream_cache_pinned (bool, none_type): This indicates whether the upstream volume is cache pinned or not.. [optional]  # noqa: E501
            usage_valid (bool, none_type): This indicates whether usage information of volume and snapshots are valid or not.. [optional]  # noqa: E501
            vol_state (str, none_type): Status of the volume.  Possible values: 'online', 'offline', 'non_writable', 'read_only', 'login_only'.. [optional]  # noqa: E501
            vol_usage_compressed_bytes (int, none_type): Compressed data in bytes for this volume.. [optional]  # noqa: E501
            vol_usage_uncompressed_bytes (int, none_type): Uncompressed data in bytes for this volume.. [optional]  # noqa: E501
            vpd_ieee0 (str, none_type): The first 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. Plain string.. [optional]  # noqa: E501
            vpd_ieee1 (str, none_type): The last 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. Plain string.. [optional]  # noqa: E501
            vpd_t10 (str, none_type): The volume's T10 Vendor ID-based identifier. Plain string.. [optional]  # noqa: E501
            warn_level (int, none_type): Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
