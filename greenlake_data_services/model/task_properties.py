"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from greenlake_data_services.exceptions import ApiAttributeError


def lazy_import():
    from greenlake_data_services.model.error_response import ErrorResponse
    from greenlake_data_services.model.resource_reference import ResourceReference
    from greenlake_data_services.model.task_console_reference import TaskConsoleReference
    from greenlake_data_services.model.task_log_message import TaskLogMessage
    from greenlake_data_services.model.task_recommendations import TaskRecommendations
    globals()['ErrorResponse'] = ErrorResponse
    globals()['ResourceReference'] = ResourceReference
    globals()['TaskConsoleReference'] = TaskConsoleReference
    globals()['TaskLogMessage'] = TaskLogMessage
    globals()['TaskRecommendations'] = TaskRecommendations


class TaskProperties(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('progress_percent',): {
            'inclusive_maximum': 100,
            'inclusive_minimum': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'additional_details': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'associated_resources': ([ResourceReference],),  # noqa: E501
            'child_tasks': ([ResourceReference],),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'ended_at': (datetime, none_type,),  # noqa: E501
            'error': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'estimated_running_duration_minutes': (int,),  # noqa: E501
            'health_status': (str,),  # noqa: E501
            'log_messages': ([TaskLogMessage],),  # noqa: E501
            'parent_task': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'progress_percent': (int,),  # noqa: E501
            'recommendations': ([TaskRecommendations],),  # noqa: E501
            'source_resource': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'started_at': (datetime, none_type,),  # noqa: E501
            'state': (str,),  # noqa: E501
            'suggested_polling_interval_seconds': (int,),  # noqa: E501
            'updated_at': (datetime, none_type,),  # noqa: E501
            'user_id': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'additional_details': 'additionalDetails',  # noqa: E501
        'associated_resources': 'associatedResources',  # noqa: E501
        'child_tasks': 'childTasks',  # noqa: E501
        'created_at': 'createdAt',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'ended_at': 'endedAt',  # noqa: E501
        'error': 'error',  # noqa: E501
        'estimated_running_duration_minutes': 'estimatedRunningDurationMinutes',  # noqa: E501
        'health_status': 'healthStatus',  # noqa: E501
        'log_messages': 'logMessages',  # noqa: E501
        'parent_task': 'parentTask',  # noqa: E501
        'progress_percent': 'progressPercent',  # noqa: E501
        'recommendations': 'recommendations',  # noqa: E501
        'source_resource': 'sourceResource',  # noqa: E501
        'started_at': 'startedAt',  # noqa: E501
        'state': 'state',  # noqa: E501
        'suggested_polling_interval_seconds': 'suggestedPollingIntervalSeconds',  # noqa: E501
        'updated_at': 'updatedAt',  # noqa: E501
        'user_id': 'userId',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TaskProperties - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            additional_details (bool, date, datetime, dict, float, int, list, str, none_type): A link to be displayed in the Tasks UI. This can be used when a task is paused to take the user to the console UI page with information on how to unpause the task, or for more general information when the task is in other states.. [optional]  # noqa: E501
            associated_resources ([ResourceReference]): Resources that are associated with the task. These may be created by the task or other resources that are involved in the task.. [optional]  # noqa: E501
            child_tasks ([ResourceReference]): A list of sub-tasks that were initiated by this task.. [optional]  # noqa: E501
            created_at (datetime): The time this task was created.. [optional]  # noqa: E501
            display_name (str): The displayed name for the task.. [optional]  # noqa: E501
            ended_at (datetime, none_type): The time this task completed.. [optional]  # noqa: E501
            error (bool, date, datetime, dict, float, int, list, str, none_type): The error response status of the operation.. [optional]  # noqa: E501
            estimated_running_duration_minutes (int): An estimate of how long the task will run before completing.. [optional]  # noqa: E501
            health_status (str): The health status indicates if any errors or problems have been encountered during the processing of the task.  Expected values are OK, ERROR, WARNING, UNKNOWN, and UNSPECIFIED. . [optional]  # noqa: E501
            log_messages ([TaskLogMessage]): Time stamped messages that record the progress of the task.. [optional]  # noqa: E501
            parent_task (bool, date, datetime, dict, float, int, list, str, none_type): The parent is the task that initiated this sub-task. If this is not a sub-task this will be a self reference.. [optional]  # noqa: E501
            progress_percent (int): A percentage representation of progress to completion.. [optional]  # noqa: E501
            recommendations ([TaskRecommendations]): Recommendations on how to fix failing tasks.. [optional]  # noqa: E501
            source_resource (bool, date, datetime, dict, float, int, list, str, none_type): The resource that was used to initiate the task.. [optional]  # noqa: E501
            started_at (datetime, none_type): The time this task was started.. [optional]  # noqa: E501
            state (str): A message to indicate the current state of the task, for example the current step in a workflow. Expected values are INITIALIZED, RUNNING, FAILED, SUCCEEDED, TIMEDOUT, PAUSED, and UNSPECIFIED. . [optional]  # noqa: E501
            suggested_polling_interval_seconds (int): This attribute suggests a suitable interval to use when polling for progress. Where specified this will be based on the frequency with which the task is likely to be updated.. [optional]  # noqa: E501
            updated_at (datetime, none_type): The time this task was last updated.. [optional]  # noqa: E501
            user_id (str): The ID or email address of the user that initiated the task.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TaskProperties - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            additional_details (bool, date, datetime, dict, float, int, list, str, none_type): A link to be displayed in the Tasks UI. This can be used when a task is paused to take the user to the console UI page with information on how to unpause the task, or for more general information when the task is in other states.. [optional]  # noqa: E501
            associated_resources ([ResourceReference]): Resources that are associated with the task. These may be created by the task or other resources that are involved in the task.. [optional]  # noqa: E501
            child_tasks ([ResourceReference]): A list of sub-tasks that were initiated by this task.. [optional]  # noqa: E501
            created_at (datetime): The time this task was created.. [optional]  # noqa: E501
            display_name (str): The displayed name for the task.. [optional]  # noqa: E501
            ended_at (datetime, none_type): The time this task completed.. [optional]  # noqa: E501
            error (bool, date, datetime, dict, float, int, list, str, none_type): The error response status of the operation.. [optional]  # noqa: E501
            estimated_running_duration_minutes (int): An estimate of how long the task will run before completing.. [optional]  # noqa: E501
            health_status (str): The health status indicates if any errors or problems have been encountered during the processing of the task.  Expected values are OK, ERROR, WARNING, UNKNOWN, and UNSPECIFIED. . [optional]  # noqa: E501
            log_messages ([TaskLogMessage]): Time stamped messages that record the progress of the task.. [optional]  # noqa: E501
            parent_task (bool, date, datetime, dict, float, int, list, str, none_type): The parent is the task that initiated this sub-task. If this is not a sub-task this will be a self reference.. [optional]  # noqa: E501
            progress_percent (int): A percentage representation of progress to completion.. [optional]  # noqa: E501
            recommendations ([TaskRecommendations]): Recommendations on how to fix failing tasks.. [optional]  # noqa: E501
            source_resource (bool, date, datetime, dict, float, int, list, str, none_type): The resource that was used to initiate the task.. [optional]  # noqa: E501
            started_at (datetime, none_type): The time this task was started.. [optional]  # noqa: E501
            state (str): A message to indicate the current state of the task, for example the current step in a workflow. Expected values are INITIALIZED, RUNNING, FAILED, SUCCEEDED, TIMEDOUT, PAUSED, and UNSPECIFIED. . [optional]  # noqa: E501
            suggested_polling_interval_seconds (int): This attribute suggests a suitable interval to use when polling for progress. Where specified this will be based on the frequency with which the task is likely to be updated.. [optional]  # noqa: E501
            updated_at (datetime, none_type): The time this task was last updated.. [optional]  # noqa: E501
            user_id (str): The ID or email address of the user that initiated the task.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
