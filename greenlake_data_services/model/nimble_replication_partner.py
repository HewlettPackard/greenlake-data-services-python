"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from greenlake_data_services.exceptions import ApiAttributeError


def lazy_import():
    from greenlake_data_services.model.associated_links import AssociatedLinks
    from greenlake_data_services.model.nimble_replication_partner_common import NimbleReplicationPartnerCommon
    from greenlake_data_services.model.nimble_replication_partner_filterable_fields import NimbleReplicationPartnerFilterableFields
    from greenlake_data_services.model.replication_throttle import ReplicationThrottle
    from greenlake_data_services.model.replication_volume_collection_summary import ReplicationVolumeCollectionSummary
    globals()['AssociatedLinks'] = AssociatedLinks
    globals()['NimbleReplicationPartnerCommon'] = NimbleReplicationPartnerCommon
    globals()['NimbleReplicationPartnerFilterableFields'] = NimbleReplicationPartnerFilterableFields
    globals()['ReplicationThrottle'] = ReplicationThrottle
    globals()['ReplicationVolumeCollectionSummary'] = ReplicationVolumeCollectionSummary


class NimbleReplicationPartner(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = True

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'array_serial': (str, none_type,),  # noqa: E501
            'cfg_sync_status': (str, none_type,),  # noqa: E501
            'creation_time': (int, none_type,),  # noqa: E501
            'folder_id': (str, none_type,),  # noqa: E501
            'folder_name': (str, none_type,),  # noqa: E501
            'hostname': (str, none_type,),  # noqa: E501
            'id': (str, none_type,),  # noqa: E501
            'is_alive': (bool, none_type,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'partner_type': (str, none_type,),  # noqa: E501
            'paused': (bool, none_type,),  # noqa: E501
            'pool_id': (str, none_type,),  # noqa: E501
            'pool_name': (str, none_type,),  # noqa: E501
            'repl_hostname': (str, none_type,),  # noqa: E501
            'subnet_label': (str, none_type,),  # noqa: E501
            'subnet_netmask': (str, none_type,),  # noqa: E501
            'subnet_network': (str, none_type,),  # noqa: E501
            'subnet_type': (str, none_type,),  # noqa: E501
            'system_id': (str, none_type,),  # noqa: E501
            'version': (int, none_type,),  # noqa: E501
            'volume_collection_list_count': (int, none_type,),  # noqa: E501
            'alias': (str, none_type,),  # noqa: E501
            'associated_links': (AssociatedLinks,),  # noqa: E501
            'control_port': (int, none_type,),  # noqa: E501
            'customer_id': (str, none_type,),  # noqa: E501
            'data_port': (int, none_type,),  # noqa: E501
            'description': (str, none_type,),  # noqa: E501
            'full_name': (str, none_type,),  # noqa: E501
            'generation': (int, none_type,),  # noqa: E501
            'last_keepalive_error': (str, none_type,),  # noqa: E501
            'last_modified': (int, none_type,),  # noqa: E501
            'last_sync_error': (str, none_type,),  # noqa: E501
            'match_folder': (bool, none_type,),  # noqa: E501
            'partner_group_uid': (int, none_type,),  # noqa: E501
            'port_range_start': (int, none_type,),  # noqa: E501
            'proxy_hostname': (str, none_type,),  # noqa: E501
            'proxy_user': (str, none_type,),  # noqa: E501
            'remote_partner_folder_id': (str, none_type,),  # noqa: E501
            'remote_partner_folder_name': (str, none_type,),  # noqa: E501
            'remote_partner_id': (str, none_type,),  # noqa: E501
            'remote_partner_name': (str, none_type,),  # noqa: E501
            'remote_partner_pool_id': (str, none_type,),  # noqa: E501
            'remote_partner_pool_name': (str, none_type,),  # noqa: E501
            'remote_partner_subnet_label': (str,),  # noqa: E501
            'remote_partner_subnet_type': (str, none_type,),  # noqa: E501
            'remote_partner_system_id': (str, none_type,),  # noqa: E501
            'replication_direction': (str, none_type,),  # noqa: E501
            'search_name': (str, none_type,),  # noqa: E501
            'status': (str, none_type,),  # noqa: E501
            'throttled_bandwidth_current': (int, none_type,),  # noqa: E501
            'throttled_bandwidth_current_kbps': (int, none_type,),  # noqa: E501
            'throttles': ([ReplicationThrottle], none_type,),  # noqa: E501
            'type': (str, none_type,),  # noqa: E501
            'unique_name': (bool,),  # noqa: E501
            'volume_collection_list': ([ReplicationVolumeCollectionSummary], none_type,),  # noqa: E501
            'witness': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'array_serial': 'array_serial',  # noqa: E501
        'cfg_sync_status': 'cfg_sync_status',  # noqa: E501
        'creation_time': 'creation_time',  # noqa: E501
        'folder_id': 'folder_id',  # noqa: E501
        'folder_name': 'folder_name',  # noqa: E501
        'hostname': 'hostname',  # noqa: E501
        'id': 'id',  # noqa: E501
        'is_alive': 'is_alive',  # noqa: E501
        'name': 'name',  # noqa: E501
        'partner_type': 'partner_type',  # noqa: E501
        'paused': 'paused',  # noqa: E501
        'pool_id': 'pool_id',  # noqa: E501
        'pool_name': 'pool_name',  # noqa: E501
        'repl_hostname': 'repl_hostname',  # noqa: E501
        'subnet_label': 'subnet_label',  # noqa: E501
        'subnet_netmask': 'subnet_netmask',  # noqa: E501
        'subnet_network': 'subnet_network',  # noqa: E501
        'subnet_type': 'subnet_type',  # noqa: E501
        'system_id': 'systemId',  # noqa: E501
        'version': 'version',  # noqa: E501
        'volume_collection_list_count': 'volume_collection_list_count',  # noqa: E501
        'alias': 'alias',  # noqa: E501
        'associated_links': 'associated_links',  # noqa: E501
        'control_port': 'control_port',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'data_port': 'data_port',  # noqa: E501
        'description': 'description',  # noqa: E501
        'full_name': 'full_name',  # noqa: E501
        'generation': 'generation',  # noqa: E501
        'last_keepalive_error': 'last_keepalive_error',  # noqa: E501
        'last_modified': 'last_modified',  # noqa: E501
        'last_sync_error': 'last_sync_error',  # noqa: E501
        'match_folder': 'match_folder',  # noqa: E501
        'partner_group_uid': 'partner_group_uid',  # noqa: E501
        'port_range_start': 'port_range_start',  # noqa: E501
        'proxy_hostname': 'proxy_hostname',  # noqa: E501
        'proxy_user': 'proxy_user',  # noqa: E501
        'remote_partner_folder_id': 'remote_partner_folder_id',  # noqa: E501
        'remote_partner_folder_name': 'remote_partner_folder_name',  # noqa: E501
        'remote_partner_id': 'remote_partner_id',  # noqa: E501
        'remote_partner_name': 'remote_partner_name',  # noqa: E501
        'remote_partner_pool_id': 'remote_partner_pool_id',  # noqa: E501
        'remote_partner_pool_name': 'remote_partner_pool_name',  # noqa: E501
        'remote_partner_subnet_label': 'remote_partner_subnet_label',  # noqa: E501
        'remote_partner_subnet_type': 'remote_partner_subnet_type',  # noqa: E501
        'remote_partner_system_id': 'remote_partner_system_id',  # noqa: E501
        'replication_direction': 'replication_direction',  # noqa: E501
        'search_name': 'search_name',  # noqa: E501
        'status': 'status',  # noqa: E501
        'throttled_bandwidth_current': 'throttled_bandwidth_current',  # noqa: E501
        'throttled_bandwidth_current_kbps': 'throttled_bandwidth_current_kbps',  # noqa: E501
        'throttles': 'throttles',  # noqa: E501
        'type': 'type',  # noqa: E501
        'unique_name': 'unique_name',  # noqa: E501
        'volume_collection_list': 'volume_collection_list',  # noqa: E501
        'witness': 'witness',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """NimbleReplicationPartner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            array_serial (str, none_type): Serial number of group leader array of the partner. Plain string. `Filter, Sort`. [optional]  # noqa: E501
            cfg_sync_status (str, none_type): Indicates whether all volumes and volume collections have been synced to the partner. Possible values: N/A, Yes, No `Filter, Sort`. [optional]  # noqa: E501
            creation_time (int, none_type): Time when this replication partner was created. Seconds since last epoch i.e. 00:00 January 1, 1970. `Filter, Sort`. [optional]  # noqa: E501
            folder_id (str, none_type): The Folder ID within the pool where volumes replicated from this partner will be created. This is not supported for pool partners. A 42 digit hexadecimal number. `Filter, Sort`. [optional]  # noqa: E501
            folder_name (str, none_type): The Folder name within the pool where volumes replicated from this partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            hostname (str, none_type): IP address or hostname of partner interface. This must be the partners Group Management IP address. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            id (str, none_type): Identifier for a replication partner. A 42 digit hexadecimal number. `Filter`. [optional]  # noqa: E501
            is_alive (bool, none_type): Whether the partner is available, and responding to pings. Possible values: true, false `Filter, Sort`. [optional]  # noqa: E501
            name (str, none_type): Name of replication partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.`Filter, Sort`. [optional]  # noqa: E501
            partner_type (str, none_type): Type of the partner, Possible values: 'group' or 'pool'.`Filter, Sort`. [optional]  # noqa: E501
            paused (bool, none_type): Indicates whether replication traffic from/to this partner has been halted. Possible values: true, false `Filter, Sort`. [optional]  # noqa: E501
            pool_id (str, none_type): The pool ID where volumes replicated from this partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number. `Filter, Sort`. [optional]  # noqa: E501
            pool_name (str, none_type): The pool name where volumes replicated from this partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            repl_hostname (str, none_type): IP address or hostname of partner data interface. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            subnet_label (str, none_type): Label of the subnet used to replicate to this partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            subnet_netmask (str, none_type): Subnet mask used to replicate to this partner. A netmask expressed as a 32 bit binary value must have the highest bit set (2^31) and the lowest bit clear (2^0) with the first zero followed by only zeros. `Filter, Sort`. [optional]  # noqa: E501
            subnet_network (str, none_type): Subnet used to replicate to this partner. Four numbers in the range [0,255] separated by periods. `Filter, Sort`. [optional]  # noqa: E501
            subnet_type (str, none_type): Type of the subnet used to replicate to this partner. Possible values: invalid, unconfigured, mgmt, data, mgmt_data `Filter, Sort`. [optional]  # noqa: E501
            system_id (str, none_type): Identifier for a system or array. A 42 digit hexadecimal number. `Filter`. [optional]  # noqa: E501
            version (int, none_type): Replication version of the partner. Signed 64-bit integer. `Filter, Sort`. [optional]  # noqa: E501
            volume_collection_list_count (int, none_type): Count of volume collections that are replicating from/to this partner. Unsigned 64-bit integer. `Filter, Sort`. [optional]  # noqa: E501
            alias (str, none_type): String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.. [optional]  # noqa: E501
            associated_links (AssociatedLinks): [optional]  # noqa: E501
            control_port (int, none_type): Port number of partner control interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            data_port (int, none_type): Port number of partner data interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.. [optional]  # noqa: E501
            description (str, none_type): Description of replication partner. String of up to 255 printable ASCII characters.. [optional]  # noqa: E501
            full_name (str, none_type): Fully qualified name of replication partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            last_keepalive_error (str, none_type): Most recent error while attempting to ping the partner. Plain string.. [optional]  # noqa: E501
            last_modified (int, none_type): Time when this replication partner was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            last_sync_error (str, none_type): Most recent error seen while attempting to sync objects to the partner. Plain string.. [optional]  # noqa: E501
            match_folder (bool, none_type): Indicates whether to match the upstream volumes folder on the downstream. Possible values: true, false. [optional]  # noqa: E501
            partner_group_uid (int, none_type): Replication partner group uid. Unsigned 64-bit integer.. [optional]  # noqa: E501
            port_range_start (int, none_type): Positive integer value up to 65535 representing TCP/IP port. Example: 1234.. [optional]  # noqa: E501
            proxy_hostname (str, none_type): String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'. [optional]  # noqa: E501
            proxy_user (str, none_type): HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.. [optional]  # noqa: E501
            remote_partner_folder_id (str, none_type): The folder ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.. [optional]  # noqa: E501
            remote_partner_folder_name (str, none_type): The folder name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.. [optional]  # noqa: E501
            remote_partner_id (str, none_type): ID of the remote partner.. [optional]  # noqa: E501
            remote_partner_name (str, none_type): Name of the remote partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.. [optional]  # noqa: E501
            remote_partner_pool_id (str, none_type): The pool ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.. [optional]  # noqa: E501
            remote_partner_pool_name (str, none_type): The pool name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.. [optional]  # noqa: E501
            remote_partner_subnet_label (str): Label of the subnet used to replicate to remote partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.. [optional]  # noqa: E501
            remote_partner_subnet_type (str, none_type): Type of the subnet used to replicate to the remote partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.. [optional]  # noqa: E501
            remote_partner_system_id (str, none_type): ID of the system to which the remote partner belongs.. [optional]  # noqa: E501
            replication_direction (str, none_type): Direction of replication configured with this partner. Possible values: none, downstream, upstream, bi_directional. [optional]  # noqa: E501
            search_name (str, none_type): Name of replication partner used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.. [optional]  # noqa: E501
            status (str, none_type): Status of the partner. Failed, Normal, Degraded, Unknown.. [optional]  # noqa: E501
            throttled_bandwidth_current (int, none_type): Current bandwidth throttle for this partner, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.. [optional]  # noqa: E501
            throttled_bandwidth_current_kbps (int, none_type): Current bandwidth throttle for this partner, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.. [optional]  # noqa: E501
            throttles ([ReplicationThrottle], none_type): Throttles used while replicating from/to this partner. All the throttles for the partner.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            unique_name (bool): Possible values: 'true', 'false'.. [optional]  # noqa: E501
            volume_collection_list ([ReplicationVolumeCollectionSummary], none_type): List of volume collections that are replicating from/to this partner. List of volume collections.. [optional]  # noqa: E501
            witness (str, none_type): Hostname or ip addresses of witness. Comma separated strings of up to 63 characters of hostname and/or ip addresses. Total length cannot exceed 255 characters.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """NimbleReplicationPartner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            array_serial (str, none_type): Serial number of group leader array of the partner. Plain string. `Filter, Sort`. [optional]  # noqa: E501
            cfg_sync_status (str, none_type): Indicates whether all volumes and volume collections have been synced to the partner. Possible values: N/A, Yes, No `Filter, Sort`. [optional]  # noqa: E501
            creation_time (int, none_type): Time when this replication partner was created. Seconds since last epoch i.e. 00:00 January 1, 1970. `Filter, Sort`. [optional]  # noqa: E501
            folder_id (str, none_type): The Folder ID within the pool where volumes replicated from this partner will be created. This is not supported for pool partners. A 42 digit hexadecimal number. `Filter, Sort`. [optional]  # noqa: E501
            folder_name (str, none_type): The Folder name within the pool where volumes replicated from this partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            hostname (str, none_type): IP address or hostname of partner interface. This must be the partners Group Management IP address. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            id (str, none_type): Identifier for a replication partner. A 42 digit hexadecimal number. `Filter`. [optional]  # noqa: E501
            is_alive (bool, none_type): Whether the partner is available, and responding to pings. Possible values: true, false `Filter, Sort`. [optional]  # noqa: E501
            name (str, none_type): Name of replication partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.`Filter, Sort`. [optional]  # noqa: E501
            partner_type (str, none_type): Type of the partner, Possible values: 'group' or 'pool'.`Filter, Sort`. [optional]  # noqa: E501
            paused (bool, none_type): Indicates whether replication traffic from/to this partner has been halted. Possible values: true, false `Filter, Sort`. [optional]  # noqa: E501
            pool_id (str, none_type): The pool ID where volumes replicated from this partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number. `Filter, Sort`. [optional]  # noqa: E501
            pool_name (str, none_type): The pool name where volumes replicated from this partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            repl_hostname (str, none_type): IP address or hostname of partner data interface. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            subnet_label (str, none_type): Label of the subnet used to replicate to this partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`. [optional]  # noqa: E501
            subnet_netmask (str, none_type): Subnet mask used to replicate to this partner. A netmask expressed as a 32 bit binary value must have the highest bit set (2^31) and the lowest bit clear (2^0) with the first zero followed by only zeros. `Filter, Sort`. [optional]  # noqa: E501
            subnet_network (str, none_type): Subnet used to replicate to this partner. Four numbers in the range [0,255] separated by periods. `Filter, Sort`. [optional]  # noqa: E501
            subnet_type (str, none_type): Type of the subnet used to replicate to this partner. Possible values: invalid, unconfigured, mgmt, data, mgmt_data `Filter, Sort`. [optional]  # noqa: E501
            system_id (str, none_type): Identifier for a system or array. A 42 digit hexadecimal number. `Filter`. [optional]  # noqa: E501
            version (int, none_type): Replication version of the partner. Signed 64-bit integer. `Filter, Sort`. [optional]  # noqa: E501
            volume_collection_list_count (int, none_type): Count of volume collections that are replicating from/to this partner. Unsigned 64-bit integer. `Filter, Sort`. [optional]  # noqa: E501
            alias (str, none_type): String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.. [optional]  # noqa: E501
            associated_links (AssociatedLinks): [optional]  # noqa: E501
            control_port (int, none_type): Port number of partner control interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            data_port (int, none_type): Port number of partner data interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.. [optional]  # noqa: E501
            description (str, none_type): Description of replication partner. String of up to 255 printable ASCII characters.. [optional]  # noqa: E501
            full_name (str, none_type): Fully qualified name of replication partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            last_keepalive_error (str, none_type): Most recent error while attempting to ping the partner. Plain string.. [optional]  # noqa: E501
            last_modified (int, none_type): Time when this replication partner was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.. [optional]  # noqa: E501
            last_sync_error (str, none_type): Most recent error seen while attempting to sync objects to the partner. Plain string.. [optional]  # noqa: E501
            match_folder (bool, none_type): Indicates whether to match the upstream volumes folder on the downstream. Possible values: true, false. [optional]  # noqa: E501
            partner_group_uid (int, none_type): Replication partner group uid. Unsigned 64-bit integer.. [optional]  # noqa: E501
            port_range_start (int, none_type): Positive integer value up to 65535 representing TCP/IP port. Example: 1234.. [optional]  # noqa: E501
            proxy_hostname (str, none_type): String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'. [optional]  # noqa: E501
            proxy_user (str, none_type): HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.. [optional]  # noqa: E501
            remote_partner_folder_id (str, none_type): The folder ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.. [optional]  # noqa: E501
            remote_partner_folder_name (str, none_type): The folder name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.. [optional]  # noqa: E501
            remote_partner_id (str, none_type): ID of the remote partner.. [optional]  # noqa: E501
            remote_partner_name (str, none_type): Name of the remote partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.. [optional]  # noqa: E501
            remote_partner_pool_id (str, none_type): The pool ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.. [optional]  # noqa: E501
            remote_partner_pool_name (str, none_type): The pool name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.. [optional]  # noqa: E501
            remote_partner_subnet_label (str): Label of the subnet used to replicate to remote partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.. [optional]  # noqa: E501
            remote_partner_subnet_type (str, none_type): Type of the subnet used to replicate to the remote partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.. [optional]  # noqa: E501
            remote_partner_system_id (str, none_type): ID of the system to which the remote partner belongs.. [optional]  # noqa: E501
            replication_direction (str, none_type): Direction of replication configured with this partner. Possible values: none, downstream, upstream, bi_directional. [optional]  # noqa: E501
            search_name (str, none_type): Name of replication partner used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.. [optional]  # noqa: E501
            status (str, none_type): Status of the partner. Failed, Normal, Degraded, Unknown.. [optional]  # noqa: E501
            throttled_bandwidth_current (int, none_type): Current bandwidth throttle for this partner, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.. [optional]  # noqa: E501
            throttled_bandwidth_current_kbps (int, none_type): Current bandwidth throttle for this partner, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.. [optional]  # noqa: E501
            throttles ([ReplicationThrottle], none_type): Throttles used while replicating from/to this partner. All the throttles for the partner.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            unique_name (bool): Possible values: 'true', 'false'.. [optional]  # noqa: E501
            volume_collection_list ([ReplicationVolumeCollectionSummary], none_type): List of volume collections that are replicating from/to this partner. List of volume collections.. [optional]  # noqa: E501
            witness (str, none_type): Hostname or ip addresses of witness. Comma separated strings of up to 63 characters of hostname and/or ip addresses. Total length cannot exceed 255 characters.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              NimbleReplicationPartnerCommon,
              NimbleReplicationPartnerFilterableFields,
          ],
          'oneOf': [
          ],
        }
