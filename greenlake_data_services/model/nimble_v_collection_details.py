"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from greenlake_data_services.exceptions import ApiAttributeError


def lazy_import():
    from greenlake_data_services.model.associated_links import AssociatedLinks
    from greenlake_data_services.model.nimble_ns_key_value import NimbleNsKeyValue
    from greenlake_data_services.model.nimble_ns_schedule import NimbleNsSchedule
    from greenlake_data_services.model.nimble_snapcoll_summary import NimbleSnapcollSummary
    from greenlake_data_services.model.nimble_volume_summary import NimbleVolumeSummary
    globals()['AssociatedLinks'] = AssociatedLinks
    globals()['NimbleNsKeyValue'] = NimbleNsKeyValue
    globals()['NimbleNsSchedule'] = NimbleNsSchedule
    globals()['NimbleSnapcollSummary'] = NimbleSnapcollSummary
    globals()['NimbleVolumeSummary'] = NimbleVolumeSummary


class NimbleVCollectionDetails(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = True

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'agent_hostname': (str, none_type,),  # noqa: E501
            'app_sync': (str, none_type,),  # noqa: E501
            'associated_links': (AssociatedLinks,),  # noqa: E501
            'cache_pinned_volume_list': ([NimbleVolumeSummary], none_type,),  # noqa: E501
            'console_uri': (str, none_type,),  # noqa: E501
            'creation_time': (int, none_type,),  # noqa: E501
            'customer_id': (str, none_type,),  # noqa: E501
            'description': (str, none_type,),  # noqa: E501
            'full_name': (str, none_type,),  # noqa: E501
            'generation': (int, none_type,),  # noqa: E501
            'handover_replication_partner': (str, none_type,),  # noqa: E501
            'is_handing_over': (bool, none_type,),  # noqa: E501
            'is_standalone_volcoll': (bool, none_type,),  # noqa: E501
            'lag_time': (int, none_type,),  # noqa: E501
            'last_replicated_snapcoll': ([NimbleSnapcollSummary], none_type,),  # noqa: E501
            'last_snapcoll': ([NimbleSnapcollSummary], none_type,),  # noqa: E501
            'metadata': ([NimbleNsKeyValue], none_type,),  # noqa: E501
            'pol_owner_name': (str, none_type,),  # noqa: E501
            'protection_type': (str, none_type,),  # noqa: E501
            'repl_bytes_transferred': (int, none_type,),  # noqa: E501
            'repl_priority': (str, none_type,),  # noqa: E501
            'replication_partner': ([str], none_type,),  # noqa: E501
            'resource_uri': (str, none_type,),  # noqa: E501
            'schedule_list': ([NimbleNsSchedule], none_type,),  # noqa: E501
            'search_name': (str, none_type,),  # noqa: E501
            'snapcoll_count': (int, none_type,),  # noqa: E501
            'srep_last_sync': (int, none_type,),  # noqa: E501
            'srep_resync_percent': (int, none_type,),  # noqa: E501
            'total_repl_bytes': (int, none_type,),  # noqa: E501
            'type': (str, none_type,),  # noqa: E501
            'vcenter_hostname': (str, none_type,),  # noqa: E501
            'vcenter_username': (str, none_type,),  # noqa: E501
            'volume_count': (int, none_type,),  # noqa: E501
            'volume_list': ([NimbleVolumeSummary], none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'agent_hostname': 'agent_hostname',  # noqa: E501
        'app_sync': 'app_sync',  # noqa: E501
        'associated_links': 'associated_links',  # noqa: E501
        'cache_pinned_volume_list': 'cache_pinned_volume_list',  # noqa: E501
        'console_uri': 'consoleUri',  # noqa: E501
        'creation_time': 'creation_time',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'description': 'description',  # noqa: E501
        'full_name': 'full_name',  # noqa: E501
        'generation': 'generation',  # noqa: E501
        'handover_replication_partner': 'handover_replication_partner',  # noqa: E501
        'is_handing_over': 'is_handing_over',  # noqa: E501
        'is_standalone_volcoll': 'is_standalone_volcoll',  # noqa: E501
        'lag_time': 'lag_time',  # noqa: E501
        'last_replicated_snapcoll': 'last_replicated_snapcoll',  # noqa: E501
        'last_snapcoll': 'last_snapcoll',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'pol_owner_name': 'pol_owner_name',  # noqa: E501
        'protection_type': 'protection_type',  # noqa: E501
        'repl_bytes_transferred': 'repl_bytes_transferred',  # noqa: E501
        'repl_priority': 'repl_priority',  # noqa: E501
        'replication_partner': 'replication_partner',  # noqa: E501
        'resource_uri': 'resourceUri',  # noqa: E501
        'schedule_list': 'schedule_list',  # noqa: E501
        'search_name': 'search_name',  # noqa: E501
        'snapcoll_count': 'snapcoll_count',  # noqa: E501
        'srep_last_sync': 'srep_last_sync',  # noqa: E501
        'srep_resync_percent': 'srep_resync_percent',  # noqa: E501
        'total_repl_bytes': 'total_repl_bytes',  # noqa: E501
        'type': 'type',  # noqa: E501
        'vcenter_hostname': 'vcenter_hostname',  # noqa: E501
        'vcenter_username': 'vcenter_username',  # noqa: E501
        'volume_count': 'volume_count',  # noqa: E501
        'volume_list': 'volume_list',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """NimbleVCollectionDetails - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            agent_hostname (str, none_type): Generic backup agent hostname. Custom port number can be specified with agent hostname using \\\\\":\\\\\".. [optional]  # noqa: E501
            app_sync (str, none_type): Application Synchronization. Possible values: 'vss', 'vmware', 'none', 'generic'.. [optional]  # noqa: E501
            associated_links (AssociatedLinks): [optional]  # noqa: E501
            cache_pinned_volume_list ([NimbleVolumeSummary], none_type): List of cache pinned volumes associated with volume collection.. [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            creation_time (int, none_type): Application server hostname.. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            description (str, none_type): Text descrption of volume collection.. [optional]  # noqa: E501
            full_name (str, none_type): Fully qualified name of volume collection.. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            handover_replication_partner (str, none_type): Replication partner to which ownership is being transferred as part of handover operation.. [optional]  # noqa: E501
            is_handing_over (bool, none_type): Indicates whether a handover operation is in progress on this volume collection.. [optional]  # noqa: E501
            is_standalone_volcoll (bool, none_type): Last snapshot collection on this volume collection.. [optional]  # noqa: E501
            lag_time (int, none_type): Replication lag time for volume collection.. [optional]  # noqa: E501
            last_replicated_snapcoll ([NimbleSnapcollSummary], none_type): Last replicated snapshot collection on this volume collection.. [optional]  # noqa: E501
            last_snapcoll ([NimbleSnapcollSummary], none_type): Last snapshot collection on this volume collection.. [optional]  # noqa: E501
            metadata ([NimbleNsKeyValue], none_type): Key-value pairs that augment a volume collection's attributes.. [optional]  # noqa: E501
            pol_owner_name (str, none_type): PolOwnerName - Owner group.. [optional]  # noqa: E501
            protection_type (str, none_type): Specifies if volume collection is protected with schedules. If protected, indicated whether replication is setup.. [optional]  # noqa: E501
            repl_bytes_transferred (int, none_type): Total size of volumes replicated for this volume collection.. [optional]  # noqa: E501
            repl_priority (str, none_type): Replication priority for the volume collection with the following choices: {normal | high}.  Possible values: 'normal', 'high'.. [optional]  # noqa: E501
            replication_partner ([str], none_type): List of replication partners associated with the volume collection.. [optional]  # noqa: E501
            resource_uri (str, none_type): Link to the object URI. [optional]  # noqa: E501
            schedule_list ([NimbleNsSchedule], none_type): List of schedules for this volume collection.. [optional]  # noqa: E501
            search_name (str, none_type): Name of volume collection used for object search.. [optional]  # noqa: E501
            snapcoll_count (int, none_type): Count of snapshot collections associated with volume collection.. [optional]  # noqa: E501
            srep_last_sync (int, none_type): Time when a synchronously replicated volume collection was last synchronized.. [optional]  # noqa: E501
            srep_resync_percent (int, none_type): Percentage of the resync progress for a synchronously replicated volume collection.. [optional]  # noqa: E501
            total_repl_bytes (int, none_type): Total size of volumes to be replicated for this volume collection.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            vcenter_hostname (str, none_type): VMware vCenter hostname. Custom port number can be specified with vCenter hostname using \\\\\":\\\\\".. [optional]  # noqa: E501
            vcenter_username (str, none_type): Application VMware vCenter username.. [optional]  # noqa: E501
            volume_count (int, none_type): Count of volumes associated with the volume collection.. [optional]  # noqa: E501
            volume_list ([NimbleVolumeSummary], none_type): List of volumes associated with the volume collection.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """NimbleVCollectionDetails - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            agent_hostname (str, none_type): Generic backup agent hostname. Custom port number can be specified with agent hostname using \\\\\":\\\\\".. [optional]  # noqa: E501
            app_sync (str, none_type): Application Synchronization. Possible values: 'vss', 'vmware', 'none', 'generic'.. [optional]  # noqa: E501
            associated_links (AssociatedLinks): [optional]  # noqa: E501
            cache_pinned_volume_list ([NimbleVolumeSummary], none_type): List of cache pinned volumes associated with volume collection.. [optional]  # noqa: E501
            console_uri (str, none_type): consoleUri for detailed storage object. [optional]  # noqa: E501
            creation_time (int, none_type): Application server hostname.. [optional]  # noqa: E501
            customer_id (str, none_type): customerId. [optional]  # noqa: E501
            description (str, none_type): Text descrption of volume collection.. [optional]  # noqa: E501
            full_name (str, none_type): Fully qualified name of volume collection.. [optional]  # noqa: E501
            generation (int, none_type): generation. [optional]  # noqa: E501
            handover_replication_partner (str, none_type): Replication partner to which ownership is being transferred as part of handover operation.. [optional]  # noqa: E501
            is_handing_over (bool, none_type): Indicates whether a handover operation is in progress on this volume collection.. [optional]  # noqa: E501
            is_standalone_volcoll (bool, none_type): Last snapshot collection on this volume collection.. [optional]  # noqa: E501
            lag_time (int, none_type): Replication lag time for volume collection.. [optional]  # noqa: E501
            last_replicated_snapcoll ([NimbleSnapcollSummary], none_type): Last replicated snapshot collection on this volume collection.. [optional]  # noqa: E501
            last_snapcoll ([NimbleSnapcollSummary], none_type): Last snapshot collection on this volume collection.. [optional]  # noqa: E501
            metadata ([NimbleNsKeyValue], none_type): Key-value pairs that augment a volume collection's attributes.. [optional]  # noqa: E501
            pol_owner_name (str, none_type): PolOwnerName - Owner group.. [optional]  # noqa: E501
            protection_type (str, none_type): Specifies if volume collection is protected with schedules. If protected, indicated whether replication is setup.. [optional]  # noqa: E501
            repl_bytes_transferred (int, none_type): Total size of volumes replicated for this volume collection.. [optional]  # noqa: E501
            repl_priority (str, none_type): Replication priority for the volume collection with the following choices: {normal | high}.  Possible values: 'normal', 'high'.. [optional]  # noqa: E501
            replication_partner ([str], none_type): List of replication partners associated with the volume collection.. [optional]  # noqa: E501
            resource_uri (str, none_type): Link to the object URI. [optional]  # noqa: E501
            schedule_list ([NimbleNsSchedule], none_type): List of schedules for this volume collection.. [optional]  # noqa: E501
            search_name (str, none_type): Name of volume collection used for object search.. [optional]  # noqa: E501
            snapcoll_count (int, none_type): Count of snapshot collections associated with volume collection.. [optional]  # noqa: E501
            srep_last_sync (int, none_type): Time when a synchronously replicated volume collection was last synchronized.. [optional]  # noqa: E501
            srep_resync_percent (int, none_type): Percentage of the resync progress for a synchronously replicated volume collection.. [optional]  # noqa: E501
            total_repl_bytes (int, none_type): Total size of volumes to be replicated for this volume collection.. [optional]  # noqa: E501
            type (str, none_type): type. [optional]  # noqa: E501
            vcenter_hostname (str, none_type): VMware vCenter hostname. Custom port number can be specified with vCenter hostname using \\\\\":\\\\\".. [optional]  # noqa: E501
            vcenter_username (str, none_type): Application VMware vCenter username.. [optional]  # noqa: E501
            volume_count (int, none_type): Count of volumes associated with the volume collection.. [optional]  # noqa: E501
            volume_list ([NimbleVolumeSummary], none_type): List of volumes associated with the volume collection.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
