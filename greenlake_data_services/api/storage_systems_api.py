"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.api_client import ApiClient, Endpoint as _Endpoint
from greenlake_data_services.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from greenlake_data_services.model.application_summary import ApplicationSummary
from greenlake_data_services.model.capacity_history import CapacityHistory
from greenlake_data_services.model.error import Error
from greenlake_data_services.model.error_response import ErrorResponse
from greenlake_data_services.model.nimble_array_details_with_request_uri import NimbleArrayDetailsWithRequestUri
from greenlake_data_services.model.nimble_array_failover_input import NimbleArrayFailoverInput
from greenlake_data_services.model.nimble_create_array_input import NimbleCreateArrayInput
from greenlake_data_services.model.nimble_edit_array_input import NimbleEditArrayInput
from greenlake_data_services.model.nimble_edit_group_input import NimbleEditGroupInput
from greenlake_data_services.model.nimble_merge_groups_input import NimbleMergeGroupsInput
from greenlake_data_services.model.nimble_new_array_list import NimbleNewArrayList
from greenlake_data_services.model.nimble_space_domain_details_with_request_uri import NimbleSpaceDomainDetailsWithRequestUri
from greenlake_data_services.model.nimble_space_domain_list import NimbleSpaceDomainList
from greenlake_data_services.model.nimble_storage_system_details_with_request_uri import NimbleStorageSystemDetailsWithRequestUri
from greenlake_data_services.model.nimble_storage_system_summary_list import NimbleStorageSystemSummaryList
from greenlake_data_services.model.nimble_uninitialized_array_input import NimbleUninitializedArrayInput
from greenlake_data_services.model.nimble_uninitialized_array_response import NimbleUninitializedArrayResponse
from greenlake_data_services.model.nimble_uninitialized_array_with_request_uri import NimbleUninitializedArrayWithRequestUri
from greenlake_data_services.model.nimblecapacity_history import NimblecapacityHistory
from greenlake_data_services.model.perf_stats import PerfStats
from greenlake_data_services.model.primera_storage_system_detail import PrimeraStorageSystemDetail
from greenlake_data_services.model.primera_storage_system_list import PrimeraStorageSystemList
from greenlake_data_services.model.qos_performance_history import QosPerformanceHistory
from greenlake_data_services.model.qos_policy import QosPolicy
from greenlake_data_services.model.recommendation import Recommendation
from greenlake_data_services.model.recommendation_input import RecommendationInput
from greenlake_data_services.model.storage_system_detail import StorageSystemDetail
from greenlake_data_services.model.storage_system_recommendation_list import StorageSystemRecommendationList
from greenlake_data_services.model.storage_system_summary_list import StorageSystemSummaryList
from greenlake_data_services.model.storage_types import StorageTypes
from greenlake_data_services.model.sys_locate_input import SysLocateInput
from greenlake_data_services.model.sys_performance_history import SysPerformanceHistory
from greenlake_data_services.model.syscapacity import Syscapacity
from greenlake_data_services.model.system_performance import SystemPerformance
from greenlake_data_services.model.system_performance_history import SystemPerformanceHistory
from greenlake_data_services.model.task_response import TaskResponse


class StorageSystemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.device_type1_application_summary_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApplicationSummary,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/application-summary',
                'operation_id': 'device_type1_application_summary_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_get_system_performance_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (SystemPerformance,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/performance-statistics',
                'operation_id': 'device_type1_get_system_performance_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_qo_s_performance_statistics_get_by_target_name_endpoint = _Endpoint(
            settings={
                'response_type': (QosPerformanceHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/targets/{targetName}/performance-history',
                'operation_id': 'device_type1_qo_s_performance_statistics_get_by_target_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'target_name',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                    'target_name',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'target_name':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'target_name': 'targetName',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'target_name': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_qo_s_policy_get_by_system_id_endpoint = _Endpoint(
            settings={
                'response_type': (QosPolicy,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/qos-policy',
                'operation_id': 'device_type1_qo_s_policy_get_by_system_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'select',
                    'range',
                    'target_name',
                    'target_type',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'target_name':
                        (str,),
                    'target_type':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'select': 'select',
                    'range': 'range',
                    'target_name': 'targetName',
                    'target_type': 'targetType',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'select': 'query',
                    'range': 'query',
                    'target_name': 'query',
                    'target_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_recommendations_get_endpoint = _Endpoint(
            settings={
                'response_type': (Recommendation,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/recommendations',
                'operation_id': 'device_type1_recommendations_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_system_capacity_history_get_endpoint = _Endpoint(
            settings={
                'response_type': (CapacityHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/capacity-history',
                'operation_id': 'device_type1_system_capacity_history_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_system_capacity_summary_get_endpoint = _Endpoint(
            settings={
                'response_type': (Syscapacity,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/capacity-summary',
                'operation_id': 'device_type1_system_capacity_summary_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_system_component_performance_statistics_get_endpoint = _Endpoint(
            settings={
                'response_type': (PerfStats,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/component-performance-statistics',
                'operation_id': 'device_type1_system_component_performance_statistics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_system_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (PrimeraStorageSystemDetail,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{id}',
                'operation_id': 'device_type1_system_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'select',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'select': 'select',
                },
                'location_map': {
                    'id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_system_performance_history_get_endpoint = _Endpoint(
            settings={
                'response_type': (SystemPerformanceHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/performance-history',
                'operation_id': 'device_type1_system_performance_history_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_systems_list_endpoint = _Endpoint(
            settings={
                'response_type': (PrimeraStorageSystemList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1',
                'operation_id': 'device_type1_systems_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_array_failover_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/arrays/{arrayId}/actions/failover',
                'operation_id': 'device_type2_array_failover',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'array_id',
                    'nimble_array_failover_input',
                ],
                'required': [
                    'system_id',
                    'array_id',
                    'nimble_array_failover_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'array_id':
                        (str,),
                    'nimble_array_failover_input':
                        (NimbleArrayFailoverInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'array_id': 'arrayId',
                },
                'location_map': {
                    'system_id': 'path',
                    'array_id': 'path',
                    'nimble_array_failover_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_create_array_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/arrays',
                'operation_id': 'device_type2_create_array',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'nimble_create_array_input',
                ],
                'required': [
                    'system_id',
                    'nimble_create_array_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'nimble_create_array_input':
                        (NimbleCreateArrayInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'nimble_create_array_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_delete_array_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/arrays/{arrayId}',
                'operation_id': 'device_type2_delete_array_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'array_id',
                ],
                'required': [
                    'system_id',
                    'array_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'array_id':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'array_id': 'arrayId',
                },
                'location_map': {
                    'system_id': 'path',
                    'array_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_edit_array_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/arrays/{arrayId}',
                'operation_id': 'device_type2_edit_array_by_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'array_id',
                    'nimble_edit_array_input',
                ],
                'required': [
                    'system_id',
                    'array_id',
                    'nimble_edit_array_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'array_id':
                        (str,),
                    'nimble_edit_array_input':
                        (NimbleEditArrayInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'array_id': 'arrayId',
                },
                'location_map': {
                    'system_id': 'path',
                    'array_id': 'path',
                    'nimble_edit_array_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_edit_storage_system_settings_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}',
                'operation_id': 'device_type2_edit_storage_system_settings_by_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'nimble_edit_group_input',
                ],
                'required': [
                    'system_id',
                    'nimble_edit_group_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'nimble_edit_group_input':
                        (NimbleEditGroupInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'nimble_edit_group_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_get_application_capacity_statistics_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleSpaceDomainDetailsWithRequestUri,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/applications/{id}/capacity-stats',
                'operation_id': 'device_type2_get_application_capacity_statistics_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_applications_capacity_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleSpaceDomainList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/applications/capacity-stats',
                'operation_id': 'device_type2_get_applications_capacity_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_storage_system_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleStorageSystemSummaryList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2',
                'operation_id': 'device_type2_get_storage_system',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_storage_system_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleStorageSystemDetailsWithRequestUri,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}',
                'operation_id': 'device_type2_get_storage_system_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_storage_system_capacity_history_endpoint = _Endpoint(
            settings={
                'response_type': (NimblecapacityHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/capacity-history',
                'operation_id': 'device_type2_get_storage_system_capacity_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_storage_system_performance_history_endpoint = _Endpoint(
            settings={
                'response_type': (SysPerformanceHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/performance-history',
                'operation_id': 'device_type2_get_storage_system_performance_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_merge_groups_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/actions/merge',
                'operation_id': 'device_type2_merge_groups',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'nimble_merge_groups_input',
                ],
                'required': [
                    'system_id',
                    'nimble_merge_groups_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'nimble_merge_groups_input':
                        (NimbleMergeGroupsInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'nimble_merge_groups_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_device_type_endpoint = _Endpoint(
            settings={
                'response_type': (StorageTypes,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/storage-types',
                'operation_id': 'get_device_type',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_device_type2_array_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleArrayDetailsWithRequestUri,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/arrays/{arrayId}',
                'operation_id': 'get_device_type2_array_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'array_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'array_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'array_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'array_id': 'arrayId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'array_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_device_type2_arrays_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleNewArrayList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/arrays',
                'operation_id': 'get_device_type2_arrays',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_device_type2_uninitialized_array_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleUninitializedArrayWithRequestUri,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/uninitialized-arrays/{uninitializedArrayId}',
                'operation_id': 'get_device_type2_uninitialized_array_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'uninitialized_array_id',
                    'nimble_uninitialized_array_input',
                    'select',
                ],
                'required': [
                    'system_id',
                    'uninitialized_array_id',
                    'nimble_uninitialized_array_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'uninitialized_array_id':
                        (str,),
                    'nimble_uninitialized_array_input':
                        (NimbleUninitializedArrayInput,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'uninitialized_array_id': 'uninitializedArrayId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'uninitialized_array_id': 'path',
                    'nimble_uninitialized_array_input': 'body',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_device_type2_uninitialized_arrays_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleUninitializedArrayResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/uninitialized-arrays',
                'operation_id': 'get_device_type2_uninitialized_arrays',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.provisioning_recommendations_endpoint = _Endpoint(
            settings={
                'response_type': (StorageSystemRecommendationList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/provisioning-recommendations',
                'operation_id': 'provisioning_recommendations',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'recommendation_input',
                ],
                'required': [
                    'recommendation_input',
                ],
                'nullable': [
                    'recommendation_input',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'recommendation_input':
                        (RecommendationInput,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'recommendation_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.system_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (StorageSystemDetail,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/{id}',
                'operation_id': 'system_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'select',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'select': 'select',
                },
                'location_map': {
                    'id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.system_locate_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{id}',
                'operation_id': 'system_locate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'sys_locate_input',
                ],
                'required': [
                    'id',
                    'sys_locate_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'sys_locate_input':
                        (SysLocateInput,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'sys_locate_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.systems_list_endpoint = _Endpoint(
            settings={
                'response_type': (StorageSystemSummaryList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems',
                'operation_id': 'systems_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def device_type1_application_summary_get(
        self,
        system_id,
        **kwargs
    ):
        """Get Application Summary for a storage system Primera / Alletra 9K  # noqa: E501

        Get Application Summary for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_application_summary_get(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApplicationSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_application_summary_get_endpoint.call_with_http_info(**kwargs)

    def device_type1_get_system_performance_statistics(
        self,
        system_id,
        **kwargs
    ):
        """Get performance statistics for a storage system Primera / Alletra 9K  # noqa: E501

        Get performance statistics for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_get_system_performance_statistics(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SystemPerformance
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_get_system_performance_statistics_endpoint.call_with_http_info(**kwargs)

    def device_type1_qo_s_performance_statistics_get_by_target_name(
        self,
        system_id,
        target_name,
        **kwargs
    ):
        """Get QoS performance trend data of Primera / Alletra 9K target identified by {targetName}  # noqa: E501

        Get QoS performance trend data of Primera / Alletra 9K target identified by {targetName}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_qo_s_performance_statistics_get_by_target_name(system_id, target_name, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            target_name (str): targetName will define the QoS target name in which query has to be made.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            QosPerformanceHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['target_name'] = \
            target_name
        return self.device_type1_qo_s_performance_statistics_get_by_target_name_endpoint.call_with_http_info(**kwargs)

    def device_type1_qo_s_policy_get_by_system_id(
        self,
        system_id,
        **kwargs
    ):
        """Get QoS policy data for a storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get QoS policy data for a storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_qo_s_policy_get_by_system_id(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            target_name (str): targetName will define the QoS target name in which query has to be made.. [optional]
            target_type (str): targetType will define the QoS target type in which query has to be made.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            QosPolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_qo_s_policy_get_by_system_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_recommendations_get(
        self,
        system_id,
        **kwargs
    ):
        """Get recommendations for a storage system Primera / Alletra 9K  # noqa: E501

        Get recommendations for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_recommendations_get(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Recommendation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_recommendations_get_endpoint.call_with_http_info(**kwargs)

    def device_type1_system_capacity_history_get(
        self,
        system_id,
        **kwargs
    ):
        """Get capacity trend data for a storage system Primera / Alletra 9K  # noqa: E501

        Get capacity trend data for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_system_capacity_history_get(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CapacityHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_system_capacity_history_get_endpoint.call_with_http_info(**kwargs)

    def device_type1_system_capacity_summary_get(
        self,
        system_id,
        **kwargs
    ):
        """Get system capacity for a storage system Primera / Alletra 9K  # noqa: E501

        Get system capacity for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_system_capacity_summary_get(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Syscapacity
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_system_capacity_summary_get_endpoint.call_with_http_info(**kwargs)

    def device_type1_system_component_performance_statistics_get(
        self,
        system_id,
        **kwargs
    ):
        """Get component performance statistics details for a storage system Primera / Alletra 9K idenfified by {systemId}  # noqa: E501

        Get component performance statistics details for a storage system Primera / Alletra 9K idenfified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_system_component_performance_statistics_get(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PerfStats
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_system_component_performance_statistics_get_endpoint.call_with_http_info(**kwargs)

    def device_type1_system_get_by_id(
        self,
        id,
        **kwargs
    ):
        """Get Primera / Alletra 9K object identified by {id}  # noqa: E501

        Get Primera / Alletra 9K object identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_system_get_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Serial number of the device-type1 storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PrimeraStorageSystemDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.device_type1_system_get_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_system_performance_history_get(
        self,
        system_id,
        **kwargs
    ):
        """Get performance trend data for a storage system Primera / Alletra 9K  # noqa: E501

        Get performance trend data for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_system_performance_history_get(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SystemPerformanceHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_system_performance_history_get_endpoint.call_with_http_info(**kwargs)

    def device_type1_systems_list(
        self,
        **kwargs
    ):
        """Get all Primera / Alletra 9K storage systems  # noqa: E501

        Get all Primera / Alletra 9K storage systems  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_systems_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter systems by Key.. [optional]
            sort (str): Query to sort the response with specified key and order. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PrimeraStorageSystemList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.device_type1_systems_list_endpoint.call_with_http_info(**kwargs)

    def device_type2_array_failover(
        self,
        system_id,
        array_id,
        nimble_array_failover_input,
        **kwargs
    ):
        """Perform failover of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Perform failover of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_array_failover(system_id, array_id, nimble_array_failover_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            array_id (str): ID of the array.
            nimble_array_failover_input (NimbleArrayFailoverInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['array_id'] = \
            array_id
        kwargs['nimble_array_failover_input'] = \
            nimble_array_failover_input
        return self.device_type2_array_failover_endpoint.call_with_http_info(**kwargs)

    def device_type2_create_array(
        self,
        system_id,
        nimble_create_array_input,
        **kwargs
    ):
        """Create Nimble / Alletra 6K array identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K array identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_create_array(system_id, nimble_create_array_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            nimble_create_array_input (NimbleCreateArrayInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['nimble_create_array_input'] = \
            nimble_create_array_input
        return self.device_type2_create_array_endpoint.call_with_http_info(**kwargs)

    def device_type2_delete_array_by_id(
        self,
        system_id,
        array_id,
        **kwargs
    ):
        """Delete Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Delete Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_delete_array_by_id(system_id, array_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            array_id (str): ID of the array.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['array_id'] = \
            array_id
        return self.device_type2_delete_array_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_edit_array_by_id(
        self,
        system_id,
        array_id,
        nimble_edit_array_input,
        **kwargs
    ):
        """Edit  details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Edit  details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_edit_array_by_id(system_id, array_id, nimble_edit_array_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            array_id (str): ID of the array.
            nimble_edit_array_input (NimbleEditArrayInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['array_id'] = \
            array_id
        kwargs['nimble_edit_array_input'] = \
            nimble_edit_array_input
        return self.device_type2_edit_array_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_edit_storage_system_settings_by_id(
        self,
        system_id,
        nimble_edit_group_input,
        **kwargs
    ):
        """Edit settings of Nimble / Alletra 6K system identified by {systemId}  # noqa: E501

        Edit settings of Nimble / Alletra 6K system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_edit_storage_system_settings_by_id(system_id, nimble_edit_group_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            nimble_edit_group_input (NimbleEditGroupInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['nimble_edit_group_input'] = \
            nimble_edit_group_input
        return self.device_type2_edit_storage_system_settings_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_application_capacity_statistics_by_id(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Get capacity stats of Application identified by {id} for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity stats of Application identified by {id} for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_application_capacity_statistics_by_id(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            id (str): ID of the application-summery. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleSpaceDomainDetailsWithRequestUri
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type2_get_application_capacity_statistics_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_applications_capacity_statistics(
        self,
        system_id,
        **kwargs
    ):
        """Get capacity stats of Applications for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity stats of Applications for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_applications_capacity_statistics(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter application summery by Key.. [optional]
            sort (str): oData query to sort application summery resource by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleSpaceDomainList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type2_get_applications_capacity_statistics_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_storage_system(
        self,
        **kwargs
    ):
        """Get all storage systems by Nimble / Alletra 6K  # noqa: E501

        Get all storage systems by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_storage_system(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter systems by Key.. [optional]
            sort (str): Lucene query to sort systems by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleStorageSystemSummaryList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.device_type2_get_storage_system_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_storage_system_by_id(
        self,
        system_id,
        **kwargs
    ):
        """Get Nimble / Alletra 6K object identified by {systemId}  # noqa: E501

        Get Nimble / Alletra 6K object identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_storage_system_by_id(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleStorageSystemDetailsWithRequestUri
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type2_get_storage_system_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_storage_system_capacity_history(
        self,
        system_id,
        **kwargs
    ):
        """Get capacity trend data for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity trend data for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_storage_system_capacity_history(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimblecapacityHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type2_get_storage_system_capacity_history_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_storage_system_performance_history(
        self,
        system_id,
        **kwargs
    ):
        """Get performance trend data for a storage system Nimble / Alletra 6K  # noqa: E501

        Get performance trend data for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_storage_system_performance_history(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SysPerformanceHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type2_get_storage_system_performance_history_endpoint.call_with_http_info(**kwargs)

    def device_type2_merge_groups(
        self,
        system_id,
        nimble_merge_groups_input,
        **kwargs
    ):
        """Perform group merge with the specified group.  # noqa: E501

        Perform group merge with the specified group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_merge_groups(system_id, nimble_merge_groups_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            nimble_merge_groups_input (NimbleMergeGroupsInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['nimble_merge_groups_input'] = \
            nimble_merge_groups_input
        return self.device_type2_merge_groups_endpoint.call_with_http_info(**kwargs)

    def get_device_type(
        self,
        **kwargs
    ):
        """Get all device types  # noqa: E501

        Get all device types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_type(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StorageTypes
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_device_type_endpoint.call_with_http_info(**kwargs)

    def get_device_type2_array_by_id(
        self,
        system_id,
        array_id,
        **kwargs
    ):
        """Get details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Get details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_type2_array_by_id(system_id, array_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            array_id (str): ID of the array.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleArrayDetailsWithRequestUri
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['array_id'] = \
            array_id
        return self.get_device_type2_array_by_id_endpoint.call_with_http_info(**kwargs)

    def get_device_type2_arrays(
        self,
        system_id,
        **kwargs
    ):
        """Get all arrays details by Nimble / Alletra 6K  # noqa: E501

        Get all arrays details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_type2_arrays(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter array by Key.. [optional]
            sort (str): oData query to sort array resource by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleNewArrayList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.get_device_type2_arrays_endpoint.call_with_http_info(**kwargs)

    def get_device_type2_uninitialized_array_by_id(
        self,
        system_id,
        uninitialized_array_id,
        nimble_uninitialized_array_input,
        **kwargs
    ):
        """Get  uninitialized arrays details by Nimble / Alletra 6K  identified  by {uninitializedArrayId}  # noqa: E501

        Get uninitialized arrays details by Nimble / Alletra 6K identified  by {uninitializedArrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_type2_uninitialized_array_by_id(system_id, uninitialized_array_id, nimble_uninitialized_array_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            uninitialized_array_id (str): ID of the uninitialized Array.A 42 digit hexadecimal number.
            nimble_uninitialized_array_input (NimbleUninitializedArrayInput):

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleUninitializedArrayWithRequestUri
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['uninitialized_array_id'] = \
            uninitialized_array_id
        kwargs['nimble_uninitialized_array_input'] = \
            nimble_uninitialized_array_input
        return self.get_device_type2_uninitialized_array_by_id_endpoint.call_with_http_info(**kwargs)

    def get_device_type2_uninitialized_arrays(
        self,
        system_id,
        **kwargs
    ):
        """Get all uninitialized arrays details by Nimble / Alletra 6K  # noqa: E501

        Get all uninitialized arrays details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_type2_uninitialized_arrays(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleUninitializedArrayResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.get_device_type2_uninitialized_arrays_endpoint.call_with_http_info(**kwargs)

    def provisioning_recommendations(
        self,
        recommendation_input,
        **kwargs
    ):
        """provisioning recommendations  # noqa: E501

        provisioning recommendations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.provisioning_recommendations(recommendation_input, async_req=True)
        >>> result = thread.get()

        Args:
            recommendation_input (RecommendationInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StorageSystemRecommendationList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['recommendation_input'] = \
            recommendation_input
        return self.provisioning_recommendations_endpoint.call_with_http_info(**kwargs)

    def system_get_by_id(
        self,
        id,
        **kwargs
    ):
        """Get storage system object identified by {id}  # noqa: E501

        Get storage system object identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.system_get_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Serial number of the device-type1 storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StorageSystemDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.system_get_by_id_endpoint.call_with_http_info(**kwargs)

    def system_locate(
        self,
        id,
        sys_locate_input,
        **kwargs
    ):
        """Locate system of Primera / Alletra 9K  # noqa: E501

        Locate system of Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.system_locate(id, sys_locate_input, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Serial number of the device-type1 storage system
            sys_locate_input (SysLocateInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['sys_locate_input'] = \
            sys_locate_input
        return self.system_locate_endpoint.call_with_http_info(**kwargs)

    def systems_list(
        self,
        **kwargs
    ):
        """Get all storage systems  # noqa: E501

        Get all storage systems  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.systems_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter systems by Key.. [optional]
            sort (str): Query to sort the response with specified key and order. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StorageSystemSummaryList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.systems_list_endpoint.call_with_http_info(**kwargs)

