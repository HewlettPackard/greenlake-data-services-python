"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.api_client import ApiClient, Endpoint as _Endpoint
from greenlake_data_services.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from greenlake_data_services.model.error import Error
from greenlake_data_services.model.error_response import ErrorResponse
from greenlake_data_services.model.nimble_edit_fc_interface_input import NimbleEditFCInterfaceInput
from greenlake_data_services.model.nimble_fc_session_details_with_request_uri import NimbleFCSessionDetailsWithRequestUri
from greenlake_data_services.model.nimble_fc_session_list import NimbleFCSessionList
from greenlake_data_services.model.nimble_network_interface_list import NimbleNetworkInterfaceList
from greenlake_data_services.model.nimble_network_interface_with_request_uri import NimbleNetworkInterfaceWithRequestUri
from greenlake_data_services.model.nimble_port_details import NimblePortDetails
from greenlake_data_services.model.nimble_ports_list import NimblePortsList
from greenlake_data_services.model.port_clear_input import PortClearInput
from greenlake_data_services.model.port_details import PortDetails
from greenlake_data_services.model.port_enable_input import PortEnableInput
from greenlake_data_services.model.port_fc_edit import PortFCEdit
from greenlake_data_services.model.port_iscsi_edit import PortISCSIEdit
from greenlake_data_services.model.port_iscsi_ping import PortISCSIPing
from greenlake_data_services.model.port_rcip_edit import PortRCIPEdit
from greenlake_data_services.model.port_rcip_ping import PortRCIPPing
from greenlake_data_services.model.ports_summary_list import PortsSummaryList
from greenlake_data_services.model.task_response import TaskResponse


class PortsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.device_type1_fc_port_edit_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/fc',
                'operation_id': 'device_type1_fc_port_edit',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'port_fc_edit',
                ],
                'required': [
                    'system_id',
                    'id',
                    'port_fc_edit',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'port_fc_edit':
                        (PortFCEdit,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'port_fc_edit': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_iscsi_port_edit_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/edit-iscsi',
                'operation_id': 'device_type1_iscsi_port_edit',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'port_iscsi_edit',
                ],
                'required': [
                    'system_id',
                    'id',
                    'port_iscsi_edit',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'port_iscsi_edit':
                        (PortISCSIEdit,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'port_iscsi_edit': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_iscsi_port_ping_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/ping-iscsi',
                'operation_id': 'device_type1_iscsi_port_ping',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'port_iscsi_ping',
                ],
                'required': [
                    'system_id',
                    'id',
                    'port_iscsi_ping',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'port_iscsi_ping':
                        (PortISCSIPing,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'port_iscsi_ping': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_ports_clear_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/clear',
                'operation_id': 'device_type1_ports_clear',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'port_clear_input',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                    'port_clear_input',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'port_clear_input':
                        (PortClearInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'port_clear_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_ports_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (PortDetails,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}',
                'operation_id': 'device_type1_ports_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_ports_list_endpoint = _Endpoint(
            settings={
                'response_type': (PortsSummaryList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports',
                'operation_id': 'device_type1_ports_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_rcip_port_edit_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/edit-rcip',
                'operation_id': 'device_type1_rcip_port_edit',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'port_rcip_edit',
                ],
                'required': [
                    'system_id',
                    'id',
                    'port_rcip_edit',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'port_rcip_edit':
                        (PortRCIPEdit,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'port_rcip_edit': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_rcip_port_ping_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/ping-rcip',
                'operation_id': 'device_type1_rcip_port_ping',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'port_rcip_ping',
                ],
                'required': [
                    'system_id',
                    'id',
                    'port_rcip_ping',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'port_rcip_ping':
                        (PortRCIPPing,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'port_rcip_ping': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_edit_fc_port_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/ports/{portId}',
                'operation_id': 'device_type2_edit_fc_port',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'port_id',
                    'nimble_edit_fc_interface_input',
                ],
                'required': [
                    'system_id',
                    'port_id',
                    'nimble_edit_fc_interface_input',
                ],
                'nullable': [
                    'nimble_edit_fc_interface_input',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'port_id':
                        (str,),
                    'nimble_edit_fc_interface_input':
                        (NimbleEditFCInterfaceInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'port_id': 'portId',
                },
                'location_map': {
                    'system_id': 'path',
                    'port_id': 'path',
                    'nimble_edit_fc_interface_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_get_all_fibre_channel_sessions_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleFCSessionList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/fibre-channel-sessions',
                'operation_id': 'device_type2_get_all_fibre_channel_sessions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_all_ports_endpoint = _Endpoint(
            settings={
                'response_type': (NimblePortsList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/ports',
                'operation_id': 'device_type2_get_all_ports',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_fibre_channel_session_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleFCSessionDetailsWithRequestUri,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/fibre-channel-sessions/{fcSessionId}',
                'operation_id': 'device_type2_get_fibre_channel_session_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'fc_session_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'fc_session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'fc_session_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'fc_session_id': 'fcSessionId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'fc_session_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_port_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimblePortDetails,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/ports/{portId}',
                'operation_id': 'device_type2_get_port_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'port_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'port_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'port_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'port_id': 'portId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'port_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_device_type2_network_interface_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleNetworkInterfaceWithRequestUri,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/network-interfaces/{networkInterfaceId}',
                'operation_id': 'get_device_type2_network_interface_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'network_interface_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'network_interface_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'network_interface_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'network_interface_id': 'networkInterfaceId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'network_interface_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_device_type2_network_interfaces_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleNetworkInterfaceList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/network-interfaces',
                'operation_id': 'get_device_type2_network_interfaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.initialise_ports_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/initialize',
                'operation_id': 'initialise_ports',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.port_enable_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}',
                'operation_id': 'port_enable',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'port_enable_input',
                ],
                'required': [
                    'system_id',
                    'id',
                    'port_enable_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'port_enable_input':
                        (PortEnableInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'port_enable_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def device_type1_fc_port_edit(
        self,
        system_id,
        id,
        port_fc_edit,
        **kwargs
    ):
        """Edit ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_fc_port_edit(system_id, id, port_fc_edit, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port
            port_fc_edit (PortFCEdit):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['port_fc_edit'] = \
            port_fc_edit
        return self.device_type1_fc_port_edit_endpoint.call_with_http_info(**kwargs)

    def device_type1_iscsi_port_edit(
        self,
        system_id,
        id,
        port_iscsi_edit,
        **kwargs
    ):
        """Edit iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_iscsi_port_edit(system_id, id, port_iscsi_edit, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port
            port_iscsi_edit (PortISCSIEdit):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['port_iscsi_edit'] = \
            port_iscsi_edit
        return self.device_type1_iscsi_port_edit_endpoint.call_with_http_info(**kwargs)

    def device_type1_iscsi_port_ping(
        self,
        system_id,
        id,
        port_iscsi_ping,
        **kwargs
    ):
        """Ping iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Ping iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_iscsi_port_ping(system_id, id, port_iscsi_ping, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port
            port_iscsi_ping (PortISCSIPing):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['port_iscsi_ping'] = \
            port_iscsi_ping
        return self.device_type1_iscsi_port_ping_endpoint.call_with_http_info(**kwargs)

    def device_type1_ports_clear(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Clear the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Clear the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_ports_clear(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port

        Keyword Args:
            port_clear_input (PortClearInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type1_ports_clear_endpoint.call_with_http_info(**kwargs)

    def device_type1_ports_get_by_id(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Get details of Primera / Alletra 9K Port identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K Port identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_ports_get_by_id(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PortDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type1_ports_get_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_ports_list(
        self,
        system_id,
        **kwargs
    ):
        """Get details of Primera / Alletra 9K Ports  # noqa: E501

        Get details of Primera / Alletra 9K Ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_ports_list(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter ports by Key.. [optional]
            sort (str): oData query to sort ports by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PortsSummaryList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        return self.device_type1_ports_list_endpoint.call_with_http_info(**kwargs)

    def device_type1_rcip_port_edit(
        self,
        system_id,
        id,
        port_rcip_edit,
        **kwargs
    ):
        """Edit rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_rcip_port_edit(system_id, id, port_rcip_edit, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port
            port_rcip_edit (PortRCIPEdit):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['port_rcip_edit'] = \
            port_rcip_edit
        return self.device_type1_rcip_port_edit_endpoint.call_with_http_info(**kwargs)

    def device_type1_rcip_port_ping(
        self,
        system_id,
        id,
        port_rcip_ping,
        **kwargs
    ):
        """Ping rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Ping rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_rcip_port_ping(system_id, id, port_rcip_ping, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port
            port_rcip_ping (PortRCIPPing):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['port_rcip_ping'] = \
            port_rcip_ping
        return self.device_type1_rcip_port_ping_endpoint.call_with_http_info(**kwargs)

    def device_type2_edit_fc_port(
        self,
        system_id,
        port_id,
        nimble_edit_fc_interface_input,
        **kwargs
    ):
        """Edit Nimble FC Port of Nimble / Alletra 6K  # noqa: E501

        Edit Nimble FC Port of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_edit_fc_port(system_id, port_id, nimble_edit_fc_interface_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            port_id (str): Identifier of port. A 42 digit hexadecimal number.
            nimble_edit_fc_interface_input (NimbleEditFCInterfaceInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['port_id'] = \
            port_id
        kwargs['nimble_edit_fc_interface_input'] = \
            nimble_edit_fc_interface_input
        return self.device_type2_edit_fc_port_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_all_fibre_channel_sessions(
        self,
        system_id,
        **kwargs
    ):
        """Get all fibre channel sessions details of Nimble / Alletra 6K  # noqa: E501

        Get all fibre channel sessions details of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_all_fibre_channel_sessions(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter Fibre Channel Sessions by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NimbleFCSessionList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        return self.device_type2_get_all_fibre_channel_sessions_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_all_ports(
        self,
        system_id,
        **kwargs
    ):
        """Get all ports details of Nimble / Alletra 6K  # noqa: E501

        Get all ports details of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_all_ports(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter fibre channel interface ports by Key.. [optional]
            sort (str): oData query to sort fibre channel interface ports resource by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NimblePortsList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        return self.device_type2_get_all_ports_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_fibre_channel_session_by_id(
        self,
        system_id,
        fc_session_id,
        **kwargs
    ):
        """Get fibre channel session details of Nimble / Alletra 6K identified by {fcSessionId}.  # noqa: E501

        Get fibre channel session details of Nimble / Alletra 6K identified by {fcSessionId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_fibre_channel_session_by_id(system_id, fc_session_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            fc_session_id (str): ID of the Fibre Channel Session. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NimbleFCSessionDetailsWithRequestUri
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['fc_session_id'] = \
            fc_session_id
        return self.device_type2_get_fibre_channel_session_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_port_by_id(
        self,
        system_id,
        port_id,
        **kwargs
    ):
        """Get details of Nimble / Alletra 6K Port identified by {portId}. Fibre_channel_interfaces attributes will be shown for Fibre_channel_interface ports. Network_interfaces attributes will be shown for Network_interface ports.  # noqa: E501

        Get details of Nimble / Alletra 6K Port identified by {portId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_port_by_id(system_id, port_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            port_id (str): Identifier of port. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NimblePortDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['port_id'] = \
            port_id
        return self.device_type2_get_port_by_id_endpoint.call_with_http_info(**kwargs)

    def get_device_type2_network_interface_by_id(
        self,
        system_id,
        network_interface_id,
        **kwargs
    ):
        """Get all network interfaces details by Nimble / Alletra 6K identified  by {networkInterfaceId}  # noqa: E501

        Get all network interfaces details by Nimble / Alletra 6K identified by {networkInterfaceId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_type2_network_interface_by_id(system_id, network_interface_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            network_interface_id (str): ID of the Network Interface. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NimbleNetworkInterfaceWithRequestUri
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['network_interface_id'] = \
            network_interface_id
        return self.get_device_type2_network_interface_by_id_endpoint.call_with_http_info(**kwargs)

    def get_device_type2_network_interfaces(
        self,
        system_id,
        **kwargs
    ):
        """Get all network interfaces details by Nimble / Alletra 6K  # noqa: E501

        Get all network interfaces details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_type2_network_interfaces(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter Network Interface by Key.. [optional]
            sort (str): oData query to sort Network Interface resource by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NimbleNetworkInterfaceList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        return self.get_device_type2_network_interfaces_endpoint.call_with_http_info(**kwargs)

    def initialise_ports(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Initialize the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Initialize the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initialise_ports(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.initialise_ports_endpoint.call_with_http_info(**kwargs)

    def port_enable(
        self,
        system_id,
        id,
        port_enable_input,
        **kwargs
    ):
        """Port enable disable identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Port enable disable identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.port_enable(system_id, id, port_enable_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID of the port
            port_enable_input (PortEnableInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['port_enable_input'] = \
            port_enable_input
        return self.port_enable_endpoint.call_with_http_info(**kwargs)

