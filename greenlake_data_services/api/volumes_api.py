"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from greenlake_data_services.api_client import ApiClient, Endpoint as _Endpoint
from greenlake_data_services.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from greenlake_data_services.model.create_clone_snapshot_input import CreateCloneSnapshotInput
from greenlake_data_services.model.create_clone_volume_input import CreateCloneVolumeInput
from greenlake_data_services.model.create_volume_input import CreateVolumeInput
from greenlake_data_services.model.error import Error
from greenlake_data_services.model.error_response import ErrorResponse
from greenlake_data_services.model.export_input import ExportInput
from greenlake_data_services.model.fleet_volume_details import FleetVolumeDetails
from greenlake_data_services.model.fleet_volumes_list import FleetVolumesList
from greenlake_data_services.model.nimble_access_control_record_details_with_request_uri import NimbleAccessControlRecordDetailsWithRequestUri
from greenlake_data_services.model.nimble_access_control_record_list import NimbleAccessControlRecordList
from greenlake_data_services.model.nimble_clone_volume_input import NimbleCloneVolumeInput
from greenlake_data_services.model.nimble_create_access_control_record_input import NimbleCreateAccessControlRecordInput
from greenlake_data_services.model.nimble_create_snapshot_input import NimbleCreateSnapshotInput
from greenlake_data_services.model.nimble_create_volume_input import NimbleCreateVolumeInput
from greenlake_data_services.model.nimble_create_volumes_workflow_input import NimbleCreateVolumesWorkflowInput
from greenlake_data_services.model.nimble_edit_multiple_snapshot_input import NimbleEditMultipleSnapshotInput
from greenlake_data_services.model.nimble_edit_volume_input import NimbleEditVolumeInput
from greenlake_data_services.model.nimble_host_review_input import NimbleHostReviewInput
from greenlake_data_services.model.nimble_host_review_output import NimbleHostReviewOutput
from greenlake_data_services.model.nimble_move_volume_to_another_pool_input import NimbleMoveVolumeToAnotherPoolInput
from greenlake_data_services.model.nimble_restore_volume_input import NimbleRestoreVolumeInput
from greenlake_data_services.model.nimble_snapshot_details import NimbleSnapshotDetails
from greenlake_data_services.model.nimble_snapshot_list import NimbleSnapshotList
from greenlake_data_services.model.nimble_volume_details import NimbleVolumeDetails
from greenlake_data_services.model.nimble_volumes_list import NimbleVolumesList
from greenlake_data_services.model.nimblevolume_capacity_history import NimblevolumeCapacityHistory
from greenlake_data_services.model.nimblevolume_performance_history import NimblevolumePerformanceHistory
from greenlake_data_services.model.primera_volume_details import PrimeraVolumeDetails
from greenlake_data_services.model.primera_volumes_list import PrimeraVolumesList
from greenlake_data_services.model.promote_clone_input import PromoteCloneInput
from greenlake_data_services.model.promote_snapshot_input import PromoteSnapshotInput
from greenlake_data_services.model.resync_clone_volume_input import ResyncCloneVolumeInput
from greenlake_data_services.model.snapshots_list_single import SnapshotsListSingle
from greenlake_data_services.model.snapshots_summary_list import SnapshotsSummaryList
from greenlake_data_services.model.task_response import TaskResponse
from greenlake_data_services.model.un_export_input import UnExportInput
from greenlake_data_services.model.un_export_vlun import UnExportVlun
from greenlake_data_services.model.vluns_create_input import VlunsCreateInput
from greenlake_data_services.model.vluns_list_single import VlunsListSingle
from greenlake_data_services.model.vluns_summary_list import VlunsSummaryList
from greenlake_data_services.model.vol_performance import VolPerformance
from greenlake_data_services.model.volume_capacity_history import VolumeCapacityHistory
from greenlake_data_services.model.volume_performance import VolumePerformance
from greenlake_data_services.model.volume_performance_history import VolumePerformanceHistory
from greenlake_data_services.model.volume_post import VolumePost
from greenlake_data_services.model.volume_put import VolumePut


class VolumesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.device_type1_get_clones_endpoint = _Endpoint(
            settings={
                'response_type': (PrimeraVolumesList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/clones',
                'operation_id': 'device_type1_get_clones',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_promote_clone_volume_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/clones/{cloneId}/promote',
                'operation_id': 'device_type1_promote_clone_volume',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'clone_id',
                    'promote_clone_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'clone_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'clone_id':
                        (str,),
                    'promote_clone_input':
                        (PromoteCloneInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'clone_id': 'cloneId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'clone_id': 'path',
                    'promote_clone_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_promote_snapshot_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}',
                'operation_id': 'device_type1_promote_snapshot',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'promote_snapshot_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'promote_snapshot_input':
                        (PromoteSnapshotInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'snapshot_id': 'path',
                    'promote_snapshot_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_resync_clone_volume_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/clones/{cloneId}/resync',
                'operation_id': 'device_type1_resync_clone_volume',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'clone_id',
                    'resync_clone_volume_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'clone_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'clone_id':
                        (str,),
                    'resync_clone_volume_input':
                        (ResyncCloneVolumeInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'clone_id': 'cloneId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'clone_id': 'path',
                    'resync_clone_volume_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_snapshots_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (SnapshotsListSingle,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}',
                'operation_id': 'device_type1_snapshots_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'snapshot_id': 'snapshotId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'snapshot_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_vlun_export_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/export',
                'operation_id': 'device_type1_vlun_export',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'vluns_create_input',
                ],
                'required': [
                    'system_id',
                    'id',
                    'vluns_create_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'vluns_create_input':
                        (VlunsCreateInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'vluns_create_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_vlun_export_for_snapshot_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/snapshots/{snapshotId}/export',
                'operation_id': 'device_type1_vlun_export_for_snapshot',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'snapshot_id',
                    'vluns_create_input',
                ],
                'required': [
                    'system_id',
                    'snapshot_id',
                    'vluns_create_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'vluns_create_input':
                        (VlunsCreateInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'system_id': 'path',
                    'snapshot_id': 'path',
                    'vluns_create_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_vlun_unexport_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/un-export',
                'operation_id': 'device_type1_vlun_unexport',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'un_export_vlun',
                ],
                'required': [
                    'system_id',
                    'id',
                    'un_export_vlun',
                ],
                'nullable': [
                    'un_export_vlun',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'un_export_vlun':
                        (UnExportVlun,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'un_export_vlun': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_vlun_unexport_for_snapshot_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/snapshots/{snapshotId}/un-export',
                'operation_id': 'device_type1_vlun_unexport_for_snapshot',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'snapshot_id',
                    'un_export_vlun',
                ],
                'required': [
                    'system_id',
                    'snapshot_id',
                    'un_export_vlun',
                ],
                'nullable': [
                    'un_export_vlun',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'un_export_vlun':
                        (UnExportVlun,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'system_id': 'path',
                    'snapshot_id': 'path',
                    'un_export_vlun': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type1_vluns_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (VlunsListSingle,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/vluns/{id}',
                'operation_id': 'device_type1_vluns_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'id': 'id',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_vluns_list_endpoint = _Endpoint(
            settings={
                'response_type': (VlunsSummaryList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/vluns',
                'operation_id': 'device_type1_vluns_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'select',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'select':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'select': 'select',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'select': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_volume_capacity_history_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (VolumeCapacityHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/capacity-history',
                'operation_id': 'device_type1_volume_capacity_history_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_volume_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (PrimeraVolumeDetails,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}',
                'operation_id': 'device_type1_volume_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_volume_performance_history_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (VolumePerformanceHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/performance-history',
                'operation_id': 'device_type1_volume_performance_history_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_volume_performance_statistics_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (VolumePerformance,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/performance-statistics',
                'operation_id': 'device_type1_volume_performance_statistics_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_volume_snapshots_list_endpoint = _Endpoint(
            settings={
                'response_type': (SnapshotsSummaryList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/snapshots',
                'operation_id': 'device_type1_volume_snapshots_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type1_volumes_list_endpoint = _Endpoint(
            settings={
                'response_type': (PrimeraVolumesList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes',
                'operation_id': 'device_type1_volumes_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_access_control_record_create_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/access-control-records',
                'operation_id': 'device_type2_access_control_record_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'nimble_create_access_control_record_input',
                ],
                'required': [
                    'system_id',
                    'nimble_create_access_control_record_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'nimble_create_access_control_record_input':
                        (NimbleCreateAccessControlRecordInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'nimble_create_access_control_record_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_clone_volume_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/clone',
                'operation_id': 'device_type2_clone_volume_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'nimble_clone_volume_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'nimble_clone_volume_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'nimble_clone_volume_input':
                        (NimbleCloneVolumeInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'nimble_clone_volume_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_delete_snapshot_access_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}/un-export',
                'operation_id': 'device_type2_delete_snapshot_access_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'un_export_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'un_export_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'un_export_input':
                        (UnExportInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'snapshot_id': 'path',
                    'un_export_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_delete_volume_access_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/un-export',
                'operation_id': 'device_type2_delete_volume_access_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'un_export_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'un_export_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'un_export_input':
                        (UnExportInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'un_export_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_edit_snapshot_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/snapshots/actions/update',
                'operation_id': 'device_type2_edit_snapshot_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'nimble_edit_multiple_snapshot_input',
                ],
                'required': [
                    'system_id',
                    'nimble_edit_multiple_snapshot_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'nimble_edit_multiple_snapshot_input':
                        (NimbleEditMultipleSnapshotInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'nimble_edit_multiple_snapshot_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_edit_volume_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}',
                'operation_id': 'device_type2_edit_volume_by_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'nimble_edit_volume_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'nimble_edit_volume_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'nimble_edit_volume_input':
                        (NimbleEditVolumeInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'nimble_edit_volume_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_get_access_control_record_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleAccessControlRecordDetailsWithRequestUri,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/access-control-records/{accessControlRecordId}',
                'operation_id': 'device_type2_get_access_control_record_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'access_control_record_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'access_control_record_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'access_control_record_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'access_control_record_id': 'accessControlRecordId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'access_control_record_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_all_access_control_records_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleAccessControlRecordList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/access-control-records',
                'operation_id': 'device_type2_get_all_access_control_records',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_all_snapshots_by_volume_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleSnapshotList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots',
                'operation_id': 'device_type2_get_all_snapshots_by_volume_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_all_volumes_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleVolumesList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes',
                'operation_id': 'device_type2_get_all_volumes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_snapshot_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleSnapshotDetails,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}',
                'operation_id': 'device_type2_get_snapshot_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'snapshot_id': 'snapshotId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'snapshot_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_volume_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleVolumeDetails,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}',
                'operation_id': 'device_type2_get_volume_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_volume_capacity_history_endpoint = _Endpoint(
            settings={
                'response_type': (NimblevolumeCapacityHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/capacity-history',
                'operation_id': 'device_type2_get_volume_capacity_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_volume_performance_history_endpoint = _Endpoint(
            settings={
                'response_type': (NimblevolumePerformanceHistory,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/performance-history',
                'operation_id': 'device_type2_get_volume_performance_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'select',
                    'range',
                    'time_interval_min',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_interval_min',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('time_interval_min',): {

                        "5": 5,
                        "60": 60,
                        "1440": 1440,
                        "10080": 10080
                    },
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'select':
                        (str,),
                    'range':
                        (str,),
                    'time_interval_min':
                        (int,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'select': 'select',
                    'range': 'range',
                    'time_interval_min': 'timeIntervalMin',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'select': 'query',
                    'range': 'query',
                    'time_interval_min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_get_volume_performance_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (VolPerformance,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/performance-statistics',
                'operation_id': 'device_type2_get_volume_performance_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'select',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_move_volume_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/actions/move',
                'operation_id': 'device_type2_move_volume',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'nimble_move_volume_to_another_pool_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'nimble_move_volume_to_another_pool_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'nimble_move_volume_to_another_pool_input':
                        (NimbleMoveVolumeToAnotherPoolInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'nimble_move_volume_to_another_pool_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_provisioning_review_endpoint = _Endpoint(
            settings={
                'response_type': (NimbleHostReviewOutput,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/provisioning-review',
                'operation_id': 'device_type2_provisioning_review',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'nimble_host_review_input',
                ],
                'required': [
                    'system_id',
                    'nimble_host_review_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'nimble_host_review_input':
                        (NimbleHostReviewInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'nimble_host_review_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_provisioning_worklow_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/provisioning',
                'operation_id': 'device_type2_provisioning_worklow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'nimble_create_volumes_workflow_input',
                ],
                'required': [
                    'system_id',
                    'nimble_create_volumes_workflow_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'nimble_create_volumes_workflow_input':
                        (NimbleCreateVolumesWorkflowInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'nimble_create_volumes_workflow_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_remove_access_control_record_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/access-control-records/{accessControlRecordId}',
                'operation_id': 'device_type2_remove_access_control_record_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'access_control_record_id',
                ],
                'required': [
                    'system_id',
                    'access_control_record_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'access_control_record_id':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'access_control_record_id': 'accessControlRecordId',
                },
                'location_map': {
                    'system_id': 'path',
                    'access_control_record_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_remove_snapshot_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}',
                'operation_id': 'device_type2_remove_snapshot_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'force',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'snapshot_id': 'snapshotId',
                    'force': 'force',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'snapshot_id': 'path',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_remove_volume_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}',
                'operation_id': 'device_type2_remove_volume_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'offline',
                    'force',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'offline':
                        (bool,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'offline': 'offline',
                    'force': 'force',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'offline': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.device_type2_restore_volume_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/actions/restore',
                'operation_id': 'device_type2_restore_volume_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'nimble_restore_volume_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'nimble_restore_volume_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'nimble_restore_volume_input':
                        (NimbleRestoreVolumeInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'nimble_restore_volume_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_snapshot_create_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots',
                'operation_id': 'device_type2_snapshot_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'nimble_create_snapshot_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'nimble_create_snapshot_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'nimble_create_snapshot_input':
                        (NimbleCreateSnapshotInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'nimble_create_snapshot_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_snapshot_export_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}/export',
                'operation_id': 'device_type2_snapshot_export',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'export_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'export_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'export_input':
                        (ExportInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'snapshot_id': 'path',
                    'export_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_volumes_create_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes',
                'operation_id': 'device_type2_volumes_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'nimble_create_volume_input',
                ],
                'required': [
                    'system_id',
                    'nimble_create_volume_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'nimble_create_volume_input':
                        (NimbleCreateVolumeInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'nimble_create_volume_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.device_type2_volumes_export_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/export',
                'operation_id': 'device_type2_volumes_export',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'export_input',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'export_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'export_input':
                        (ExportInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'export_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.snapshot_clone_create_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/snapshots/{snapshotId}/clone',
                'operation_id': 'snapshot_clone_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'snapshot_id',
                    'create_clone_snapshot_input',
                ],
                'required': [
                    'system_id',
                    'snapshot_id',
                    'create_clone_snapshot_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'create_clone_snapshot_input':
                        (CreateCloneSnapshotInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'system_id': 'path',
                    'snapshot_id': 'path',
                    'create_clone_snapshot_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.vluns_delete_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/vluns/{id}',
                'operation_id': 'vluns_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'id',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.volume_clone_create_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/clone',
                'operation_id': 'volume_clone_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'create_clone_volume_input',
                ],
                'required': [
                    'system_id',
                    'id',
                    'create_clone_volume_input',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'create_clone_volume_input':
                        (CreateCloneVolumeInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'create_clone_volume_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.volume_create_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes',
                'operation_id': 'volume_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'create_volume_input',
                ],
                'required': [
                    'system_id',
                    'create_volume_input',
                ],
                'nullable': [
                    'create_volume_input',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'create_volume_input':
                        (CreateVolumeInput,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                },
                'location_map': {
                    'system_id': 'path',
                    'create_volume_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.volume_delete_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}',
                'operation_id': 'volume_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'un_export',
                    'cascade',
                ],
                'required': [
                    'system_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'un_export':
                        (bool,),
                    'cascade':
                        (bool,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                    'un_export': 'unExport',
                    'cascade': 'cascade',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'un_export': 'query',
                    'cascade': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.volume_edit_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}',
                'operation_id': 'volume_edit',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'volume_put',
                ],
                'required': [
                    'system_id',
                    'id',
                    'volume_put',
                ],
                'nullable': [
                    'volume_put',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'volume_put':
                        (VolumePut,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'volume_put': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.volume_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (FleetVolumeDetails,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/volumes/{id}',
                'operation_id': 'volume_get_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'select',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'select': 'select',
                },
                'location_map': {
                    'id': 'path',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.volume_list_for_system_by_system_id_endpoint = _Endpoint(
            settings={
                'response_type': (FleetVolumesList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/{systemId}/volumes',
                'operation_id': 'volume_list_for_system_by_system_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'system_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.volume_snapshot_create_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/snapshots',
                'operation_id': 'volume_snapshot_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'id',
                    'volume_post',
                ],
                'required': [
                    'system_id',
                    'id',
                    'volume_post',
                ],
                'nullable': [
                    'volume_post',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'id':
                        (str,),
                    'volume_post':
                        (VolumePost,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'id': 'id',
                },
                'location_map': {
                    'system_id': 'path',
                    'id': 'path',
                    'volume_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.volume_snapshot_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TaskResponse,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}',
                'operation_id': 'volume_snapshot_get_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                    'force',
                ],
                'required': [
                    'system_id',
                    'volume_id',
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_id':
                        (str,),
                    'volume_id':
                        (str,),
                    'snapshot_id':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'system_id': 'systemId',
                    'volume_id': 'volumeId',
                    'snapshot_id': 'snapshotId',
                    'force': 'force',
                },
                'location_map': {
                    'system_id': 'path',
                    'volume_id': 'path',
                    'snapshot_id': 'path',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.volumes_list_endpoint = _Endpoint(
            settings={
                'response_type': (FleetVolumesList,),
                'auth': [
                    'JWTAuth'
                ],
                'endpoint_path': '/api/v1/volumes',
                'operation_id': 'volumes_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'filter',
                    'sort',
                    'select',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'filter':
                        (str,),
                    'sort':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                    'filter': 'filter',
                    'sort': 'sort',
                    'select': 'select',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'filter': 'query',
                    'sort': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def device_type1_get_clones(
        self,
        system_id,
        volume_id,
        **kwargs
    ):
        """Get the details of the clone volumes associated with a base volume identified by {volumeId} for Primera / Alletra 9K systems.  # noqa: E501

        Get the details of the clone volumes associated with a base volume identified by {volumeId} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_get_clones(system_id, volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            volume_id (str): UID(volumeuid) of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter by Key.. [optional]
            sort (str): oData query to sort by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PrimeraVolumesList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        return self.device_type1_get_clones_endpoint.call_with_http_info(**kwargs)

    def device_type1_promote_clone_volume(
        self,
        system_id,
        volume_id,
        clone_id,
        **kwargs
    ):
        """Promote a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Promote a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_promote_clone_volume(system_id, volume_id, clone_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            volume_id (str): UID(volumeuid) of the storage system
            clone_id (str): UID of the clone

        Keyword Args:
            promote_clone_input (PromoteCloneInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['clone_id'] = \
            clone_id
        return self.device_type1_promote_clone_volume_endpoint.call_with_http_info(**kwargs)

    def device_type1_promote_snapshot(
        self,
        system_id,
        volume_id,
        snapshot_id,
        **kwargs
    ):
        """Promote a snapshot identified by {snapshotId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Promote a snapshot identified by {snapshotId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_promote_snapshot(system_id, volume_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            volume_id (str): UID(volumeuid) of the storage system
            snapshot_id (str): UID of the snapshots

        Keyword Args:
            promote_snapshot_input (PromoteSnapshotInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['snapshot_id'] = \
            snapshot_id
        return self.device_type1_promote_snapshot_endpoint.call_with_http_info(**kwargs)

    def device_type1_resync_clone_volume(
        self,
        system_id,
        volume_id,
        clone_id,
        **kwargs
    ):
        """Resynchronize a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Resynchronize a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_resync_clone_volume(system_id, volume_id, clone_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            volume_id (str): UID(volumeuid) of the storage system
            clone_id (str): UID of the clone

        Keyword Args:
            resync_clone_volume_input (ResyncCloneVolumeInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['clone_id'] = \
            clone_id
        return self.device_type1_resync_clone_volume_endpoint.call_with_http_info(**kwargs)

    def device_type1_snapshots_get_by_id(
        self,
        system_id,
        volume_id,
        snapshot_id,
        **kwargs
    ):
        """Get details of snapshot identified by {snapshotId} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_snapshots_get_by_id(system_id, volume_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            volume_id (str): UID(volumeuid) of the storage system
            snapshot_id (str): UID of the snapshots

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SnapshotsListSingle
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['snapshot_id'] = \
            snapshot_id
        return self.device_type1_snapshots_get_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_vlun_export(
        self,
        system_id,
        id,
        vluns_create_input,
        **kwargs
    ):
        """Export vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Export vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_vlun_export(system_id, id, vluns_create_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system
            vluns_create_input (VlunsCreateInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['vluns_create_input'] = \
            vluns_create_input
        return self.device_type1_vlun_export_endpoint.call_with_http_info(**kwargs)

    def device_type1_vlun_export_for_snapshot(
        self,
        system_id,
        snapshot_id,
        vluns_create_input,
        **kwargs
    ):
        """Export vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Export vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_vlun_export_for_snapshot(system_id, snapshot_id, vluns_create_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            snapshot_id (str): UID of the snapshots
            vluns_create_input (VlunsCreateInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['snapshot_id'] = \
            snapshot_id
        kwargs['vluns_create_input'] = \
            vluns_create_input
        return self.device_type1_vlun_export_for_snapshot_endpoint.call_with_http_info(**kwargs)

    def device_type1_vlun_unexport(
        self,
        system_id,
        id,
        un_export_vlun,
        **kwargs
    ):
        """Unexport vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Unexport vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_vlun_unexport(system_id, id, un_export_vlun, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system
            un_export_vlun (UnExportVlun):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['un_export_vlun'] = \
            un_export_vlun
        return self.device_type1_vlun_unexport_endpoint.call_with_http_info(**kwargs)

    def device_type1_vlun_unexport_for_snapshot(
        self,
        system_id,
        snapshot_id,
        un_export_vlun,
        **kwargs
    ):
        """Unexport vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Unexport vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_vlun_unexport_for_snapshot(system_id, snapshot_id, un_export_vlun, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            snapshot_id (str): UID of the snapshots
            un_export_vlun (UnExportVlun):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['snapshot_id'] = \
            snapshot_id
        kwargs['un_export_vlun'] = \
            un_export_vlun
        return self.device_type1_vlun_unexport_for_snapshot_endpoint.call_with_http_info(**kwargs)

    def device_type1_vluns_get_by_id(
        self,
        system_id,
        volume_id,
        id,
        **kwargs
    ):
        """Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_vluns_get_by_id(system_id, volume_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            volume_id (str): UID(volumeuid) of the storage system
            id (str): UID of the vlun

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VlunsListSingle
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['id'] = \
            id
        return self.device_type1_vluns_get_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_vluns_list(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Get details of vluns for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vluns for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_vluns_list(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter by Key.. [optional]
            sort (str): Query to sort the response with specified key and order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VlunsSummaryList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type1_vluns_list_endpoint.call_with_http_info(**kwargs)

    def device_type1_volume_capacity_history_get_by_id(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Get volume capacity trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get volume capacity trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_volume_capacity_history_get_by_id(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VolumeCapacityHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type1_volume_capacity_history_get_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_volume_get_by_id(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Get details of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_volume_get_by_id(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PrimeraVolumeDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type1_volume_get_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_volume_performance_history_get_by_id(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Get performance trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get performance trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_volume_performance_history_get_by_id(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VolumePerformanceHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type1_volume_performance_history_get_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_volume_performance_statistics_get_by_id(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Get performance statistics of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get performance statistics of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_volume_performance_statistics_get_by_id(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VolumePerformance
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type1_volume_performance_statistics_get_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type1_volume_snapshots_list(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Get snapshot details of volume identified by {id} for Primera / Alletra 9K  # noqa: E501

        Get snapshot details of volume identified by {id} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_volume_snapshots_list(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter by Key.. [optional]
            sort (str): oData query to sort by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SnapshotsSummaryList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.device_type1_volume_snapshots_list_endpoint.call_with_http_info(**kwargs)

    def device_type1_volumes_list(
        self,
        system_id,
        **kwargs
    ):
        """Get all volumes details for Primera / Alletra 9K  # noqa: E501

        Get all volumes details for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type1_volumes_list(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter by Key.. [optional]
            sort (str): oData query to sort by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PrimeraVolumesList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type1_volumes_list_endpoint.call_with_http_info(**kwargs)

    def device_type2_access_control_record_create(
        self,
        system_id,
        nimble_create_access_control_record_input,
        **kwargs
    ):
        """Create Nimble / Alletra 6K access control record in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K access control record in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_access_control_record_create(system_id, nimble_create_access_control_record_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            nimble_create_access_control_record_input (NimbleCreateAccessControlRecordInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['nimble_create_access_control_record_input'] = \
            nimble_create_access_control_record_input
        return self.device_type2_access_control_record_create_endpoint.call_with_http_info(**kwargs)

    def device_type2_clone_volume_by_id(
        self,
        system_id,
        volume_id,
        nimble_clone_volume_input,
        **kwargs
    ):
        """Create Nimble / Alletra 6K clone volume identified by {volumeId}.  # noqa: E501

        Create Nimble / Alletra 6K clone volume identified by {volumeId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_clone_volume_by_id(system_id, volume_id, nimble_clone_volume_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            nimble_clone_volume_input (NimbleCloneVolumeInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['nimble_clone_volume_input'] = \
            nimble_clone_volume_input
        return self.device_type2_clone_volume_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_delete_snapshot_access_by_id(
        self,
        system_id,
        volume_id,
        snapshot_id,
        un_export_input,
        **kwargs
    ):
        """Delete access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Delete access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_delete_snapshot_access_by_id(system_id, volume_id, snapshot_id, un_export_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            snapshot_id (str): Identifier of snapshot. A 42 digit hexadecimal number.
            un_export_input (UnExportInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['snapshot_id'] = \
            snapshot_id
        kwargs['un_export_input'] = \
            un_export_input
        return self.device_type2_delete_snapshot_access_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_delete_volume_access_by_id(
        self,
        system_id,
        volume_id,
        un_export_input,
        **kwargs
    ):
        """Delete access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Delete access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_delete_volume_access_by_id(system_id, volume_id, un_export_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            un_export_input (UnExportInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['un_export_input'] = \
            un_export_input
        return self.device_type2_delete_volume_access_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_edit_snapshot_by_id(
        self,
        system_id,
        nimble_edit_multiple_snapshot_input,
        **kwargs
    ):
        """Edit Multiple Nimble / Alletra 6K snapshots in system identified by {systemId}  # noqa: E501

        Edit Multiple Nimble / Alletra 6K snapshots in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_edit_snapshot_by_id(system_id, nimble_edit_multiple_snapshot_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            nimble_edit_multiple_snapshot_input (NimbleEditMultipleSnapshotInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['nimble_edit_multiple_snapshot_input'] = \
            nimble_edit_multiple_snapshot_input
        return self.device_type2_edit_snapshot_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_edit_volume_by_id(
        self,
        system_id,
        volume_id,
        nimble_edit_volume_input,
        **kwargs
    ):
        """Edit  details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Edit  details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_edit_volume_by_id(system_id, volume_id, nimble_edit_volume_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            nimble_edit_volume_input (NimbleEditVolumeInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['nimble_edit_volume_input'] = \
            nimble_edit_volume_input
        return self.device_type2_edit_volume_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_access_control_record_by_id(
        self,
        system_id,
        access_control_record_id,
        **kwargs
    ):
        """Get details of Nimble / Alletra 6K access-control-records identified by {accessControlRecordId}  # noqa: E501

        Get details of Nimble / Alletra 6K access-control-records identified by {accessControlRecordId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_access_control_record_by_id(system_id, access_control_record_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            access_control_record_id (str): ID of the Access Control Record . A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleAccessControlRecordDetailsWithRequestUri
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['access_control_record_id'] = \
            access_control_record_id
        return self.device_type2_get_access_control_record_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_all_access_control_records(
        self,
        system_id,
        **kwargs
    ):
        """Get all access-control-records details by Nimble / Alletra 6K  # noqa: E501

        Get all access-control-records details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_all_access_control_records(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter Access Control Record  by Key.. [optional]
            sort (str): oData query to sort Access Control Record  resource by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleAccessControlRecordList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type2_get_all_access_control_records_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_all_snapshots_by_volume_id(
        self,
        system_id,
        volume_id,
        **kwargs
    ):
        """Get all snapshots' details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get all snapshots' details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_all_snapshots_by_volume_id(system_id, volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter snapshots by Key.. [optional]
            sort (str): oData query to sort snapshots resource by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleSnapshotList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        return self.device_type2_get_all_snapshots_by_volume_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_all_volumes(
        self,
        system_id,
        **kwargs
    ):
        """Get all volumes details for Nimble / Alletra 6K  # noqa: E501

        Get all volumes details for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_all_volumes(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): Lucene query to filter volumes by Key.. [optional]
            sort (str): oData query to sort volumes resource by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleVolumesList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.device_type2_get_all_volumes_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_snapshot_by_id(
        self,
        system_id,
        volume_id,
        snapshot_id,
        **kwargs
    ):
        """Get details of snapshot of Nimble / Alletra 6K Volume identified by {volumeId} by {snapshotId}  # noqa: E501

        Get details of snapshot of Nimble / Alletra 6K Volume identified by {volumeId} by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_snapshot_by_id(system_id, volume_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            snapshot_id (str): Identifier of snapshot. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleSnapshotDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['snapshot_id'] = \
            snapshot_id
        return self.device_type2_get_snapshot_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_volume_by_id(
        self,
        system_id,
        volume_id,
        **kwargs
    ):
        """Get details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_volume_by_id(system_id, volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleVolumeDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        return self.device_type2_get_volume_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_volume_capacity_history(
        self,
        system_id,
        volume_id,
        **kwargs
    ):
        """Get volume capacity trend data of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get volume capacity trend data of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_volume_capacity_history(system_id, volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimblevolumeCapacityHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        return self.device_type2_get_volume_capacity_history_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_volume_performance_history(
        self,
        system_id,
        volume_id,
        **kwargs
    ):
        """Get performance trend data of Nimble / Alletra 6K Volume identified by {id}  # noqa: E501

        Get performance trend data of Nimble / Alletra 6K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_volume_performance_history(system_id, volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            range (str): range will define start and end time in which query has to be made.. [optional]
            time_interval_min (int): It defines granularity in minutes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimblevolumePerformanceHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        return self.device_type2_get_volume_performance_history_endpoint.call_with_http_info(**kwargs)

    def device_type2_get_volume_performance_statistics(
        self,
        system_id,
        volume_id,
        **kwargs
    ):
        """Get performance statistics of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get performance statistics of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_get_volume_performance_statistics(system_id, volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VolPerformance
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        return self.device_type2_get_volume_performance_statistics_endpoint.call_with_http_info(**kwargs)

    def device_type2_move_volume(
        self,
        system_id,
        volume_id,
        nimble_move_volume_to_another_pool_input,
        **kwargs
    ):
        """Move Nimble / Alletra 6K volume identified by {volumeId} to another pool.  # noqa: E501

        Move Nimble / Alletra 6K volume identified by {volumeId} to another pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_move_volume(system_id, volume_id, nimble_move_volume_to_another_pool_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            nimble_move_volume_to_another_pool_input (NimbleMoveVolumeToAnotherPoolInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['nimble_move_volume_to_another_pool_input'] = \
            nimble_move_volume_to_another_pool_input
        return self.device_type2_move_volume_endpoint.call_with_http_info(**kwargs)

    def device_type2_provisioning_review(
        self,
        system_id,
        nimble_host_review_input,
        **kwargs
    ):
        """Provisioning review for a storage system Nimble / Alletra 6K  # noqa: E501

        Provisioning review for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_provisioning_review(system_id, nimble_host_review_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            nimble_host_review_input (NimbleHostReviewInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NimbleHostReviewOutput
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['nimble_host_review_input'] = \
            nimble_host_review_input
        return self.device_type2_provisioning_review_endpoint.call_with_http_info(**kwargs)

    def device_type2_provisioning_worklow(
        self,
        system_id,
        nimble_create_volumes_workflow_input,
        **kwargs
    ):
        """Create provisioning workflow for a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501

        Create provisioning workflow for a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_provisioning_worklow(system_id, nimble_create_volumes_workflow_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            nimble_create_volumes_workflow_input (NimbleCreateVolumesWorkflowInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['nimble_create_volumes_workflow_input'] = \
            nimble_create_volumes_workflow_input
        return self.device_type2_provisioning_worklow_endpoint.call_with_http_info(**kwargs)

    def device_type2_remove_access_control_record_by_id(
        self,
        system_id,
        access_control_record_id,
        **kwargs
    ):
        """Remove access-control-record identified by {accessControlRecordId} from Nimble / Alletra 6K  # noqa: E501

        Remove access-control-record identified by {accessControlRecordId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_remove_access_control_record_by_id(system_id, access_control_record_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            access_control_record_id (str): Identifier of Access Control Record. A 42 digit hexadecimal number.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['access_control_record_id'] = \
            access_control_record_id
        return self.device_type2_remove_access_control_record_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_remove_snapshot_by_id(
        self,
        system_id,
        volume_id,
        snapshot_id,
        **kwargs
    ):
        """Remove Nimble / Alletra 6K snapshot in system identified by {snapshotId}  # noqa: E501

        Remove Nimble / Alletra 6K snapshot in system identified by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_remove_snapshot_by_id(system_id, volume_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            snapshot_id (str): Identifier of snapshot. A 42 digit hexadecimal number.

        Keyword Args:
            force (bool): Make snapshot offline and remove.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['snapshot_id'] = \
            snapshot_id
        return self.device_type2_remove_snapshot_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_remove_volume_by_id(
        self,
        system_id,
        volume_id,
        **kwargs
    ):
        """Remove volume identified by {volumeId} from Nimble / Alletra 6K  # noqa: E501

        Remove volume identified by {volumeId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_remove_volume_by_id(system_id, volume_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.

        Keyword Args:
            offline (bool): Make volume offline and delete. Deprecated - Use force instead of offline.. [optional]
            force (bool): Make volume and associated snapshots offline, stop protection and delete.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        return self.device_type2_remove_volume_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_restore_volume_by_id(
        self,
        system_id,
        volume_id,
        nimble_restore_volume_input,
        **kwargs
    ):
        """Restore Nimble / Alletra 6K volume identified by {volumeId} from a previous snapshot.  # noqa: E501

        Restore Nimble / Alletra 6K volume identified by {volumeId} from a previous snapshot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_restore_volume_by_id(system_id, volume_id, nimble_restore_volume_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            nimble_restore_volume_input (NimbleRestoreVolumeInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['nimble_restore_volume_input'] = \
            nimble_restore_volume_input
        return self.device_type2_restore_volume_by_id_endpoint.call_with_http_info(**kwargs)

    def device_type2_snapshot_create(
        self,
        system_id,
        volume_id,
        nimble_create_snapshot_input,
        **kwargs
    ):
        """Create Nimble / Alletra 6K snapshot in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K snapshot in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_snapshot_create(system_id, volume_id, nimble_create_snapshot_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            nimble_create_snapshot_input (NimbleCreateSnapshotInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['nimble_create_snapshot_input'] = \
            nimble_create_snapshot_input
        return self.device_type2_snapshot_create_endpoint.call_with_http_info(**kwargs)

    def device_type2_snapshot_export(
        self,
        system_id,
        volume_id,
        snapshot_id,
        export_input,
        **kwargs
    ):
        """Configure access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Configure access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_snapshot_export(system_id, volume_id, snapshot_id, export_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            snapshot_id (str): Identifier of snapshot. A 42 digit hexadecimal number.
            export_input (ExportInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['snapshot_id'] = \
            snapshot_id
        kwargs['export_input'] = \
            export_input
        return self.device_type2_snapshot_export_endpoint.call_with_http_info(**kwargs)

    def device_type2_volumes_create(
        self,
        system_id,
        nimble_create_volume_input,
        **kwargs
    ):
        """Create Nimble / Alletra 6K volume in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K volume in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_volumes_create(system_id, nimble_create_volume_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            nimble_create_volume_input (NimbleCreateVolumeInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['nimble_create_volume_input'] = \
            nimble_create_volume_input
        return self.device_type2_volumes_create_endpoint.call_with_http_info(**kwargs)

    def device_type2_volumes_export(
        self,
        system_id,
        volume_id,
        export_input,
        **kwargs
    ):
        """Configure access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Configure access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.device_type2_volumes_export(system_id, volume_id, export_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): ID of the storage system
            volume_id (str): Identifier of volume. A 42 digit hexadecimal number.
            export_input (ExportInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['export_input'] = \
            export_input
        return self.device_type2_volumes_export_endpoint.call_with_http_info(**kwargs)

    def snapshot_clone_create(
        self,
        system_id,
        snapshot_id,
        create_clone_snapshot_input,
        **kwargs
    ):
        """Create a clone of a snapshot identified by {snapshotId} for Primera / Alletra 9K systems.  # noqa: E501

        Create a clone of a snapshot identified by {snapshotId} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.snapshot_clone_create(system_id, snapshot_id, create_clone_snapshot_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            snapshot_id (str): UID of the snapshots
            create_clone_snapshot_input (CreateCloneSnapshotInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['snapshot_id'] = \
            snapshot_id
        kwargs['create_clone_snapshot_input'] = \
            create_clone_snapshot_input
        return self.snapshot_clone_create_endpoint.call_with_http_info(**kwargs)

    def vluns_delete(
        self,
        system_id,
        volume_id,
        id,
        **kwargs
    ):
        """Remove vlun idenfied by {id} form volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Remove vlun idenfied by {id} form volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vluns_delete(system_id, volume_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            volume_id (str): UID(volumeuid) of the storage system
            id (str): UID of the vlun

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['id'] = \
            id
        return self.vluns_delete_endpoint.call_with_http_info(**kwargs)

    def volume_clone_create(
        self,
        system_id,
        id,
        create_clone_volume_input,
        **kwargs
    ):
        """Create a clone volume identified by {id} for Primera / Alletra 9K systems.  # noqa: E501

        Create a clone volume identified by {id} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volume_clone_create(system_id, id, create_clone_volume_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system
            create_clone_volume_input (CreateCloneVolumeInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['create_clone_volume_input'] = \
            create_clone_volume_input
        return self.volume_clone_create_endpoint.call_with_http_info(**kwargs)

    def volume_create(
        self,
        system_id,
        create_volume_input,
        **kwargs
    ):
        """Create volume for a storage system Primera / Alletra 9K  # noqa: E501

        Create volume for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volume_create(system_id, create_volume_input, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            create_volume_input (CreateVolumeInput):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['create_volume_input'] = \
            create_volume_input
        return self.volume_create_endpoint.call_with_http_info(**kwargs)

    def volume_delete(
        self,
        system_id,
        id,
        **kwargs
    ):
        """Remove volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Remove volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volume_delete(system_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system

        Keyword Args:
            un_export (bool): UnExport Host,HostSet and delete volume. [optional]
            cascade (bool): Delete snapshot and volume. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        return self.volume_delete_endpoint.call_with_http_info(**kwargs)

    def volume_edit(
        self,
        system_id,
        id,
        volume_put,
        **kwargs
    ):
        """Edit volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Edit volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volume_edit(system_id, id, volume_put, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system
            volume_put (VolumePut):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['volume_put'] = \
            volume_put
        return self.volume_edit_endpoint.call_with_http_info(**kwargs)

    def volume_get_by_id(
        self,
        id,
        **kwargs
    ):
        """Get details of Volume identified by {id}  # noqa: E501

        Get details of Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volume_get_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): UID(volumeuid) of the storage system

        Keyword Args:
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FleetVolumeDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.volume_get_by_id_endpoint.call_with_http_info(**kwargs)

    def volume_list_for_system_by_system_id(
        self,
        system_id,
        **kwargs
    ):
        """Get details of volumes identified with {systemId}  # noqa: E501

        Get details of volumes identified with {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volume_list_for_system_by_system_id(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system

        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter by Key.. [optional]
            sort (str): oData query to sort by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FleetVolumesList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.volume_list_for_system_by_system_id_endpoint.call_with_http_info(**kwargs)

    def volume_snapshot_create(
        self,
        system_id,
        id,
        volume_post,
        **kwargs
    ):
        """Create snapshot for volumes identified by {id}  # noqa: E501

        Create snapshot for volumes identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volume_snapshot_create(system_id, id, volume_post, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            id (str): UID(volumeuid) of the storage system
            volume_post (VolumePost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['id'] = \
            id
        kwargs['volume_post'] = \
            volume_post
        return self.volume_snapshot_create_endpoint.call_with_http_info(**kwargs)

    def volume_snapshot_get_by_id(
        self,
        system_id,
        volume_id,
        snapshot_id,
        **kwargs
    ):
        """Remove Primera / Alletra 9K snapshot in system identified by {snapshotId}  # noqa: E501

        Remove Primera / Alletra 9K snapshot in system identified by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volume_snapshot_get_by_id(system_id, volume_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (str): systemId of the device-type1 storage system
            volume_id (str): UID(volumeuid) of the storage system
            snapshot_id (str): Identifier of snapshot.

        Keyword Args:
            force (bool): Make snapshot offline and remove.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        kwargs['volume_id'] = \
            volume_id
        kwargs['snapshot_id'] = \
            snapshot_id
        return self.volume_snapshot_get_by_id_endpoint.call_with_http_info(**kwargs)

    def volumes_list(
        self,
        **kwargs
    ):
        """Get all volumes  # noqa: E501

        Get all volumes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.volumes_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            limit (int): Number of items to return at a time. [optional]
            offset (int): The offset of the first item in the collection to return. [optional]
            filter (str): oData query to filter by Key.. [optional]
            sort (str): oData query to sort by Key.. [optional]
            select (str): Query to select only the required parameters, separated by . if nested. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FleetVolumesList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.volumes_list_endpoint.call_with_http_info(**kwargs)

