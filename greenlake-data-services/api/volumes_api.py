# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from greenlake-data-services.api_client import ApiClient


class VolumesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_type1_get_clones(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get the details of the clone volumes associated with a base volume identified by {volumeId} for Primera / Alletra 9K systems.  # noqa: E501

        Get the details of the clone volumes associated with a base volume identified by {volumeId} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_clones(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_clones_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_clones_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_clones_with_http_info(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get the details of the clone volumes associated with a base volume identified by {volumeId} for Primera / Alletra 9K systems.  # noqa: E501

        Get the details of the clone volumes associated with a base volume identified by {volumeId} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_clones_with_http_info(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_clones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_clones`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type1_get_clones`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_get_clones`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_get_clones`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/clones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraVolumesList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_promote_clone_volume(self, system_id, volume_id, clone_id, **kwargs):  # noqa: E501
        """Promote a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Promote a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_promote_clone_volume(system_id, volume_id, clone_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str clone_id: UID of the clone (required)
        :param PromoteCloneInput promote_clone_input:
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_promote_clone_volume_with_http_info(system_id, volume_id, clone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_promote_clone_volume_with_http_info(system_id, volume_id, clone_id, **kwargs)  # noqa: E501
            return data

    def device_type1_promote_clone_volume_with_http_info(self, system_id, volume_id, clone_id, **kwargs):  # noqa: E501
        """Promote a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Promote a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_promote_clone_volume_with_http_info(system_id, volume_id, clone_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str clone_id: UID of the clone (required)
        :param PromoteCloneInput promote_clone_input:
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'clone_id', 'promote_clone_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_promote_clone_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_promote_clone_volume`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type1_promote_clone_volume`")  # noqa: E501
        # verify the required parameter 'clone_id' is set
        if ('clone_id' not in params or
                params['clone_id'] is None):
            raise ValueError("Missing the required parameter `clone_id` when calling `device_type1_promote_clone_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'clone_id' in params:
            path_params['cloneId'] = params['clone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'promote_clone_input' in params:
            body_params = params['promote_clone_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/clones/{cloneId}/promote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_promote_snapshot(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Promote a snapshot identified by {snapshotId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Promote a snapshot identified by {snapshotId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_promote_snapshot(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param PromoteSnapshotInput promote_snapshot_input:
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_promote_snapshot_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_promote_snapshot_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
            return data

    def device_type1_promote_snapshot_with_http_info(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Promote a snapshot identified by {snapshotId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Promote a snapshot identified by {snapshotId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_promote_snapshot_with_http_info(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param PromoteSnapshotInput promote_snapshot_input:
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'snapshot_id', 'promote_snapshot_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_promote_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_promote_snapshot`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type1_promote_snapshot`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `device_type1_promote_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'promote_snapshot_input' in params:
            body_params = params['promote_snapshot_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_resync_clone_volume(self, system_id, volume_id, clone_id, **kwargs):  # noqa: E501
        """Resynchronize a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Resynchronize a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_resync_clone_volume(system_id, volume_id, clone_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str clone_id: UID of the clone (required)
        :param ResyncCloneVolumeInput resync_clone_volume_input:
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_resync_clone_volume_with_http_info(system_id, volume_id, clone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_resync_clone_volume_with_http_info(system_id, volume_id, clone_id, **kwargs)  # noqa: E501
            return data

    def device_type1_resync_clone_volume_with_http_info(self, system_id, volume_id, clone_id, **kwargs):  # noqa: E501
        """Resynchronize a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Resynchronize a clone volume identified by {cloneId} of a volume identified by {volumeId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_resync_clone_volume_with_http_info(system_id, volume_id, clone_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str clone_id: UID of the clone (required)
        :param ResyncCloneVolumeInput resync_clone_volume_input:
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'clone_id', 'resync_clone_volume_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_resync_clone_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_resync_clone_volume`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type1_resync_clone_volume`")  # noqa: E501
        # verify the required parameter 'clone_id' is set
        if ('clone_id' not in params or
                params['clone_id'] is None):
            raise ValueError("Missing the required parameter `clone_id` when calling `device_type1_resync_clone_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'clone_id' in params:
            path_params['cloneId'] = params['clone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resync_clone_volume_input' in params:
            body_params = params['resync_clone_volume_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/clones/{cloneId}/resync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_snapshots_get_by_id(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Get details of snapshot identified by {snapshotId} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_snapshots_get_by_id(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SnapshotsListSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_snapshots_get_by_id_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_snapshots_get_by_id_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
            return data

    def device_type1_snapshots_get_by_id_with_http_info(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Get details of snapshot identified by {snapshotId} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_snapshots_get_by_id_with_http_info(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SnapshotsListSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'snapshot_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_snapshots_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_snapshots_get_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type1_snapshots_get_by_id`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `device_type1_snapshots_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotsListSingle',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_vlun_export(self, system_id, id, vluns_create_input, **kwargs):  # noqa: E501
        """Export vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Export vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vlun_export(system_id, id, vluns_create_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param VlunsCreateInput vluns_create_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_vlun_export_with_http_info(system_id, id, vluns_create_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_vlun_export_with_http_info(system_id, id, vluns_create_input, **kwargs)  # noqa: E501
            return data

    def device_type1_vlun_export_with_http_info(self, system_id, id, vluns_create_input, **kwargs):  # noqa: E501
        """Export vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Export vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vlun_export_with_http_info(system_id, id, vluns_create_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param VlunsCreateInput vluns_create_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'vluns_create_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_vlun_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_vlun_export`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_vlun_export`")  # noqa: E501
        # verify the required parameter 'vluns_create_input' is set
        if ('vluns_create_input' not in params or
                params['vluns_create_input'] is None):
            raise ValueError("Missing the required parameter `vluns_create_input` when calling `device_type1_vlun_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vluns_create_input' in params:
            body_params = params['vluns_create_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_vlun_export_for_snapshot(self, system_id, snapshot_id, vluns_create_input, **kwargs):  # noqa: E501
        """Export vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Export vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vlun_export_for_snapshot(system_id, snapshot_id, vluns_create_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param VlunsCreateInput vluns_create_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_vlun_export_for_snapshot_with_http_info(system_id, snapshot_id, vluns_create_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_vlun_export_for_snapshot_with_http_info(system_id, snapshot_id, vluns_create_input, **kwargs)  # noqa: E501
            return data

    def device_type1_vlun_export_for_snapshot_with_http_info(self, system_id, snapshot_id, vluns_create_input, **kwargs):  # noqa: E501
        """Export vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Export vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vlun_export_for_snapshot_with_http_info(system_id, snapshot_id, vluns_create_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param VlunsCreateInput vluns_create_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'snapshot_id', 'vluns_create_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_vlun_export_for_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_vlun_export_for_snapshot`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `device_type1_vlun_export_for_snapshot`")  # noqa: E501
        # verify the required parameter 'vluns_create_input' is set
        if ('vluns_create_input' not in params or
                params['vluns_create_input'] is None):
            raise ValueError("Missing the required parameter `vluns_create_input` when calling `device_type1_vlun_export_for_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vluns_create_input' in params:
            body_params = params['vluns_create_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/snapshots/{snapshotId}/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_vlun_unexport(self, system_id, id, un_export_vlun, **kwargs):  # noqa: E501
        """Unexport vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Unexport vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vlun_unexport(system_id, id, un_export_vlun, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param UnExportVlun un_export_vlun: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_vlun_unexport_with_http_info(system_id, id, un_export_vlun, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_vlun_unexport_with_http_info(system_id, id, un_export_vlun, **kwargs)  # noqa: E501
            return data

    def device_type1_vlun_unexport_with_http_info(self, system_id, id, un_export_vlun, **kwargs):  # noqa: E501
        """Unexport vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Unexport vlun for volume identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vlun_unexport_with_http_info(system_id, id, un_export_vlun, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param UnExportVlun un_export_vlun: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'un_export_vlun']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_vlun_unexport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_vlun_unexport`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_vlun_unexport`")  # noqa: E501
        # verify the required parameter 'un_export_vlun' is set
        if ('un_export_vlun' not in params or
                params['un_export_vlun'] is None):
            raise ValueError("Missing the required parameter `un_export_vlun` when calling `device_type1_vlun_unexport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'un_export_vlun' in params:
            body_params = params['un_export_vlun']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/un-export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_vlun_unexport_for_snapshot(self, system_id, snapshot_id, un_export_vlun, **kwargs):  # noqa: E501
        """Unexport vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Unexport vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vlun_unexport_for_snapshot(system_id, snapshot_id, un_export_vlun, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param UnExportVlun un_export_vlun: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_vlun_unexport_for_snapshot_with_http_info(system_id, snapshot_id, un_export_vlun, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_vlun_unexport_for_snapshot_with_http_info(system_id, snapshot_id, un_export_vlun, **kwargs)  # noqa: E501
            return data

    def device_type1_vlun_unexport_for_snapshot_with_http_info(self, system_id, snapshot_id, un_export_vlun, **kwargs):  # noqa: E501
        """Unexport vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Unexport vlun for snapshot identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vlun_unexport_for_snapshot_with_http_info(system_id, snapshot_id, un_export_vlun, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param UnExportVlun un_export_vlun: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'snapshot_id', 'un_export_vlun']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_vlun_unexport_for_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_vlun_unexport_for_snapshot`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `device_type1_vlun_unexport_for_snapshot`")  # noqa: E501
        # verify the required parameter 'un_export_vlun' is set
        if ('un_export_vlun' not in params or
                params['un_export_vlun'] is None):
            raise ValueError("Missing the required parameter `un_export_vlun` when calling `device_type1_vlun_unexport_for_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'un_export_vlun' in params:
            body_params = params['un_export_vlun']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/snapshots/{snapshotId}/un-export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_vluns_get_by_id(self, system_id, volume_id, id, **kwargs):  # noqa: E501
        """Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vluns_get_by_id(system_id, volume_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str id: UID of the vlun (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: VlunsListSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_vluns_get_by_id_with_http_info(system_id, volume_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_vluns_get_by_id_with_http_info(system_id, volume_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_vluns_get_by_id_with_http_info(self, system_id, volume_id, id, **kwargs):  # noqa: E501
        """Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vlun identified by {id} for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vluns_get_by_id_with_http_info(system_id, volume_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str id: UID of the vlun (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: VlunsListSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_vluns_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_vluns_get_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type1_vluns_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_vluns_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/vluns/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlunsListSingle',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_vluns_list(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of vluns for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vluns for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vluns_list(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: Query to sort the response with specified key and order
        :return: VlunsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_vluns_list_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_vluns_list_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_vluns_list_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of vluns for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501

        Get details of vluns for Volume identified by {volumeId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vluns_list_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: Query to sort the response with specified key and order
        :return: VlunsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select', 'limit', 'offset', 'filter', 'sort']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_vluns_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_vluns_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_vluns_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_vluns_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_vluns_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/vluns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlunsSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_capacity_history_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get volume capacity trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get volume capacity trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_capacity_history_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: VolumeCapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_capacity_history_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_capacity_history_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_capacity_history_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get volume capacity trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get volume capacity trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_capacity_history_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: VolumeCapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_capacity_history_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_capacity_history_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_capacity_history_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/capacity-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeCapacityHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraVolumeDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraVolumeDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraVolumeDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_performance_history_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get performance trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get performance trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_performance_history_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: VolumePerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_performance_history_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_performance_history_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_performance_history_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get performance trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get performance trend data of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_performance_history_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: VolumePerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_performance_history_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_performance_history_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_performance_history_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/performance-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumePerformanceHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_performance_statistics_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get performance statistics of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get performance statistics of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_performance_statistics_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: VolumePerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_performance_statistics_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_performance_statistics_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_performance_statistics_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get performance statistics of Primera / Alletra 9K Volume identified by {id}  # noqa: E501

        Get performance statistics of Primera / Alletra 9K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_performance_statistics_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: VolumePerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_performance_statistics_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_performance_statistics_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_performance_statistics_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/performance-statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumePerformance',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_snapshots_list(self, system_id, id, **kwargs):  # noqa: E501
        """Get snapshot details of volume identified by {id} for Primera / Alletra 9K  # noqa: E501

        Get snapshot details of volume identified by {id} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_snapshots_list(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SnapshotsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_snapshots_list_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_snapshots_list_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_snapshots_list_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get snapshot details of volume identified by {id} for Primera / Alletra 9K  # noqa: E501

        Get snapshot details of volume identified by {id} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_snapshots_list_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SnapshotsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_snapshots_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_snapshots_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_snapshots_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_volume_snapshots_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_volume_snapshots_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/snapshots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotsSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volumes_list(self, system_id, **kwargs):  # noqa: E501
        """Get all volumes details for Primera / Alletra 9K  # noqa: E501

        Get all volumes details for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volumes_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volumes_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volumes_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_volumes_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all volumes details for Primera / Alletra 9K  # noqa: E501

        Get all volumes details for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volumes_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volumes_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volumes_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_volumes_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_volumes_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraVolumesList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_access_control_record_create(self, system_id, nimble_create_access_control_record_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K access control record in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K access control record in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_access_control_record_create(system_id, nimble_create_access_control_record_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateAccessControlRecordInput nimble_create_access_control_record_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_access_control_record_create_with_http_info(system_id, nimble_create_access_control_record_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_access_control_record_create_with_http_info(system_id, nimble_create_access_control_record_input, **kwargs)  # noqa: E501
            return data

    def device_type2_access_control_record_create_with_http_info(self, system_id, nimble_create_access_control_record_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K access control record in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K access control record in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_access_control_record_create_with_http_info(system_id, nimble_create_access_control_record_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateAccessControlRecordInput nimble_create_access_control_record_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_access_control_record_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_access_control_record_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_access_control_record_create`")  # noqa: E501
        # verify the required parameter 'nimble_create_access_control_record_input' is set
        if ('nimble_create_access_control_record_input' not in params or
                params['nimble_create_access_control_record_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_access_control_record_input` when calling `device_type2_access_control_record_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_access_control_record_input' in params:
            body_params = params['nimble_create_access_control_record_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/access-control-records', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_clone_volume_by_id(self, system_id, volume_id, nimble_clone_volume_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K clone volume identified by {volumeId}.  # noqa: E501

        Create Nimble / Alletra 6K clone volume identified by {volumeId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_clone_volume_by_id(system_id, volume_id, nimble_clone_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleCloneVolumeInput nimble_clone_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_clone_volume_by_id_with_http_info(system_id, volume_id, nimble_clone_volume_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_clone_volume_by_id_with_http_info(system_id, volume_id, nimble_clone_volume_input, **kwargs)  # noqa: E501
            return data

    def device_type2_clone_volume_by_id_with_http_info(self, system_id, volume_id, nimble_clone_volume_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K clone volume identified by {volumeId}.  # noqa: E501

        Create Nimble / Alletra 6K clone volume identified by {volumeId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_clone_volume_by_id_with_http_info(system_id, volume_id, nimble_clone_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleCloneVolumeInput nimble_clone_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'nimble_clone_volume_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_clone_volume_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_clone_volume_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_clone_volume_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_clone_volume_input' is set
        if ('nimble_clone_volume_input' not in params or
                params['nimble_clone_volume_input'] is None):
            raise ValueError("Missing the required parameter `nimble_clone_volume_input` when calling `device_type2_clone_volume_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_clone_volume_input' in params:
            body_params = params['nimble_clone_volume_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_delete_snapshot_access_by_id(self, system_id, volume_id, snapshot_id, un_export_input, **kwargs):  # noqa: E501
        """Delete access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Delete access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_delete_snapshot_access_by_id(system_id, volume_id, snapshot_id, un_export_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str snapshot_id: Identifier of snapshot. A 42 digit hexadecimal number. (required)
        :param UnExportInput un_export_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_delete_snapshot_access_by_id_with_http_info(system_id, volume_id, snapshot_id, un_export_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_delete_snapshot_access_by_id_with_http_info(system_id, volume_id, snapshot_id, un_export_input, **kwargs)  # noqa: E501
            return data

    def device_type2_delete_snapshot_access_by_id_with_http_info(self, system_id, volume_id, snapshot_id, un_export_input, **kwargs):  # noqa: E501
        """Delete access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Delete access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_delete_snapshot_access_by_id_with_http_info(system_id, volume_id, snapshot_id, un_export_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str snapshot_id: Identifier of snapshot. A 42 digit hexadecimal number. (required)
        :param UnExportInput un_export_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'snapshot_id', 'un_export_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_delete_snapshot_access_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_delete_snapshot_access_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_delete_snapshot_access_by_id`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `device_type2_delete_snapshot_access_by_id`")  # noqa: E501
        # verify the required parameter 'un_export_input' is set
        if ('un_export_input' not in params or
                params['un_export_input'] is None):
            raise ValueError("Missing the required parameter `un_export_input` when calling `device_type2_delete_snapshot_access_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'un_export_input' in params:
            body_params = params['un_export_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}/un-export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_delete_volume_access_by_id(self, system_id, volume_id, un_export_input, **kwargs):  # noqa: E501
        """Delete access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Delete access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_delete_volume_access_by_id(system_id, volume_id, un_export_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param UnExportInput un_export_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_delete_volume_access_by_id_with_http_info(system_id, volume_id, un_export_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_delete_volume_access_by_id_with_http_info(system_id, volume_id, un_export_input, **kwargs)  # noqa: E501
            return data

    def device_type2_delete_volume_access_by_id_with_http_info(self, system_id, volume_id, un_export_input, **kwargs):  # noqa: E501
        """Delete access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Delete access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_delete_volume_access_by_id_with_http_info(system_id, volume_id, un_export_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param UnExportInput un_export_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'un_export_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_delete_volume_access_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_delete_volume_access_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_delete_volume_access_by_id`")  # noqa: E501
        # verify the required parameter 'un_export_input' is set
        if ('un_export_input' not in params or
                params['un_export_input'] is None):
            raise ValueError("Missing the required parameter `un_export_input` when calling `device_type2_delete_volume_access_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'un_export_input' in params:
            body_params = params['un_export_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/un-export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_snapshot_by_id(self, system_id, nimble_edit_multiple_snapshot_input, **kwargs):  # noqa: E501
        """Edit Multiple Nimble / Alletra 6K snapshots in system identified by {systemId}  # noqa: E501

        Edit Multiple Nimble / Alletra 6K snapshots in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_snapshot_by_id(system_id, nimble_edit_multiple_snapshot_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleEditMultipleSnapshotInput nimble_edit_multiple_snapshot_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_snapshot_by_id_with_http_info(system_id, nimble_edit_multiple_snapshot_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_snapshot_by_id_with_http_info(system_id, nimble_edit_multiple_snapshot_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_snapshot_by_id_with_http_info(self, system_id, nimble_edit_multiple_snapshot_input, **kwargs):  # noqa: E501
        """Edit Multiple Nimble / Alletra 6K snapshots in system identified by {systemId}  # noqa: E501

        Edit Multiple Nimble / Alletra 6K snapshots in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_snapshot_by_id_with_http_info(system_id, nimble_edit_multiple_snapshot_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleEditMultipleSnapshotInput nimble_edit_multiple_snapshot_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_edit_multiple_snapshot_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_snapshot_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_snapshot_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_multiple_snapshot_input' is set
        if ('nimble_edit_multiple_snapshot_input' not in params or
                params['nimble_edit_multiple_snapshot_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_multiple_snapshot_input` when calling `device_type2_edit_snapshot_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_multiple_snapshot_input' in params:
            body_params = params['nimble_edit_multiple_snapshot_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/snapshots/actions/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_volume_by_id(self, system_id, volume_id, nimble_edit_volume_input, **kwargs):  # noqa: E501
        """Edit  details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Edit  details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_volume_by_id(system_id, volume_id, nimble_edit_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleEditVolumeInput nimble_edit_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_volume_by_id_with_http_info(system_id, volume_id, nimble_edit_volume_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_volume_by_id_with_http_info(system_id, volume_id, nimble_edit_volume_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_volume_by_id_with_http_info(self, system_id, volume_id, nimble_edit_volume_input, **kwargs):  # noqa: E501
        """Edit  details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Edit  details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_volume_by_id_with_http_info(system_id, volume_id, nimble_edit_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleEditVolumeInput nimble_edit_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'nimble_edit_volume_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_volume_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_volume_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_edit_volume_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_volume_input' is set
        if ('nimble_edit_volume_input' not in params or
                params['nimble_edit_volume_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_volume_input` when calling `device_type2_edit_volume_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_volume_input' in params:
            body_params = params['nimble_edit_volume_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_access_control_record_by_id(self, system_id, access_control_record_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K access-control-records identified by {accessControlRecordId}  # noqa: E501

        Get details of Nimble / Alletra 6K access-control-records identified by {accessControlRecordId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_access_control_record_by_id(system_id, access_control_record_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str access_control_record_id: ID of the Access Control Record . A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleAccessControlRecordDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_access_control_record_by_id_with_http_info(system_id, access_control_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_access_control_record_by_id_with_http_info(system_id, access_control_record_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_access_control_record_by_id_with_http_info(self, system_id, access_control_record_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K access-control-records identified by {accessControlRecordId}  # noqa: E501

        Get details of Nimble / Alletra 6K access-control-records identified by {accessControlRecordId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_access_control_record_by_id_with_http_info(system_id, access_control_record_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str access_control_record_id: ID of the Access Control Record . A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleAccessControlRecordDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'access_control_record_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_access_control_record_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_access_control_record_by_id`")  # noqa: E501
        # verify the required parameter 'access_control_record_id' is set
        if ('access_control_record_id' not in params or
                params['access_control_record_id'] is None):
            raise ValueError("Missing the required parameter `access_control_record_id` when calling `device_type2_get_access_control_record_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'access_control_record_id' in params:
            path_params['accessControlRecordId'] = params['access_control_record_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/access-control-records/{accessControlRecordId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleAccessControlRecordDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_access_control_records(self, system_id, **kwargs):  # noqa: E501
        """Get all access-control-records details by Nimble / Alletra 6K  # noqa: E501

        Get all access-control-records details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_access_control_records(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Access Control Record  by Key.
        :param str sort: oData query to sort Access Control Record  resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleAccessControlRecordList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_access_control_records_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_access_control_records_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_access_control_records_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all access-control-records details by Nimble / Alletra 6K  # noqa: E501

        Get all access-control-records details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_access_control_records_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Access Control Record  by Key.
        :param str sort: oData query to sort Access Control Record  resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleAccessControlRecordList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_access_control_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_access_control_records`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_access_control_records`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_access_control_records`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/access-control-records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleAccessControlRecordList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_snapshots_by_volume_id(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get all snapshots&#39; details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get all snapshots' details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_snapshots_by_volume_id(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter snapshots by Key.
        :param str sort: oData query to sort snapshots resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSnapshotList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_snapshots_by_volume_id_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_snapshots_by_volume_id_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_snapshots_by_volume_id_with_http_info(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get all snapshots&#39; details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get all snapshots' details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_snapshots_by_volume_id_with_http_info(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter snapshots by Key.
        :param str sort: oData query to sort snapshots resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSnapshotList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_snapshots_by_volume_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_snapshots_by_volume_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_get_all_snapshots_by_volume_id`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_snapshots_by_volume_id`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_snapshots_by_volume_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleSnapshotList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_volumes(self, system_id, **kwargs):  # noqa: E501
        """Get all volumes details for Nimble / Alletra 6K  # noqa: E501

        Get all volumes details for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_volumes(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter volumes by Key.
        :param str sort: oData query to sort volumes resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_volumes_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_volumes_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_volumes_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all volumes details for Nimble / Alletra 6K  # noqa: E501

        Get all volumes details for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_volumes_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter volumes by Key.
        :param str sort: oData query to sort volumes resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_volumes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_volumes`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_volumes`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_volumes`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleVolumesList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_snapshot_by_id(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Get details of snapshot of Nimble / Alletra 6K Volume identified by {volumeId} by {snapshotId}  # noqa: E501

        Get details of snapshot of Nimble / Alletra 6K Volume identified by {volumeId} by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_snapshot_by_id(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str snapshot_id: Identifier of snapshot. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSnapshotDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_snapshot_by_id_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_snapshot_by_id_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_snapshot_by_id_with_http_info(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Get details of snapshot of Nimble / Alletra 6K Volume identified by {volumeId} by {snapshotId}  # noqa: E501

        Get details of snapshot of Nimble / Alletra 6K Volume identified by {volumeId} by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_snapshot_by_id_with_http_info(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str snapshot_id: Identifier of snapshot. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSnapshotDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'snapshot_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_snapshot_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_snapshot_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_get_snapshot_by_id`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `device_type2_get_snapshot_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleSnapshotDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_volume_by_id(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_by_id(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleVolumeDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_volume_by_id_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_volume_by_id_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_volume_by_id_with_http_info(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get details of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_by_id_with_http_info(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleVolumeDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_volume_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_volume_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_get_volume_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleVolumeDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_volume_capacity_history(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get volume capacity trend data of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get volume capacity trend data of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_capacity_history(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: NimblevolumeCapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_volume_capacity_history_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_volume_capacity_history_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_volume_capacity_history_with_http_info(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get volume capacity trend data of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get volume capacity trend data of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_capacity_history_with_http_info(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: NimblevolumeCapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_volume_capacity_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_volume_capacity_history`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_get_volume_capacity_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/capacity-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimblevolumeCapacityHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_volume_performance_history(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get performance trend data of Nimble / Alletra 6K Volume identified by {id}  # noqa: E501

        Get performance trend data of Nimble / Alletra 6K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_performance_history(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: NimblevolumePerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_volume_performance_history_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_volume_performance_history_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_volume_performance_history_with_http_info(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get performance trend data of Nimble / Alletra 6K Volume identified by {id}  # noqa: E501

        Get performance trend data of Nimble / Alletra 6K Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_performance_history_with_http_info(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: NimblevolumePerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_volume_performance_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_volume_performance_history`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_get_volume_performance_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/performance-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimblevolumePerformanceHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_volume_performance_statistics(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get performance statistics of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get performance statistics of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_performance_statistics(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: VolPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_volume_performance_statistics_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_volume_performance_statistics_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_volume_performance_statistics_with_http_info(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Get performance statistics of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501

        Get performance statistics of Nimble / Alletra 6K Volume identified by {volumeId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_performance_statistics_with_http_info(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: VolPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_volume_performance_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_volume_performance_statistics`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_get_volume_performance_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/performance-statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolPerformance',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_move_volume(self, system_id, volume_id, nimble_move_volume_to_another_pool_input, **kwargs):  # noqa: E501
        """Move Nimble / Alletra 6K volume identified by {volumeId} to another pool.  # noqa: E501

        Move Nimble / Alletra 6K volume identified by {volumeId} to another pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_move_volume(system_id, volume_id, nimble_move_volume_to_another_pool_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleMoveVolumeToAnotherPoolInput nimble_move_volume_to_another_pool_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_move_volume_with_http_info(system_id, volume_id, nimble_move_volume_to_another_pool_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_move_volume_with_http_info(system_id, volume_id, nimble_move_volume_to_another_pool_input, **kwargs)  # noqa: E501
            return data

    def device_type2_move_volume_with_http_info(self, system_id, volume_id, nimble_move_volume_to_another_pool_input, **kwargs):  # noqa: E501
        """Move Nimble / Alletra 6K volume identified by {volumeId} to another pool.  # noqa: E501

        Move Nimble / Alletra 6K volume identified by {volumeId} to another pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_move_volume_with_http_info(system_id, volume_id, nimble_move_volume_to_another_pool_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleMoveVolumeToAnotherPoolInput nimble_move_volume_to_another_pool_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'nimble_move_volume_to_another_pool_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_move_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_move_volume`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_move_volume`")  # noqa: E501
        # verify the required parameter 'nimble_move_volume_to_another_pool_input' is set
        if ('nimble_move_volume_to_another_pool_input' not in params or
                params['nimble_move_volume_to_another_pool_input'] is None):
            raise ValueError("Missing the required parameter `nimble_move_volume_to_another_pool_input` when calling `device_type2_move_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_move_volume_to_another_pool_input' in params:
            body_params = params['nimble_move_volume_to_another_pool_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/actions/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_provisioning_review(self, system_id, nimble_host_review_input, **kwargs):  # noqa: E501
        """Provisioning review for a storage system Nimble / Alletra 6K  # noqa: E501

        Provisioning review for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_provisioning_review(system_id, nimble_host_review_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleHostReviewInput nimble_host_review_input: (required)
        :return: NimbleHostReviewOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_provisioning_review_with_http_info(system_id, nimble_host_review_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_provisioning_review_with_http_info(system_id, nimble_host_review_input, **kwargs)  # noqa: E501
            return data

    def device_type2_provisioning_review_with_http_info(self, system_id, nimble_host_review_input, **kwargs):  # noqa: E501
        """Provisioning review for a storage system Nimble / Alletra 6K  # noqa: E501

        Provisioning review for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_provisioning_review_with_http_info(system_id, nimble_host_review_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleHostReviewInput nimble_host_review_input: (required)
        :return: NimbleHostReviewOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_host_review_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_provisioning_review" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_provisioning_review`")  # noqa: E501
        # verify the required parameter 'nimble_host_review_input' is set
        if ('nimble_host_review_input' not in params or
                params['nimble_host_review_input'] is None):
            raise ValueError("Missing the required parameter `nimble_host_review_input` when calling `device_type2_provisioning_review`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_host_review_input' in params:
            body_params = params['nimble_host_review_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/provisioning-review', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleHostReviewOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_provisioning_worklow(self, system_id, nimble_create_volumes_workflow_input, **kwargs):  # noqa: E501
        """Create provisioning workflow for a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501

        Create provisioning workflow for a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_provisioning_worklow(system_id, nimble_create_volumes_workflow_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateVolumesWorkflowInput nimble_create_volumes_workflow_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_provisioning_worklow_with_http_info(system_id, nimble_create_volumes_workflow_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_provisioning_worklow_with_http_info(system_id, nimble_create_volumes_workflow_input, **kwargs)  # noqa: E501
            return data

    def device_type2_provisioning_worklow_with_http_info(self, system_id, nimble_create_volumes_workflow_input, **kwargs):  # noqa: E501
        """Create provisioning workflow for a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501

        Create provisioning workflow for a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_provisioning_worklow_with_http_info(system_id, nimble_create_volumes_workflow_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateVolumesWorkflowInput nimble_create_volumes_workflow_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_volumes_workflow_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_provisioning_worklow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_provisioning_worklow`")  # noqa: E501
        # verify the required parameter 'nimble_create_volumes_workflow_input' is set
        if ('nimble_create_volumes_workflow_input' not in params or
                params['nimble_create_volumes_workflow_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_volumes_workflow_input` when calling `device_type2_provisioning_worklow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_volumes_workflow_input' in params:
            body_params = params['nimble_create_volumes_workflow_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/provisioning', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_access_control_record_by_id(self, system_id, access_control_record_id, **kwargs):  # noqa: E501
        """Remove access-control-record identified by {accessControlRecordId} from Nimble / Alletra 6K  # noqa: E501

        Remove access-control-record identified by {accessControlRecordId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_access_control_record_by_id(system_id, access_control_record_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str access_control_record_id: Identifier of Access Control Record. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_access_control_record_by_id_with_http_info(system_id, access_control_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_access_control_record_by_id_with_http_info(system_id, access_control_record_id, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_access_control_record_by_id_with_http_info(self, system_id, access_control_record_id, **kwargs):  # noqa: E501
        """Remove access-control-record identified by {accessControlRecordId} from Nimble / Alletra 6K  # noqa: E501

        Remove access-control-record identified by {accessControlRecordId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_access_control_record_by_id_with_http_info(system_id, access_control_record_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str access_control_record_id: Identifier of Access Control Record. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'access_control_record_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_access_control_record_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_access_control_record_by_id`")  # noqa: E501
        # verify the required parameter 'access_control_record_id' is set
        if ('access_control_record_id' not in params or
                params['access_control_record_id'] is None):
            raise ValueError("Missing the required parameter `access_control_record_id` when calling `device_type2_remove_access_control_record_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'access_control_record_id' in params:
            path_params['accessControlRecordId'] = params['access_control_record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/access-control-records/{accessControlRecordId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_snapshot_by_id(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Remove Nimble / Alletra 6K snapshot in system identified by {snapshotId}  # noqa: E501

        Remove Nimble / Alletra 6K snapshot in system identified by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_snapshot_by_id(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str snapshot_id: Identifier of snapshot. A 42 digit hexadecimal number. (required)
        :param bool force: Make snapshot offline and remove.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_snapshot_by_id_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_snapshot_by_id_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_snapshot_by_id_with_http_info(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Remove Nimble / Alletra 6K snapshot in system identified by {snapshotId}  # noqa: E501

        Remove Nimble / Alletra 6K snapshot in system identified by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_snapshot_by_id_with_http_info(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str snapshot_id: Identifier of snapshot. A 42 digit hexadecimal number. (required)
        :param bool force: Make snapshot offline and remove.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'snapshot_id', 'force']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_snapshot_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_snapshot_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_remove_snapshot_by_id`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `device_type2_remove_snapshot_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_volume_by_id(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Remove volume identified by {volumeId} from Nimble / Alletra 6K  # noqa: E501

        Remove volume identified by {volumeId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_volume_by_id(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param bool offline: Make volume offline and delete. Deprecated - Use force instead of offline.
        :param bool force: Make volume and associated snapshots offline, stop protection and delete.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_volume_by_id_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_volume_by_id_with_http_info(system_id, volume_id, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_volume_by_id_with_http_info(self, system_id, volume_id, **kwargs):  # noqa: E501
        """Remove volume identified by {volumeId} from Nimble / Alletra 6K  # noqa: E501

        Remove volume identified by {volumeId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_volume_by_id_with_http_info(system_id, volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param bool offline: Make volume offline and delete. Deprecated - Use force instead of offline.
        :param bool force: Make volume and associated snapshots offline, stop protection and delete.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'offline', 'force']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_volume_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_volume_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_remove_volume_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []
        if 'offline' in params:
            query_params.append(('offline', params['offline']))  # noqa: E501
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_restore_volume_by_id(self, system_id, volume_id, nimble_restore_volume_input, **kwargs):  # noqa: E501
        """Restore Nimble / Alletra 6K volume identified by {volumeId} from a previous snapshot.  # noqa: E501

        Restore Nimble / Alletra 6K volume identified by {volumeId} from a previous snapshot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_restore_volume_by_id(system_id, volume_id, nimble_restore_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleRestoreVolumeInput nimble_restore_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_restore_volume_by_id_with_http_info(system_id, volume_id, nimble_restore_volume_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_restore_volume_by_id_with_http_info(system_id, volume_id, nimble_restore_volume_input, **kwargs)  # noqa: E501
            return data

    def device_type2_restore_volume_by_id_with_http_info(self, system_id, volume_id, nimble_restore_volume_input, **kwargs):  # noqa: E501
        """Restore Nimble / Alletra 6K volume identified by {volumeId} from a previous snapshot.  # noqa: E501

        Restore Nimble / Alletra 6K volume identified by {volumeId} from a previous snapshot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_restore_volume_by_id_with_http_info(system_id, volume_id, nimble_restore_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleRestoreVolumeInput nimble_restore_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'nimble_restore_volume_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_restore_volume_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_restore_volume_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_restore_volume_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_restore_volume_input' is set
        if ('nimble_restore_volume_input' not in params or
                params['nimble_restore_volume_input'] is None):
            raise ValueError("Missing the required parameter `nimble_restore_volume_input` when calling `device_type2_restore_volume_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_restore_volume_input' in params:
            body_params = params['nimble_restore_volume_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/actions/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_snapshot_create(self, system_id, volume_id, nimble_create_snapshot_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K snapshot in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K snapshot in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_snapshot_create(system_id, volume_id, nimble_create_snapshot_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleCreateSnapshotInput nimble_create_snapshot_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_snapshot_create_with_http_info(system_id, volume_id, nimble_create_snapshot_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_snapshot_create_with_http_info(system_id, volume_id, nimble_create_snapshot_input, **kwargs)  # noqa: E501
            return data

    def device_type2_snapshot_create_with_http_info(self, system_id, volume_id, nimble_create_snapshot_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K snapshot in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K snapshot in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_snapshot_create_with_http_info(system_id, volume_id, nimble_create_snapshot_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param NimbleCreateSnapshotInput nimble_create_snapshot_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'nimble_create_snapshot_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_snapshot_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_snapshot_create`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_snapshot_create`")  # noqa: E501
        # verify the required parameter 'nimble_create_snapshot_input' is set
        if ('nimble_create_snapshot_input' not in params or
                params['nimble_create_snapshot_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_snapshot_input` when calling `device_type2_snapshot_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_snapshot_input' in params:
            body_params = params['nimble_create_snapshot_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_snapshot_export(self, system_id, volume_id, snapshot_id, export_input, **kwargs):  # noqa: E501
        """Configure access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Configure access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_snapshot_export(system_id, volume_id, snapshot_id, export_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str snapshot_id: Identifier of snapshot. A 42 digit hexadecimal number. (required)
        :param ExportInput export_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_snapshot_export_with_http_info(system_id, volume_id, snapshot_id, export_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_snapshot_export_with_http_info(system_id, volume_id, snapshot_id, export_input, **kwargs)  # noqa: E501
            return data

    def device_type2_snapshot_export_with_http_info(self, system_id, volume_id, snapshot_id, export_input, **kwargs):  # noqa: E501
        """Configure access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Configure access for snapshot identified by {snapshotId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_snapshot_export_with_http_info(system_id, volume_id, snapshot_id, export_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param str snapshot_id: Identifier of snapshot. A 42 digit hexadecimal number. (required)
        :param ExportInput export_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'snapshot_id', 'export_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_snapshot_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_snapshot_export`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_snapshot_export`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `device_type2_snapshot_export`")  # noqa: E501
        # verify the required parameter 'export_input' is set
        if ('export_input' not in params or
                params['export_input'] is None):
            raise ValueError("Missing the required parameter `export_input` when calling `device_type2_snapshot_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'export_input' in params:
            body_params = params['export_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_volumes_create(self, system_id, nimble_create_volume_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K volume in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K volume in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_volumes_create(system_id, nimble_create_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateVolumeInput nimble_create_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_volumes_create_with_http_info(system_id, nimble_create_volume_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_volumes_create_with_http_info(system_id, nimble_create_volume_input, **kwargs)  # noqa: E501
            return data

    def device_type2_volumes_create_with_http_info(self, system_id, nimble_create_volume_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K volume in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K volume in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_volumes_create_with_http_info(system_id, nimble_create_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateVolumeInput nimble_create_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_volume_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_volumes_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_volumes_create`")  # noqa: E501
        # verify the required parameter 'nimble_create_volume_input' is set
        if ('nimble_create_volume_input' not in params or
                params['nimble_create_volume_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_volume_input` when calling `device_type2_volumes_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_volume_input' in params:
            body_params = params['nimble_create_volume_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_volumes_export(self, system_id, volume_id, export_input, **kwargs):  # noqa: E501
        """Configure access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Configure access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_volumes_export(system_id, volume_id, export_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param ExportInput export_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_volumes_export_with_http_info(system_id, volume_id, export_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_volumes_export_with_http_info(system_id, volume_id, export_input, **kwargs)  # noqa: E501
            return data

    def device_type2_volumes_export_with_http_info(self, system_id, volume_id, export_input, **kwargs):  # noqa: E501
        """Configure access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Configure access for volume identified by {volumeId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_volumes_export_with_http_info(system_id, volume_id, export_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_id: Identifier of volume. A 42 digit hexadecimal number. (required)
        :param ExportInput export_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'export_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_volumes_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_volumes_export`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `device_type2_volumes_export`")  # noqa: E501
        # verify the required parameter 'export_input' is set
        if ('export_input' not in params or
                params['export_input'] is None):
            raise ValueError("Missing the required parameter `export_input` when calling `device_type2_volumes_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'export_input' in params:
            body_params = params['export_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volumes/{volumeId}/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshot_clone_create(self, system_id, snapshot_id, create_clone_snapshot_input, **kwargs):  # noqa: E501
        """Create a clone of a snapshot identified by {snapshotId} for Primera / Alletra 9K systems.  # noqa: E501

        Create a clone of a snapshot identified by {snapshotId} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.snapshot_clone_create(system_id, snapshot_id, create_clone_snapshot_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param CreateCloneSnapshotInput create_clone_snapshot_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.snapshot_clone_create_with_http_info(system_id, snapshot_id, create_clone_snapshot_input, **kwargs)  # noqa: E501
        else:
            (data) = self.snapshot_clone_create_with_http_info(system_id, snapshot_id, create_clone_snapshot_input, **kwargs)  # noqa: E501
            return data

    def snapshot_clone_create_with_http_info(self, system_id, snapshot_id, create_clone_snapshot_input, **kwargs):  # noqa: E501
        """Create a clone of a snapshot identified by {snapshotId} for Primera / Alletra 9K systems.  # noqa: E501

        Create a clone of a snapshot identified by {snapshotId} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.snapshot_clone_create_with_http_info(system_id, snapshot_id, create_clone_snapshot_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str snapshot_id: UID of the snapshots (required)
        :param CreateCloneSnapshotInput create_clone_snapshot_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'snapshot_id', 'create_clone_snapshot_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshot_clone_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `snapshot_clone_create`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `snapshot_clone_create`")  # noqa: E501
        # verify the required parameter 'create_clone_snapshot_input' is set
        if ('create_clone_snapshot_input' not in params or
                params['create_clone_snapshot_input'] is None):
            raise ValueError("Missing the required parameter `create_clone_snapshot_input` when calling `snapshot_clone_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_clone_snapshot_input' in params:
            body_params = params['create_clone_snapshot_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/snapshots/{snapshotId}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vluns_delete(self, system_id, volume_id, id, **kwargs):  # noqa: E501
        """Remove vlun idenfied by {id} form volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Remove vlun idenfied by {id} form volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vluns_delete(system_id, volume_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str id: UID of the vlun (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vluns_delete_with_http_info(system_id, volume_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.vluns_delete_with_http_info(system_id, volume_id, id, **kwargs)  # noqa: E501
            return data

    def vluns_delete_with_http_info(self, system_id, volume_id, id, **kwargs):  # noqa: E501
        """Remove vlun idenfied by {id} form volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Remove vlun idenfied by {id} form volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vluns_delete_with_http_info(system_id, volume_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str id: UID of the vlun (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vluns_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `vluns_delete`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `vluns_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vluns_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/vluns/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_clone_create(self, system_id, id, create_clone_volume_input, **kwargs):  # noqa: E501
        """Create a clone volume identified by {id} for Primera / Alletra 9K systems.  # noqa: E501

        Create a clone volume identified by {id} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_clone_create(system_id, id, create_clone_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param CreateCloneVolumeInput create_clone_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volume_clone_create_with_http_info(system_id, id, create_clone_volume_input, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_clone_create_with_http_info(system_id, id, create_clone_volume_input, **kwargs)  # noqa: E501
            return data

    def volume_clone_create_with_http_info(self, system_id, id, create_clone_volume_input, **kwargs):  # noqa: E501
        """Create a clone volume identified by {id} for Primera / Alletra 9K systems.  # noqa: E501

        Create a clone volume identified by {id} for Primera / Alletra 9K systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_clone_create_with_http_info(system_id, id, create_clone_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param CreateCloneVolumeInput create_clone_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'create_clone_volume_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_clone_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volume_clone_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `volume_clone_create`")  # noqa: E501
        # verify the required parameter 'create_clone_volume_input' is set
        if ('create_clone_volume_input' not in params or
                params['create_clone_volume_input'] is None):
            raise ValueError("Missing the required parameter `create_clone_volume_input` when calling `volume_clone_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_clone_volume_input' in params:
            body_params = params['create_clone_volume_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_create(self, system_id, create_volume_input, **kwargs):  # noqa: E501
        """Create volume for a storage system Primera / Alletra 9K  # noqa: E501

        Create volume for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_create(system_id, create_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateVolumeInput create_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volume_create_with_http_info(system_id, create_volume_input, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_create_with_http_info(system_id, create_volume_input, **kwargs)  # noqa: E501
            return data

    def volume_create_with_http_info(self, system_id, create_volume_input, **kwargs):  # noqa: E501
        """Create volume for a storage system Primera / Alletra 9K  # noqa: E501

        Create volume for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_create_with_http_info(system_id, create_volume_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateVolumeInput create_volume_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'create_volume_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volume_create`")  # noqa: E501
        # verify the required parameter 'create_volume_input' is set
        if ('create_volume_input' not in params or
                params['create_volume_input'] is None):
            raise ValueError("Missing the required parameter `create_volume_input` when calling `volume_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_volume_input' in params:
            body_params = params['create_volume_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_delete(self, system_id, id, **kwargs):  # noqa: E501
        """Remove volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Remove volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_delete(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param bool un_export: UnExport Host,HostSet and delete volume
        :param bool cascade: Delete snapshot and volume
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volume_delete_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_delete_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def volume_delete_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Remove volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Remove volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_delete_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param bool un_export: UnExport Host,HostSet and delete volume
        :param bool cascade: Delete snapshot and volume
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'un_export', 'cascade']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volume_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `volume_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'un_export' in params:
            query_params.append(('unExport', params['un_export']))  # noqa: E501
        if 'cascade' in params:
            query_params.append(('cascade', params['cascade']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_edit(self, system_id, id, volume_put, **kwargs):  # noqa: E501
        """Edit volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Edit volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_edit(system_id, id, volume_put, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param VolumePut volume_put: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volume_edit_with_http_info(system_id, id, volume_put, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_edit_with_http_info(system_id, id, volume_put, **kwargs)  # noqa: E501
            return data

    def volume_edit_with_http_info(self, system_id, id, volume_put, **kwargs):  # noqa: E501
        """Edit volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501

        Edit volume identified by {volumeId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_edit_with_http_info(system_id, id, volume_put, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param VolumePut volume_put: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'volume_put']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volume_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `volume_edit`")  # noqa: E501
        # verify the required parameter 'volume_put' is set
        if ('volume_put' not in params or
                params['volume_put'] is None):
            raise ValueError("Missing the required parameter `volume_put` when calling `volume_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'volume_put' in params:
            body_params = params['volume_put']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_get_by_id(self, id, **kwargs):  # noqa: E501
        """Get details of Volume identified by {id}  # noqa: E501

        Get details of Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_get_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumeDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volume_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def volume_get_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of Volume identified by {id}  # noqa: E501

        Get details of Volume identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_get_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID(volumeuid) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumeDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `volume_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/volumes/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetVolumeDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_list_for_system_by_system_id(self, system_id, **kwargs):  # noqa: E501
        """Get details of volumes identified with {systemId}  # noqa: E501

        Get details of volumes identified with {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_list_for_system_by_system_id(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volume_list_for_system_by_system_id_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_list_for_system_by_system_id_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def volume_list_for_system_by_system_id_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get details of volumes identified with {systemId}  # noqa: E501

        Get details of volumes identified with {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_list_for_system_by_system_id_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_list_for_system_by_system_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volume_list_for_system_by_system_id`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `volume_list_for_system_by_system_id`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `volume_list_for_system_by_system_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/{systemId}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetVolumesList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_snapshot_create(self, system_id, id, volume_post, **kwargs):  # noqa: E501
        """Create snapshot for volumes identified by {id}  # noqa: E501

        Create snapshot for volumes identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_snapshot_create(system_id, id, volume_post, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param VolumePost volume_post: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volume_snapshot_create_with_http_info(system_id, id, volume_post, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_snapshot_create_with_http_info(system_id, id, volume_post, **kwargs)  # noqa: E501
            return data

    def volume_snapshot_create_with_http_info(self, system_id, id, volume_post, **kwargs):  # noqa: E501
        """Create snapshot for volumes identified by {id}  # noqa: E501

        Create snapshot for volumes identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_snapshot_create_with_http_info(system_id, id, volume_post, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID(volumeuid) of the storage system (required)
        :param VolumePost volume_post: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'volume_post']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_snapshot_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volume_snapshot_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `volume_snapshot_create`")  # noqa: E501
        # verify the required parameter 'volume_post' is set
        if ('volume_post' not in params or
                params['volume_post'] is None):
            raise ValueError("Missing the required parameter `volume_post` when calling `volume_snapshot_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'volume_post' in params:
            body_params = params['volume_post']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{id}/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_snapshot_get_by_id(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Remove Primera / Alletra 9K snapshot in system identified by {snapshotId}  # noqa: E501

        Remove Primera / Alletra 9K snapshot in system identified by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_snapshot_get_by_id(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str snapshot_id: Identifier of snapshot. (required)
        :param bool force: Make snapshot offline and remove.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volume_snapshot_get_by_id_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_snapshot_get_by_id_with_http_info(system_id, volume_id, snapshot_id, **kwargs)  # noqa: E501
            return data

    def volume_snapshot_get_by_id_with_http_info(self, system_id, volume_id, snapshot_id, **kwargs):  # noqa: E501
        """Remove Primera / Alletra 9K snapshot in system identified by {snapshotId}  # noqa: E501

        Remove Primera / Alletra 9K snapshot in system identified by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volume_snapshot_get_by_id_with_http_info(system_id, volume_id, snapshot_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str volume_id: UID(volumeuid) of the storage system (required)
        :param str snapshot_id: Identifier of snapshot. (required)
        :param bool force: Make snapshot offline and remove.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_id', 'snapshot_id', 'force']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_snapshot_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volume_snapshot_get_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `volume_snapshot_get_by_id`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `volume_snapshot_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_id' in params:
            path_params['volumeId'] = params['volume_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/volumes/{volumeId}/snapshots/{snapshotId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_list(self, **kwargs):  # noqa: E501
        """Get all volumes  # noqa: E501

        Get all volumes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumes_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volumes_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.volumes_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def volumes_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get all volumes  # noqa: E501

        Get all volumes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumes_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `volumes_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `volumes_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetVolumesList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
