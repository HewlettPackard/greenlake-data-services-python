# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from greenlake-data-services.api_client import ApiClient


class SystemSettingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_trusted_certificates(self, system_id, add_trusted_certificate_input, **kwargs):  # noqa: E501
        """Add trusted certificates for storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Add trusted certificates for storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_trusted_certificates(system_id, add_trusted_certificate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param AddTrustedCertificateInput add_trusted_certificate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_trusted_certificates_with_http_info(system_id, add_trusted_certificate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.add_trusted_certificates_with_http_info(system_id, add_trusted_certificate_input, **kwargs)  # noqa: E501
            return data

    def add_trusted_certificates_with_http_info(self, system_id, add_trusted_certificate_input, **kwargs):  # noqa: E501
        """Add trusted certificates for storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Add trusted certificates for storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_trusted_certificates_with_http_info(system_id, add_trusted_certificate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param AddTrustedCertificateInput add_trusted_certificate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'add_trusted_certificate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_trusted_certificates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `add_trusted_certificates`")  # noqa: E501
        # verify the required parameter 'add_trusted_certificate_input' is set
        if ('add_trusted_certificate_input' not in params or
                params['add_trusted_certificate_input'] is None):
            raise ValueError("Missing the required parameter `add_trusted_certificate_input` when calling `add_trusted_certificates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_trusted_certificate_input' in params:
            body_params = params['add_trusted_certificate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/trust-certificates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_contacts_create(self, system_id, alert_contact_input, **kwargs):  # noqa: E501
        """Add Alert/Mail contact details  # noqa: E501

        Add Alert/Mail contact details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.alert_contacts_create(system_id, alert_contact_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param AlertContactInput alert_contact_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.alert_contacts_create_with_http_info(system_id, alert_contact_input, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_contacts_create_with_http_info(system_id, alert_contact_input, **kwargs)  # noqa: E501
            return data

    def alert_contacts_create_with_http_info(self, system_id, alert_contact_input, **kwargs):  # noqa: E501
        """Add Alert/Mail contact details  # noqa: E501

        Add Alert/Mail contact details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.alert_contacts_create_with_http_info(system_id, alert_contact_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param AlertContactInput alert_contact_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'alert_contact_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_contacts_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `alert_contacts_create`")  # noqa: E501
        # verify the required parameter 'alert_contact_input' is set
        if ('alert_contact_input' not in params or
                params['alert_contact_input'] is None):
            raise ValueError("Missing the required parameter `alert_contact_input` when calling `alert_contacts_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'alert_contact_input' in params:
            body_params = params['alert_contact_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/alert-contacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_contacts_delete(self, system_id, id, **kwargs):  # noqa: E501
        """Delete Alert/Email contact of storage system Primera / Alletra 9K identified by {id}  # noqa: E501

        Delete Alert/Email contact of storage system Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.alert_contacts_delete(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Unique Identifier of the alert contact (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.alert_contacts_delete_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_contacts_delete_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def alert_contacts_delete_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Delete Alert/Email contact of storage system Primera / Alletra 9K identified by {id}  # noqa: E501

        Delete Alert/Email contact of storage system Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.alert_contacts_delete_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Unique Identifier of the alert contact (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_contacts_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `alert_contacts_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alert_contacts_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/alert-contacts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_contacts_update(self, system_id, id, alert_contact_input, **kwargs):  # noqa: E501
        """Edit Alert/Email contact details of storage system Primera / Alletra 9K identified by {id}  # noqa: E501

        Edit Alert/Email contact details of storage system Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.alert_contacts_update(system_id, id, alert_contact_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Unique Identifier of the alert contact (required)
        :param AlertContactInput alert_contact_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.alert_contacts_update_with_http_info(system_id, id, alert_contact_input, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_contacts_update_with_http_info(system_id, id, alert_contact_input, **kwargs)  # noqa: E501
            return data

    def alert_contacts_update_with_http_info(self, system_id, id, alert_contact_input, **kwargs):  # noqa: E501
        """Edit Alert/Email contact details of storage system Primera / Alletra 9K identified by {id}  # noqa: E501

        Edit Alert/Email contact details of storage system Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.alert_contacts_update_with_http_info(system_id, id, alert_contact_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Unique Identifier of the alert contact (required)
        :param AlertContactInput alert_contact_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'alert_contact_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_contacts_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `alert_contacts_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alert_contacts_update`")  # noqa: E501
        # verify the required parameter 'alert_contact_input' is set
        if ('alert_contact_input' not in params or
                params['alert_contact_input'] is None):
            raise ValueError("Missing the required parameter `alert_contact_input` when calling `alert_contacts_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'alert_contact_input' in params:
            body_params = params['alert_contact_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/alert-contacts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_alert_contacts_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get alert-contact details for a storage system Primera / Alletra 9K identified by {id}  # noqa: E501

        Get alert-contact details for a storage system Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_alert_contacts_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Unique Identifier of the alert contact (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: AlertContactsDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_alert_contacts_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_alert_contacts_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_alert_contacts_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get alert-contact details for a storage system Primera / Alletra 9K identified by {id}  # noqa: E501

        Get alert-contact details for a storage system Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_alert_contacts_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Unique Identifier of the alert contact (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: AlertContactsDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_alert_contacts_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_alert_contacts_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_alert_contacts_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/alert-contacts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertContactsDetailsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_alert_contacts_list(self, system_id, **kwargs):  # noqa: E501
        """Get alert-contact details for a storage system Primera / Alletra 9K  # noqa: E501

        Get alert-contact details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_alert_contacts_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: AlertContacts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_alert_contacts_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_alert_contacts_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_alert_contacts_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get alert-contact details for a storage system Primera / Alletra 9K  # noqa: E501

        Get alert-contact details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_alert_contacts_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: AlertContacts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_alert_contacts_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_alert_contacts_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_alert_contacts_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_alert_contacts_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/alert-contacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertContacts',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_certificates_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get array certificates by Primera / Alletra 9K identified by {id}  # noqa: E501

        Get array certificates by Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_certificates_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the certificate (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: CertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_certificates_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_certificates_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_certificates_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get array certificates by Primera / Alletra 9K identified by {id}  # noqa: E501

        Get array certificates by Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_certificates_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the certificate (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: CertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_certificates_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_certificates_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_certificates_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/certificates/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_certificates_list(self, system_id, **kwargs):  # noqa: E501
        """Get array certificates by Primera / Alletra 9K  # noqa: E501

        Get array certificates by Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_certificates_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Certificates by Key.
        :return: CertificatesSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_certificates_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_certificates_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_certificates_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get array certificates by Primera / Alletra 9K  # noqa: E501

        Get array certificates by Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_certificates_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Certificates by Key.
        :return: CertificatesSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select', 'limit', 'offset', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_certificates_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_certificates_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_certificates_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_certificates_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificatesSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_delete_quorum_witness(self, system_id, replication_partner_id, **kwargs):  # noqa: E501
        """Delete quorum witness identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete quorum witness identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_delete_quorum_witness(system_id, replication_partner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_delete_quorum_witness_with_http_info(system_id, replication_partner_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_delete_quorum_witness_with_http_info(system_id, replication_partner_id, **kwargs)  # noqa: E501
            return data

    def device_type1_delete_quorum_witness_with_http_info(self, system_id, replication_partner_id, **kwargs):  # noqa: E501
        """Delete quorum witness identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete quorum witness identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_delete_quorum_witness_with_http_info(system_id, replication_partner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'replication_partner_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_delete_quorum_witness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_delete_quorum_witness`")  # noqa: E501
        # verify the required parameter 'replication_partner_id' is set
        if ('replication_partner_id' not in params or
                params['replication_partner_id'] is None):
            raise ValueError("Missing the required parameter `replication_partner_id` when calling `device_type1_delete_quorum_witness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'replication_partner_id' in params:
            path_params['replicationPartnerId'] = params['replication_partner_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/quorum-witness/{replicationPartnerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_delete_v_center_settings(self, system_id, vcenter_setting_id, **kwargs):  # noqa: E501
        """Delete vcenter setting identified by {vcenterSettingId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete vcenter setting identified by {vcenterSettingId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_delete_v_center_settings(system_id, vcenter_setting_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str vcenter_setting_id: UID(vcenterSettingId) of the storage system (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_delete_v_center_settings_with_http_info(system_id, vcenter_setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_delete_v_center_settings_with_http_info(system_id, vcenter_setting_id, **kwargs)  # noqa: E501
            return data

    def device_type1_delete_v_center_settings_with_http_info(self, system_id, vcenter_setting_id, **kwargs):  # noqa: E501
        """Delete vcenter setting identified by {vcenterSettingId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete vcenter setting identified by {vcenterSettingId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_delete_v_center_settings_with_http_info(system_id, vcenter_setting_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str vcenter_setting_id: UID(vcenterSettingId) of the storage system (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'vcenter_setting_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_delete_v_center_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_delete_v_center_settings`")  # noqa: E501
        # verify the required parameter 'vcenter_setting_id' is set
        if ('vcenter_setting_id' not in params or
                params['vcenter_setting_id'] is None):
            raise ValueError("Missing the required parameter `vcenter_setting_id` when calling `device_type1_delete_v_center_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'vcenter_setting_id' in params:
            path_params['vcenterSettingId'] = params['vcenter_setting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/vm-manager-settings/{vcenterSettingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_get_quorum_witness(self, system_id, **kwargs):  # noqa: E501
        """Get quorum witness configuration details from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get quorum witness configuration details from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_quorum_witness(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter witness by key.
        :param str sort: oData query to sort witness resource by key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: WitnessList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_quorum_witness_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_quorum_witness_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_quorum_witness_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get quorum witness configuration details from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get quorum witness configuration details from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_quorum_witness_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter witness by key.
        :param str sort: oData query to sort witness resource by key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: WitnessList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_quorum_witness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_quorum_witness`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_get_quorum_witness`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_get_quorum_witness`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/quorum-witness', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WitnessList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_get_quorum_witness_with_id(self, system_id, replication_partner_id, **kwargs):  # noqa: E501
        """Get details of quorum witness configured on replication partner identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get details of quorum witness configured on replication partner identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_quorum_witness_with_id(system_id, replication_partner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: WitnessDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_quorum_witness_with_id_with_http_info(system_id, replication_partner_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_quorum_witness_with_id_with_http_info(system_id, replication_partner_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_quorum_witness_with_id_with_http_info(self, system_id, replication_partner_id, **kwargs):  # noqa: E501
        """Get details of quorum witness configured on replication partner identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get details of quorum witness configured on replication partner identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_quorum_witness_with_id_with_http_info(system_id, replication_partner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: WitnessDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'replication_partner_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_quorum_witness_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_quorum_witness_with_id`")  # noqa: E501
        # verify the required parameter 'replication_partner_id' is set
        if ('replication_partner_id' not in params or
                params['replication_partner_id'] is None):
            raise ValueError("Missing the required parameter `replication_partner_id` when calling `device_type1_get_quorum_witness_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'replication_partner_id' in params:
            path_params['replicationPartnerId'] = params['replication_partner_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/quorum-witness/{replicationPartnerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WitnessDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_get_replication_partner_with_id(self, system_id, replication_partner_id, **kwargs):  # noqa: E501
        """Get details of replication partner identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get details of replication partner identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_replication_partner_with_id(system_id, replication_partner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ReplicationPartnerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_replication_partner_with_id_with_http_info(system_id, replication_partner_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_replication_partner_with_id_with_http_info(system_id, replication_partner_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_replication_partner_with_id_with_http_info(self, system_id, replication_partner_id, **kwargs):  # noqa: E501
        """Get details of replication partner identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get details of replication partner identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_replication_partner_with_id_with_http_info(system_id, replication_partner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ReplicationPartnerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'replication_partner_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_replication_partner_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_replication_partner_with_id`")  # noqa: E501
        # verify the required parameter 'replication_partner_id' is set
        if ('replication_partner_id' not in params or
                params['replication_partner_id'] is None):
            raise ValueError("Missing the required parameter `replication_partner_id` when calling `device_type1_get_replication_partner_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'replication_partner_id' in params:
            path_params['replicationPartnerId'] = params['replication_partner_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/replication-partners/{replicationPartnerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReplicationPartnerDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_get_replication_partners(self, system_id, **kwargs):  # noqa: E501
        """Get details of replication partners on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get details of replication partners on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_replication_partners(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter replication partners by key.
        :param str sort: oData query to sort nodes resource by key.
        :param bool include_indirect_partners: Include indirect partners. Indirect partners are excluded by default. This parameter cannot be used with other query parameters.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ReplicationPartnersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_replication_partners_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_replication_partners_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_replication_partners_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get details of replication partners on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get details of replication partners on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_replication_partners_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter replication partners by key.
        :param str sort: oData query to sort nodes resource by key.
        :param bool include_indirect_partners: Include indirect partners. Indirect partners are excluded by default. This parameter cannot be used with other query parameters.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ReplicationPartnersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'include_indirect_partners', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_replication_partners" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_replication_partners`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_get_replication_partners`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_get_replication_partners`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'include_indirect_partners' in params:
            query_params.append(('includeIndirectPartners', params['include_indirect_partners']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/replication-partners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReplicationPartnersList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_mail_settings_get(self, system_id, **kwargs):  # noqa: E501
        """Get the system&#39;s SMTP/Mail server settigs  # noqa: E501

        Get the system's SMTP/Mail server settigs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_mail_settings_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: Mailsettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_mail_settings_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_mail_settings_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_mail_settings_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get the system&#39;s SMTP/Mail server settigs  # noqa: E501

        Get the system's SMTP/Mail server settigs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_mail_settings_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: Mailsettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_mail_settings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_mail_settings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/mail-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mailsettings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_network_service_cim_get(self, system_id, **kwargs):  # noqa: E501
        """Get CIM Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501

        Get CIM Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_cim_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkServicesCim
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_network_service_cim_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_network_service_cim_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_network_service_cim_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get CIM Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501

        Get CIM Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_cim_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkServicesCim
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_network_service_cim_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_network_service_cim_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/cim', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkServicesCim',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_network_service_snmp_mgr_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get a specific SNMP-Manager Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501

        Get a specific SNMP-Manager Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_snmp_mgr_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the SNMP manager (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkServicesSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_network_service_snmp_mgr_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_network_service_snmp_mgr_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_network_service_snmp_mgr_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get a specific SNMP-Manager Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501

        Get a specific SNMP-Manager Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_snmp_mgr_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the SNMP manager (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkServicesSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_network_service_snmp_mgr_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_network_service_snmp_mgr_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_network_service_snmp_mgr_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/snmp-mgr/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkServicesSnmp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_network_service_snmp_mgr_list(self, system_id, **kwargs):  # noqa: E501
        """Get SNMP-Manager Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501

        Get SNMP-Manager Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_snmp_mgr_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkServicesSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_network_service_snmp_mgr_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_network_service_snmp_mgr_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_network_service_snmp_mgr_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get SNMP-Manager Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501

        Get SNMP-Manager Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_snmp_mgr_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkServicesSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_network_service_snmp_mgr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_network_service_snmp_mgr_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_network_service_snmp_mgr_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_network_service_snmp_mgr_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/snmp-mgr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkServicesSnmp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_network_service_vasa_configure(self, system_id, vasa_id, vasa_config, **kwargs):  # noqa: E501
        """Configures vasa service for the specified id.  # noqa: E501

        Enables or disable vasa service  on a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_vasa_configure(system_id, vasa_id, vasa_config, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str vasa_id: ID of the VASA service (required)
        :param VasaConfig vasa_config: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_network_service_vasa_configure_with_http_info(system_id, vasa_id, vasa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_network_service_vasa_configure_with_http_info(system_id, vasa_id, vasa_config, **kwargs)  # noqa: E501
            return data

    def device_type1_network_service_vasa_configure_with_http_info(self, system_id, vasa_id, vasa_config, **kwargs):  # noqa: E501
        """Configures vasa service for the specified id.  # noqa: E501

        Enables or disable vasa service  on a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_vasa_configure_with_http_info(system_id, vasa_id, vasa_config, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str vasa_id: ID of the VASA service (required)
        :param VasaConfig vasa_config: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'vasa_id', 'vasa_config']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_network_service_vasa_configure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_network_service_vasa_configure`")  # noqa: E501
        # verify the required parameter 'vasa_id' is set
        if ('vasa_id' not in params or
                params['vasa_id'] is None):
            raise ValueError("Missing the required parameter `vasa_id` when calling `device_type1_network_service_vasa_configure`")  # noqa: E501
        # verify the required parameter 'vasa_config' is set
        if ('vasa_config' not in params or
                params['vasa_config'] is None):
            raise ValueError("Missing the required parameter `vasa_config` when calling `device_type1_network_service_vasa_configure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'vasa_id' in params:
            path_params['vasaId'] = params['vasa_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vasa_config' in params:
            body_params = params['vasa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/vasa/{vasaId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_network_service_vasa_get(self, system_id, **kwargs):  # noqa: E501
        """Get VASA Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501

        Get VASA Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_vasa_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkServicesVasa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_network_service_vasa_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_network_service_vasa_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_network_service_vasa_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get VASA Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501

        Get VASA Network-Service details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_service_vasa_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkServicesVasa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_network_service_vasa_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_network_service_vasa_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/vasa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkServicesVasa',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_network_settings_get(self, system_id, **kwargs):  # noqa: E501
        """Get Network-Settings details for a storage system Primera / Alletra 9K  # noqa: E501

        Get Network-Settings details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_settings_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_network_settings_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_network_settings_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_network_settings_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get Network-Settings details for a storage system Primera / Alletra 9K  # noqa: E501

        Get Network-Settings details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_network_settings_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NetworkSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_network_settings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_network_settings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkSettings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_node_service_ports_get_by_id(self, node_id, system_id, **kwargs):  # noqa: E501
        """Get service ports for nodes of all storage systems of Primera / Alletra 9K identified by {systemId} and {nodeId }  # noqa: E501

        Get service ports for nodes of all storage systems of Primera / Alletra 9K identified by {systemId} and {nodeId }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_node_service_ports_get_by_id(node_id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Primary ID of the node (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter systems by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ServicePortsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_node_service_ports_get_by_id_with_http_info(node_id, system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_node_service_ports_get_by_id_with_http_info(node_id, system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_node_service_ports_get_by_id_with_http_info(self, node_id, system_id, **kwargs):  # noqa: E501
        """Get service ports for nodes of all storage systems of Primera / Alletra 9K identified by {systemId} and {nodeId }  # noqa: E501

        Get service ports for nodes of all storage systems of Primera / Alletra 9K identified by {systemId} and {nodeId }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_node_service_ports_get_by_id_with_http_info(node_id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Primary ID of the node (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter systems by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ServicePortsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'system_id', 'limit', 'offset', 'filter', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_node_service_ports_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `device_type1_node_service_ports_get_by_id`")  # noqa: E501
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_node_service_ports_get_by_id`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_node_service_ports_get_by_id`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_node_service_ports_get_by_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['nodeId'] = params['node_id']  # noqa: E501
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/nodes/{nodeId}/service-ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServicePortsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_node_service_ports_list(self, system_id, **kwargs):  # noqa: E501
        """Get service ports for nodes of all storage systems of Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get service ports for nodes of all storage systems of Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_node_service_ports_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter systems by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ServicePortsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_node_service_ports_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_node_service_ports_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_node_service_ports_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get service ports for nodes of all storage systems of Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get service ports for nodes of all storage systems of Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_node_service_ports_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter systems by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ServicePortsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_node_service_ports_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_node_service_ports_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_node_service_ports_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_node_service_ports_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/nodes/service-ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServicePortsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_post_quorum_witness(self, system_id, create_quorum_witness_input, **kwargs):  # noqa: E501
        """Create quorum witness on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Create quorum witness on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_post_quorum_witness(system_id, create_quorum_witness_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateQuorumWitnessInput create_quorum_witness_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_post_quorum_witness_with_http_info(system_id, create_quorum_witness_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_post_quorum_witness_with_http_info(system_id, create_quorum_witness_input, **kwargs)  # noqa: E501
            return data

    def device_type1_post_quorum_witness_with_http_info(self, system_id, create_quorum_witness_input, **kwargs):  # noqa: E501
        """Create quorum witness on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Create quorum witness on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_post_quorum_witness_with_http_info(system_id, create_quorum_witness_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateQuorumWitnessInput create_quorum_witness_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'create_quorum_witness_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_post_quorum_witness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_post_quorum_witness`")  # noqa: E501
        # verify the required parameter 'create_quorum_witness_input' is set
        if ('create_quorum_witness_input' not in params or
                params['create_quorum_witness_input'] is None):
            raise ValueError("Missing the required parameter `create_quorum_witness_input` when calling `device_type1_post_quorum_witness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_quorum_witness_input' in params:
            body_params = params['create_quorum_witness_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/quorum-witness', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_post_remove_replication_partners(self, system_id, remove_replication_partners_input, **kwargs):  # noqa: E501
        """Delete replication partner from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete replication partner from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_post_remove_replication_partners(system_id, remove_replication_partners_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param RemoveReplicationPartnersInput remove_replication_partners_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_post_remove_replication_partners_with_http_info(system_id, remove_replication_partners_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_post_remove_replication_partners_with_http_info(system_id, remove_replication_partners_input, **kwargs)  # noqa: E501
            return data

    def device_type1_post_remove_replication_partners_with_http_info(self, system_id, remove_replication_partners_input, **kwargs):  # noqa: E501
        """Delete replication partner from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete replication partner from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_post_remove_replication_partners_with_http_info(system_id, remove_replication_partners_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param RemoveReplicationPartnersInput remove_replication_partners_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'remove_replication_partners_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_post_remove_replication_partners" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_post_remove_replication_partners`")  # noqa: E501
        # verify the required parameter 'remove_replication_partners_input' is set
        if ('remove_replication_partners_input' not in params or
                params['remove_replication_partners_input'] is None):
            raise ValueError("Missing the required parameter `remove_replication_partners_input` when calling `device_type1_post_remove_replication_partners`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_replication_partners_input' in params:
            body_params = params['remove_replication_partners_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/replication-partners/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_post_replication_partners(self, system_id, create_replication_partners_input, **kwargs):  # noqa: E501
        """Create replication partners on Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Create replication partners on Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_post_replication_partners(system_id, create_replication_partners_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateReplicationPartnersInput create_replication_partners_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_post_replication_partners_with_http_info(system_id, create_replication_partners_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_post_replication_partners_with_http_info(system_id, create_replication_partners_input, **kwargs)  # noqa: E501
            return data

    def device_type1_post_replication_partners_with_http_info(self, system_id, create_replication_partners_input, **kwargs):  # noqa: E501
        """Create replication partners on Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Create replication partners on Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_post_replication_partners_with_http_info(system_id, create_replication_partners_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateReplicationPartnersInput create_replication_partners_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'create_replication_partners_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_post_replication_partners" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_post_replication_partners`")  # noqa: E501
        # verify the required parameter 'create_replication_partners_input' is set
        if ('create_replication_partners_input' not in params or
                params['create_replication_partners_input'] is None):
            raise ValueError("Missing the required parameter `create_replication_partners_input` when calling `device_type1_post_replication_partners`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_replication_partners_input' in params:
            body_params = params['create_replication_partners_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/replication-partners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_post_v_center_settings(self, system_id, v_center_settings_input, **kwargs):  # noqa: E501
        """Add vCenter settings to storage system Primera / Alletra 9K  # noqa: E501

        Add vCenter settings to storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_post_v_center_settings(system_id, v_center_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param VCenterSettingsInput v_center_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_post_v_center_settings_with_http_info(system_id, v_center_settings_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_post_v_center_settings_with_http_info(system_id, v_center_settings_input, **kwargs)  # noqa: E501
            return data

    def device_type1_post_v_center_settings_with_http_info(self, system_id, v_center_settings_input, **kwargs):  # noqa: E501
        """Add vCenter settings to storage system Primera / Alletra 9K  # noqa: E501

        Add vCenter settings to storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_post_v_center_settings_with_http_info(system_id, v_center_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param VCenterSettingsInput v_center_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'v_center_settings_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_post_v_center_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_post_v_center_settings`")  # noqa: E501
        # verify the required parameter 'v_center_settings_input' is set
        if ('v_center_settings_input' not in params or
                params['v_center_settings_input'] is None):
            raise ValueError("Missing the required parameter `v_center_settings_input` when calling `device_type1_post_v_center_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v_center_settings_input' in params:
            body_params = params['v_center_settings_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/vm-manager-settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_put_quorum_witness(self, system_id, replication_partner_id, edit_quorum_witness_input, **kwargs):  # noqa: E501
        """Edit quorum witness identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit quorum witness identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_put_quorum_witness(system_id, replication_partner_id, edit_quorum_witness_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param EditQuorumWitnessInput edit_quorum_witness_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_put_quorum_witness_with_http_info(system_id, replication_partner_id, edit_quorum_witness_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_put_quorum_witness_with_http_info(system_id, replication_partner_id, edit_quorum_witness_input, **kwargs)  # noqa: E501
            return data

    def device_type1_put_quorum_witness_with_http_info(self, system_id, replication_partner_id, edit_quorum_witness_input, **kwargs):  # noqa: E501
        """Edit quorum witness identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit quorum witness identified by {replicationPartnerId} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_put_quorum_witness_with_http_info(system_id, replication_partner_id, edit_quorum_witness_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param EditQuorumWitnessInput edit_quorum_witness_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'replication_partner_id', 'edit_quorum_witness_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_put_quorum_witness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_put_quorum_witness`")  # noqa: E501
        # verify the required parameter 'replication_partner_id' is set
        if ('replication_partner_id' not in params or
                params['replication_partner_id'] is None):
            raise ValueError("Missing the required parameter `replication_partner_id` when calling `device_type1_put_quorum_witness`")  # noqa: E501
        # verify the required parameter 'edit_quorum_witness_input' is set
        if ('edit_quorum_witness_input' not in params or
                params['edit_quorum_witness_input'] is None):
            raise ValueError("Missing the required parameter `edit_quorum_witness_input` when calling `device_type1_put_quorum_witness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'replication_partner_id' in params:
            path_params['replicationPartnerId'] = params['replication_partner_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'edit_quorum_witness_input' in params:
            body_params = params['edit_quorum_witness_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/quorum-witness/{replicationPartnerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_put_replication_partner(self, system_id, replication_partner_id, edit_replication_partner_input, **kwargs):  # noqa: E501
        """Edit replication partner identified by {replicationPartnerId} on Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit replication partner identified by {replicationPartnerId} on Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_put_replication_partner(system_id, replication_partner_id, edit_replication_partner_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param EditReplicationPartnerInput edit_replication_partner_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_put_replication_partner_with_http_info(system_id, replication_partner_id, edit_replication_partner_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_put_replication_partner_with_http_info(system_id, replication_partner_id, edit_replication_partner_input, **kwargs)  # noqa: E501
            return data

    def device_type1_put_replication_partner_with_http_info(self, system_id, replication_partner_id, edit_replication_partner_input, **kwargs):  # noqa: E501
        """Edit replication partner identified by {replicationPartnerId} on Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit replication partner identified by {replicationPartnerId} on Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_put_replication_partner_with_http_info(system_id, replication_partner_id, edit_replication_partner_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param EditReplicationPartnerInput edit_replication_partner_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'replication_partner_id', 'edit_replication_partner_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_put_replication_partner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_put_replication_partner`")  # noqa: E501
        # verify the required parameter 'replication_partner_id' is set
        if ('replication_partner_id' not in params or
                params['replication_partner_id'] is None):
            raise ValueError("Missing the required parameter `replication_partner_id` when calling `device_type1_put_replication_partner`")  # noqa: E501
        # verify the required parameter 'edit_replication_partner_input' is set
        if ('edit_replication_partner_input' not in params or
                params['edit_replication_partner_input'] is None):
            raise ValueError("Missing the required parameter `edit_replication_partner_input` when calling `device_type1_put_replication_partner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'replication_partner_id' in params:
            path_params['replicationPartnerId'] = params['replication_partner_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'edit_replication_partner_input' in params:
            body_params = params['edit_replication_partner_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings/replication-partners/{replicationPartnerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_put_v_center_settings(self, system_id, vcenter_setting_id, edit_v_center_settings_input, **kwargs):  # noqa: E501
        """Edit vCenter setting identified by {vcenterSettingId} on Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit vCenter setting identified by {vcenterSettingId} on Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_put_v_center_settings(system_id, vcenter_setting_id, edit_v_center_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str vcenter_setting_id: UID(vcenterSettingId) of the storage system (required)
        :param EditVCenterSettingsInput edit_v_center_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_put_v_center_settings_with_http_info(system_id, vcenter_setting_id, edit_v_center_settings_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_put_v_center_settings_with_http_info(system_id, vcenter_setting_id, edit_v_center_settings_input, **kwargs)  # noqa: E501
            return data

    def device_type1_put_v_center_settings_with_http_info(self, system_id, vcenter_setting_id, edit_v_center_settings_input, **kwargs):  # noqa: E501
        """Edit vCenter setting identified by {vcenterSettingId} on Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit vCenter setting identified by {vcenterSettingId} on Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_put_v_center_settings_with_http_info(system_id, vcenter_setting_id, edit_v_center_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str vcenter_setting_id: UID(vcenterSettingId) of the storage system (required)
        :param EditVCenterSettingsInput edit_v_center_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'vcenter_setting_id', 'edit_v_center_settings_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_put_v_center_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_put_v_center_settings`")  # noqa: E501
        # verify the required parameter 'vcenter_setting_id' is set
        if ('vcenter_setting_id' not in params or
                params['vcenter_setting_id'] is None):
            raise ValueError("Missing the required parameter `vcenter_setting_id` when calling `device_type1_put_v_center_settings`")  # noqa: E501
        # verify the required parameter 'edit_v_center_settings_input' is set
        if ('edit_v_center_settings_input' not in params or
                params['edit_v_center_settings_input'] is None):
            raise ValueError("Missing the required parameter `edit_v_center_settings_input` when calling `device_type1_put_v_center_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'vcenter_setting_id' in params:
            path_params['vcenterSettingId'] = params['vcenter_setting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'edit_v_center_settings_input' in params:
            body_params = params['edit_v_center_settings_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/vm-manager-settings/{vcenterSettingId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_support_data_collect(self, system_id, collect_support_data_input, **kwargs):  # noqa: E501
        """Trigger a collection on the storage system Primera / Alletra 9K  # noqa: E501

        Trigger a collection on the storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_support_data_collect(system_id, collect_support_data_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param list[CollectSupportDataInput] collect_support_data_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_support_data_collect_with_http_info(system_id, collect_support_data_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_support_data_collect_with_http_info(system_id, collect_support_data_input, **kwargs)  # noqa: E501
            return data

    def device_type1_support_data_collect_with_http_info(self, system_id, collect_support_data_input, **kwargs):  # noqa: E501
        """Trigger a collection on the storage system Primera / Alletra 9K  # noqa: E501

        Trigger a collection on the storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_support_data_collect_with_http_info(system_id, collect_support_data_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param list[CollectSupportDataInput] collect_support_data_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'collect_support_data_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_support_data_collect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_support_data_collect`")  # noqa: E501
        # verify the required parameter 'collect_support_data_input' is set
        if ('collect_support_data_input' not in params or
                params['collect_support_data_input'] is None):
            raise ValueError("Missing the required parameter `collect_support_data_input` when calling `device_type1_support_data_collect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'collect_support_data_input' in params:
            body_params = params['collect_support_data_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/collect-support-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_support_settings_get(self, system_id, **kwargs):  # noqa: E501
        """Get support settings for a storage system Primera / Alletra 9K  # noqa: E501

        Get support settings for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_support_settings_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SupportSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_support_settings_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_support_settings_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_support_settings_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get support settings for a storage system Primera / Alletra 9K  # noqa: E501

        Get support settings for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_support_settings_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SupportSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_support_settings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_support_settings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/support-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportSetting',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_system_settings_list(self, system_id, **kwargs):  # noqa: E501
        """Get the system settings configuration details  # noqa: E501

        Get the system settings configuration details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_settings_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SystemConfigParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_system_settings_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_system_settings_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_system_settings_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get the system settings configuration details  # noqa: E501

        Get the system settings configuration details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_settings_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SystemConfigParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_system_settings_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_system_settings_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemConfigParams',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_telemetry_get(self, system_id, **kwargs):  # noqa: E501
        """Get telemetry status for a storage system Primera / Alletra 9K  # noqa: E501

        Get telemetry status for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_telemetry_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: TelemetryStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_telemetry_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_telemetry_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_telemetry_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get telemetry status for a storage system Primera / Alletra 9K  # noqa: E501

        Get telemetry status for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_telemetry_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: TelemetryStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_telemetry_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_telemetry_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/telemetry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TelemetryStatus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_trusted_certificates_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get certificates trusted by Primera / Alletra 9K identified by {id}  # noqa: E501

        Get certificates trusted by Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_trusted_certificates_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the certificate (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: TrustedCertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_trusted_certificates_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_trusted_certificates_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_trusted_certificates_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get certificates trusted by Primera / Alletra 9K identified by {id}  # noqa: E501

        Get certificates trusted by Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_trusted_certificates_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the certificate (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: TrustedCertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_trusted_certificates_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_trusted_certificates_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_trusted_certificates_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/trust-certificates/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrustedCertificateDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_trusted_certificates_list(self, system_id, **kwargs):  # noqa: E501
        """Get certificates trusted by Primera / Alletra 9K  # noqa: E501

        Get certificates trusted by Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_trusted_certificates_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Certificates by Key.
        :return: TrustedCertificatesSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_trusted_certificates_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_trusted_certificates_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_trusted_certificates_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get certificates trusted by Primera / Alletra 9K  # noqa: E501

        Get certificates trusted by Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_trusted_certificates_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Certificates by Key.
        :return: TrustedCertificatesSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select', 'limit', 'offset', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_trusted_certificates_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_trusted_certificates_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_trusted_certificates_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_trusted_certificates_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/trust-certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrustedCertificatesSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_vm_manager_settings_get_by_id(self, system_id, vcenter_setting_id, **kwargs):  # noqa: E501
        """Get vcenter setting detail for a given vcenter setting of a storage system Primera / Alletra 9K  # noqa: E501

        Get vcenter setting detail for a given vcenter setting of a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vm_manager_settings_get_by_id(system_id, vcenter_setting_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str vcenter_setting_id: UID(vcenterSettingId) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: VcenterSettingDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_vm_manager_settings_get_by_id_with_http_info(system_id, vcenter_setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_vm_manager_settings_get_by_id_with_http_info(system_id, vcenter_setting_id, **kwargs)  # noqa: E501
            return data

    def device_type1_vm_manager_settings_get_by_id_with_http_info(self, system_id, vcenter_setting_id, **kwargs):  # noqa: E501
        """Get vcenter setting detail for a given vcenter setting of a storage system Primera / Alletra 9K  # noqa: E501

        Get vcenter setting detail for a given vcenter setting of a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vm_manager_settings_get_by_id_with_http_info(system_id, vcenter_setting_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str vcenter_setting_id: UID(vcenterSettingId) of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: VcenterSettingDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'vcenter_setting_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_vm_manager_settings_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_vm_manager_settings_get_by_id`")  # noqa: E501
        # verify the required parameter 'vcenter_setting_id' is set
        if ('vcenter_setting_id' not in params or
                params['vcenter_setting_id'] is None):
            raise ValueError("Missing the required parameter `vcenter_setting_id` when calling `device_type1_vm_manager_settings_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'vcenter_setting_id' in params:
            path_params['vcenterSettingId'] = params['vcenter_setting_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/vm-manager-settings/{vcenterSettingId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcenterSettingDetail',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_vm_manager_settings_list(self, system_id, **kwargs):  # noqa: E501
        """Get vcenter settings for a storage system Primera / Alletra 9K  # noqa: E501

        Get vcenter settings for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vm_manager_settings_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :return: VcenterSettingsSumarryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_vm_manager_settings_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_vm_manager_settings_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_vm_manager_settings_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get vcenter settings for a storage system Primera / Alletra 9K  # noqa: E501

        Get vcenter settings for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_vm_manager_settings_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :return: VcenterSettingsSumarryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select', 'limit', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_vm_manager_settings_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_vm_manager_settings_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_vm_manager_settings_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_vm_manager_settings_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/vm-manager-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VcenterSettingsSumarryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_application_server_create(self, system_id, create_application_server, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K application server in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K application server in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_application_server_create(system_id, create_application_server, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param CreateApplicationServer create_application_server: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_application_server_create_with_http_info(system_id, create_application_server, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_application_server_create_with_http_info(system_id, create_application_server, **kwargs)  # noqa: E501
            return data

    def device_type2_application_server_create_with_http_info(self, system_id, create_application_server, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K application server in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K application server in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_application_server_create_with_http_info(system_id, create_application_server, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param CreateApplicationServer create_application_server: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'create_application_server']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_application_server_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_application_server_create`")  # noqa: E501
        # verify the required parameter 'create_application_server' is set
        if ('create_application_server' not in params or
                params['create_application_server'] is None):
            raise ValueError("Missing the required parameter `create_application_server` when calling `device_type2_application_server_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_application_server' in params:
            body_params = params['create_application_server']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/application-servers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_application_server_edit(self, system_id, application_server_id, edit_application_server, **kwargs):  # noqa: E501
        """Modify Nimble / Alletra 6K application server in system identified by {systemId}  # noqa: E501

        Modify Nimble / Alletra 6K application server in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_application_server_edit(system_id, application_server_id, edit_application_server, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str application_server_id: Identifier of application server. A 42 digit hexadecimal number. (required)
        :param EditApplicationServer edit_application_server: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_application_server_edit_with_http_info(system_id, application_server_id, edit_application_server, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_application_server_edit_with_http_info(system_id, application_server_id, edit_application_server, **kwargs)  # noqa: E501
            return data

    def device_type2_application_server_edit_with_http_info(self, system_id, application_server_id, edit_application_server, **kwargs):  # noqa: E501
        """Modify Nimble / Alletra 6K application server in system identified by {systemId}  # noqa: E501

        Modify Nimble / Alletra 6K application server in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_application_server_edit_with_http_info(system_id, application_server_id, edit_application_server, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str application_server_id: Identifier of application server. A 42 digit hexadecimal number. (required)
        :param EditApplicationServer edit_application_server: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'application_server_id', 'edit_application_server']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_application_server_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_application_server_edit`")  # noqa: E501
        # verify the required parameter 'application_server_id' is set
        if ('application_server_id' not in params or
                params['application_server_id'] is None):
            raise ValueError("Missing the required parameter `application_server_id` when calling `device_type2_application_server_edit`")  # noqa: E501
        # verify the required parameter 'edit_application_server' is set
        if ('edit_application_server' not in params or
                params['edit_application_server'] is None):
            raise ValueError("Missing the required parameter `edit_application_server` when calling `device_type2_application_server_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'application_server_id' in params:
            path_params['applicationServerId'] = params['application_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'edit_application_server' in params:
            body_params = params['edit_application_server']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/application-servers/{applicationServerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_create_replication_partners(self, system_id, nimble_create_replication_partner_input, **kwargs):  # noqa: E501
        """Create replication partner pair for Nimble / Alletra 6K  # noqa: E501

        Create replication partner pair for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_replication_partners(system_id, nimble_create_replication_partner_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateReplicationPartnerInput nimble_create_replication_partner_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_create_replication_partners_with_http_info(system_id, nimble_create_replication_partner_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_create_replication_partners_with_http_info(system_id, nimble_create_replication_partner_input, **kwargs)  # noqa: E501
            return data

    def device_type2_create_replication_partners_with_http_info(self, system_id, nimble_create_replication_partner_input, **kwargs):  # noqa: E501
        """Create replication partner pair for Nimble / Alletra 6K  # noqa: E501

        Create replication partner pair for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_replication_partners_with_http_info(system_id, nimble_create_replication_partner_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateReplicationPartnerInput nimble_create_replication_partner_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_replication_partner_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_create_replication_partners" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_create_replication_partners`")  # noqa: E501
        # verify the required parameter 'nimble_create_replication_partner_input' is set
        if ('nimble_create_replication_partner_input' not in params or
                params['nimble_create_replication_partner_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_replication_partner_input` when calling `device_type2_create_replication_partners`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_replication_partner_input' in params:
            body_params = params['nimble_create_replication_partner_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/replication-partners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_create_witness(self, system_id, nimble_create_witness_input, **kwargs):  # noqa: E501
        """Create a new witness configuration Nimble / Alletra 6K  # noqa: E501

        Create a new witness configuration Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_witness(system_id, nimble_create_witness_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateWitnessInput nimble_create_witness_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_create_witness_with_http_info(system_id, nimble_create_witness_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_create_witness_with_http_info(system_id, nimble_create_witness_input, **kwargs)  # noqa: E501
            return data

    def device_type2_create_witness_with_http_info(self, system_id, nimble_create_witness_input, **kwargs):  # noqa: E501
        """Create a new witness configuration Nimble / Alletra 6K  # noqa: E501

        Create a new witness configuration Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_witness_with_http_info(system_id, nimble_create_witness_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateWitnessInput nimble_create_witness_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_witness_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_create_witness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_create_witness`")  # noqa: E501
        # verify the required parameter 'nimble_create_witness_input' is set
        if ('nimble_create_witness_input' not in params or
                params['nimble_create_witness_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_witness_input` when calling `device_type2_create_witness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_witness_input' in params:
            body_params = params['nimble_create_witness_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/witnesses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_mail_settings(self, system_id, nimble_mail_setting_input, **kwargs):  # noqa: E501
        """Edit Nimble Mail Settings of Nimble / Alletra 6K  # noqa: E501

        Edit Nimble Mail Settings of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_mail_settings(system_id, nimble_mail_setting_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleMailSettingInput nimble_mail_setting_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_mail_settings_with_http_info(system_id, nimble_mail_setting_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_mail_settings_with_http_info(system_id, nimble_mail_setting_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_mail_settings_with_http_info(self, system_id, nimble_mail_setting_input, **kwargs):  # noqa: E501
        """Edit Nimble Mail Settings of Nimble / Alletra 6K  # noqa: E501

        Edit Nimble Mail Settings of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_mail_settings_with_http_info(system_id, nimble_mail_setting_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleMailSettingInput nimble_mail_setting_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_mail_setting_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_mail_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_mail_settings`")  # noqa: E501
        # verify the required parameter 'nimble_mail_setting_input' is set
        if ('nimble_mail_setting_input' not in params or
                params['nimble_mail_setting_input'] is None):
            raise ValueError("Missing the required parameter `nimble_mail_setting_input` when calling `device_type2_edit_mail_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_mail_setting_input' in params:
            body_params = params['nimble_mail_setting_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/mail-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_network_setting_by_id(self, system_id, network_setting_id, nimble_edit_network_settings, **kwargs):  # noqa: E501
        """Edit Nimble / Alletra 6K network setting identified by {networkSettingId}  # noqa: E501

        Edit Nimble / Alletra 6K network setting identified by {networkSettingId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_network_setting_by_id(system_id, network_setting_id, nimble_edit_network_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str network_setting_id: Identifier of network setting. A 42 digit hexadecimal number. (required)
        :param NimbleEditNetworkSettings nimble_edit_network_settings: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_network_setting_by_id_with_http_info(system_id, network_setting_id, nimble_edit_network_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_network_setting_by_id_with_http_info(system_id, network_setting_id, nimble_edit_network_settings, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_network_setting_by_id_with_http_info(self, system_id, network_setting_id, nimble_edit_network_settings, **kwargs):  # noqa: E501
        """Edit Nimble / Alletra 6K network setting identified by {networkSettingId}  # noqa: E501

        Edit Nimble / Alletra 6K network setting identified by {networkSettingId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_network_setting_by_id_with_http_info(system_id, network_setting_id, nimble_edit_network_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str network_setting_id: Identifier of network setting. A 42 digit hexadecimal number. (required)
        :param NimbleEditNetworkSettings nimble_edit_network_settings: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'network_setting_id', 'nimble_edit_network_settings']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_network_setting_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_network_setting_by_id`")  # noqa: E501
        # verify the required parameter 'network_setting_id' is set
        if ('network_setting_id' not in params or
                params['network_setting_id'] is None):
            raise ValueError("Missing the required parameter `network_setting_id` when calling `device_type2_edit_network_setting_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_network_settings' is set
        if ('nimble_edit_network_settings' not in params or
                params['nimble_edit_network_settings'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_network_settings` when calling `device_type2_edit_network_setting_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'network_setting_id' in params:
            path_params['networkSettingId'] = params['network_setting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_network_settings' in params:
            body_params = params['nimble_edit_network_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/network-settings/{networkSettingId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_replication_partners_by_id(self, system_id, replicationpartner_id, nimble_edit_replication_partner_input, **kwargs):  # noqa: E501
        """Edit a replication partner for Nimble / Alletra 6K given by replicationpartnerId  # noqa: E501

        Edit a replication partner for Nimble / Alletra 6K given by replicationpartnerId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_replication_partners_by_id(system_id, replicationpartner_id, nimble_edit_replication_partner_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str replicationpartner_id: Identifier of replicationpartner. A 42 digit hexadecimal number. (required)
        :param NimbleEditReplicationPartnerInput nimble_edit_replication_partner_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_replication_partners_by_id_with_http_info(system_id, replicationpartner_id, nimble_edit_replication_partner_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_replication_partners_by_id_with_http_info(system_id, replicationpartner_id, nimble_edit_replication_partner_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_replication_partners_by_id_with_http_info(self, system_id, replicationpartner_id, nimble_edit_replication_partner_input, **kwargs):  # noqa: E501
        """Edit a replication partner for Nimble / Alletra 6K given by replicationpartnerId  # noqa: E501

        Edit a replication partner for Nimble / Alletra 6K given by replicationpartnerId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_replication_partners_by_id_with_http_info(system_id, replicationpartner_id, nimble_edit_replication_partner_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str replicationpartner_id: Identifier of replicationpartner. A 42 digit hexadecimal number. (required)
        :param NimbleEditReplicationPartnerInput nimble_edit_replication_partner_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'replicationpartner_id', 'nimble_edit_replication_partner_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_replication_partners_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_replication_partners_by_id`")  # noqa: E501
        # verify the required parameter 'replicationpartner_id' is set
        if ('replicationpartner_id' not in params or
                params['replicationpartner_id'] is None):
            raise ValueError("Missing the required parameter `replicationpartner_id` when calling `device_type2_edit_replication_partners_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_replication_partner_input' is set
        if ('nimble_edit_replication_partner_input' not in params or
                params['nimble_edit_replication_partner_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_replication_partner_input` when calling `device_type2_edit_replication_partners_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'replicationpartner_id' in params:
            path_params['replicationpartnerId'] = params['replicationpartner_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_replication_partner_input' in params:
            body_params = params['nimble_edit_replication_partner_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/replication-partners/{replicationpartnerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_system_settings(self, system_id, nimble_edit_system_settings, **kwargs):  # noqa: E501
        """Edit system settings of Nimble / Alletra 6K  # noqa: E501

        Edit system settings of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_system_settings(system_id, nimble_edit_system_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleEditSystemSettings nimble_edit_system_settings: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_system_settings_with_http_info(system_id, nimble_edit_system_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_system_settings_with_http_info(system_id, nimble_edit_system_settings, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_system_settings_with_http_info(self, system_id, nimble_edit_system_settings, **kwargs):  # noqa: E501
        """Edit system settings of Nimble / Alletra 6K  # noqa: E501

        Edit system settings of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_system_settings_with_http_info(system_id, nimble_edit_system_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleEditSystemSettings nimble_edit_system_settings: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_edit_system_settings']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_system_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_system_settings`")  # noqa: E501
        # verify the required parameter 'nimble_edit_system_settings' is set
        if ('nimble_edit_system_settings' not in params or
                params['nimble_edit_system_settings'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_system_settings` when calling `device_type2_edit_system_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_system_settings' in params:
            body_params = params['nimble_edit_system_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_application_servers(self, system_id, **kwargs):  # noqa: E501
        """Get all application servers details by Nimble / Alletra 6K  # noqa: E501

        Get all application servers details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_application_servers(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter application servers by Key.
        :param str sort: oData query to sort application servers by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ApplicationServersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_application_servers_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_application_servers_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_application_servers_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all application servers details by Nimble / Alletra 6K  # noqa: E501

        Get all application servers details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_application_servers_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter application servers by Key.
        :param str sort: oData query to sort application servers by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ApplicationServersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_application_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_application_servers`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_application_servers`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_application_servers`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/application-servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationServersList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_network_settings(self, system_id, **kwargs):  # noqa: E501
        """Get all network settings details by Nimble / Alletra 6K  # noqa: E501

        Get all network settings details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_network_settings(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter network settings by Key.
        :param str sort: oData query to sort network settings resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNetworkSettingsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_network_settings_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_network_settings_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_network_settings_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all network settings details by Nimble / Alletra 6K  # noqa: E501

        Get all network settings details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_network_settings_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter network settings by Key.
        :param str sort: oData query to sort network settings resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNetworkSettingsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_network_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_network_settings`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_network_settings`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_network_settings`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/network-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleNetworkSettingsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_application_server_by_id(self, system_id, application_server_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K application server identified by {applicationServerId}  # noqa: E501

        Get details of Nimble / Alletra 6K application server identified by {applicationServerId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_application_server_by_id(system_id, application_server_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str application_server_id: Identifier of application server. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ApplicationServerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_application_server_by_id_with_http_info(system_id, application_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_application_server_by_id_with_http_info(system_id, application_server_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_application_server_by_id_with_http_info(self, system_id, application_server_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K application server identified by {applicationServerId}  # noqa: E501

        Get details of Nimble / Alletra 6K application server identified by {applicationServerId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_application_server_by_id_with_http_info(system_id, application_server_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str application_server_id: Identifier of application server. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: ApplicationServerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'application_server_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_application_server_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_application_server_by_id`")  # noqa: E501
        # verify the required parameter 'application_server_id' is set
        if ('application_server_id' not in params or
                params['application_server_id'] is None):
            raise ValueError("Missing the required parameter `application_server_id` when calling `device_type2_get_application_server_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'application_server_id' in params:
            path_params['applicationServerId'] = params['application_server_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/application-servers/{applicationServerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationServerDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_network_setting_by_id(self, system_id, network_setting_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K network setting identified by {networkSettingId}  # noqa: E501

        Get details of Nimble / Alletra 6K network setting identified by {networkSettingId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_network_setting_by_id(system_id, network_setting_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str network_setting_id: Identifier of network setting. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNetworkSettingsDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_network_setting_by_id_with_http_info(system_id, network_setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_network_setting_by_id_with_http_info(system_id, network_setting_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_network_setting_by_id_with_http_info(self, system_id, network_setting_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K network setting identified by {networkSettingId}  # noqa: E501

        Get details of Nimble / Alletra 6K network setting identified by {networkSettingId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_network_setting_by_id_with_http_info(system_id, network_setting_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str network_setting_id: Identifier of network setting. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNetworkSettingsDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'network_setting_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_network_setting_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_network_setting_by_id`")  # noqa: E501
        # verify the required parameter 'network_setting_id' is set
        if ('network_setting_id' not in params or
                params['network_setting_id'] is None):
            raise ValueError("Missing the required parameter `network_setting_id` when calling `device_type2_get_network_setting_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'network_setting_id' in params:
            path_params['networkSettingId'] = params['network_setting_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/network-settings/{networkSettingId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleNetworkSettingsDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_replication_partners(self, system_id, **kwargs):  # noqa: E501
        """Get all replication-partners details for Nimble / Alletra 6K  # noqa: E501

        Get all replication-partners details for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_replication_partners(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter replication partners by Key.
        :param str sort: oData query to sort replication partner resource by Key.
        :param bool include_indirect_partners: Include indirect partners. Indirect partners are excluded by default. This parameter cannot be used with other query parameters.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleReplicationPartnersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_replication_partners_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_replication_partners_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_replication_partners_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all replication-partners details for Nimble / Alletra 6K  # noqa: E501

        Get all replication-partners details for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_replication_partners_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter replication partners by Key.
        :param str sort: oData query to sort replication partner resource by Key.
        :param bool include_indirect_partners: Include indirect partners. Indirect partners are excluded by default. This parameter cannot be used with other query parameters.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleReplicationPartnersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'include_indirect_partners', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_replication_partners" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_replication_partners`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_replication_partners`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_replication_partners`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'include_indirect_partners' in params:
            query_params.append(('includeIndirectPartners', params['include_indirect_partners']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/replication-partners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleReplicationPartnersList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_replication_partners_by_id(self, system_id, replicationpartner_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K replication-partner identified by {replicationpartnerId}  # noqa: E501

        Get details of Nimble / Alletra 6K replication-partner identified by {replicationpartnerId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_replication_partners_by_id(system_id, replicationpartner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str replicationpartner_id: Identifier of replicationpartner. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleReplicationPartnerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_replication_partners_by_id_with_http_info(system_id, replicationpartner_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_replication_partners_by_id_with_http_info(system_id, replicationpartner_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_replication_partners_by_id_with_http_info(self, system_id, replicationpartner_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K replication-partner identified by {replicationpartnerId}  # noqa: E501

        Get details of Nimble / Alletra 6K replication-partner identified by {replicationpartnerId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_replication_partners_by_id_with_http_info(system_id, replicationpartner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str replicationpartner_id: Identifier of replicationpartner. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleReplicationPartnerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'replicationpartner_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_replication_partners_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_replication_partners_by_id`")  # noqa: E501
        # verify the required parameter 'replicationpartner_id' is set
        if ('replicationpartner_id' not in params or
                params['replicationpartner_id'] is None):
            raise ValueError("Missing the required parameter `replicationpartner_id` when calling `device_type2_get_replication_partners_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'replicationpartner_id' in params:
            path_params['replicationpartnerId'] = params['replicationpartner_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/replication-partners/{replicationpartnerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleReplicationPartnerDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_witnesses(self, system_id, **kwargs):  # noqa: E501
        """Get all witness configuration details by Nimble / Alletra 6K  # noqa: E501

        Get all witness configuration details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_witnesses(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter witnesses by Key.
        :param str sort: oData query to sort witnesses resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleWitnessesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_witnesses_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_witnesses_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_witnesses_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all witness configuration details by Nimble / Alletra 6K  # noqa: E501

        Get all witness configuration details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_witnesses_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter witnesses by Key.
        :param str sort: oData query to sort witnesses resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleWitnessesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_witnesses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_witnesses`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_witnesses`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_witnesses`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/witnesses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleWitnessesList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_witnesses_by_id(self, system_id, witness_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K witness configuration identified by {witnessId}  # noqa: E501

        Get details of Nimble / Alletra 6K witness configuration identified by {witnessId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_witnesses_by_id(system_id, witness_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str witness_id: Identifier of witness. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleWitnessDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_witnesses_by_id_with_http_info(system_id, witness_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_witnesses_by_id_with_http_info(system_id, witness_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_witnesses_by_id_with_http_info(self, system_id, witness_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K witness configuration identified by {witnessId}  # noqa: E501

        Get details of Nimble / Alletra 6K witness configuration identified by {witnessId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_witnesses_by_id_with_http_info(system_id, witness_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str witness_id: Identifier of witness. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleWitnessDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'witness_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_witnesses_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_witnesses_by_id`")  # noqa: E501
        # verify the required parameter 'witness_id' is set
        if ('witness_id' not in params or
                params['witness_id'] is None):
            raise ValueError("Missing the required parameter `witness_id` when calling `device_type2_get_witnesses_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'witness_id' in params:
            path_params['witnessId'] = params['witness_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/witnesses/{witnessId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleWitnessDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_pause_replication_partner(self, system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs):  # noqa: E501
        """Pause the replication pair of Nimble / Alletra 6K  # noqa: E501

        Pause the replication pair of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_pause_replication_partner(system_id, pause_resume_nimble_replication_partner_pair_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param PauseResumeNimbleReplicationPartnerPairInput pause_resume_nimble_replication_partner_pair_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_pause_replication_partner_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_pause_replication_partner_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs)  # noqa: E501
            return data

    def device_type2_pause_replication_partner_with_http_info(self, system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs):  # noqa: E501
        """Pause the replication pair of Nimble / Alletra 6K  # noqa: E501

        Pause the replication pair of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_pause_replication_partner_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param PauseResumeNimbleReplicationPartnerPairInput pause_resume_nimble_replication_partner_pair_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'pause_resume_nimble_replication_partner_pair_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_pause_replication_partner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_pause_replication_partner`")  # noqa: E501
        # verify the required parameter 'pause_resume_nimble_replication_partner_pair_input' is set
        if ('pause_resume_nimble_replication_partner_pair_input' not in params or
                params['pause_resume_nimble_replication_partner_pair_input'] is None):
            raise ValueError("Missing the required parameter `pause_resume_nimble_replication_partner_pair_input` when calling `device_type2_pause_replication_partner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pause_resume_nimble_replication_partner_pair_input' in params:
            body_params = params['pause_resume_nimble_replication_partner_pair_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/replication-partners/actions/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_application_server_by_id(self, system_id, application_server_id, **kwargs):  # noqa: E501
        """Remove application server identified by {applicationServerId} from Nimble / Alletra 6K  # noqa: E501

        Remove application server identified by {applicationServerId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_application_server_by_id(system_id, application_server_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str application_server_id: Identifier of application server. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_application_server_by_id_with_http_info(system_id, application_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_application_server_by_id_with_http_info(system_id, application_server_id, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_application_server_by_id_with_http_info(self, system_id, application_server_id, **kwargs):  # noqa: E501
        """Remove application server identified by {applicationServerId} from Nimble / Alletra 6K  # noqa: E501

        Remove application server identified by {applicationServerId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_application_server_by_id_with_http_info(system_id, application_server_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str application_server_id: Identifier of application server. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'application_server_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_application_server_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_application_server_by_id`")  # noqa: E501
        # verify the required parameter 'application_server_id' is set
        if ('application_server_id' not in params or
                params['application_server_id'] is None):
            raise ValueError("Missing the required parameter `application_server_id` when calling `device_type2_remove_application_server_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'application_server_id' in params:
            path_params['applicationServerId'] = params['application_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/application-servers/{applicationServerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_replication_partner(self, system_id, remove_replication_partners, **kwargs):  # noqa: E501
        """Remove list of replication partner for Nimble / Alletra 6K  # noqa: E501

        Remove list of replication partner for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_replication_partner(system_id, remove_replication_partners, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param RemoveReplicationPartners remove_replication_partners: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_replication_partner_with_http_info(system_id, remove_replication_partners, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_replication_partner_with_http_info(system_id, remove_replication_partners, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_replication_partner_with_http_info(self, system_id, remove_replication_partners, **kwargs):  # noqa: E501
        """Remove list of replication partner for Nimble / Alletra 6K  # noqa: E501

        Remove list of replication partner for Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_replication_partner_with_http_info(system_id, remove_replication_partners, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param RemoveReplicationPartners remove_replication_partners: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'remove_replication_partners']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_replication_partner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_replication_partner`")  # noqa: E501
        # verify the required parameter 'remove_replication_partners' is set
        if ('remove_replication_partners' not in params or
                params['remove_replication_partners'] is None):
            raise ValueError("Missing the required parameter `remove_replication_partners` when calling `device_type2_remove_replication_partner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_replication_partners' in params:
            body_params = params['remove_replication_partners']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/replication-partners/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_witnesses_by_id(self, system_id, witness_id, **kwargs):  # noqa: E501
        """Remove witness identified by {witnessId} from Nimble / Alletra 6K  # noqa: E501

        Remove witness identified by {witnessId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_witnesses_by_id(system_id, witness_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str witness_id: Identifier of witness. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_witnesses_by_id_with_http_info(system_id, witness_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_witnesses_by_id_with_http_info(system_id, witness_id, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_witnesses_by_id_with_http_info(self, system_id, witness_id, **kwargs):  # noqa: E501
        """Remove witness identified by {witnessId} from Nimble / Alletra 6K  # noqa: E501

        Remove witness identified by {witnessId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_witnesses_by_id_with_http_info(system_id, witness_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str witness_id: Identifier of witness. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'witness_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_witnesses_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_witnesses_by_id`")  # noqa: E501
        # verify the required parameter 'witness_id' is set
        if ('witness_id' not in params or
                params['witness_id'] is None):
            raise ValueError("Missing the required parameter `witness_id` when calling `device_type2_remove_witnesses_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'witness_id' in params:
            path_params['witnessId'] = params['witness_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/witnesses/{witnessId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_resume_replication_partner(self, system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs):  # noqa: E501
        """Resume the replication pair of Nimble / Alletra 6K  # noqa: E501

        Resume the replication pair of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_resume_replication_partner(system_id, pause_resume_nimble_replication_partner_pair_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param PauseResumeNimbleReplicationPartnerPairInput pause_resume_nimble_replication_partner_pair_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_resume_replication_partner_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_resume_replication_partner_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs)  # noqa: E501
            return data

    def device_type2_resume_replication_partner_with_http_info(self, system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs):  # noqa: E501
        """Resume the replication pair of Nimble / Alletra 6K  # noqa: E501

        Resume the replication pair of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_resume_replication_partner_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param PauseResumeNimbleReplicationPartnerPairInput pause_resume_nimble_replication_partner_pair_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'pause_resume_nimble_replication_partner_pair_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_resume_replication_partner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_resume_replication_partner`")  # noqa: E501
        # verify the required parameter 'pause_resume_nimble_replication_partner_pair_input' is set
        if ('pause_resume_nimble_replication_partner_pair_input' not in params or
                params['pause_resume_nimble_replication_partner_pair_input'] is None):
            raise ValueError("Missing the required parameter `pause_resume_nimble_replication_partner_pair_input` when calling `device_type2_resume_replication_partner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pause_resume_nimble_replication_partner_pair_input' in params:
            body_params = params['pause_resume_nimble_replication_partner_pair_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/replication-partners/actions/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_send_auto_support(self, system_id, **kwargs):  # noqa: E501
        """Send auto support information of Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Send auto support information of Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_send_auto_support(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_send_auto_support_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_send_auto_support_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_send_auto_support_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Send auto support information of Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Send auto support information of Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_send_auto_support_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_send_auto_support" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_send_auto_support`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/autosupport/actions/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_test_replication_configuration(self, system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs):  # noqa: E501
        """Test the replication partner pair of Nimble / Alletra 6K  # noqa: E501

        Test the replication partner pair of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_test_replication_configuration(system_id, pause_resume_nimble_replication_partner_pair_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param PauseResumeNimbleReplicationPartnerPairInput pause_resume_nimble_replication_partner_pair_input: (required)
        :return: TaskResponseReplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_test_replication_configuration_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_test_replication_configuration_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs)  # noqa: E501
            return data

    def device_type2_test_replication_configuration_with_http_info(self, system_id, pause_resume_nimble_replication_partner_pair_input, **kwargs):  # noqa: E501
        """Test the replication partner pair of Nimble / Alletra 6K  # noqa: E501

        Test the replication partner pair of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_test_replication_configuration_with_http_info(system_id, pause_resume_nimble_replication_partner_pair_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param PauseResumeNimbleReplicationPartnerPairInput pause_resume_nimble_replication_partner_pair_input: (required)
        :return: TaskResponseReplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'pause_resume_nimble_replication_partner_pair_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_test_replication_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_test_replication_configuration`")  # noqa: E501
        # verify the required parameter 'pause_resume_nimble_replication_partner_pair_input' is set
        if ('pause_resume_nimble_replication_partner_pair_input' not in params or
                params['pause_resume_nimble_replication_partner_pair_input'] is None):
            raise ValueError("Missing the required parameter `pause_resume_nimble_replication_partner_pair_input` when calling `device_type2_test_replication_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pause_resume_nimble_replication_partner_pair_input' in params:
            body_params = params['pause_resume_nimble_replication_partner_pair_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/replication-partners/actions/test', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponseReplication',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_test_witnesses_by_id(self, system_id, witness_id, **kwargs):  # noqa: E501
        """Test and validate the witness configuration between the host identified by {witnessId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Test and validate the witness configuration between the host identified by {witnessId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_test_witnesses_by_id(system_id, witness_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str witness_id: Identifier of witness. A 42 digit hexadecimal number. (required)
        :return: NimbleTestWitnessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_test_witnesses_by_id_with_http_info(system_id, witness_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_test_witnesses_by_id_with_http_info(system_id, witness_id, **kwargs)  # noqa: E501
            return data

    def device_type2_test_witnesses_by_id_with_http_info(self, system_id, witness_id, **kwargs):  # noqa: E501
        """Test and validate the witness configuration between the host identified by {witnessId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501

        Test and validate the witness configuration between the host identified by {witnessId} from Nimble / Alletra 6K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_test_witnesses_by_id_with_http_info(system_id, witness_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str witness_id: Identifier of witness. A 42 digit hexadecimal number. (required)
        :return: NimbleTestWitnessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'witness_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_test_witnesses_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_test_witnesses_by_id`")  # noqa: E501
        # verify the required parameter 'witness_id' is set
        if ('witness_id' not in params or
                params['witness_id'] is None):
            raise ValueError("Missing the required parameter `witness_id` when calling `device_type2_test_witnesses_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'witness_id' in params:
            path_params['witnessId'] = params['witness_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/system-settings/witnesses/{witnessId}/actions/test', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleTestWitnessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mail_settings_associate(self, system_id, mailsettings_input, **kwargs):  # noqa: E501
        """Add SMTP/Mail server settigs  # noqa: E501

        Add SMTP/Mail server settigs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.mail_settings_associate(system_id, mailsettings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param MailsettingsInput mailsettings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.mail_settings_associate_with_http_info(system_id, mailsettings_input, **kwargs)  # noqa: E501
        else:
            (data) = self.mail_settings_associate_with_http_info(system_id, mailsettings_input, **kwargs)  # noqa: E501
            return data

    def mail_settings_associate_with_http_info(self, system_id, mailsettings_input, **kwargs):  # noqa: E501
        """Add SMTP/Mail server settigs  # noqa: E501

        Add SMTP/Mail server settigs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.mail_settings_associate_with_http_info(system_id, mailsettings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param MailsettingsInput mailsettings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'mailsettings_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mail_settings_associate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `mail_settings_associate`")  # noqa: E501
        # verify the required parameter 'mailsettings_input' is set
        if ('mailsettings_input' not in params or
                params['mailsettings_input'] is None):
            raise ValueError("Missing the required parameter `mailsettings_input` when calling `mail_settings_associate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mailsettings_input' in params:
            body_params = params['mailsettings_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/mail-settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mail_settings_delete(self, system_id, **kwargs):  # noqa: E501
        """Delete SMTP/mail server settings  # noqa: E501

        Delete SMTP/mail server settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.mail_settings_delete(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.mail_settings_delete_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mail_settings_delete_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def mail_settings_delete_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Delete SMTP/mail server settings  # noqa: E501

        Delete SMTP/mail server settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.mail_settings_delete_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mail_settings_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `mail_settings_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/mail-settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mail_settings_update(self, system_id, mailsettings_input, **kwargs):  # noqa: E501
        """Edit SMTP/Mail server settigs  # noqa: E501

        Edit SMTP/Mail server settigs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.mail_settings_update(system_id, mailsettings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param MailsettingsInput mailsettings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.mail_settings_update_with_http_info(system_id, mailsettings_input, **kwargs)  # noqa: E501
        else:
            (data) = self.mail_settings_update_with_http_info(system_id, mailsettings_input, **kwargs)  # noqa: E501
            return data

    def mail_settings_update_with_http_info(self, system_id, mailsettings_input, **kwargs):  # noqa: E501
        """Edit SMTP/Mail server settigs  # noqa: E501

        Edit SMTP/Mail server settigs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.mail_settings_update_with_http_info(system_id, mailsettings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param MailsettingsInput mailsettings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'mailsettings_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mail_settings_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `mail_settings_update`")  # noqa: E501
        # verify the required parameter 'mailsettings_input' is set
        if ('mailsettings_input' not in params or
                params['mailsettings_input'] is None):
            raise ValueError("Missing the required parameter `mailsettings_input` when calling `mail_settings_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mailsettings_input' in params:
            body_params = params['mailsettings_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/mail-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def network_service_cim_update(self, system_id, nw_cim_edit, **kwargs):  # noqa: E501
        """Edit CIM network service configuration  # noqa: E501

        Edit CIM network service configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_service_cim_update(system_id, nw_cim_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param NwCimEdit nw_cim_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.network_service_cim_update_with_http_info(system_id, nw_cim_edit, **kwargs)  # noqa: E501
        else:
            (data) = self.network_service_cim_update_with_http_info(system_id, nw_cim_edit, **kwargs)  # noqa: E501
            return data

    def network_service_cim_update_with_http_info(self, system_id, nw_cim_edit, **kwargs):  # noqa: E501
        """Edit CIM network service configuration  # noqa: E501

        Edit CIM network service configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_service_cim_update_with_http_info(system_id, nw_cim_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param NwCimEdit nw_cim_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nw_cim_edit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method network_service_cim_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `network_service_cim_update`")  # noqa: E501
        # verify the required parameter 'nw_cim_edit' is set
        if ('nw_cim_edit' not in params or
                params['nw_cim_edit'] is None):
            raise ValueError("Missing the required parameter `nw_cim_edit` when calling `network_service_cim_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nw_cim_edit' in params:
            body_params = params['nw_cim_edit']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/cim', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def network_service_snmp_mgr_create(self, system_id, nw_add_snmp_mgr, **kwargs):  # noqa: E501
        """Add SNMP Manager settings  # noqa: E501

        Add SNMP Manager settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_service_snmp_mgr_create(system_id, nw_add_snmp_mgr, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param NwAddSnmpMgr nw_add_snmp_mgr: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.network_service_snmp_mgr_create_with_http_info(system_id, nw_add_snmp_mgr, **kwargs)  # noqa: E501
        else:
            (data) = self.network_service_snmp_mgr_create_with_http_info(system_id, nw_add_snmp_mgr, **kwargs)  # noqa: E501
            return data

    def network_service_snmp_mgr_create_with_http_info(self, system_id, nw_add_snmp_mgr, **kwargs):  # noqa: E501
        """Add SNMP Manager settings  # noqa: E501

        Add SNMP Manager settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_service_snmp_mgr_create_with_http_info(system_id, nw_add_snmp_mgr, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param NwAddSnmpMgr nw_add_snmp_mgr: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nw_add_snmp_mgr']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method network_service_snmp_mgr_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `network_service_snmp_mgr_create`")  # noqa: E501
        # verify the required parameter 'nw_add_snmp_mgr' is set
        if ('nw_add_snmp_mgr' not in params or
                params['nw_add_snmp_mgr'] is None):
            raise ValueError("Missing the required parameter `nw_add_snmp_mgr` when calling `network_service_snmp_mgr_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nw_add_snmp_mgr' in params:
            body_params = params['nw_add_snmp_mgr']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/snmp-mgr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def network_service_snmp_mgr_delete(self, system_id, id, **kwargs):  # noqa: E501
        """Delete SNMP manager settings identified by {id}  # noqa: E501

        Delete SNMP manager settings identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_service_snmp_mgr_delete(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the SNMP manager (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.network_service_snmp_mgr_delete_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.network_service_snmp_mgr_delete_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def network_service_snmp_mgr_delete_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Delete SNMP manager settings identified by {id}  # noqa: E501

        Delete SNMP manager settings identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_service_snmp_mgr_delete_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the SNMP manager (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method network_service_snmp_mgr_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `network_service_snmp_mgr_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `network_service_snmp_mgr_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/snmp-mgr/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def network_service_snmp_mgr_update(self, system_id, id, nw_snmp_mgr_edit, **kwargs):  # noqa: E501
        """Edit SNMP Manager settings for the specified Id  # noqa: E501

        Edit SNMP Manager settings for the specified Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_service_snmp_mgr_update(system_id, id, nw_snmp_mgr_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the SNMP manager (required)
        :param NwSnmpMgrEdit nw_snmp_mgr_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.network_service_snmp_mgr_update_with_http_info(system_id, id, nw_snmp_mgr_edit, **kwargs)  # noqa: E501
        else:
            (data) = self.network_service_snmp_mgr_update_with_http_info(system_id, id, nw_snmp_mgr_edit, **kwargs)  # noqa: E501
            return data

    def network_service_snmp_mgr_update_with_http_info(self, system_id, id, nw_snmp_mgr_edit, **kwargs):  # noqa: E501
        """Edit SNMP Manager settings for the specified Id  # noqa: E501

        Edit SNMP Manager settings for the specified Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_service_snmp_mgr_update_with_http_info(system_id, id, nw_snmp_mgr_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the SNMP manager (required)
        :param NwSnmpMgrEdit nw_snmp_mgr_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'nw_snmp_mgr_edit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method network_service_snmp_mgr_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `network_service_snmp_mgr_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `network_service_snmp_mgr_update`")  # noqa: E501
        # verify the required parameter 'nw_snmp_mgr_edit' is set
        if ('nw_snmp_mgr_edit' not in params or
                params['nw_snmp_mgr_edit'] is None):
            raise ValueError("Missing the required parameter `nw_snmp_mgr_edit` when calling `network_service_snmp_mgr_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nw_snmp_mgr_edit' in params:
            body_params = params['nw_snmp_mgr_edit']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-services/snmp-mgr/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def network_settings_associate(self, system_id, edit_network_settings_input, **kwargs):  # noqa: E501
        """Post Network-Settings details for a storage system Primera / Alletra 9K  # noqa: E501

        Post Network-Settings details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_settings_associate(system_id, edit_network_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param EditNetworkSettingsInput edit_network_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.network_settings_associate_with_http_info(system_id, edit_network_settings_input, **kwargs)  # noqa: E501
        else:
            (data) = self.network_settings_associate_with_http_info(system_id, edit_network_settings_input, **kwargs)  # noqa: E501
            return data

    def network_settings_associate_with_http_info(self, system_id, edit_network_settings_input, **kwargs):  # noqa: E501
        """Post Network-Settings details for a storage system Primera / Alletra 9K  # noqa: E501

        Post Network-Settings details for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.network_settings_associate_with_http_info(system_id, edit_network_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param EditNetworkSettingsInput edit_network_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'edit_network_settings_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method network_settings_associate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `network_settings_associate`")  # noqa: E501
        # verify the required parameter 'edit_network_settings_input' is set
        if ('edit_network_settings_input' not in params or
                params['edit_network_settings_input'] is None):
            raise ValueError("Missing the required parameter `edit_network_settings_input` when calling `network_settings_associate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'edit_network_settings_input' in params:
            body_params = params['edit_network_settings_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/network-settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_certificate(self, system_id, create_certificate_input, **kwargs):  # noqa: E501
        """Create certificate on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Create certificate on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_certificate(system_id, create_certificate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateCertificateInput create_certificate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_certificate_with_http_info(system_id, create_certificate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.post_certificate_with_http_info(system_id, create_certificate_input, **kwargs)  # noqa: E501
            return data

    def post_certificate_with_http_info(self, system_id, create_certificate_input, **kwargs):  # noqa: E501
        """Create certificate on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Create certificate on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_certificate_with_http_info(system_id, create_certificate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateCertificateInput create_certificate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'create_certificate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `post_certificate`")  # noqa: E501
        # verify the required parameter 'create_certificate_input' is set
        if ('create_certificate_input' not in params or
                params['create_certificate_input'] is None):
            raise ValueError("Missing the required parameter `create_certificate_input` when calling `post_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_certificate_input' in params:
            body_params = params['create_certificate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/certificates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_certificate(self, system_id, id, import_certificate_input, **kwargs):  # noqa: E501
        """Import certificate identified by {id} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Import certificate identified by {id} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_certificate(system_id, id, import_certificate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the certificate (required)
        :param ImportCertificateInput import_certificate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_certificate_with_http_info(system_id, id, import_certificate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.put_certificate_with_http_info(system_id, id, import_certificate_input, **kwargs)  # noqa: E501
            return data

    def put_certificate_with_http_info(self, system_id, id, import_certificate_input, **kwargs):  # noqa: E501
        """Import certificate identified by {id} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Import certificate identified by {id} on storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_certificate_with_http_info(system_id, id, import_certificate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the certificate (required)
        :param ImportCertificateInput import_certificate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'import_certificate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `put_certificate`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_certificate`")  # noqa: E501
        # verify the required parameter 'import_certificate_input' is set
        if ('import_certificate_input' not in params or
                params['import_certificate_input'] is None):
            raise ValueError("Missing the required parameter `import_certificate_input` when calling `put_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_certificate_input' in params:
            body_params = params['import_certificate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/certificates/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_certificates(self, system_id, remove_certificates_input, **kwargs):  # noqa: E501
        """Delete certificates from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete certificates from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_certificates(system_id, remove_certificates_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param RemoveCertificatesInput remove_certificates_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_certificates_with_http_info(system_id, remove_certificates_input, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_certificates_with_http_info(system_id, remove_certificates_input, **kwargs)  # noqa: E501
            return data

    def remove_certificates_with_http_info(self, system_id, remove_certificates_input, **kwargs):  # noqa: E501
        """Delete certificates from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete certificates from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_certificates_with_http_info(system_id, remove_certificates_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param RemoveCertificatesInput remove_certificates_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'remove_certificates_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_certificates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `remove_certificates`")  # noqa: E501
        # verify the required parameter 'remove_certificates_input' is set
        if ('remove_certificates_input' not in params or
                params['remove_certificates_input'] is None):
            raise ValueError("Missing the required parameter `remove_certificates_input` when calling `remove_certificates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_certificates_input' in params:
            body_params = params['remove_certificates_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/certificates/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_trusted_certificates(self, system_id, remove_trusted_certificates_input, **kwargs):  # noqa: E501
        """Delete trusted certificates from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete trusted certificates from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_trusted_certificates(system_id, remove_trusted_certificates_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param RemoveTrustedCertificatesInput remove_trusted_certificates_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_trusted_certificates_with_http_info(system_id, remove_trusted_certificates_input, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_trusted_certificates_with_http_info(system_id, remove_trusted_certificates_input, **kwargs)  # noqa: E501
            return data

    def remove_trusted_certificates_with_http_info(self, system_id, remove_trusted_certificates_input, **kwargs):  # noqa: E501
        """Delete trusted certificates from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Delete trusted certificates from storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_trusted_certificates_with_http_info(system_id, remove_trusted_certificates_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param RemoveTrustedCertificatesInput remove_trusted_certificates_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'remove_trusted_certificates_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_trusted_certificates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `remove_trusted_certificates`")  # noqa: E501
        # verify the required parameter 'remove_trusted_certificates_input' is set
        if ('remove_trusted_certificates_input' not in params or
                params['remove_trusted_certificates_input'] is None):
            raise ValueError("Missing the required parameter `remove_trusted_certificates_input` when calling `remove_trusted_certificates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_trusted_certificates_input' in params:
            body_params = params['remove_trusted_certificates_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/trust-certificates/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def support_settings_associate(self, system_id, support_settings_input, **kwargs):  # noqa: E501
        """Add support settings for a storage system Primera / Alletra 9K  # noqa: E501

        Add support settings for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.support_settings_associate(system_id, support_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param SupportSettingsInput support_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.support_settings_associate_with_http_info(system_id, support_settings_input, **kwargs)  # noqa: E501
        else:
            (data) = self.support_settings_associate_with_http_info(system_id, support_settings_input, **kwargs)  # noqa: E501
            return data

    def support_settings_associate_with_http_info(self, system_id, support_settings_input, **kwargs):  # noqa: E501
        """Add support settings for a storage system Primera / Alletra 9K  # noqa: E501

        Add support settings for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.support_settings_associate_with_http_info(system_id, support_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param SupportSettingsInput support_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'support_settings_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method support_settings_associate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `support_settings_associate`")  # noqa: E501
        # verify the required parameter 'support_settings_input' is set
        if ('support_settings_input' not in params or
                params['support_settings_input'] is None):
            raise ValueError("Missing the required parameter `support_settings_input` when calling `support_settings_associate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'support_settings_input' in params:
            body_params = params['support_settings_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/support-settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def support_settings_update(self, system_id, support_settings_input, **kwargs):  # noqa: E501
        """Edit support settings for a storage system Primera / Alletra 9K  # noqa: E501

        Edit support settings for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.support_settings_update(system_id, support_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param SupportSettingsInput support_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.support_settings_update_with_http_info(system_id, support_settings_input, **kwargs)  # noqa: E501
        else:
            (data) = self.support_settings_update_with_http_info(system_id, support_settings_input, **kwargs)  # noqa: E501
            return data

    def support_settings_update_with_http_info(self, system_id, support_settings_input, **kwargs):  # noqa: E501
        """Edit support settings for a storage system Primera / Alletra 9K  # noqa: E501

        Edit support settings for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.support_settings_update_with_http_info(system_id, support_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param SupportSettingsInput support_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'support_settings_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method support_settings_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `support_settings_update`")  # noqa: E501
        # verify the required parameter 'support_settings_input' is set
        if ('support_settings_input' not in params or
                params['support_settings_input'] is None):
            raise ValueError("Missing the required parameter `support_settings_input` when calling `support_settings_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'support_settings_input' in params:
            body_params = params['support_settings_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/support-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_settings_associate(self, system_id, system_config_params_edit_input, **kwargs):  # noqa: E501
        """Edit system settings configuration  # noqa: E501

        Edit system settings configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.system_settings_associate(system_id, system_config_params_edit_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param SystemConfigParamsEditInput system_config_params_edit_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.system_settings_associate_with_http_info(system_id, system_config_params_edit_input, **kwargs)  # noqa: E501
        else:
            (data) = self.system_settings_associate_with_http_info(system_id, system_config_params_edit_input, **kwargs)  # noqa: E501
            return data

    def system_settings_associate_with_http_info(self, system_id, system_config_params_edit_input, **kwargs):  # noqa: E501
        """Edit system settings configuration  # noqa: E501

        Edit system settings configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.system_settings_associate_with_http_info(system_id, system_config_params_edit_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param SystemConfigParamsEditInput system_config_params_edit_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'system_config_params_edit_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_settings_associate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `system_settings_associate`")  # noqa: E501
        # verify the required parameter 'system_config_params_edit_input' is set
        if ('system_config_params_edit_input' not in params or
                params['system_config_params_edit_input'] is None):
            raise ValueError("Missing the required parameter `system_config_params_edit_input` when calling `system_settings_associate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'system_config_params_edit_input' in params:
            body_params = params['system_config_params_edit_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_settings_update(self, system_id, system_config_params_edit_input, **kwargs):  # noqa: E501
        """Edit system settings configuration  # noqa: E501

        Edit system settings configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.system_settings_update(system_id, system_config_params_edit_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param SystemConfigParamsEditInput system_config_params_edit_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.system_settings_update_with_http_info(system_id, system_config_params_edit_input, **kwargs)  # noqa: E501
        else:
            (data) = self.system_settings_update_with_http_info(system_id, system_config_params_edit_input, **kwargs)  # noqa: E501
            return data

    def system_settings_update_with_http_info(self, system_id, system_config_params_edit_input, **kwargs):  # noqa: E501
        """Edit system settings configuration  # noqa: E501

        Edit system settings configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.system_settings_update_with_http_info(system_id, system_config_params_edit_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param SystemConfigParamsEditInput system_config_params_edit_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'system_config_params_edit_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_settings_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `system_settings_update`")  # noqa: E501
        # verify the required parameter 'system_config_params_edit_input' is set
        if ('system_config_params_edit_input' not in params or
                params['system_config_params_edit_input'] is None):
            raise ValueError("Missing the required parameter `system_config_params_edit_input` when calling `system_settings_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'system_config_params_edit_input' in params:
            body_params = params['system_config_params_edit_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/system-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
