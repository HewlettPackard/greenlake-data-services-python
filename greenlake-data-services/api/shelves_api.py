# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from greenlake-data-services.api_client import ApiClient


class ShelvesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_type1_disks_get_by_id(self, system_id, cage_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K disk identified by {cageId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K disk identified by {cageId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_disks_get_by_id(system_id, cage_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str cage_id: cage ID (required)
        :param str id: UID of the disk (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: DiskDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_disks_get_by_id_with_http_info(system_id, cage_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_disks_get_by_id_with_http_info(system_id, cage_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_disks_get_by_id_with_http_info(self, system_id, cage_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K disk identified by {cageId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K disk identified by {cageId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_disks_get_by_id_with_http_info(system_id, cage_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str cage_id: cage ID (required)
        :param str id: UID of the disk (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: DiskDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'cage_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_disks_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_disks_get_by_id`")  # noqa: E501
        # verify the required parameter 'cage_id' is set
        if ('cage_id' not in params or
                params['cage_id'] is None):
            raise ValueError("Missing the required parameter `cage_id` when calling `device_type1_disks_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_disks_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'cage_id' in params:
            path_params['cageId'] = params['cage_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{cageId}/disks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiskDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_disks_list(self, system_id, cage_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K disks identified by {cageId}  # noqa: E501

        Get details of Primera / Alletra 9K disks identified by {cageId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_disks_list(system_id, cage_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str cage_id: cage ID (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter Disk by Key.
        :param str sort: oData query to sort Disk by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: DisksSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_disks_list_with_http_info(system_id, cage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_disks_list_with_http_info(system_id, cage_id, **kwargs)  # noqa: E501
            return data

    def device_type1_disks_list_with_http_info(self, system_id, cage_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K disks identified by {cageId}  # noqa: E501

        Get details of Primera / Alletra 9K disks identified by {cageId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_disks_list_with_http_info(system_id, cage_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str cage_id: cage ID (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter Disk by Key.
        :param str sort: oData query to sort Disk by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: DisksSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'cage_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_disks_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_disks_list`")  # noqa: E501
        # verify the required parameter 'cage_id' is set
        if ('cage_id' not in params or
                params['cage_id'] is None):
            raise ValueError("Missing the required parameter `cage_id` when calling `device_type1_disks_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_disks_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_disks_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'cage_id' in params:
            path_params['cageId'] = params['cage_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{cageId}/disks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DisksSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_card_ports_get_by_id(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Card Port identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Card Port identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_card_ports_get_by_id(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure card port (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureCardPortDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_card_ports_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_card_ports_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_card_ports_get_by_id_with_http_info(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Card Port identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Card Port identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_card_ports_get_by_id_with_http_info(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure card port (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureCardPortDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_card_ports_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_card_ports_get_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_card_ports_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_enclosure_card_ports_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-card-ports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureCardPortDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_card_ports_list(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Card Ports identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Card Ports identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_card_ports_list(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureCardPortsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_card_ports_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_card_ports_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_card_ports_list_with_http_info(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Card Ports identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Card Ports identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_card_ports_list_with_http_info(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureCardPortsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_card_ports_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_card_ports_list`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_card_ports_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_enclosure_card_ports_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_enclosure_card_ports_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-card-ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureCardPortsSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_cards_get_by_id(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Card identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Card identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_cards_get_by_id(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure card (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureCardDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_cards_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_cards_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_cards_get_by_id_with_http_info(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Card identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Card identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_cards_get_by_id_with_http_info(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure card (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureCardDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_cards_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_cards_get_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_cards_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_enclosure_cards_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-cards/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureCardDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_cards_list(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Cards identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Cards identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_cards_list(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureCardsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_cards_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_cards_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_cards_list_with_http_info(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Cards identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Cards identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_cards_list_with_http_info(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureCardsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_cards_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_cards_list`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_cards_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_enclosure_cards_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_enclosure_cards_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureCardsSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_disks_get_by_id(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Disk identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Disk identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_disks_get_by_id(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure disk (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureDiskDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_disks_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_disks_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_disks_get_by_id_with_http_info(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Disk identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Disk identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_disks_get_by_id_with_http_info(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure disk (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureDiskDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_disks_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_disks_get_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_disks_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_enclosure_disks_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-disks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureDiskDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_disks_list(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Disks identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Disks identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_disks_list(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureDisksSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_disks_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_disks_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_disks_list_with_http_info(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Disks identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Disks identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_disks_list_with_http_info(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureDisksSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_disks_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_disks_list`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_disks_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_enclosure_disks_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_enclosure_disks_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-disks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureDisksSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_expanders_get_by_id(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Expander identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Expander identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_expanders_get_by_id(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure expander (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureExpanderDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_expanders_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_expanders_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_expanders_get_by_id_with_http_info(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Expander identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Expander identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_expanders_get_by_id_with_http_info(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure expander (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureExpanderDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_expanders_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_expanders_get_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_expanders_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_enclosure_expanders_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-expanders/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureExpanderDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_expanders_list(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Expanders identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Expanders identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_expanders_list(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureExpandersSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_expanders_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_expanders_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_expanders_list_with_http_info(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Expanders identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Expanders identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_expanders_list_with_http_info(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureExpandersSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_expanders_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_expanders_list`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_expanders_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_enclosure_expanders_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_enclosure_expanders_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-expanders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureExpandersSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_fans_get_by_id(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Fan identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Fan identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_fans_get_by_id(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure fan (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureFanDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_fans_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_fans_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_fans_get_by_id_with_http_info(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Fan identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Fan identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_fans_get_by_id_with_http_info(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure fan (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureFanDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_fans_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_fans_get_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_fans_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_enclosure_fans_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-fans/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureFanDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_fans_list(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Fans identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Fans identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_fans_list(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureFanSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_fans_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_fans_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_fans_list_with_http_info(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Fans identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Fans identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_fans_list_with_http_info(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureFanSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_fans_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_fans_list`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_fans_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_enclosure_fans_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_enclosure_fans_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-fans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureFanSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_powers_get_by_id(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Power identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Power identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_powers_get_by_id(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure power (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosurePowerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_powers_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_powers_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_powers_get_by_id_with_http_info(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Power identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Power identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_powers_get_by_id_with_http_info(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure power (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosurePowerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_powers_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_powers_get_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_powers_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_enclosure_powers_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-powers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosurePowerDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_powers_list(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Powers identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Powers identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_powers_list(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosurePowersSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_powers_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_powers_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_powers_list_with_http_info(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Powers identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Powers identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_powers_list_with_http_info(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosurePowersSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_powers_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_powers_list`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_powers_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_enclosure_powers_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_enclosure_powers_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-powers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosurePowersSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_sleds_get_by_id(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Sled identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Sled identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_sleds_get_by_id(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure sled (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureSledDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_sleds_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_sleds_get_by_id_with_http_info(system_id, enclosure_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_sleds_get_by_id_with_http_info(self, system_id, enclosure_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Sled identified by {enclosureId} and {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Sled identified by {enclosureId} and {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_sleds_get_by_id_with_http_info(system_id, enclosure_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure sled (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureSledDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_sleds_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_sleds_get_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_sleds_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_enclosure_sleds_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-sleds/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureSledDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosure_sleds_list(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Sleds identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Sleds identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_sleds_list(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureSledsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosure_sleds_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosure_sleds_list_with_http_info(system_id, enclosure_id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosure_sleds_list_with_http_info(self, system_id, enclosure_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure Sleds identified by {enclosureId}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure Sleds identified by {enclosureId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosure_sleds_list_with_http_info(system_id, enclosure_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosureSledsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosure_sleds_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosure_sleds_list`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `device_type1_enclosure_sleds_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_enclosure_sleds_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_enclosure_sleds_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-sleds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosureSledsSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosures_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosures_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the enclosure (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosuresDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosures_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosures_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosures_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosure identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K Enclosure identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosures_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the enclosure (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosuresDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosures_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosures_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_enclosures_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosuresDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_enclosures_list(self, system_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosures  # noqa: E501

        Get details of Primera / Alletra 9K Enclosures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosures_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosuresSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_enclosures_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_enclosures_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_enclosures_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Enclosures  # noqa: E501

        Get details of Primera / Alletra 9K Enclosures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_enclosures_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter enclosure resource by Key.
        :param str sort: oData query to sort enclosure resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: EnclosuresSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_enclosures_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_enclosures_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_enclosures_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_enclosures_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnclosuresSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_activate_shelf(self, system_id, nimble_shelves_activate_input, **kwargs):  # noqa: E501
        """Activate shelves of a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501

        Activate shelves of a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_activate_shelf(system_id, nimble_shelves_activate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleShelvesActivateInput nimble_shelves_activate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_activate_shelf_with_http_info(system_id, nimble_shelves_activate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_activate_shelf_with_http_info(system_id, nimble_shelves_activate_input, **kwargs)  # noqa: E501
            return data

    def device_type2_activate_shelf_with_http_info(self, system_id, nimble_shelves_activate_input, **kwargs):  # noqa: E501
        """Activate shelves of a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501

        Activate shelves of a Nimble / Alletra 6K storage system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_activate_shelf_with_http_info(system_id, nimble_shelves_activate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleShelvesActivateInput nimble_shelves_activate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_shelves_activate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_activate_shelf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_activate_shelf`")  # noqa: E501
        # verify the required parameter 'nimble_shelves_activate_input' is set
        if ('nimble_shelves_activate_input' not in params or
                params['nimble_shelves_activate_input'] is None):
            raise ValueError("Missing the required parameter `nimble_shelves_activate_input` when calling `device_type2_activate_shelf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_shelves_activate_input' in params:
            body_params = params['nimble_shelves_activate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/shelves/actions/activate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_shelves(self, system_id, **kwargs):  # noqa: E501
        """Get all shelves details by Nimble / Alletra 6K  # noqa: E501

        Get all shelves details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_shelves(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter shelves by Key.
        :param str sort: oData query to sort shelves resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleShelfList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_shelves_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_shelves_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_shelves_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all shelves details by Nimble / Alletra 6K  # noqa: E501

        Get all shelves details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_shelves_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter shelves by Key.
        :param str sort: oData query to sort shelves resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleShelfList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_shelves" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_shelves`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_shelves`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_shelves`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/shelves', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleShelfList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_shelf_by_id(self, system_id, shelf_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K Shelf identified by {shelfId}  # noqa: E501

        Get details of Nimble / Alletra 6K Shelf identified by {shelfId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_shelf_by_id(system_id, shelf_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str shelf_id: Identifier of shelf. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleShelfDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_shelf_by_id_with_http_info(system_id, shelf_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_shelf_by_id_with_http_info(system_id, shelf_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_shelf_by_id_with_http_info(self, system_id, shelf_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K Shelf identified by {shelfId}  # noqa: E501

        Get details of Nimble / Alletra 6K Shelf identified by {shelfId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_shelf_by_id_with_http_info(system_id, shelf_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str shelf_id: Identifier of shelf. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleShelfDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'shelf_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_shelf_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_shelf_by_id`")  # noqa: E501
        # verify the required parameter 'shelf_id' is set
        if ('shelf_id' not in params or
                params['shelf_id'] is None):
            raise ValueError("Missing the required parameter `shelf_id` when calling `device_type2_get_shelf_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'shelf_id' in params:
            path_params['shelfId'] = params['shelf_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/shelves/{shelfId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleShelfDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_locate_shelf_chassis(self, system_id, shelf_id, nimble_shelf_locate_input, **kwargs):  # noqa: E501
        """Locate chassis of Nimble / Alletra 6K shelf identified by {shelfId}  # noqa: E501

        Locate chassis of Nimble / Alletra 6K shelf identified by {shelfId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_locate_shelf_chassis(system_id, shelf_id, nimble_shelf_locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str shelf_id: ID of the shelf. (required)
        :param NimbleShelfLocateInput nimble_shelf_locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_locate_shelf_chassis_with_http_info(system_id, shelf_id, nimble_shelf_locate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_locate_shelf_chassis_with_http_info(system_id, shelf_id, nimble_shelf_locate_input, **kwargs)  # noqa: E501
            return data

    def device_type2_locate_shelf_chassis_with_http_info(self, system_id, shelf_id, nimble_shelf_locate_input, **kwargs):  # noqa: E501
        """Locate chassis of Nimble / Alletra 6K shelf identified by {shelfId}  # noqa: E501

        Locate chassis of Nimble / Alletra 6K shelf identified by {shelfId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_locate_shelf_chassis_with_http_info(system_id, shelf_id, nimble_shelf_locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str shelf_id: ID of the shelf. (required)
        :param NimbleShelfLocateInput nimble_shelf_locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'shelf_id', 'nimble_shelf_locate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_locate_shelf_chassis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_locate_shelf_chassis`")  # noqa: E501
        # verify the required parameter 'shelf_id' is set
        if ('shelf_id' not in params or
                params['shelf_id'] is None):
            raise ValueError("Missing the required parameter `shelf_id` when calling `device_type2_locate_shelf_chassis`")  # noqa: E501
        # verify the required parameter 'nimble_shelf_locate_input' is set
        if ('nimble_shelf_locate_input' not in params or
                params['nimble_shelf_locate_input'] is None):
            raise ValueError("Missing the required parameter `nimble_shelf_locate_input` when calling `device_type2_locate_shelf_chassis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'shelf_id' in params:
            path_params['shelfId'] = params['shelf_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_shelf_locate_input' in params:
            body_params = params['nimble_shelf_locate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/shelves/{shelfId}/actions/locate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enclosure_cards_locate_io_by_id(self, system_id, enclosure_id, id, locate_input, **kwargs):  # noqa: E501
        """Locate IO Module of Primera / Alletra 9K identified by {id}  # noqa: E501

        Locate IO Module of Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosure_cards_locate_io_by_id(system_id, enclosure_id, id, locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure card (required)
        :param LocateInput locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enclosure_cards_locate_io_by_id_with_http_info(system_id, enclosure_id, id, locate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.enclosure_cards_locate_io_by_id_with_http_info(system_id, enclosure_id, id, locate_input, **kwargs)  # noqa: E501
            return data

    def enclosure_cards_locate_io_by_id_with_http_info(self, system_id, enclosure_id, id, locate_input, **kwargs):  # noqa: E501
        """Locate IO Module of Primera / Alletra 9K identified by {id}  # noqa: E501

        Locate IO Module of Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosure_cards_locate_io_by_id_with_http_info(system_id, enclosure_id, id, locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure card (required)
        :param LocateInput locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'locate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enclosure_cards_locate_io_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `enclosure_cards_locate_io_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `enclosure_cards_locate_io_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enclosure_cards_locate_io_by_id`")  # noqa: E501
        # verify the required parameter 'locate_input' is set
        if ('locate_input' not in params or
                params['locate_input'] is None):
            raise ValueError("Missing the required parameter `locate_input` when calling `enclosure_cards_locate_io_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'locate_input' in params:
            body_params = params['locate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-cards/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enclosure_powers_locate_pcm_by_id(self, system_id, enclosure_id, id, locate_input, **kwargs):  # noqa: E501
        """Locate PCM of Primera / Alletra 9K identified by {id}  # noqa: E501

        Locate PCM of Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosure_powers_locate_pcm_by_id(system_id, enclosure_id, id, locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure power (required)
        :param LocateInput locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enclosure_powers_locate_pcm_by_id_with_http_info(system_id, enclosure_id, id, locate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.enclosure_powers_locate_pcm_by_id_with_http_info(system_id, enclosure_id, id, locate_input, **kwargs)  # noqa: E501
            return data

    def enclosure_powers_locate_pcm_by_id_with_http_info(self, system_id, enclosure_id, id, locate_input, **kwargs):  # noqa: E501
        """Locate PCM of Primera / Alletra 9K identified by {id}  # noqa: E501

        Locate PCM of Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosure_powers_locate_pcm_by_id_with_http_info(system_id, enclosure_id, id, locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure power (required)
        :param LocateInput locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'locate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enclosure_powers_locate_pcm_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `enclosure_powers_locate_pcm_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `enclosure_powers_locate_pcm_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enclosure_powers_locate_pcm_by_id`")  # noqa: E501
        # verify the required parameter 'locate_input' is set
        if ('locate_input' not in params or
                params['locate_input'] is None):
            raise ValueError("Missing the required parameter `locate_input` when calling `enclosure_powers_locate_pcm_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'locate_input' in params:
            body_params = params['locate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-powers/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enclosure_sleds_locate_drive_by_id(self, system_id, enclosure_id, id, locate_input, **kwargs):  # noqa: E501
        """Locate drive of Primera / Alletra 9K identified by {id}  # noqa: E501

        Locate drive of Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosure_sleds_locate_drive_by_id(system_id, enclosure_id, id, locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure sled (required)
        :param LocateInput locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enclosure_sleds_locate_drive_by_id_with_http_info(system_id, enclosure_id, id, locate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.enclosure_sleds_locate_drive_by_id_with_http_info(system_id, enclosure_id, id, locate_input, **kwargs)  # noqa: E501
            return data

    def enclosure_sleds_locate_drive_by_id_with_http_info(self, system_id, enclosure_id, id, locate_input, **kwargs):  # noqa: E501
        """Locate drive of Primera / Alletra 9K identified by {id}  # noqa: E501

        Locate drive of Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosure_sleds_locate_drive_by_id_with_http_info(system_id, enclosure_id, id, locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str enclosure_id: UID of the enclosure (required)
        :param str id: UID of the enclosure sled (required)
        :param LocateInput locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'enclosure_id', 'id', 'locate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enclosure_sleds_locate_drive_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `enclosure_sleds_locate_drive_by_id`")  # noqa: E501
        # verify the required parameter 'enclosure_id' is set
        if ('enclosure_id' not in params or
                params['enclosure_id'] is None):
            raise ValueError("Missing the required parameter `enclosure_id` when calling `enclosure_sleds_locate_drive_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enclosure_sleds_locate_drive_by_id`")  # noqa: E501
        # verify the required parameter 'locate_input' is set
        if ('locate_input' not in params or
                params['locate_input'] is None):
            raise ValueError("Missing the required parameter `locate_input` when calling `enclosure_sleds_locate_drive_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'enclosure_id' in params:
            path_params['enclosureId'] = params['enclosure_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'locate_input' in params:
            body_params = params['locate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{enclosureId}/enclosure-sleds/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enclosures_edit_by_id(self, system_id, id, edit_enclosure_input, **kwargs):  # noqa: E501
        """Edit details of Primera / Alletra 9K Enclosure identified by {id}  # noqa: E501

        Edit details of Primera / Alletra 9K Enclosure identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosures_edit_by_id(system_id, id, edit_enclosure_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the enclosure (required)
        :param EditEnclosureInput edit_enclosure_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enclosures_edit_by_id_with_http_info(system_id, id, edit_enclosure_input, **kwargs)  # noqa: E501
        else:
            (data) = self.enclosures_edit_by_id_with_http_info(system_id, id, edit_enclosure_input, **kwargs)  # noqa: E501
            return data

    def enclosures_edit_by_id_with_http_info(self, system_id, id, edit_enclosure_input, **kwargs):  # noqa: E501
        """Edit details of Primera / Alletra 9K Enclosure identified by {id}  # noqa: E501

        Edit details of Primera / Alletra 9K Enclosure identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosures_edit_by_id_with_http_info(system_id, id, edit_enclosure_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the enclosure (required)
        :param EditEnclosureInput edit_enclosure_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'edit_enclosure_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enclosures_edit_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `enclosures_edit_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enclosures_edit_by_id`")  # noqa: E501
        # verify the required parameter 'edit_enclosure_input' is set
        if ('edit_enclosure_input' not in params or
                params['edit_enclosure_input'] is None):
            raise ValueError("Missing the required parameter `edit_enclosure_input` when calling `enclosures_edit_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'edit_enclosure_input' in params:
            body_params = params['edit_enclosure_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enclosures_locate_by_id(self, system_id, id, locate_input, **kwargs):  # noqa: E501
        """Locate enclosure drive of Primera / Alletra 9K identified by {id}  # noqa: E501

        Locate enclosure drive of Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosures_locate_by_id(system_id, id, locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the enclosure (required)
        :param LocateInput locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enclosures_locate_by_id_with_http_info(system_id, id, locate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.enclosures_locate_by_id_with_http_info(system_id, id, locate_input, **kwargs)  # noqa: E501
            return data

    def enclosures_locate_by_id_with_http_info(self, system_id, id, locate_input, **kwargs):  # noqa: E501
        """Locate enclosure drive of Primera / Alletra 9K identified by {id}  # noqa: E501

        Locate enclosure drive of Primera / Alletra 9K identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enclosures_locate_by_id_with_http_info(system_id, id, locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the enclosure (required)
        :param LocateInput locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'locate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enclosures_locate_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `enclosures_locate_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enclosures_locate_by_id`")  # noqa: E501
        # verify the required parameter 'locate_input' is set
        if ('locate_input' not in params or
                params['locate_input'] is None):
            raise ValueError("Missing the required parameter `locate_input` when calling `enclosures_locate_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'locate_input' in params:
            body_params = params['locate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/enclosures/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
