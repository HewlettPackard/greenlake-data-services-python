# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from greenlake-data-services.api_client import ApiClient


class PortsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_type1_fc_port_edit(self, system_id, id, port_fc_edit, **kwargs):  # noqa: E501
        """Edit ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_fc_port_edit(system_id, id, port_fc_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortFCEdit port_fc_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_fc_port_edit_with_http_info(system_id, id, port_fc_edit, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_fc_port_edit_with_http_info(system_id, id, port_fc_edit, **kwargs)  # noqa: E501
            return data

    def device_type1_fc_port_edit_with_http_info(self, system_id, id, port_fc_edit, **kwargs):  # noqa: E501
        """Edit ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_fc_port_edit_with_http_info(system_id, id, port_fc_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortFCEdit port_fc_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'port_fc_edit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_fc_port_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_fc_port_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_fc_port_edit`")  # noqa: E501
        # verify the required parameter 'port_fc_edit' is set
        if ('port_fc_edit' not in params or
                params['port_fc_edit'] is None):
            raise ValueError("Missing the required parameter `port_fc_edit` when calling `device_type1_fc_port_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'port_fc_edit' in params:
            body_params = params['port_fc_edit']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/fc', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_iscsi_port_edit(self, system_id, id, port_iscsi_edit, **kwargs):  # noqa: E501
        """Edit iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_iscsi_port_edit(system_id, id, port_iscsi_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortISCSIEdit port_iscsi_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_iscsi_port_edit_with_http_info(system_id, id, port_iscsi_edit, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_iscsi_port_edit_with_http_info(system_id, id, port_iscsi_edit, **kwargs)  # noqa: E501
            return data

    def device_type1_iscsi_port_edit_with_http_info(self, system_id, id, port_iscsi_edit, **kwargs):  # noqa: E501
        """Edit iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_iscsi_port_edit_with_http_info(system_id, id, port_iscsi_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortISCSIEdit port_iscsi_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'port_iscsi_edit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_iscsi_port_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_iscsi_port_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_iscsi_port_edit`")  # noqa: E501
        # verify the required parameter 'port_iscsi_edit' is set
        if ('port_iscsi_edit' not in params or
                params['port_iscsi_edit'] is None):
            raise ValueError("Missing the required parameter `port_iscsi_edit` when calling `device_type1_iscsi_port_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'port_iscsi_edit' in params:
            body_params = params['port_iscsi_edit']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/edit-iscsi', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_iscsi_port_ping(self, system_id, id, port_iscsi_ping, **kwargs):  # noqa: E501
        """Ping iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Ping iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_iscsi_port_ping(system_id, id, port_iscsi_ping, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortISCSIPing port_iscsi_ping: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_iscsi_port_ping_with_http_info(system_id, id, port_iscsi_ping, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_iscsi_port_ping_with_http_info(system_id, id, port_iscsi_ping, **kwargs)  # noqa: E501
            return data

    def device_type1_iscsi_port_ping_with_http_info(self, system_id, id, port_iscsi_ping, **kwargs):  # noqa: E501
        """Ping iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Ping iscsi ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_iscsi_port_ping_with_http_info(system_id, id, port_iscsi_ping, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortISCSIPing port_iscsi_ping: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'port_iscsi_ping']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_iscsi_port_ping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_iscsi_port_ping`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_iscsi_port_ping`")  # noqa: E501
        # verify the required parameter 'port_iscsi_ping' is set
        if ('port_iscsi_ping' not in params or
                params['port_iscsi_ping'] is None):
            raise ValueError("Missing the required parameter `port_iscsi_ping` when calling `device_type1_iscsi_port_ping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'port_iscsi_ping' in params:
            body_params = params['port_iscsi_ping']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/ping-iscsi', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_ports_clear(self, system_id, id, **kwargs):  # noqa: E501
        """Clear the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Clear the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_ports_clear(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortClearInput port_clear_input:
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_ports_clear_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_ports_clear_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_ports_clear_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Clear the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Clear the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_ports_clear_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortClearInput port_clear_input:
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'port_clear_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_ports_clear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_ports_clear`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_ports_clear`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'port_clear_input' in params:
            body_params = params['port_clear_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_ports_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Port identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K Port identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_ports_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PortDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_ports_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_ports_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_ports_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Port identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K Port identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_ports_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PortDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_ports_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_ports_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_ports_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_ports_list(self, system_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Ports  # noqa: E501

        Get details of Primera / Alletra 9K Ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_ports_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter ports by Key.
        :param str sort: oData query to sort ports by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PortsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_ports_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_ports_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_ports_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K Ports  # noqa: E501

        Get details of Primera / Alletra 9K Ports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_ports_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter ports by Key.
        :param str sort: oData query to sort ports by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PortsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_ports_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_ports_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_ports_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_ports_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortsSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_rcip_port_edit(self, system_id, id, port_rcip_edit, **kwargs):  # noqa: E501
        """Edit rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_rcip_port_edit(system_id, id, port_rcip_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortRCIPEdit port_rcip_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_rcip_port_edit_with_http_info(system_id, id, port_rcip_edit, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_rcip_port_edit_with_http_info(system_id, id, port_rcip_edit, **kwargs)  # noqa: E501
            return data

    def device_type1_rcip_port_edit_with_http_info(self, system_id, id, port_rcip_edit, **kwargs):  # noqa: E501
        """Edit rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_rcip_port_edit_with_http_info(system_id, id, port_rcip_edit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortRCIPEdit port_rcip_edit: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'port_rcip_edit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_rcip_port_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_rcip_port_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_rcip_port_edit`")  # noqa: E501
        # verify the required parameter 'port_rcip_edit' is set
        if ('port_rcip_edit' not in params or
                params['port_rcip_edit'] is None):
            raise ValueError("Missing the required parameter `port_rcip_edit` when calling `device_type1_rcip_port_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'port_rcip_edit' in params:
            body_params = params['port_rcip_edit']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/edit-rcip', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_rcip_port_ping(self, system_id, id, port_rcip_ping, **kwargs):  # noqa: E501
        """Ping rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Ping rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_rcip_port_ping(system_id, id, port_rcip_ping, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortRCIPPing port_rcip_ping: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_rcip_port_ping_with_http_info(system_id, id, port_rcip_ping, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_rcip_port_ping_with_http_info(system_id, id, port_rcip_ping, **kwargs)  # noqa: E501
            return data

    def device_type1_rcip_port_ping_with_http_info(self, system_id, id, port_rcip_ping, **kwargs):  # noqa: E501
        """Ping rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Ping rcip ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_rcip_port_ping_with_http_info(system_id, id, port_rcip_ping, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortRCIPPing port_rcip_ping: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'port_rcip_ping']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_rcip_port_ping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_rcip_port_ping`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_rcip_port_ping`")  # noqa: E501
        # verify the required parameter 'port_rcip_ping' is set
        if ('port_rcip_ping' not in params or
                params['port_rcip_ping'] is None):
            raise ValueError("Missing the required parameter `port_rcip_ping` when calling `device_type1_rcip_port_ping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'port_rcip_ping' in params:
            body_params = params['port_rcip_ping']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/ping-rcip', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_fc_port(self, system_id, port_id, nimble_edit_fc_interface_input, **kwargs):  # noqa: E501
        """Edit Nimble FC Port of Nimble / Alletra 6K  # noqa: E501

        Edit Nimble FC Port of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_fc_port(system_id, port_id, nimble_edit_fc_interface_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str port_id: Identifier of port. A 42 digit hexadecimal number. (required)
        :param NimbleEditFCInterfaceInput nimble_edit_fc_interface_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_fc_port_with_http_info(system_id, port_id, nimble_edit_fc_interface_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_fc_port_with_http_info(system_id, port_id, nimble_edit_fc_interface_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_fc_port_with_http_info(self, system_id, port_id, nimble_edit_fc_interface_input, **kwargs):  # noqa: E501
        """Edit Nimble FC Port of Nimble / Alletra 6K  # noqa: E501

        Edit Nimble FC Port of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_fc_port_with_http_info(system_id, port_id, nimble_edit_fc_interface_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str port_id: Identifier of port. A 42 digit hexadecimal number. (required)
        :param NimbleEditFCInterfaceInput nimble_edit_fc_interface_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'port_id', 'nimble_edit_fc_interface_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_fc_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_fc_port`")  # noqa: E501
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params or
                params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `device_type2_edit_fc_port`")  # noqa: E501
        # verify the required parameter 'nimble_edit_fc_interface_input' is set
        if ('nimble_edit_fc_interface_input' not in params or
                params['nimble_edit_fc_interface_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_fc_interface_input` when calling `device_type2_edit_fc_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'port_id' in params:
            path_params['portId'] = params['port_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_fc_interface_input' in params:
            body_params = params['nimble_edit_fc_interface_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/ports/{portId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_fibre_channel_configs(self, system_id, **kwargs):  # noqa: E501
        """Get all fibre channel configs details of Nimble / Alletra 6K  # noqa: E501

        Get all fibre channel configs details of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_fibre_channel_configs(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Fibre Channel Configs by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleFCConfigsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_fibre_channel_configs_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_fibre_channel_configs_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_fibre_channel_configs_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all fibre channel configs details of Nimble / Alletra 6K  # noqa: E501

        Get all fibre channel configs details of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_fibre_channel_configs_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Fibre Channel Configs by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleFCConfigsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_fibre_channel_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_fibre_channel_configs`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_fibre_channel_configs`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_fibre_channel_configs`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/fibre-channel-configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleFCConfigsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_fibre_channel_sessions(self, system_id, **kwargs):  # noqa: E501
        """Get all fibre channel sessions details of Nimble / Alletra 6K  # noqa: E501

        Get all fibre channel sessions details of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_fibre_channel_sessions(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Fibre Channel Sessions by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleFCSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_fibre_channel_sessions_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_fibre_channel_sessions_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_fibre_channel_sessions_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all fibre channel sessions details of Nimble / Alletra 6K  # noqa: E501

        Get all fibre channel sessions details of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_fibre_channel_sessions_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Fibre Channel Sessions by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleFCSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_fibre_channel_sessions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_fibre_channel_sessions`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_fibre_channel_sessions`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_fibre_channel_sessions`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/fibre-channel-sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleFCSessionList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_ports(self, system_id, **kwargs):  # noqa: E501
        """Get all ports details of Nimble / Alletra 6K  # noqa: E501

        Get all ports details of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_ports(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter fibre channel interface ports by Key.
        :param str sort: oData query to sort fibre channel interface ports resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblePortsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_ports_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_ports_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_ports_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all ports details of Nimble / Alletra 6K  # noqa: E501

        Get all ports details of Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_ports_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter fibre channel interface ports by Key.
        :param str sort: oData query to sort fibre channel interface ports resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblePortsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_ports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_ports`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_ports`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_ports`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimblePortsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_fibre_channel_config_by_id(self, system_id, fc_config_id, **kwargs):  # noqa: E501
        """Get fibre channel configs details of Nimble / Alletra 6K identified by {fcConfigId}.  # noqa: E501

        Get fibre channel configs details of Nimble / Alletra 6K identified by {fcConfigId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_fibre_channel_config_by_id(system_id, fc_config_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str fc_config_id: Identifier of fibre channel config. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblefibreChannelConfigsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_fibre_channel_config_by_id_with_http_info(system_id, fc_config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_fibre_channel_config_by_id_with_http_info(system_id, fc_config_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_fibre_channel_config_by_id_with_http_info(self, system_id, fc_config_id, **kwargs):  # noqa: E501
        """Get fibre channel configs details of Nimble / Alletra 6K identified by {fcConfigId}.  # noqa: E501

        Get fibre channel configs details of Nimble / Alletra 6K identified by {fcConfigId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_fibre_channel_config_by_id_with_http_info(system_id, fc_config_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str fc_config_id: Identifier of fibre channel config. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblefibreChannelConfigsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'fc_config_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_fibre_channel_config_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_fibre_channel_config_by_id`")  # noqa: E501
        # verify the required parameter 'fc_config_id' is set
        if ('fc_config_id' not in params or
                params['fc_config_id'] is None):
            raise ValueError("Missing the required parameter `fc_config_id` when calling `device_type2_get_fibre_channel_config_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'fc_config_id' in params:
            path_params['fcConfigId'] = params['fc_config_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/fibre-channel-configs/{fcConfigId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimblefibreChannelConfigsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_fibre_channel_session_by_id(self, system_id, fc_session_id, **kwargs):  # noqa: E501
        """Get fibre channel session details of Nimble / Alletra 6K identified by {fcSessionId}.  # noqa: E501

        Get fibre channel session details of Nimble / Alletra 6K identified by {fcSessionId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_fibre_channel_session_by_id(system_id, fc_session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str fc_session_id: ID of the Fibre Channel Session. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleFCSessionDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_fibre_channel_session_by_id_with_http_info(system_id, fc_session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_fibre_channel_session_by_id_with_http_info(system_id, fc_session_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_fibre_channel_session_by_id_with_http_info(self, system_id, fc_session_id, **kwargs):  # noqa: E501
        """Get fibre channel session details of Nimble / Alletra 6K identified by {fcSessionId}.  # noqa: E501

        Get fibre channel session details of Nimble / Alletra 6K identified by {fcSessionId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_fibre_channel_session_by_id_with_http_info(system_id, fc_session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str fc_session_id: ID of the Fibre Channel Session. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleFCSessionDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'fc_session_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_fibre_channel_session_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_fibre_channel_session_by_id`")  # noqa: E501
        # verify the required parameter 'fc_session_id' is set
        if ('fc_session_id' not in params or
                params['fc_session_id'] is None):
            raise ValueError("Missing the required parameter `fc_session_id` when calling `device_type2_get_fibre_channel_session_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'fc_session_id' in params:
            path_params['fcSessionId'] = params['fc_session_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/fibre-channel-sessions/{fcSessionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleFCSessionDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_port_by_id(self, system_id, port_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K Port identified by {portId}. Fibre_channel_interfaces attributes will be shown for Fibre_channel_interface ports. Network_interfaces attributes will be shown for Network_interface ports.  # noqa: E501

        Get details of Nimble / Alletra 6K Port identified by {portId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_port_by_id(system_id, port_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str port_id: Identifier of port. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblePortDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_port_by_id_with_http_info(system_id, port_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_port_by_id_with_http_info(system_id, port_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_port_by_id_with_http_info(self, system_id, port_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K Port identified by {portId}. Fibre_channel_interfaces attributes will be shown for Fibre_channel_interface ports. Network_interfaces attributes will be shown for Network_interface ports.  # noqa: E501

        Get details of Nimble / Alletra 6K Port identified by {portId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_port_by_id_with_http_info(system_id, port_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str port_id: Identifier of port. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblePortDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'port_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_port_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_port_by_id`")  # noqa: E501
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params or
                params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `device_type2_get_port_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'port_id' in params:
            path_params['portId'] = params['port_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/ports/{portId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimblePortDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_type2_network_interface_by_id(self, system_id, network_interface_id, **kwargs):  # noqa: E501
        """Get all network interfaces details by Nimble / Alletra 6K identified  by {networkInterfaceId}  # noqa: E501

        Get all network interfaces details by Nimble / Alletra 6K identified by {networkInterfaceId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_network_interface_by_id(system_id, network_interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str network_interface_id: ID of the Network Interface. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNetworkInterfaceWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_type2_network_interface_by_id_with_http_info(system_id, network_interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_type2_network_interface_by_id_with_http_info(system_id, network_interface_id, **kwargs)  # noqa: E501
            return data

    def get_device_type2_network_interface_by_id_with_http_info(self, system_id, network_interface_id, **kwargs):  # noqa: E501
        """Get all network interfaces details by Nimble / Alletra 6K identified  by {networkInterfaceId}  # noqa: E501

        Get all network interfaces details by Nimble / Alletra 6K identified by {networkInterfaceId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_network_interface_by_id_with_http_info(system_id, network_interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str network_interface_id: ID of the Network Interface. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNetworkInterfaceWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'network_interface_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_type2_network_interface_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `get_device_type2_network_interface_by_id`")  # noqa: E501
        # verify the required parameter 'network_interface_id' is set
        if ('network_interface_id' not in params or
                params['network_interface_id'] is None):
            raise ValueError("Missing the required parameter `network_interface_id` when calling `get_device_type2_network_interface_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'network_interface_id' in params:
            path_params['networkInterfaceId'] = params['network_interface_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/network-interfaces/{networkInterfaceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleNetworkInterfaceWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_type2_network_interfaces(self, system_id, **kwargs):  # noqa: E501
        """Get all network interfaces details by Nimble / Alletra 6K  # noqa: E501

        Get all network interfaces details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_network_interfaces(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Network Interface by Key.
        :param str sort: oData query to sort Network Interface resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNetworkInterfaceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_type2_network_interfaces_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_type2_network_interfaces_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def get_device_type2_network_interfaces_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all network interfaces details by Nimble / Alletra 6K  # noqa: E501

        Get all network interfaces details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_network_interfaces_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter Network Interface by Key.
        :param str sort: oData query to sort Network Interface resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNetworkInterfaceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_type2_network_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `get_device_type2_network_interfaces`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_device_type2_network_interfaces`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_device_type2_network_interfaces`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/network-interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleNetworkInterfaceList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initialise_ports(self, system_id, id, **kwargs):  # noqa: E501
        """Initialize the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Initialize the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.initialise_ports(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.initialise_ports_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.initialise_ports_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def initialise_ports_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Initialize the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Initialize the details of the ports identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.initialise_ports_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initialise_ports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `initialise_ports`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `initialise_ports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}/initialize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def port_enable(self, system_id, id, port_enable_input, **kwargs):  # noqa: E501
        """Port enable disable identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Port enable disable identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.port_enable(system_id, id, port_enable_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortEnableInput port_enable_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.port_enable_with_http_info(system_id, id, port_enable_input, **kwargs)  # noqa: E501
        else:
            (data) = self.port_enable_with_http_info(system_id, id, port_enable_input, **kwargs)  # noqa: E501
            return data

    def port_enable_with_http_info(self, system_id, id, port_enable_input, **kwargs):  # noqa: E501
        """Port enable disable identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Port enable disable identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.port_enable_with_http_info(system_id, id, port_enable_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the port (required)
        :param PortEnableInput port_enable_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'port_enable_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method port_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `port_enable`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `port_enable`")  # noqa: E501
        # verify the required parameter 'port_enable_input' is set
        if ('port_enable_input' not in params or
                params['port_enable_input'] is None):
            raise ValueError("Missing the required parameter `port_enable_input` when calling `port_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'port_enable_input' in params:
            body_params = params['port_enable_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/ports/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
