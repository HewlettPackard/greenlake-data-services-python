# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from greenlake-data-services.api_client import ApiClient


class StorageSystemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_type1_application_summary_get(self, system_id, **kwargs):  # noqa: E501
        """Get Application Summary for a storage system Primera / Alletra 9K  # noqa: E501

        Get Application Summary for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_application_summary_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :return: ApplicationSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_application_summary_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_application_summary_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_application_summary_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get Application Summary for a storage system Primera / Alletra 9K  # noqa: E501

        Get Application Summary for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_application_summary_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :return: ApplicationSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_application_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_application_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/application-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationSummary',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_get_system_performance_statistics(self, system_id, **kwargs):  # noqa: E501
        """Get performance statistics for a storage system Primera / Alletra 9K  # noqa: E501

        Get performance statistics for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_system_performance_statistics(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SystemPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_system_performance_statistics_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_system_performance_statistics_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_system_performance_statistics_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get performance statistics for a storage system Primera / Alletra 9K  # noqa: E501

        Get performance statistics for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_system_performance_statistics_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SystemPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_system_performance_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_system_performance_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/performance-statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemPerformance',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_qo_s_performance_statistics_get_by_target_name(self, system_id, target_name, **kwargs):  # noqa: E501
        """Get QoS performance trend data of Primera / Alletra 9K target identified by {targetName}  # noqa: E501

        Get QoS performance trend data of Primera / Alletra 9K target identified by {targetName}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_qo_s_performance_statistics_get_by_target_name(system_id, target_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str target_name: targetName will define the QoS target name in which query has to be made. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: QosPerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_qo_s_performance_statistics_get_by_target_name_with_http_info(system_id, target_name, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_qo_s_performance_statistics_get_by_target_name_with_http_info(system_id, target_name, **kwargs)  # noqa: E501
            return data

    def device_type1_qo_s_performance_statistics_get_by_target_name_with_http_info(self, system_id, target_name, **kwargs):  # noqa: E501
        """Get QoS performance trend data of Primera / Alletra 9K target identified by {targetName}  # noqa: E501

        Get QoS performance trend data of Primera / Alletra 9K target identified by {targetName}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_qo_s_performance_statistics_get_by_target_name_with_http_info(system_id, target_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str target_name: targetName will define the QoS target name in which query has to be made. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: QosPerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'target_name', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_qo_s_performance_statistics_get_by_target_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_qo_s_performance_statistics_get_by_target_name`")  # noqa: E501
        # verify the required parameter 'target_name' is set
        if ('target_name' not in params or
                params['target_name'] is None):
            raise ValueError("Missing the required parameter `target_name` when calling `device_type1_qo_s_performance_statistics_get_by_target_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'target_name' in params:
            path_params['targetName'] = params['target_name']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/targets/{targetName}/performance-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QosPerformanceHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_qo_s_policy_get_by_system_id(self, system_id, **kwargs):  # noqa: E501
        """Get QoS policy data for a storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get QoS policy data for a storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_qo_s_policy_get_by_system_id(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param str target_name: targetName will define the QoS target name in which query has to be made.
        :param str target_type: targetType will define the QoS target type in which query has to be made.
        :return: QosPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_qo_s_policy_get_by_system_id_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_qo_s_policy_get_by_system_id_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_qo_s_policy_get_by_system_id_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get QoS policy data for a storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get QoS policy data for a storage system Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_qo_s_policy_get_by_system_id_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param str target_name: targetName will define the QoS target name in which query has to be made.
        :param str target_type: targetType will define the QoS target type in which query has to be made.
        :return: QosPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'select', 'range', 'target_name', 'target_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_qo_s_policy_get_by_system_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_qo_s_policy_get_by_system_id`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_qo_s_policy_get_by_system_id`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_qo_s_policy_get_by_system_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'target_name' in params:
            query_params.append(('targetName', params['target_name']))  # noqa: E501
        if 'target_type' in params:
            query_params.append(('targetType', params['target_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/qos-policy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QosPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_recommendations_get(self, system_id, **kwargs):  # noqa: E501
        """Get recommendations for a storage system Primera / Alletra 9K  # noqa: E501

        Get recommendations for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_recommendations_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: Recommendation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_recommendations_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_recommendations_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_recommendations_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get recommendations for a storage system Primera / Alletra 9K  # noqa: E501

        Get recommendations for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_recommendations_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: Recommendation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_recommendations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_recommendations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/recommendations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recommendation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_system_capacity_history_get(self, system_id, **kwargs):  # noqa: E501
        """Get capacity trend data for a storage system Primera / Alletra 9K  # noqa: E501

        Get capacity trend data for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_capacity_history_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: CapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_system_capacity_history_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_system_capacity_history_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_system_capacity_history_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get capacity trend data for a storage system Primera / Alletra 9K  # noqa: E501

        Get capacity trend data for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_capacity_history_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: CapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_system_capacity_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_system_capacity_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/capacity-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CapacityHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_system_capacity_summary_get(self, system_id, **kwargs):  # noqa: E501
        """Get system capacity for a storage system Primera / Alletra 9K  # noqa: E501

        Get system capacity for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_capacity_summary_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: Syscapacity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_system_capacity_summary_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_system_capacity_summary_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_system_capacity_summary_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get system capacity for a storage system Primera / Alletra 9K  # noqa: E501

        Get system capacity for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_capacity_summary_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: Syscapacity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_system_capacity_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_system_capacity_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/capacity-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Syscapacity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_system_component_performance_statistics_get(self, system_id, **kwargs):  # noqa: E501
        """Get component performance statistics details for a storage system Primera / Alletra 9K idenfified by {systemId}  # noqa: E501

        Get component performance statistics details for a storage system Primera / Alletra 9K idenfified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_component_performance_statistics_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PerfStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_system_component_performance_statistics_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_system_component_performance_statistics_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_system_component_performance_statistics_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get component performance statistics details for a storage system Primera / Alletra 9K idenfified by {systemId}  # noqa: E501

        Get component performance statistics details for a storage system Primera / Alletra 9K idenfified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_component_performance_statistics_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PerfStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_system_component_performance_statistics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_system_component_performance_statistics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/component-performance-statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PerfStats',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_system_get_by_id(self, id, **kwargs):  # noqa: E501
        """Get Primera / Alletra 9K object identified by {id}  # noqa: E501

        Get Primera / Alletra 9K object identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_get_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Serial number of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraStorageSystemDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_system_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_system_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def device_type1_system_get_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Primera / Alletra 9K object identified by {id}  # noqa: E501

        Get Primera / Alletra 9K object identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_get_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Serial number of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraStorageSystemDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_system_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_system_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraStorageSystemDetail',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_system_performance_history_get(self, system_id, **kwargs):  # noqa: E501
        """Get performance trend data for a storage system Primera / Alletra 9K  # noqa: E501

        Get performance trend data for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_performance_history_get(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: SystemPerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_system_performance_history_get_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_system_performance_history_get_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_system_performance_history_get_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get performance trend data for a storage system Primera / Alletra 9K  # noqa: E501

        Get performance trend data for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_system_performance_history_get_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: SystemPerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_system_performance_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_system_performance_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/performance-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemPerformanceHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_systems_list(self, **kwargs):  # noqa: E501
        """Get all Primera / Alletra 9K storage systems  # noqa: E501

        Get all Primera / Alletra 9K storage systems  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_systems_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter systems by Key.
        :param str sort: Query to sort the response with specified key and order
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraStorageSystemList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_systems_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_systems_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_type1_systems_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Primera / Alletra 9K storage systems  # noqa: E501

        Get all Primera / Alletra 9K storage systems  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_systems_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter systems by Key.
        :param str sort: Query to sort the response with specified key and order
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraStorageSystemList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_systems_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_systems_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_systems_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraStorageSystemList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_array_failover(self, system_id, array_id, nimble_array_failover_input, **kwargs):  # noqa: E501
        """Perform failover of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Perform failover of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_array_failover(system_id, array_id, nimble_array_failover_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str array_id: ID of the array. (required)
        :param NimbleArrayFailoverInput nimble_array_failover_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_array_failover_with_http_info(system_id, array_id, nimble_array_failover_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_array_failover_with_http_info(system_id, array_id, nimble_array_failover_input, **kwargs)  # noqa: E501
            return data

    def device_type2_array_failover_with_http_info(self, system_id, array_id, nimble_array_failover_input, **kwargs):  # noqa: E501
        """Perform failover of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Perform failover of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_array_failover_with_http_info(system_id, array_id, nimble_array_failover_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str array_id: ID of the array. (required)
        :param NimbleArrayFailoverInput nimble_array_failover_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'array_id', 'nimble_array_failover_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_array_failover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_array_failover`")  # noqa: E501
        # verify the required parameter 'array_id' is set
        if ('array_id' not in params or
                params['array_id'] is None):
            raise ValueError("Missing the required parameter `array_id` when calling `device_type2_array_failover`")  # noqa: E501
        # verify the required parameter 'nimble_array_failover_input' is set
        if ('nimble_array_failover_input' not in params or
                params['nimble_array_failover_input'] is None):
            raise ValueError("Missing the required parameter `nimble_array_failover_input` when calling `device_type2_array_failover`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'array_id' in params:
            path_params['arrayId'] = params['array_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_array_failover_input' in params:
            body_params = params['nimble_array_failover_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/arrays/{arrayId}/actions/failover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_create_array(self, system_id, nimble_create_array_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K array identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K array identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_array(system_id, nimble_create_array_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateArrayInput nimble_create_array_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_create_array_with_http_info(system_id, nimble_create_array_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_create_array_with_http_info(system_id, nimble_create_array_input, **kwargs)  # noqa: E501
            return data

    def device_type2_create_array_with_http_info(self, system_id, nimble_create_array_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K array identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K array identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_array_with_http_info(system_id, nimble_create_array_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateArrayInput nimble_create_array_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_array_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_create_array" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_create_array`")  # noqa: E501
        # verify the required parameter 'nimble_create_array_input' is set
        if ('nimble_create_array_input' not in params or
                params['nimble_create_array_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_array_input` when calling `device_type2_create_array`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_array_input' in params:
            body_params = params['nimble_create_array_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/arrays', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_delete_array_by_id(self, system_id, array_id, **kwargs):  # noqa: E501
        """Delete Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Delete Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_delete_array_by_id(system_id, array_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str array_id: ID of the array. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_delete_array_by_id_with_http_info(system_id, array_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_delete_array_by_id_with_http_info(system_id, array_id, **kwargs)  # noqa: E501
            return data

    def device_type2_delete_array_by_id_with_http_info(self, system_id, array_id, **kwargs):  # noqa: E501
        """Delete Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Delete Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_delete_array_by_id_with_http_info(system_id, array_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str array_id: ID of the array. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'array_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_delete_array_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_delete_array_by_id`")  # noqa: E501
        # verify the required parameter 'array_id' is set
        if ('array_id' not in params or
                params['array_id'] is None):
            raise ValueError("Missing the required parameter `array_id` when calling `device_type2_delete_array_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'array_id' in params:
            path_params['arrayId'] = params['array_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/arrays/{arrayId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_array_by_id(self, system_id, array_id, nimble_edit_array_input, **kwargs):  # noqa: E501
        """Edit  details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Edit  details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_array_by_id(system_id, array_id, nimble_edit_array_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str array_id: ID of the array. (required)
        :param NimbleEditArrayInput nimble_edit_array_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_array_by_id_with_http_info(system_id, array_id, nimble_edit_array_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_array_by_id_with_http_info(system_id, array_id, nimble_edit_array_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_array_by_id_with_http_info(self, system_id, array_id, nimble_edit_array_input, **kwargs):  # noqa: E501
        """Edit  details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Edit  details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_array_by_id_with_http_info(system_id, array_id, nimble_edit_array_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str array_id: ID of the array. (required)
        :param NimbleEditArrayInput nimble_edit_array_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'array_id', 'nimble_edit_array_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_array_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_array_by_id`")  # noqa: E501
        # verify the required parameter 'array_id' is set
        if ('array_id' not in params or
                params['array_id'] is None):
            raise ValueError("Missing the required parameter `array_id` when calling `device_type2_edit_array_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_array_input' is set
        if ('nimble_edit_array_input' not in params or
                params['nimble_edit_array_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_array_input` when calling `device_type2_edit_array_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'array_id' in params:
            path_params['arrayId'] = params['array_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_array_input' in params:
            body_params = params['nimble_edit_array_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/arrays/{arrayId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_storage_system_settings_by_id(self, system_id, nimble_edit_group_input, **kwargs):  # noqa: E501
        """Edit settings of Nimble / Alletra 6K system identified by {systemId}  # noqa: E501

        Edit settings of Nimble / Alletra 6K system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_storage_system_settings_by_id(system_id, nimble_edit_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleEditGroupInput nimble_edit_group_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_storage_system_settings_by_id_with_http_info(system_id, nimble_edit_group_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_storage_system_settings_by_id_with_http_info(system_id, nimble_edit_group_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_storage_system_settings_by_id_with_http_info(self, system_id, nimble_edit_group_input, **kwargs):  # noqa: E501
        """Edit settings of Nimble / Alletra 6K system identified by {systemId}  # noqa: E501

        Edit settings of Nimble / Alletra 6K system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_storage_system_settings_by_id_with_http_info(system_id, nimble_edit_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleEditGroupInput nimble_edit_group_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_edit_group_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_storage_system_settings_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_storage_system_settings_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_group_input' is set
        if ('nimble_edit_group_input' not in params or
                params['nimble_edit_group_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_group_input` when calling `device_type2_edit_storage_system_settings_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_group_input' in params:
            body_params = params['nimble_edit_group_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_application_capacity_statistics_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get capacity stats of Application identified by {id} for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity stats of Application identified by {id} for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_application_capacity_statistics_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str id: ID of the application-summery. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSpaceDomainDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_application_capacity_statistics_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_application_capacity_statistics_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_application_capacity_statistics_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get capacity stats of Application identified by {id} for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity stats of Application identified by {id} for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_application_capacity_statistics_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str id: ID of the application-summery. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSpaceDomainDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_application_capacity_statistics_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_application_capacity_statistics_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type2_get_application_capacity_statistics_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/applications/{id}/capacity-stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleSpaceDomainDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_applications_capacity_statistics(self, system_id, **kwargs):  # noqa: E501
        """Get capacity stats of Applications for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity stats of Applications for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_applications_capacity_statistics(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter application summery by Key.
        :param str sort: oData query to sort application summery resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSpaceDomainList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_applications_capacity_statistics_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_applications_capacity_statistics_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_applications_capacity_statistics_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get capacity stats of Applications for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity stats of Applications for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_applications_capacity_statistics_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter application summery by Key.
        :param str sort: oData query to sort application summery resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSpaceDomainList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_applications_capacity_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_applications_capacity_statistics`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_applications_capacity_statistics`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_applications_capacity_statistics`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/applications/capacity-stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleSpaceDomainList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_storage_system(self, **kwargs):  # noqa: E501
        """Get all storage systems by Nimble / Alletra 6K  # noqa: E501

        Get all storage systems by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_storage_system(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter systems by Key.
        :param str sort: Lucene query to sort systems by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleStorageSystemSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_storage_system_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_storage_system_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_type2_get_storage_system_with_http_info(self, **kwargs):  # noqa: E501
        """Get all storage systems by Nimble / Alletra 6K  # noqa: E501

        Get all storage systems by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_storage_system_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter systems by Key.
        :param str sort: Lucene query to sort systems by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleStorageSystemSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_storage_system" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_storage_system`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_storage_system`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleStorageSystemSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_storage_system_by_id(self, system_id, **kwargs):  # noqa: E501
        """Get Nimble / Alletra 6K object identified by {systemId}  # noqa: E501

        Get Nimble / Alletra 6K object identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_storage_system_by_id(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleStorageSystemDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_storage_system_by_id_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_storage_system_by_id_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_storage_system_by_id_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get Nimble / Alletra 6K object identified by {systemId}  # noqa: E501

        Get Nimble / Alletra 6K object identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_storage_system_by_id_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleStorageSystemDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_storage_system_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_storage_system_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleStorageSystemDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_storage_system_capacity_history(self, system_id, **kwargs):  # noqa: E501
        """Get capacity trend data for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity trend data for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_storage_system_capacity_history(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: NimblecapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_storage_system_capacity_history_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_storage_system_capacity_history_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_storage_system_capacity_history_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get capacity trend data for a storage system Nimble / Alletra 6K  # noqa: E501

        Get capacity trend data for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_storage_system_capacity_history_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: NimblecapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_storage_system_capacity_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_storage_system_capacity_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/capacity-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimblecapacityHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_storage_system_performance_history(self, system_id, **kwargs):  # noqa: E501
        """Get performance trend data for a storage system Nimble / Alletra 6K  # noqa: E501

        Get performance trend data for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_storage_system_performance_history(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: SysPerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_storage_system_performance_history_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_storage_system_performance_history_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_storage_system_performance_history_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get performance trend data for a storage system Nimble / Alletra 6K  # noqa: E501

        Get performance trend data for a storage system Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_storage_system_performance_history_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: SysPerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_storage_system_performance_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_storage_system_performance_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/performance-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SysPerformanceHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_merge_groups(self, system_id, nimble_merge_groups_input, **kwargs):  # noqa: E501
        """Perform group merge with the specified group.  # noqa: E501

        Perform group merge with the specified group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_merge_groups(system_id, nimble_merge_groups_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleMergeGroupsInput nimble_merge_groups_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_merge_groups_with_http_info(system_id, nimble_merge_groups_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_merge_groups_with_http_info(system_id, nimble_merge_groups_input, **kwargs)  # noqa: E501
            return data

    def device_type2_merge_groups_with_http_info(self, system_id, nimble_merge_groups_input, **kwargs):  # noqa: E501
        """Perform group merge with the specified group.  # noqa: E501

        Perform group merge with the specified group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_merge_groups_with_http_info(system_id, nimble_merge_groups_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleMergeGroupsInput nimble_merge_groups_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_merge_groups_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_merge_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_merge_groups`")  # noqa: E501
        # verify the required parameter 'nimble_merge_groups_input' is set
        if ('nimble_merge_groups_input' not in params or
                params['nimble_merge_groups_input'] is None):
            raise ValueError("Missing the required parameter `nimble_merge_groups_input` when calling `device_type2_merge_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_merge_groups_input' in params:
            body_params = params['nimble_merge_groups_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/actions/merge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_type(self, **kwargs):  # noqa: E501
        """Get all device types  # noqa: E501

        Get all device types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StorageTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_device_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_device_type_with_http_info(self, **kwargs):  # noqa: E501
        """Get all device types  # noqa: E501

        Get all device types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StorageTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_type" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/storage-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageTypes',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_type2_array_by_id(self, system_id, array_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Get details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_array_by_id(system_id, array_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str array_id: ID of the array. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleArrayDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_type2_array_by_id_with_http_info(system_id, array_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_type2_array_by_id_with_http_info(system_id, array_id, **kwargs)  # noqa: E501
            return data

    def get_device_type2_array_by_id_with_http_info(self, system_id, array_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501

        Get details of Nimble / Alletra 6K array identified by {arrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_array_by_id_with_http_info(system_id, array_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str array_id: ID of the array. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleArrayDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'array_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_type2_array_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `get_device_type2_array_by_id`")  # noqa: E501
        # verify the required parameter 'array_id' is set
        if ('array_id' not in params or
                params['array_id'] is None):
            raise ValueError("Missing the required parameter `array_id` when calling `get_device_type2_array_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'array_id' in params:
            path_params['arrayId'] = params['array_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/arrays/{arrayId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleArrayDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_type2_arrays(self, system_id, **kwargs):  # noqa: E501
        """Get all arrays details by Nimble / Alletra 6K  # noqa: E501

        Get all arrays details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_arrays(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter array by Key.
        :param str sort: oData query to sort array resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNewArrayList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_type2_arrays_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_type2_arrays_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def get_device_type2_arrays_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all arrays details by Nimble / Alletra 6K  # noqa: E501

        Get all arrays details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_arrays_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter array by Key.
        :param str sort: oData query to sort array resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleNewArrayList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_type2_arrays" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `get_device_type2_arrays`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_device_type2_arrays`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_device_type2_arrays`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/arrays', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleNewArrayList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_type2_uninitialized_array_by_id(self, system_id, uninitialized_array_id, nimble_uninitialized_array_input, **kwargs):  # noqa: E501
        """Get  uninitialized arrays details by Nimble / Alletra 6K  identified  by {uninitializedArrayId}  # noqa: E501

        Get uninitialized arrays details by Nimble / Alletra 6K identified  by {uninitializedArrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_uninitialized_array_by_id(system_id, uninitialized_array_id, nimble_uninitialized_array_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str uninitialized_array_id: ID of the uninitialized Array.A 42 digit hexadecimal number. (required)
        :param NimbleUninitializedArrayInput nimble_uninitialized_array_input: (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleUninitializedArrayWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_type2_uninitialized_array_by_id_with_http_info(system_id, uninitialized_array_id, nimble_uninitialized_array_input, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_type2_uninitialized_array_by_id_with_http_info(system_id, uninitialized_array_id, nimble_uninitialized_array_input, **kwargs)  # noqa: E501
            return data

    def get_device_type2_uninitialized_array_by_id_with_http_info(self, system_id, uninitialized_array_id, nimble_uninitialized_array_input, **kwargs):  # noqa: E501
        """Get  uninitialized arrays details by Nimble / Alletra 6K  identified  by {uninitializedArrayId}  # noqa: E501

        Get uninitialized arrays details by Nimble / Alletra 6K identified  by {uninitializedArrayId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_uninitialized_array_by_id_with_http_info(system_id, uninitialized_array_id, nimble_uninitialized_array_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str uninitialized_array_id: ID of the uninitialized Array.A 42 digit hexadecimal number. (required)
        :param NimbleUninitializedArrayInput nimble_uninitialized_array_input: (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleUninitializedArrayWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'uninitialized_array_id', 'nimble_uninitialized_array_input', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_type2_uninitialized_array_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `get_device_type2_uninitialized_array_by_id`")  # noqa: E501
        # verify the required parameter 'uninitialized_array_id' is set
        if ('uninitialized_array_id' not in params or
                params['uninitialized_array_id'] is None):
            raise ValueError("Missing the required parameter `uninitialized_array_id` when calling `get_device_type2_uninitialized_array_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_uninitialized_array_input' is set
        if ('nimble_uninitialized_array_input' not in params or
                params['nimble_uninitialized_array_input'] is None):
            raise ValueError("Missing the required parameter `nimble_uninitialized_array_input` when calling `get_device_type2_uninitialized_array_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'uninitialized_array_id' in params:
            path_params['uninitializedArrayId'] = params['uninitialized_array_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_uninitialized_array_input' in params:
            body_params = params['nimble_uninitialized_array_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/uninitialized-arrays/{uninitializedArrayId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleUninitializedArrayWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_type2_uninitialized_arrays(self, system_id, **kwargs):  # noqa: E501
        """Get all uninitialized arrays details by Nimble / Alletra 6K  # noqa: E501

        Get all uninitialized arrays details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_uninitialized_arrays(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :return: NimbleUninitializedArrayResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_type2_uninitialized_arrays_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_type2_uninitialized_arrays_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def get_device_type2_uninitialized_arrays_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all uninitialized arrays details by Nimble / Alletra 6K  # noqa: E501

        Get all uninitialized arrays details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_type2_uninitialized_arrays_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :return: NimbleUninitializedArrayResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_type2_uninitialized_arrays" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `get_device_type2_uninitialized_arrays`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/uninitialized-arrays', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleUninitializedArrayResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def provisioning_recommendations(self, recommendation_input, **kwargs):  # noqa: E501
        """provisioning recommendations  # noqa: E501

        provisioning recommendations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.provisioning_recommendations(recommendation_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param RecommendationInput recommendation_input: (required)
        :return: StorageSystemRecommendationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.provisioning_recommendations_with_http_info(recommendation_input, **kwargs)  # noqa: E501
        else:
            (data) = self.provisioning_recommendations_with_http_info(recommendation_input, **kwargs)  # noqa: E501
            return data

    def provisioning_recommendations_with_http_info(self, recommendation_input, **kwargs):  # noqa: E501
        """provisioning recommendations  # noqa: E501

        provisioning recommendations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.provisioning_recommendations_with_http_info(recommendation_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param RecommendationInput recommendation_input: (required)
        :return: StorageSystemRecommendationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recommendation_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method provisioning_recommendations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recommendation_input' is set
        if ('recommendation_input' not in params or
                params['recommendation_input'] is None):
            raise ValueError("Missing the required parameter `recommendation_input` when calling `provisioning_recommendations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'recommendation_input' in params:
            body_params = params['recommendation_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/provisioning-recommendations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageSystemRecommendationList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_by_id(self, id, **kwargs):  # noqa: E501
        """Get storage system object identified by {id}  # noqa: E501

        Get storage system object identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.system_get_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Serial number of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: StorageSystemDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.system_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.system_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def system_get_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get storage system object identified by {id}  # noqa: E501

        Get storage system object identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.system_get_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Serial number of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: StorageSystemDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `system_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageSystemDetail',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_locate(self, id, sys_locate_input, **kwargs):  # noqa: E501
        """Locate system of Primera / Alletra 9K  # noqa: E501

        Locate system of Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.system_locate(id, sys_locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Serial number of the device-type1 storage system (required)
        :param SysLocateInput sys_locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.system_locate_with_http_info(id, sys_locate_input, **kwargs)  # noqa: E501
        else:
            (data) = self.system_locate_with_http_info(id, sys_locate_input, **kwargs)  # noqa: E501
            return data

    def system_locate_with_http_info(self, id, sys_locate_input, **kwargs):  # noqa: E501
        """Locate system of Primera / Alletra 9K  # noqa: E501

        Locate system of Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.system_locate_with_http_info(id, sys_locate_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Serial number of the device-type1 storage system (required)
        :param SysLocateInput sys_locate_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sys_locate_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_locate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `system_locate`")  # noqa: E501
        # verify the required parameter 'sys_locate_input' is set
        if ('sys_locate_input' not in params or
                params['sys_locate_input'] is None):
            raise ValueError("Missing the required parameter `sys_locate_input` when calling `system_locate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sys_locate_input' in params:
            body_params = params['sys_locate_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def systems_list(self, **kwargs):  # noqa: E501
        """Get all storage systems  # noqa: E501

        Get all storage systems  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.systems_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter systems by Key.
        :param str sort: Query to sort the response with specified key and order
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: StorageSystemSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.systems_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.systems_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def systems_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get all storage systems  # noqa: E501

        Get all storage systems  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.systems_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter systems by Key.
        :param str sort: Query to sort the response with specified key and order
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: StorageSystemSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systems_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `systems_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `systems_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageSystemSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
