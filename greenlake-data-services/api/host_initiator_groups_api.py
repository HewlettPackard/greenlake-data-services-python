# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from greenlake-data-services.api_client import ApiClient


class HostInitiatorGroupsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_type2_get_all_host_initiator_groups(self, system_id, **kwargs):  # noqa: E501
        """Get all nimble host initiator groups details by Nimble / Alletra 6K  # noqa: E501

        Get all nimble host initiator groups details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_host_initiator_groups(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter initiator groups by Key.
        :param str sort: oData query to sort initiator groups resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleInitiatorGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_host_initiator_groups_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_host_initiator_groups_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_host_initiator_groups_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all nimble host initiator groups details by Nimble / Alletra 6K  # noqa: E501

        Get all nimble host initiator groups details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_host_initiator_groups_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter initiator groups by Key.
        :param str sort: oData query to sort initiator groups resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleInitiatorGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_host_initiator_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_host_initiator_groups`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_host_initiator_groups`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_host_initiator_groups`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/host-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleInitiatorGroupList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_host_initiator_group_by_id(self, system_id, host_initiator_group_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K Nimble Initiators identified by {hostInitiatorGroupId}  # noqa: E501

        Get details of Nimble / Alletra 6K Nimble Initiators identified by {hostInitiatorGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_host_initiator_group_by_id(system_id, host_initiator_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str host_initiator_group_id: Identifier of initiator group. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleInitiatorGroupDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_host_initiator_group_by_id_with_http_info(self, system_id, host_initiator_group_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K Nimble Initiators identified by {hostInitiatorGroupId}  # noqa: E501

        Get details of Nimble / Alletra 6K Nimble Initiators identified by {hostInitiatorGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str host_initiator_group_id: Identifier of initiator group. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleInitiatorGroupDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'host_initiator_group_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_host_initiator_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_host_initiator_group_by_id`")  # noqa: E501
        # verify the required parameter 'host_initiator_group_id' is set
        if ('host_initiator_group_id' not in params or
                params['host_initiator_group_id'] is None):
            raise ValueError("Missing the required parameter `host_initiator_group_id` when calling `device_type2_get_host_initiator_group_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'host_initiator_group_id' in params:
            path_params['hostInitiatorGroupId'] = params['host_initiator_group_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/host-groups/{hostInitiatorGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleInitiatorGroupDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_host_initiator_group_create(self, system_id, nimble_create_initiator_group_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K initiator group in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K initiator group in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_host_initiator_group_create(system_id, nimble_create_initiator_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateInitiatorGroupInput nimble_create_initiator_group_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_host_initiator_group_create_with_http_info(system_id, nimble_create_initiator_group_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_host_initiator_group_create_with_http_info(system_id, nimble_create_initiator_group_input, **kwargs)  # noqa: E501
            return data

    def device_type2_host_initiator_group_create_with_http_info(self, system_id, nimble_create_initiator_group_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K initiator group in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K initiator group in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_host_initiator_group_create_with_http_info(system_id, nimble_create_initiator_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateInitiatorGroupInput nimble_create_initiator_group_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_initiator_group_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_host_initiator_group_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_host_initiator_group_create`")  # noqa: E501
        # verify the required parameter 'nimble_create_initiator_group_input' is set
        if ('nimble_create_initiator_group_input' not in params or
                params['nimble_create_initiator_group_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_initiator_group_input` when calling `device_type2_host_initiator_group_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_initiator_group_input' in params:
            body_params = params['nimble_create_initiator_group_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/host-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_host_initiator_group_by_id(self, system_id, host_initiator_group_id, **kwargs):  # noqa: E501
        """Remove initiator-groups identified by {hostInitiatorGroupId} from Nimble / Alletra 6K  # noqa: E501

        Remove initiator-groups identified by {hostInitiatorGroupId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_host_initiator_group_by_id(system_id, host_initiator_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str host_initiator_group_id: Identifier of initiator group. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_host_initiator_group_by_id_with_http_info(self, system_id, host_initiator_group_id, **kwargs):  # noqa: E501
        """Remove initiator-groups identified by {hostInitiatorGroupId} from Nimble / Alletra 6K  # noqa: E501

        Remove initiator-groups identified by {hostInitiatorGroupId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str host_initiator_group_id: Identifier of initiator group. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'host_initiator_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_host_initiator_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_host_initiator_group_by_id`")  # noqa: E501
        # verify the required parameter 'host_initiator_group_id' is set
        if ('host_initiator_group_id' not in params or
                params['host_initiator_group_id'] is None):
            raise ValueError("Missing the required parameter `host_initiator_group_id` when calling `device_type2_remove_host_initiator_group_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'host_initiator_group_id' in params:
            path_params['hostInitiatorGroupId'] = params['host_initiator_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/host-groups/{hostInitiatorGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_update_host_initiator_group_by_id(self, system_id, host_initiator_group_id, nimble_edit_initiator_group_input, **kwargs):  # noqa: E501
        """Update initiator-groups identified by {hostInitiatorGroupId}  # noqa: E501

        Update initiator-groups identified by {hostInitiatorGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_update_host_initiator_group_by_id(system_id, host_initiator_group_id, nimble_edit_initiator_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str host_initiator_group_id: Identifier of initiator group. A 42 digit hexadecimal number. (required)
        :param NimbleEditInitiatorGroupInput nimble_edit_initiator_group_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_update_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, nimble_edit_initiator_group_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_update_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, nimble_edit_initiator_group_input, **kwargs)  # noqa: E501
            return data

    def device_type2_update_host_initiator_group_by_id_with_http_info(self, system_id, host_initiator_group_id, nimble_edit_initiator_group_input, **kwargs):  # noqa: E501
        """Update initiator-groups identified by {hostInitiatorGroupId}  # noqa: E501

        Update initiator-groups identified by {hostInitiatorGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_update_host_initiator_group_by_id_with_http_info(system_id, host_initiator_group_id, nimble_edit_initiator_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str host_initiator_group_id: Identifier of initiator group. A 42 digit hexadecimal number. (required)
        :param NimbleEditInitiatorGroupInput nimble_edit_initiator_group_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'host_initiator_group_id', 'nimble_edit_initiator_group_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_update_host_initiator_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_update_host_initiator_group_by_id`")  # noqa: E501
        # verify the required parameter 'host_initiator_group_id' is set
        if ('host_initiator_group_id' not in params or
                params['host_initiator_group_id'] is None):
            raise ValueError("Missing the required parameter `host_initiator_group_id` when calling `device_type2_update_host_initiator_group_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_initiator_group_input' is set
        if ('nimble_edit_initiator_group_input' not in params or
                params['nimble_edit_initiator_group_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_initiator_group_input` when calling `device_type2_update_host_initiator_group_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'host_initiator_group_id' in params:
            path_params['hostInitiatorGroupId'] = params['host_initiator_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_initiator_group_input' in params:
            body_params = params['nimble_edit_initiator_group_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/host-groups/{hostInitiatorGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def host_group_create(self, create_host_group_input, **kwargs):  # noqa: E501
        """Create a host group  # noqa: E501

        Create a host group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_create(create_host_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateHostGroupInput create_host_group_input: (required)
        :return: HostGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.host_group_create_with_http_info(create_host_group_input, **kwargs)  # noqa: E501
        else:
            (data) = self.host_group_create_with_http_info(create_host_group_input, **kwargs)  # noqa: E501
            return data

    def host_group_create_with_http_info(self, create_host_group_input, **kwargs):  # noqa: E501
        """Create a host group  # noqa: E501

        Create a host group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_create_with_http_info(create_host_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateHostGroupInput create_host_group_input: (required)
        :return: HostGroupObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_host_group_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method host_group_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_host_group_input' is set
        if ('create_host_group_input' not in params or
                params['create_host_group_input'] is None):
            raise ValueError("Missing the required parameter `create_host_group_input` when calling `host_group_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_host_group_input' in params:
            body_params = params['create_host_group_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/host-initiator-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostGroupObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def host_group_delete(self, host_group_id, **kwargs):  # noqa: E501
        """Delete a host group by {hostGroupId}  # noqa: E501

        Delete a host group by {hostGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_delete(host_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host_group_id: Id of the host Group. (required)
        :param bool force: Forceful delete option
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.host_group_delete_with_http_info(host_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.host_group_delete_with_http_info(host_group_id, **kwargs)  # noqa: E501
            return data

    def host_group_delete_with_http_info(self, host_group_id, **kwargs):  # noqa: E501
        """Delete a host group by {hostGroupId}  # noqa: E501

        Delete a host group by {hostGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_delete_with_http_info(host_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host_group_id: Id of the host Group. (required)
        :param bool force: Forceful delete option
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_group_id', 'force']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method host_group_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_group_id' is set
        if ('host_group_id' not in params or
                params['host_group_id'] is None):
            raise ValueError("Missing the required parameter `host_group_id` when calling `host_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_group_id' in params:
            path_params['hostGroupId'] = params['host_group_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/host-initiator-groups/{hostGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def host_group_get_by_id(self, host_group_id, **kwargs):  # noqa: E501
        """Get the host group details by {hostGroupId}  # noqa: E501

        Get the host group details by {hostGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_get_by_id(host_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host_group_id: Id of the host Group. (required)
        :return: HostGroupDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.host_group_get_by_id_with_http_info(host_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.host_group_get_by_id_with_http_info(host_group_id, **kwargs)  # noqa: E501
            return data

    def host_group_get_by_id_with_http_info(self, host_group_id, **kwargs):  # noqa: E501
        """Get the host group details by {hostGroupId}  # noqa: E501

        Get the host group details by {hostGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_get_by_id_with_http_info(host_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host_group_id: Id of the host Group. (required)
        :return: HostGroupDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method host_group_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_group_id' is set
        if ('host_group_id' not in params or
                params['host_group_id'] is None):
            raise ValueError("Missing the required parameter `host_group_id` when calling `host_group_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_group_id' in params:
            path_params['hostGroupId'] = params['host_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/host-initiator-groups/{hostGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostGroupDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def host_group_list(self, **kwargs):  # noqa: E501
        """Get the list of host groups  # noqa: E501

        Get the list of host groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param str filter: oData query to filter hostservice by Key.
        :param str sort: oData query to sort hostservice by Key.
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :return: HostGroupsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.host_group_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.host_group_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def host_group_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of host groups  # noqa: E501

        Get the list of host groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str filter: oData query to filter hostservice by Key.
        :param str sort: oData query to sort hostservice by Key.
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :return: HostGroupsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'sort', 'limit', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method host_group_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `host_group_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `host_group_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/host-initiator-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostGroupsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def host_group_update_by_id(self, host_group_id, update_host_group_input, **kwargs):  # noqa: E501
        """Update host group by {hostGroupId}  # noqa: E501

        Update host group details by {hostGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_update_by_id(host_group_id, update_host_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host_group_id: Id of the host Group. (required)
        :param UpdateHostGroupInput update_host_group_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.host_group_update_by_id_with_http_info(host_group_id, update_host_group_input, **kwargs)  # noqa: E501
        else:
            (data) = self.host_group_update_by_id_with_http_info(host_group_id, update_host_group_input, **kwargs)  # noqa: E501
            return data

    def host_group_update_by_id_with_http_info(self, host_group_id, update_host_group_input, **kwargs):  # noqa: E501
        """Update host group by {hostGroupId}  # noqa: E501

        Update host group details by {hostGroupId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_group_update_by_id_with_http_info(host_group_id, update_host_group_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host_group_id: Id of the host Group. (required)
        :param UpdateHostGroupInput update_host_group_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_group_id', 'update_host_group_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method host_group_update_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_group_id' is set
        if ('host_group_id' not in params or
                params['host_group_id'] is None):
            raise ValueError("Missing the required parameter `host_group_id` when calling `host_group_update_by_id`")  # noqa: E501
        # verify the required parameter 'update_host_group_input' is set
        if ('update_host_group_input' not in params or
                params['update_host_group_input'] is None):
            raise ValueError("Missing the required parameter `update_host_group_input` when calling `host_group_update_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_group_id' in params:
            path_params['hostGroupId'] = params['host_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_host_group_input' in params:
            body_params = params['update_host_group_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/host-initiator-groups/{hostGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
