# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from greenlake-data-services.api_client import ApiClient


class StoragePoolsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_type1_storage_pool_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K storage-pool identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K storage-pool identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_storage_pool_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Identifier of pool. A 32 digit number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraPoolDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_storage_pool_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_storage_pool_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_storage_pool_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K storage-pool identified by {id}  # noqa: E501

        Get details of Primera / Alletra 9K storage-pool identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_storage_pool_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Identifier of pool. A 32 digit number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraPoolDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_storage_pool_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_storage_pool_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_storage_pool_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/storage-pools/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraPoolDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_storage_pool_list(self, system_id, **kwargs):  # noqa: E501
        """Get all storage-pools details by Primera / Alletra 9K  # noqa: E501

        Get all storage-pools details by Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_storage_pool_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter pools by Key.
        :param str sort: oData query to sort pools by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraPoolsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_storage_pool_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_storage_pool_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_storage_pool_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all storage-pools details by Primera / Alletra 9K  # noqa: E501

        Get all storage-pools details by Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_storage_pool_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter pools by Key.
        :param str sort: oData query to sort pools by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraPoolsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_storage_pool_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_storage_pool_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_storage_pool_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_storage_pool_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/storage-pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraPoolsSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_storage_pool_volume_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K  # noqa: E501

        Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_storage_pool_volume_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Identifier of pool. A 32 digit number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_storage_pool_volume_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_storage_pool_volume_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_storage_pool_volume_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K  # noqa: E501

        Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_storage_pool_volume_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Identifier of pool. A 32 digit number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_storage_pool_volume_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_storage_pool_volume_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_storage_pool_volume_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/storage-pools/{id}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraVolumesList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_create_pool(self, system_id, nimble_create_pool_input, **kwargs):  # noqa: E501
        """Create storage pool from Nimble / Alletra 6K  system identified by {systemId}  # noqa: E501

        Create storage pool from Nimble / Alletra 6K  system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_pool(system_id, nimble_create_pool_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreatePoolInput nimble_create_pool_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_create_pool_with_http_info(system_id, nimble_create_pool_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_create_pool_with_http_info(system_id, nimble_create_pool_input, **kwargs)  # noqa: E501
            return data

    def device_type2_create_pool_with_http_info(self, system_id, nimble_create_pool_input, **kwargs):  # noqa: E501
        """Create storage pool from Nimble / Alletra 6K  system identified by {systemId}  # noqa: E501

        Create storage pool from Nimble / Alletra 6K  system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_pool_with_http_info(system_id, nimble_create_pool_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreatePoolInput nimble_create_pool_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_pool_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_create_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_create_pool`")  # noqa: E501
        # verify the required parameter 'nimble_create_pool_input' is set
        if ('nimble_create_pool_input' not in params or
                params['nimble_create_pool_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_pool_input` when calling `device_type2_create_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_pool_input' in params:
            body_params = params['nimble_create_pool_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_pool_detail_by_id(self, system_id, storage_pool_id, nimble_edit_pool_input, **kwargs):  # noqa: E501
        """Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}  # noqa: E501

        Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_pool_detail_by_id(system_id, storage_pool_id, nimble_edit_pool_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :param NimbleEditPoolInput nimble_edit_pool_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_pool_detail_by_id_with_http_info(system_id, storage_pool_id, nimble_edit_pool_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_pool_detail_by_id_with_http_info(system_id, storage_pool_id, nimble_edit_pool_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_pool_detail_by_id_with_http_info(self, system_id, storage_pool_id, nimble_edit_pool_input, **kwargs):  # noqa: E501
        """Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}  # noqa: E501

        Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_pool_detail_by_id_with_http_info(system_id, storage_pool_id, nimble_edit_pool_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :param NimbleEditPoolInput nimble_edit_pool_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'storage_pool_id', 'nimble_edit_pool_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_pool_detail_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_pool_detail_by_id`")  # noqa: E501
        # verify the required parameter 'storage_pool_id' is set
        if ('storage_pool_id' not in params or
                params['storage_pool_id'] is None):
            raise ValueError("Missing the required parameter `storage_pool_id` when calling `device_type2_edit_pool_detail_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_pool_input' is set
        if ('nimble_edit_pool_input' not in params or
                params['nimble_edit_pool_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_pool_input` when calling `device_type2_edit_pool_detail_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'storage_pool_id' in params:
            path_params['storagePoolId'] = params['storage_pool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_pool_input' in params:
            body_params = params['nimble_edit_pool_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_pool_details(self, system_id, **kwargs):  # noqa: E501
        """Get all pools details by Nimble / Alletra 6K  # noqa: E501

        Get all pools details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_pool_details(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter pools by Key.
        :param str sort: oData query to sort pools resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblePoolsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_pool_details_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_pool_details_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_pool_details_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all pools details by Nimble / Alletra 6K  # noqa: E501

        Get all pools details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_pool_details_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter pools by Key.
        :param str sort: oData query to sort pools resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblePoolsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_pool_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_pool_details`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_pool_details`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_pool_details`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimblePoolsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_pool_capacity_history(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501

        Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_pool_capacity_history(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: PoolCapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_pool_capacity_history_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_pool_capacity_history_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_pool_capacity_history_with_http_info(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501

        Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_pool_capacity_history_with_http_info(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: PoolCapacityHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'storage_pool_id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_pool_capacity_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_pool_capacity_history`")  # noqa: E501
        # verify the required parameter 'storage_pool_id' is set
        if ('storage_pool_id' not in params or
                params['storage_pool_id'] is None):
            raise ValueError("Missing the required parameter `storage_pool_id` when calling `device_type2_get_pool_capacity_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'storage_pool_id' in params:
            path_params['storagePoolId'] = params['storage_pool_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}/capacity-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PoolCapacityHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_pool_detail_by_id(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K pool identified by {storagePoolId}  # noqa: E501

        Get details of Nimble / Alletra 6K pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_pool_detail_by_id(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblePoolDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_pool_detail_by_id_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_pool_detail_by_id_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_pool_detail_by_id_with_http_info(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K pool identified by {storagePoolId}  # noqa: E501

        Get details of Nimble / Alletra 6K pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_pool_detail_by_id_with_http_info(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimblePoolDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'storage_pool_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_pool_detail_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_pool_detail_by_id`")  # noqa: E501
        # verify the required parameter 'storage_pool_id' is set
        if ('storage_pool_id' not in params or
                params['storage_pool_id'] is None):
            raise ValueError("Missing the required parameter `storage_pool_id` when calling `device_type2_get_pool_detail_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'storage_pool_id' in params:
            path_params['storagePoolId'] = params['storage_pool_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimblePoolDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_pool_performance_history(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501

        Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_pool_performance_history(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: StoragePoolPerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_pool_performance_history_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_pool_performance_history_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_pool_performance_history_with_http_info(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501

        Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_pool_performance_history_with_http_info(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str range: range will define start and end time in which query has to be made.
        :param int time_interval_min: It defines granularity in minutes.
        :return: StoragePoolPerformanceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'storage_pool_id', 'select', 'range', 'time_interval_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_pool_performance_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_pool_performance_history`")  # noqa: E501
        # verify the required parameter 'storage_pool_id' is set
        if ('storage_pool_id' not in params or
                params['storage_pool_id'] is None):
            raise ValueError("Missing the required parameter `storage_pool_id` when calling `device_type2_get_pool_performance_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'storage_pool_id' in params:
            path_params['storagePoolId'] = params['storage_pool_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'time_interval_min' in params:
            query_params.append(('timeIntervalMin', params['time_interval_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}/performance-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragePoolPerformanceHistory',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_pool_performance_statistics(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501

        Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_pool_performance_statistics(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: StoragePoolPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_pool_performance_statistics_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_pool_performance_statistics_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_pool_performance_statistics_with_http_info(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501

        Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_pool_performance_statistics_with_http_info(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: StoragePoolPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'storage_pool_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_pool_performance_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_pool_performance_statistics`")  # noqa: E501
        # verify the required parameter 'storage_pool_id' is set
        if ('storage_pool_id' not in params or
                params['storage_pool_id'] is None):
            raise ValueError("Missing the required parameter `storage_pool_id` when calling `device_type2_get_pool_performance_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'storage_pool_id' in params:
            path_params['storagePoolId'] = params['storage_pool_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}/performance-statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragePoolPerformance',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_merge_pool_by_id(self, system_id, storage_pool_id, nimble_merge_pool_input, **kwargs):  # noqa: E501
        """Merge pool identified by {storagePoolId} from Nimble / Alletra 6K  # noqa: E501

        Merge pool identified by {storagePoolId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_merge_pool_by_id(system_id, storage_pool_id, nimble_merge_pool_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :param NimbleMergePoolInput nimble_merge_pool_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_merge_pool_by_id_with_http_info(system_id, storage_pool_id, nimble_merge_pool_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_merge_pool_by_id_with_http_info(system_id, storage_pool_id, nimble_merge_pool_input, **kwargs)  # noqa: E501
            return data

    def device_type2_merge_pool_by_id_with_http_info(self, system_id, storage_pool_id, nimble_merge_pool_input, **kwargs):  # noqa: E501
        """Merge pool identified by {storagePoolId} from Nimble / Alletra 6K  # noqa: E501

        Merge pool identified by {storagePoolId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_merge_pool_by_id_with_http_info(system_id, storage_pool_id, nimble_merge_pool_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :param NimbleMergePoolInput nimble_merge_pool_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'storage_pool_id', 'nimble_merge_pool_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_merge_pool_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_merge_pool_by_id`")  # noqa: E501
        # verify the required parameter 'storage_pool_id' is set
        if ('storage_pool_id' not in params or
                params['storage_pool_id'] is None):
            raise ValueError("Missing the required parameter `storage_pool_id` when calling `device_type2_merge_pool_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_merge_pool_input' is set
        if ('nimble_merge_pool_input' not in params or
                params['nimble_merge_pool_input'] is None):
            raise ValueError("Missing the required parameter `nimble_merge_pool_input` when calling `device_type2_merge_pool_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'storage_pool_id' in params:
            path_params['storagePoolId'] = params['storage_pool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_merge_pool_input' in params:
            body_params = params['nimble_merge_pool_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}/actions/merge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_pool_by_id(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Delete pool identified by {storagePoolId} from Nimble / Alletra 6K  # noqa: E501

        Delete pool identified by {storagePoolId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_pool_by_id(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_pool_by_id_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_pool_by_id_with_http_info(system_id, storage_pool_id, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_pool_by_id_with_http_info(self, system_id, storage_pool_id, **kwargs):  # noqa: E501
        """Delete pool identified by {storagePoolId} from Nimble / Alletra 6K  # noqa: E501

        Delete pool identified by {storagePoolId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_pool_by_id_with_http_info(system_id, storage_pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'storage_pool_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_pool_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_pool_by_id`")  # noqa: E501
        # verify the required parameter 'storage_pool_id' is set
        if ('storage_pool_id' not in params or
                params['storage_pool_id'] is None):
            raise ValueError("Missing the required parameter `storage_pool_id` when calling `device_type2_remove_pool_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'storage_pool_id' in params:
            path_params['storagePoolId'] = params['storage_pool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_pool_volumes_list(self, system_id, id, **kwargs):  # noqa: E501
        """Get all volumes for storage-pool identified by {id}  # noqa: E501

        Get all volumes for storage-pool identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.storage_pool_volumes_list(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Identifier of pool. A 32 digit number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.storage_pool_volumes_list_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_pool_volumes_list_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def storage_pool_volumes_list_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get all volumes for storage-pool identified by {id}  # noqa: E501

        Get all volumes for storage-pool identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.storage_pool_volumes_list_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Identifier of pool. A 32 digit number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_pool_volumes_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `storage_pool_volumes_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `storage_pool_volumes_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/{systemId}/storage-pools/{id}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetVolumesList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_pools_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of storage pools identified by {id}  # noqa: E501

        Get details of storage pools identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.storage_pools_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Identifier of pool. A 32 digit number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetPoolDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.storage_pools_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_pools_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def storage_pools_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get details of storage pools identified by {id}  # noqa: E501

        Get details of storage pools identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.storage_pools_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: Identifier of pool. A 32 digit number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetPoolDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_pools_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `storage_pools_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `storage_pools_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/{systemId}/storage-pools/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetPoolDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_pools_list(self, system_id, **kwargs):  # noqa: E501
        """Get all storage pools for a device {systemId}  # noqa: E501

        Get all storage pools for a device {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.storage_pools_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter pools by Key.
        :param str sort: oData query to sort pools by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: StoragePoolsFleetSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.storage_pools_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_pools_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def storage_pools_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all storage pools for a device {systemId}  # noqa: E501

        Get all storage pools for a device {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.storage_pools_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter pools by Key.
        :param str sort: oData query to sort pools by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: StoragePoolsFleetSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_pools_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `storage_pools_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `storage_pools_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `storage_pools_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/{systemId}/storage-pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragePoolsFleetSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
