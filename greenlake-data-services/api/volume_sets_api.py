# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from greenlake-data-services.api_client import ApiClient


class VolumeSetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_type1_edit_proximity_settings(self, system_id, id, change_proximity_settings_input, **kwargs):  # noqa: E501
        """Change proximity settings of hosts where volume sets are exported identified by {id} and {systemId} from Primera / Alletra 9K  # noqa: E501

        Change proximity settings of hosts where volume sets are exported identified by {id} and {systemId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_edit_proximity_settings(system_id, id, change_proximity_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :param ChangeProximitySettingsInput change_proximity_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_edit_proximity_settings_with_http_info(system_id, id, change_proximity_settings_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_edit_proximity_settings_with_http_info(system_id, id, change_proximity_settings_input, **kwargs)  # noqa: E501
            return data

    def device_type1_edit_proximity_settings_with_http_info(self, system_id, id, change_proximity_settings_input, **kwargs):  # noqa: E501
        """Change proximity settings of hosts where volume sets are exported identified by {id} and {systemId} from Primera / Alletra 9K  # noqa: E501

        Change proximity settings of hosts where volume sets are exported identified by {id} and {systemId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_edit_proximity_settings_with_http_info(system_id, id, change_proximity_settings_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :param ChangeProximitySettingsInput change_proximity_settings_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'change_proximity_settings_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_edit_proximity_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_edit_proximity_settings`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_edit_proximity_settings`")  # noqa: E501
        # verify the required parameter 'change_proximity_settings_input' is set
        if ('change_proximity_settings_input' not in params or
                params['change_proximity_settings_input'] is None):
            raise ValueError("Missing the required parameter `change_proximity_settings_input` when calling `device_type1_edit_proximity_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_proximity_settings_input' in params:
            body_params = params['change_proximity_settings_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}/proximity-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_get_proximity_settings(self, id, system_id, **kwargs):  # noqa: E501
        """Get hosts and proximity details identified by application set {id} for Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get hosts and proximity details identified by application set {id} for Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_proximity_settings(id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the applicationset (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :return: VolumeSetProximitySettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_proximity_settings_with_http_info(id, system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_proximity_settings_with_http_info(id, system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_proximity_settings_with_http_info(self, id, system_id, **kwargs):  # noqa: E501
        """Get hosts and proximity details identified by application set {id} for Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Get hosts and proximity details identified by application set {id} for Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_proximity_settings_with_http_info(id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the applicationset (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :return: VolumeSetProximitySettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'system_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_proximity_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_get_proximity_settings`")  # noqa: E501
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_proximity_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}/proximity-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeSetProximitySettings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_get_replication_partner_volumes_by_app_set_id(self, system_id, appset_id, replication_partner_id, **kwargs):  # noqa: E501
        """Get volume details of replication partners identified by {appsetId} and {replicationPartnerId} for Primera / Alletra 9K  # noqa: E501

        Get volume details of replication partners identified by {appsetId} and {replicationPartnerId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_replication_partner_volumes_by_app_set_id(system_id, appset_id, replication_partner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :return: ReplicationPartnerVolumesSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_replication_partner_volumes_by_app_set_id_with_http_info(system_id, appset_id, replication_partner_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_replication_partner_volumes_by_app_set_id_with_http_info(system_id, appset_id, replication_partner_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_replication_partner_volumes_by_app_set_id_with_http_info(self, system_id, appset_id, replication_partner_id, **kwargs):  # noqa: E501
        """Get volume details of replication partners identified by {appsetId} and {replicationPartnerId} for Primera / Alletra 9K  # noqa: E501

        Get volume details of replication partners identified by {appsetId} and {replicationPartnerId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_replication_partner_volumes_by_app_set_id_with_http_info(system_id, appset_id, replication_partner_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param str replication_partner_id: id of device-type1 replication partner (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :return: ReplicationPartnerVolumesSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'appset_id', 'replication_partner_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_replication_partner_volumes_by_app_set_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_replication_partner_volumes_by_app_set_id`")  # noqa: E501
        # verify the required parameter 'appset_id' is set
        if ('appset_id' not in params or
                params['appset_id'] is None):
            raise ValueError("Missing the required parameter `appset_id` when calling `device_type1_get_replication_partner_volumes_by_app_set_id`")  # noqa: E501
        # verify the required parameter 'replication_partner_id' is set
        if ('replication_partner_id' not in params or
                params['replication_partner_id'] is None):
            raise ValueError("Missing the required parameter `replication_partner_id` when calling `device_type1_get_replication_partner_volumes_by_app_set_id`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_get_replication_partner_volumes_by_app_set_id`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_get_replication_partner_volumes_by_app_set_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'appset_id' in params:
            path_params['appsetId'] = params['appset_id']  # noqa: E501
        if 'replication_partner_id' in params:
            path_params['replicationPartnerId'] = params['replication_partner_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{appsetId}/replication-partners/{replicationPartnerId}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReplicationPartnerVolumesSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_get_replication_partners_by_app_set_id(self, system_id, appset_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K replication partners identified by {systemId} and {appsetId}  # noqa: E501

        Get details of Primera / Alletra 9K replication partners identified by {systemId} and {appsetId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_replication_partners_by_app_set_id(system_id, appset_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :return: ReplicationPartnersSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_get_replication_partners_by_app_set_id_with_http_info(system_id, appset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_get_replication_partners_by_app_set_id_with_http_info(system_id, appset_id, **kwargs)  # noqa: E501
            return data

    def device_type1_get_replication_partners_by_app_set_id_with_http_info(self, system_id, appset_id, **kwargs):  # noqa: E501
        """Get details of Primera / Alletra 9K replication partners identified by {systemId} and {appsetId}  # noqa: E501

        Get details of Primera / Alletra 9K replication partners identified by {systemId} and {appsetId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_get_replication_partners_by_app_set_id_with_http_info(system_id, appset_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :return: ReplicationPartnersSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'appset_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_get_replication_partners_by_app_set_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_get_replication_partners_by_app_set_id`")  # noqa: E501
        # verify the required parameter 'appset_id' is set
        if ('appset_id' not in params or
                params['appset_id'] is None):
            raise ValueError("Missing the required parameter `appset_id` when calling `device_type1_get_replication_partners_by_app_set_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'appset_id' in params:
            path_params['appsetId'] = params['appset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{appsetId}/replication-partners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReplicationPartnersSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_snapsets_get_by_id(self, system_id, appset_id, snapset_id, **kwargs):  # noqa: E501
        """Get details of snapsets identified by {snapsetId} for Applicationset identified by {appsetId} for Primera / Alletra 9K  # noqa: E501

        Get details of snapset identified by {snapsetId} for Applicationset identified by {appsetId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_snapsets_get_by_id(system_id, appset_id, snapset_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param str snapset_id: Identifier of snapset. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SnapshotsetListSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_snapsets_get_by_id_with_http_info(system_id, appset_id, snapset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_snapsets_get_by_id_with_http_info(system_id, appset_id, snapset_id, **kwargs)  # noqa: E501
            return data

    def device_type1_snapsets_get_by_id_with_http_info(self, system_id, appset_id, snapset_id, **kwargs):  # noqa: E501
        """Get details of snapsets identified by {snapsetId} for Applicationset identified by {appsetId} for Primera / Alletra 9K  # noqa: E501

        Get details of snapset identified by {snapsetId} for Applicationset identified by {appsetId} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_snapsets_get_by_id_with_http_info(system_id, appset_id, snapset_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param str snapset_id: Identifier of snapset. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: SnapshotsetListSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'appset_id', 'snapset_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_snapsets_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_snapsets_get_by_id`")  # noqa: E501
        # verify the required parameter 'appset_id' is set
        if ('appset_id' not in params or
                params['appset_id'] is None):
            raise ValueError("Missing the required parameter `appset_id` when calling `device_type1_snapsets_get_by_id`")  # noqa: E501
        # verify the required parameter 'snapset_id' is set
        if ('snapset_id' not in params or
                params['snapset_id'] is None):
            raise ValueError("Missing the required parameter `snapset_id` when calling `device_type1_snapsets_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'appset_id' in params:
            path_params['appsetId'] = params['appset_id']  # noqa: E501
        if 'snapset_id' in params:
            path_params['snapsetId'] = params['snapset_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{appsetId}/snapsets/{snapsetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotsetListSingle',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_set_capacity_statistics_get_by_id(self, id, system_id, **kwargs):  # noqa: E501
        """Get capacity details for an applicationset identified by appsetUid  # noqa: E501

        Get capacity details for an applicationset identified by appsetUid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_capacity_statistics_get_by_id(id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID of the applicationset (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraApplicationSetCapacityStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_set_capacity_statistics_get_by_id_with_http_info(id, system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_set_capacity_statistics_get_by_id_with_http_info(id, system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_set_capacity_statistics_get_by_id_with_http_info(self, id, system_id, **kwargs):  # noqa: E501
        """Get capacity details for an applicationset identified by appsetUid  # noqa: E501

        Get capacity details for an applicationset identified by appsetUid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_capacity_statistics_get_by_id_with_http_info(id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID of the applicationset (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraApplicationSetCapacityStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_set_capacity_statistics_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_set_capacity_statistics_get_by_id`")  # noqa: E501
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_set_capacity_statistics_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}/capacity-statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraApplicationSetCapacityStats',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_set_export(self, system_id, appset_id, export_app_set_post, **kwargs):  # noqa: E501
        """Export applicationset identified by {appsetId} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Export applicationset identified by {appsetId} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_export(system_id, appset_id, export_app_set_post, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param ExportAppSetPost export_app_set_post: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_set_export_with_http_info(system_id, appset_id, export_app_set_post, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_set_export_with_http_info(system_id, appset_id, export_app_set_post, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_set_export_with_http_info(self, system_id, appset_id, export_app_set_post, **kwargs):  # noqa: E501
        """Export applicationset identified by {appsetId} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Export applicationset identified by {appsetId} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_export_with_http_info(system_id, appset_id, export_app_set_post, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param ExportAppSetPost export_app_set_post: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'appset_id', 'export_app_set_post']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_set_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_set_export`")  # noqa: E501
        # verify the required parameter 'appset_id' is set
        if ('appset_id' not in params or
                params['appset_id'] is None):
            raise ValueError("Missing the required parameter `appset_id` when calling `device_type1_volume_set_export`")  # noqa: E501
        # verify the required parameter 'export_app_set_post' is set
        if ('export_app_set_post' not in params or
                params['export_app_set_post'] is None):
            raise ValueError("Missing the required parameter `export_app_set_post` when calling `device_type1_volume_set_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'appset_id' in params:
            path_params['appsetId'] = params['appset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'export_app_set_post' in params:
            body_params = params['export_app_set_post']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{appsetId}/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_set_snapshot_get_by_id(self, system_id, appset_id, snapset_id, **kwargs):  # noqa: E501
        """Remove Primera / Alletra 9K snapset in system identified by {snapsetId}  # noqa: E501

        Remove Primera / Alletra 9K snapset in system identified by {snapsetId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_snapshot_get_by_id(system_id, appset_id, snapset_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param str snapset_id: Identifier of snapset. (required)
        :param bool force: Make snapset offline and remove.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_set_snapshot_get_by_id_with_http_info(system_id, appset_id, snapset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_set_snapshot_get_by_id_with_http_info(system_id, appset_id, snapset_id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_set_snapshot_get_by_id_with_http_info(self, system_id, appset_id, snapset_id, **kwargs):  # noqa: E501
        """Remove Primera / Alletra 9K snapset in system identified by {snapsetId}  # noqa: E501

        Remove Primera / Alletra 9K snapset in system identified by {snapsetId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_snapshot_get_by_id_with_http_info(system_id, appset_id, snapset_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param str snapset_id: Identifier of snapset. (required)
        :param bool force: Make snapset offline and remove.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'appset_id', 'snapset_id', 'force']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_set_snapshot_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_set_snapshot_get_by_id`")  # noqa: E501
        # verify the required parameter 'appset_id' is set
        if ('appset_id' not in params or
                params['appset_id'] is None):
            raise ValueError("Missing the required parameter `appset_id` when calling `device_type1_volume_set_snapshot_get_by_id`")  # noqa: E501
        # verify the required parameter 'snapset_id' is set
        if ('snapset_id' not in params or
                params['snapset_id'] is None):
            raise ValueError("Missing the required parameter `snapset_id` when calling `device_type1_volume_set_snapshot_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'appset_id' in params:
            path_params['appsetId'] = params['appset_id']  # noqa: E501
        if 'snapset_id' in params:
            path_params['snapsetId'] = params['snapset_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{appsetId}/snapsets/{snapsetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_set_snapshots_list(self, system_id, id, **kwargs):  # noqa: E501
        """Get snapshot details of volume sets identified by {id} for Primera / Alletra 9K  # noqa: E501

        Get snapshot details of volume sets identified by {id} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_snapshots_list(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :return: SnapshotSetsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_set_snapshots_list_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_set_snapshots_list_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_set_snapshots_list_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get snapshot details of volume sets identified by {id} for Primera / Alletra 9K  # noqa: E501

        Get snapshot details of volume sets identified by {id} for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_snapshots_list_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str select: Query to select only the required parameters, separated by . if nested
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :return: SnapshotSetsSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'limit', 'offset', 'select', 'filter', 'sort']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_set_snapshots_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_set_snapshots_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_set_snapshots_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_volume_set_snapshots_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_volume_set_snapshots_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}/snapsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotSetsSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_set_unexport(self, system_id, appset_id, un_export_app_set_post, **kwargs):  # noqa: E501
        """Unexport applicationset identified by {appsetId} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Unexport applicationset identified by {appsetId} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_unexport(system_id, appset_id, un_export_app_set_post, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param UnExportAppSetPost un_export_app_set_post: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_set_unexport_with_http_info(system_id, appset_id, un_export_app_set_post, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_set_unexport_with_http_info(system_id, appset_id, un_export_app_set_post, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_set_unexport_with_http_info(self, system_id, appset_id, un_export_app_set_post, **kwargs):  # noqa: E501
        """Unexport applicationset identified by {appsetId} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Unexport applicationset identified by {appsetId} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_unexport_with_http_info(system_id, appset_id, un_export_app_set_post, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str appset_id: UID of the applicationset (required)
        :param UnExportAppSetPost un_export_app_set_post: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'appset_id', 'un_export_app_set_post']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_set_unexport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_set_unexport`")  # noqa: E501
        # verify the required parameter 'appset_id' is set
        if ('appset_id' not in params or
                params['appset_id'] is None):
            raise ValueError("Missing the required parameter `appset_id` when calling `device_type1_volume_set_unexport`")  # noqa: E501
        # verify the required parameter 'un_export_app_set_post' is set
        if ('un_export_app_set_post' not in params or
                params['un_export_app_set_post'] is None):
            raise ValueError("Missing the required parameter `un_export_app_set_post` when calling `device_type1_volume_set_unexport`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'appset_id' in params:
            path_params['appsetId'] = params['appset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'un_export_app_set_post' in params:
            body_params = params['un_export_app_set_post']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{appsetId}/un-export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_set_volumes_list(self, appset_id, system_id, **kwargs):  # noqa: E501
        """Get volumes for an applicationset identified by appsetUid  # noqa: E501

        Get volumes for an applicationset identified by appsetUid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_volumes_list(appset_id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str appset_id: UID of the applicationset (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraAppSetVolumes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_set_volumes_list_with_http_info(appset_id, system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_set_volumes_list_with_http_info(appset_id, system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_set_volumes_list_with_http_info(self, appset_id, system_id, **kwargs):  # noqa: E501
        """Get volumes for an applicationset identified by appsetUid  # noqa: E501

        Get volumes for an applicationset identified by appsetUid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_set_volumes_list_with_http_info(appset_id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str appset_id: UID of the applicationset (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraAppSetVolumes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appset_id', 'system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_set_volumes_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appset_id' is set
        if ('appset_id' not in params or
                params['appset_id'] is None):
            raise ValueError("Missing the required parameter `appset_id` when calling `device_type1_volume_set_volumes_list`")  # noqa: E501
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_set_volumes_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_volume_set_volumes_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_volume_set_volumes_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'appset_id' in params:
            path_params['appsetId'] = params['appset_id']  # noqa: E501
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{appsetId}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraAppSetVolumes',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_sets_create(self, system_id, create_app_set_input, **kwargs):  # noqa: E501
        """Create Application Set for a storage system Primera / Alletra 9K  # noqa: E501

        Create Application Set for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_create(system_id, create_app_set_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateAppSetInput create_app_set_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_sets_create_with_http_info(system_id, create_app_set_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_sets_create_with_http_info(system_id, create_app_set_input, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_sets_create_with_http_info(self, system_id, create_app_set_input, **kwargs):  # noqa: E501
        """Create Application Set for a storage system Primera / Alletra 9K  # noqa: E501

        Create Application Set for a storage system Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_create_with_http_info(system_id, create_app_set_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param CreateAppSetInput create_app_set_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'create_app_set_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_sets_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_sets_create`")  # noqa: E501
        # verify the required parameter 'create_app_set_input' is set
        if ('create_app_set_input' not in params or
                params['create_app_set_input'] is None):
            raise ValueError("Missing the required parameter `create_app_set_input` when calling `device_type1_volume_sets_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_app_set_input' in params:
            body_params = params['create_app_set_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_sets_delete_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Remove applicationset identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Remove applicationset identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_delete_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_sets_delete_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_sets_delete_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_sets_delete_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Remove applicationset identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Remove applicationset identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_delete_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_sets_delete_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_sets_delete_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_sets_delete_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_sets_edit_by_id(self, system_id, id, volume_set_put, **kwargs):  # noqa: E501
        """Edit applicationset identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit applicationset identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_edit_by_id(system_id, id, volume_set_put, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :param VolumeSetPut volume_set_put: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_sets_edit_by_id_with_http_info(system_id, id, volume_set_put, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_sets_edit_by_id_with_http_info(system_id, id, volume_set_put, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_sets_edit_by_id_with_http_info(self, system_id, id, volume_set_put, **kwargs):  # noqa: E501
        """Edit applicationset identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501

        Edit applicationset identified by {id} from Primera / Alletra 9K identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_edit_by_id_with_http_info(system_id, id, volume_set_put, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :param VolumeSetPut volume_set_put: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'volume_set_put']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_sets_edit_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_sets_edit_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_sets_edit_by_id`")  # noqa: E501
        # verify the required parameter 'volume_set_put' is set
        if ('volume_set_put' not in params or
                params['volume_set_put'] is None):
            raise ValueError("Missing the required parameter `volume_set_put` when calling `device_type1_volume_sets_edit_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'volume_set_put' in params:
            body_params = params['volume_set_put']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_sets_get_by_id(self, id, system_id, **kwargs):  # noqa: E501
        """Get applicationset details for an applicationset identified by appsetUid  # noqa: E501

        Get applicationset details for an applicationset identified by appsetUid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_get_by_id(id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID of the applicationset (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraApplicationSetDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_sets_get_by_id_with_http_info(id, system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_sets_get_by_id_with_http_info(id, system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_sets_get_by_id_with_http_info(self, id, system_id, **kwargs):  # noqa: E501
        """Get applicationset details for an applicationset identified by appsetUid  # noqa: E501

        Get applicationset details for an applicationset identified by appsetUid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_get_by_id_with_http_info(id, system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID of the applicationset (required)
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraApplicationSetDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'system_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_sets_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_sets_get_by_id`")  # noqa: E501
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_sets_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraApplicationSetDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_sets_list(self, system_id, **kwargs):  # noqa: E501
        """Get all applicationset details for Primera / Alletra 9K  # noqa: E501

        Get all applicationset details for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_list(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter application-sets by Key.
        :param str sort: Lucene query to sort application-sets by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraApplicationSetsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_sets_list_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_sets_list_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_sets_list_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all applicationset details for Primera / Alletra 9K  # noqa: E501

        Get all applicationset details for Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_list_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter application-sets by Key.
        :param str sort: Lucene query to sort application-sets by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: PrimeraApplicationSetsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_sets_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_sets_list`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type1_volume_sets_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type1_volume_sets_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrimeraApplicationSetsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1_volume_sets_snapshot_create(self, system_id, id, appset_post, **kwargs):  # noqa: E501
        """Create snapshot for application set identified by {id}  # noqa: E501

        Create snapshot for application set identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_snapshot_create(system_id, id, appset_post, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :param AppsetPost appset_post: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1_volume_sets_snapshot_create_with_http_info(system_id, id, appset_post, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1_volume_sets_snapshot_create_with_http_info(system_id, id, appset_post, **kwargs)  # noqa: E501
            return data

    def device_type1_volume_sets_snapshot_create_with_http_info(self, system_id, id, appset_post, **kwargs):  # noqa: E501
        """Create snapshot for application set identified by {id}  # noqa: E501

        Create snapshot for application set identified by {id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1_volume_sets_snapshot_create_with_http_info(system_id, id, appset_post, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of the applicationset (required)
        :param AppsetPost appset_post: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'appset_post']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1_volume_sets_snapshot_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1_volume_sets_snapshot_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1_volume_sets_snapshot_create`")  # noqa: E501
        # verify the required parameter 'appset_post' is set
        if ('appset_post' not in params or
                params['appset_post'] is None):
            raise ValueError("Missing the required parameter `appset_post` when calling `device_type1_volume_sets_snapshot_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'appset_post' in params:
            body_params = params['appset_post']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}/snapsets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type1action_on_volume_sets(self, system_id, id, remote_protection_actions_input, **kwargs):  # noqa: E501
        """Actions on volume set identified by {id} and {systemId} from Primera / Alletra 9K  # noqa: E501

        Actions on volume set identified by {id} and {systemId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1action_on_volume_sets(system_id, id, remote_protection_actions_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the applicationset (required)
        :param RemoteProtectionActionsInput remote_protection_actions_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type1action_on_volume_sets_with_http_info(system_id, id, remote_protection_actions_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type1action_on_volume_sets_with_http_info(system_id, id, remote_protection_actions_input, **kwargs)  # noqa: E501
            return data

    def device_type1action_on_volume_sets_with_http_info(self, system_id, id, remote_protection_actions_input, **kwargs):  # noqa: E501
        """Actions on volume set identified by {id} and {systemId} from Primera / Alletra 9K  # noqa: E501

        Actions on volume set identified by {id} and {systemId} from Primera / Alletra 9K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type1action_on_volume_sets_with_http_info(system_id, id, remote_protection_actions_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: ID of the applicationset (required)
        :param RemoteProtectionActionsInput remote_protection_actions_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'remote_protection_actions_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type1action_on_volume_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type1action_on_volume_sets`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_type1action_on_volume_sets`")  # noqa: E501
        # verify the required parameter 'remote_protection_actions_input' is set
        if ('remote_protection_actions_input' not in params or
                params['remote_protection_actions_input'] is None):
            raise ValueError("Missing the required parameter `remote_protection_actions_input` when calling `device_type1action_on_volume_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remote_protection_actions_input' in params:
            body_params = params['remote_protection_actions_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type1/{systemId}/applicationsets/{id}/remote-protection/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_action_on_snapshot_collection(self, system_id, volume_collection_id, nimble_update_snapshot_collections_state_input, **kwargs):  # noqa: E501
        """Perform offline/online action on  snapshot collections of Nimble / Alletra 6K and associated with volume collection {volumeCollectionId}  in the system identified by {systemId}  # noqa: E501

        Perform offline/online action on  snapshot collections of Nimble / Alletra 6K and associated with volume collection {volumeCollectionId}  in the system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_action_on_snapshot_collection(system_id, volume_collection_id, nimble_update_snapshot_collections_state_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param NimbleUpdateSnapshotCollectionsStateInput nimble_update_snapshot_collections_state_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_action_on_snapshot_collection_with_http_info(system_id, volume_collection_id, nimble_update_snapshot_collections_state_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_action_on_snapshot_collection_with_http_info(system_id, volume_collection_id, nimble_update_snapshot_collections_state_input, **kwargs)  # noqa: E501
            return data

    def device_type2_action_on_snapshot_collection_with_http_info(self, system_id, volume_collection_id, nimble_update_snapshot_collections_state_input, **kwargs):  # noqa: E501
        """Perform offline/online action on  snapshot collections of Nimble / Alletra 6K and associated with volume collection {volumeCollectionId}  in the system identified by {systemId}  # noqa: E501

        Perform offline/online action on  snapshot collections of Nimble / Alletra 6K and associated with volume collection {volumeCollectionId}  in the system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_action_on_snapshot_collection_with_http_info(system_id, volume_collection_id, nimble_update_snapshot_collections_state_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param NimbleUpdateSnapshotCollectionsStateInput nimble_update_snapshot_collections_state_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'nimble_update_snapshot_collections_state_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_action_on_snapshot_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_action_on_snapshot_collection`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_action_on_snapshot_collection`")  # noqa: E501
        # verify the required parameter 'nimble_update_snapshot_collections_state_input' is set
        if ('nimble_update_snapshot_collections_state_input' not in params or
                params['nimble_update_snapshot_collections_state_input'] is None):
            raise ValueError("Missing the required parameter `nimble_update_snapshot_collections_state_input` when calling `device_type2_action_on_snapshot_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_update_snapshot_collections_state_input' in params:
            body_params = params['nimble_update_snapshot_collections_state_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/snapshot-collections/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_action_on_volume_collection(self, system_id, volume_collection_id, nimble_handover_volume_collections_input, **kwargs):  # noqa: E501
        """Perform handover action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501

        Perform handover action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_action_on_volume_collection(system_id, volume_collection_id, nimble_handover_volume_collections_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param NimbleHandoverVolumeCollectionsInput nimble_handover_volume_collections_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_action_on_volume_collection_with_http_info(system_id, volume_collection_id, nimble_handover_volume_collections_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_action_on_volume_collection_with_http_info(system_id, volume_collection_id, nimble_handover_volume_collections_input, **kwargs)  # noqa: E501
            return data

    def device_type2_action_on_volume_collection_with_http_info(self, system_id, volume_collection_id, nimble_handover_volume_collections_input, **kwargs):  # noqa: E501
        """Perform handover action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501

        Perform handover action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_action_on_volume_collection_with_http_info(system_id, volume_collection_id, nimble_handover_volume_collections_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param NimbleHandoverVolumeCollectionsInput nimble_handover_volume_collections_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'nimble_handover_volume_collections_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_action_on_volume_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_action_on_volume_collection`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_action_on_volume_collection`")  # noqa: E501
        # verify the required parameter 'nimble_handover_volume_collections_input' is set
        if ('nimble_handover_volume_collections_input' not in params or
                params['nimble_handover_volume_collections_input'] is None):
            raise ValueError("Missing the required parameter `nimble_handover_volume_collections_input` when calling `device_type2_action_on_volume_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_handover_volume_collections_input' in params:
            body_params = params['nimble_handover_volume_collections_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/actions/handover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_action_on_volume_collection_id(self, system_id, volume_collection_id, nimble_demote_volume_collections_input, **kwargs):  # noqa: E501
        """Perform demote action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501

        Perform demote action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_action_on_volume_collection_id(system_id, volume_collection_id, nimble_demote_volume_collections_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param NimbleDemoteVolumeCollectionsInput nimble_demote_volume_collections_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_action_on_volume_collection_id_with_http_info(system_id, volume_collection_id, nimble_demote_volume_collections_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_action_on_volume_collection_id_with_http_info(system_id, volume_collection_id, nimble_demote_volume_collections_input, **kwargs)  # noqa: E501
            return data

    def device_type2_action_on_volume_collection_id_with_http_info(self, system_id, volume_collection_id, nimble_demote_volume_collections_input, **kwargs):  # noqa: E501
        """Perform demote action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501

        Perform demote action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_action_on_volume_collection_id_with_http_info(system_id, volume_collection_id, nimble_demote_volume_collections_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param NimbleDemoteVolumeCollectionsInput nimble_demote_volume_collections_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'nimble_demote_volume_collections_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_action_on_volume_collection_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_action_on_volume_collection_id`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_action_on_volume_collection_id`")  # noqa: E501
        # verify the required parameter 'nimble_demote_volume_collections_input' is set
        if ('nimble_demote_volume_collections_input' not in params or
                params['nimble_demote_volume_collections_input'] is None):
            raise ValueError("Missing the required parameter `nimble_demote_volume_collections_input` when calling `device_type2_action_on_volume_collection_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_demote_volume_collections_input' in params:
            body_params = params['nimble_demote_volume_collections_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/actions/demote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_actionon_volume_collection(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Perform abort handover action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501

        Perform abort handover action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_actionon_volume_collection(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_actionon_volume_collection_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_actionon_volume_collection_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
            return data

    def device_type2_actionon_volume_collection_with_http_info(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Perform abort handover action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501

        Perform abort handover action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_actionon_volume_collection_with_http_info(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_actionon_volume_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_actionon_volume_collection`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_actionon_volume_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/actions/abort-handover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_add_volumes_to_volume_collections(self, system_id, volume_collection_id, nimble_add_volume_to_volume_collection_input, **kwargs):  # noqa: E501
        """Add volumes to Nimble / Alletra 6K volumes collection in system identified by {systemId}  # noqa: E501

        Add volumes to Nimble / Alletra 6K volumes collection in system identified by {systemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_add_volumes_to_volume_collections(system_id, volume_collection_id, nimble_add_volume_to_volume_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of volumeCollection. A 42 digit hexadecimal number. (required)
        :param NimbleAddVolumeToVolumeCollectionInput nimble_add_volume_to_volume_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_add_volumes_to_volume_collections_with_http_info(system_id, volume_collection_id, nimble_add_volume_to_volume_collection_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_add_volumes_to_volume_collections_with_http_info(system_id, volume_collection_id, nimble_add_volume_to_volume_collection_input, **kwargs)  # noqa: E501
            return data

    def device_type2_add_volumes_to_volume_collections_with_http_info(self, system_id, volume_collection_id, nimble_add_volume_to_volume_collection_input, **kwargs):  # noqa: E501
        """Add volumes to Nimble / Alletra 6K volumes collection in system identified by {systemId}  # noqa: E501

        Add volumes to Nimble / Alletra 6K volumes collection in system identified by {systemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_add_volumes_to_volume_collections_with_http_info(system_id, volume_collection_id, nimble_add_volume_to_volume_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of volumeCollection. A 42 digit hexadecimal number. (required)
        :param NimbleAddVolumeToVolumeCollectionInput nimble_add_volume_to_volume_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'nimble_add_volume_to_volume_collection_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_add_volumes_to_volume_collections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_add_volumes_to_volume_collections`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_add_volumes_to_volume_collections`")  # noqa: E501
        # verify the required parameter 'nimble_add_volume_to_volume_collection_input' is set
        if ('nimble_add_volume_to_volume_collection_input' not in params or
                params['nimble_add_volume_to_volume_collection_input'] is None):
            raise ValueError("Missing the required parameter `nimble_add_volume_to_volume_collection_input` when calling `device_type2_add_volumes_to_volume_collections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_add_volume_to_volume_collection_input' in params:
            body_params = params['nimble_add_volume_to_volume_collection_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/actions/add-volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_create_snapshot_collections(self, system_id, volume_collection_id, nimble_create_snapshot_collections_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K snapshot collection in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K snapshot collection in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_snapshot_collections(system_id, volume_collection_id, nimble_create_snapshot_collections_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param NimbleCreateSnapshotCollectionsInput nimble_create_snapshot_collections_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_create_snapshot_collections_with_http_info(system_id, volume_collection_id, nimble_create_snapshot_collections_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_create_snapshot_collections_with_http_info(system_id, volume_collection_id, nimble_create_snapshot_collections_input, **kwargs)  # noqa: E501
            return data

    def device_type2_create_snapshot_collections_with_http_info(self, system_id, volume_collection_id, nimble_create_snapshot_collections_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K snapshot collection in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K snapshot collection in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_create_snapshot_collections_with_http_info(system_id, volume_collection_id, nimble_create_snapshot_collections_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param NimbleCreateSnapshotCollectionsInput nimble_create_snapshot_collections_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'nimble_create_snapshot_collections_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_create_snapshot_collections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_create_snapshot_collections`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_create_snapshot_collections`")  # noqa: E501
        # verify the required parameter 'nimble_create_snapshot_collections_input' is set
        if ('nimble_create_snapshot_collections_input' not in params or
                params['nimble_create_snapshot_collections_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_snapshot_collections_input` when calling `device_type2_create_snapshot_collections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_snapshot_collections_input' in params:
            body_params = params['nimble_create_snapshot_collections_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/snapshot-collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_edit_volume_collection_by_id(self, system_id, volume_collection_id, nimble_edit_volume_collection_input, **kwargs):  # noqa: E501
        """Edit  details of Nimble / Alletra 6K Volume-collections identified by {volumeCollectionId}  # noqa: E501

        Edit  details of Nimble / Alletra 6K Volume-collections identified by {volumeCollectionId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_volume_collection_by_id(system_id, volume_collection_id, nimble_edit_volume_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of volumeCollection. A 42 digit hexadecimal number. (required)
        :param NimbleEditVolumeCollectionInput nimble_edit_volume_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_edit_volume_collection_by_id_with_http_info(system_id, volume_collection_id, nimble_edit_volume_collection_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_edit_volume_collection_by_id_with_http_info(system_id, volume_collection_id, nimble_edit_volume_collection_input, **kwargs)  # noqa: E501
            return data

    def device_type2_edit_volume_collection_by_id_with_http_info(self, system_id, volume_collection_id, nimble_edit_volume_collection_input, **kwargs):  # noqa: E501
        """Edit  details of Nimble / Alletra 6K Volume-collections identified by {volumeCollectionId}  # noqa: E501

        Edit  details of Nimble / Alletra 6K Volume-collections identified by {volumeCollectionId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_edit_volume_collection_by_id_with_http_info(system_id, volume_collection_id, nimble_edit_volume_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of volumeCollection. A 42 digit hexadecimal number. (required)
        :param NimbleEditVolumeCollectionInput nimble_edit_volume_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'nimble_edit_volume_collection_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_edit_volume_collection_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_edit_volume_collection_by_id`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_edit_volume_collection_by_id`")  # noqa: E501
        # verify the required parameter 'nimble_edit_volume_collection_input' is set
        if ('nimble_edit_volume_collection_input' not in params or
                params['nimble_edit_volume_collection_input'] is None):
            raise ValueError("Missing the required parameter `nimble_edit_volume_collection_input` when calling `device_type2_edit_volume_collection_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_edit_volume_collection_input' in params:
            body_params = params['nimble_edit_volume_collection_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_folders(self, system_id, **kwargs):  # noqa: E501
        """Get all folders details by Nimble / Alletra 6K  # noqa: E501

        Get all folders details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_folders(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter folders by Key.
        :param str sort: oData query to sort folders resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleFolderList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_folders_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_folders_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_folders_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all folders details by Nimble / Alletra 6K  # noqa: E501

        Get all folders details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_folders_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter folders by Key.
        :param str sort: oData query to sort folders resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleFolderList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_folders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_folders`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_folders`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_folders`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/folders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleFolderList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_all_volume_collections(self, system_id, **kwargs):  # noqa: E501
        """Get all volume-collections details by Nimble / Alletra 6K  # noqa: E501

        Get all volume-collections details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_volume_collections(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter volume-collection by Key.
        :param str sort: oData query to sort volume-collection resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleVolumeCollectionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_all_volume_collections_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_all_volume_collections_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_all_volume_collections_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all volume-collections details by Nimble / Alletra 6K  # noqa: E501

        Get all volume-collections details by Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_all_volume_collections_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter volume-collection by Key.
        :param str sort: oData query to sort volume-collection resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleVolumeCollectionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_all_volume_collections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_all_volume_collections`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_all_volume_collections`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_all_volume_collections`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleVolumeCollectionList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_snapshot_collections_by_id(self, system_id, volume_collection_id, snapshot_collection_id, **kwargs):  # noqa: E501
        """Get details of snapshot collection of Nimble / Alletra 6K Volume collection identified by {volumeCollectionId} by {snapshotId}  # noqa: E501

        Get details of snapshot collection of Nimble / Alletra 6K Volume collection identified by {volumeCollectionId} by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_snapshot_collections_by_id(system_id, volume_collection_id, snapshot_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param str snapshot_collection_id: Identifier of snapshot Collection. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSnapshotCollectionDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_snapshot_collections_by_id_with_http_info(system_id, volume_collection_id, snapshot_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_snapshot_collections_by_id_with_http_info(system_id, volume_collection_id, snapshot_collection_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_snapshot_collections_by_id_with_http_info(self, system_id, volume_collection_id, snapshot_collection_id, **kwargs):  # noqa: E501
        """Get details of snapshot collection of Nimble / Alletra 6K Volume collection identified by {volumeCollectionId} by {snapshotId}  # noqa: E501

        Get details of snapshot collection of Nimble / Alletra 6K Volume collection identified by {volumeCollectionId} by {snapshotId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_snapshot_collections_by_id_with_http_info(system_id, volume_collection_id, snapshot_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param str snapshot_collection_id: Identifier of snapshot Collection. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSnapshotCollectionDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'snapshot_collection_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_snapshot_collections_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_snapshot_collections_by_id`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_get_snapshot_collections_by_id`")  # noqa: E501
        # verify the required parameter 'snapshot_collection_id' is set
        if ('snapshot_collection_id' not in params or
                params['snapshot_collection_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_collection_id` when calling `device_type2_get_snapshot_collections_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501
        if 'snapshot_collection_id' in params:
            path_params['snapshotCollectionId'] = params['snapshot_collection_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/snapshot-collections/{snapshotCollectionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleSnapshotCollectionDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_snapshots_by_volume_collection_id(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Get all snapshot collections&#39; details of Nimble / Alletra 6K Volume collection identified by {volumeCollectionId}  # noqa: E501

        Get all snapshot collections' details of Nimble / Alletra 6K Volume collection identified by {volumeCollectionId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_snapshots_by_volume_collection_id(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter snapshot collections by Key.
        :param str sort: oData query to sort snapshot collections resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSnapshotCollectionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_snapshots_by_volume_collection_id_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_snapshots_by_volume_collection_id_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_snapshots_by_volume_collection_id_with_http_info(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Get all snapshot collections&#39; details of Nimble / Alletra 6K Volume collection identified by {volumeCollectionId}  # noqa: E501

        Get all snapshot collections' details of Nimble / Alletra 6K Volume collection identified by {volumeCollectionId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_snapshots_by_volume_collection_id_with_http_info(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: Lucene query to filter snapshot collections by Key.
        :param str sort: oData query to sort snapshot collections resource by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleSnapshotCollectionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_snapshots_by_volume_collection_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_snapshots_by_volume_collection_id`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_get_snapshots_by_volume_collection_id`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `device_type2_get_snapshots_by_volume_collection_id`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `device_type2_get_snapshots_by_volume_collection_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/snapshot-collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleSnapshotCollectionList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_get_volume_collection_by_id(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K volume-collections identified by {volumeCollectionId}  # noqa: E501

        Get details of Nimble / Alletra 6K volume-collections identified by {volumeCollectionId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_collection_by_id(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of volumeCollection. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleVCollectionDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_get_volume_collection_by_id_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_get_volume_collection_by_id_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
            return data

    def device_type2_get_volume_collection_by_id_with_http_info(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Get details of Nimble / Alletra 6K volume-collections identified by {volumeCollectionId}  # noqa: E501

        Get details of Nimble / Alletra 6K volume-collections identified by {volumeCollectionId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_get_volume_collection_by_id_with_http_info(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of volumeCollection. A 42 digit hexadecimal number. (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: NimbleVCollectionDetailsWithRequestUri
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_get_volume_collection_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_get_volume_collection_by_id`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_get_volume_collection_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NimbleVCollectionDetailsWithRequestUri',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_promote_action_on_volume_collection(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Perform promote action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501

        Perform promote action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_promote_action_on_volume_collection(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_promote_action_on_volume_collection_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_promote_action_on_volume_collection_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
            return data

    def device_type2_promote_action_on_volume_collection_with_http_info(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Perform promote action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501

        Perform promote action Nimble / Alletra 6K on a volume collection identified by {volumeCollectionId} in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_promote_action_on_volume_collection_with_http_info(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_promote_action_on_volume_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_promote_action_on_volume_collection`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_promote_action_on_volume_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/actions/promote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_snap_shot_collection(self, system_id, volume_collection_id, remove_snapshot_collection_input, **kwargs):  # noqa: E501
        """Remove multiple snapshot collections identified by {volumeCollectionId} from Nimble / Alletra 6K  # noqa: E501

        Remove multiple snapshot collections identified by {volumeCollectionId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_snap_shot_collection(system_id, volume_collection_id, remove_snapshot_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param RemoveSnapshotCollectionInput remove_snapshot_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_snap_shot_collection_with_http_info(system_id, volume_collection_id, remove_snapshot_collection_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_snap_shot_collection_with_http_info(system_id, volume_collection_id, remove_snapshot_collection_input, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_snap_shot_collection_with_http_info(self, system_id, volume_collection_id, remove_snapshot_collection_input, **kwargs):  # noqa: E501
        """Remove multiple snapshot collections identified by {volumeCollectionId} from Nimble / Alletra 6K  # noqa: E501

        Remove multiple snapshot collections identified by {volumeCollectionId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_snap_shot_collection_with_http_info(system_id, volume_collection_id, remove_snapshot_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param RemoveSnapshotCollectionInput remove_snapshot_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'remove_snapshot_collection_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_snap_shot_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_snap_shot_collection`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_remove_snap_shot_collection`")  # noqa: E501
        # verify the required parameter 'remove_snapshot_collection_input' is set
        if ('remove_snapshot_collection_input' not in params or
                params['remove_snapshot_collection_input'] is None):
            raise ValueError("Missing the required parameter `remove_snapshot_collection_input` when calling `device_type2_remove_snap_shot_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_snapshot_collection_input' in params:
            body_params = params['remove_snapshot_collection_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/snapshot-collections/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_volume_collection_by_id(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Remove Volume-collection identified by {volumeCollectionId} from Nimble / Alletra 6K  # noqa: E501

        Remove Volume-collection identified by {volumeCollectionId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_volume_collection_by_id(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param bool force: Forceful delete volume collection option.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_volume_collection_by_id_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_volume_collection_by_id_with_http_info(system_id, volume_collection_id, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_volume_collection_by_id_with_http_info(self, system_id, volume_collection_id, **kwargs):  # noqa: E501
        """Remove Volume-collection identified by {volumeCollectionId} from Nimble / Alletra 6K  # noqa: E501

        Remove Volume-collection identified by {volumeCollectionId} from Nimble / Alletra 6K  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_volume_collection_by_id_with_http_info(system_id, volume_collection_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of Volume Collection. A 42 digit hexadecimal number. (required)
        :param bool force: Forceful delete volume collection option.
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'force']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_volume_collection_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_volume_collection_by_id`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_remove_volume_collection_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_remove_volumes_from_volume_collection(self, system_id, volume_collection_id, nimble_remove_volume_from_volume_collection_input, **kwargs):  # noqa: E501
        """Remove volumes from Nimble / Alletra 6K volumes collection in system identified by {systemId}  # noqa: E501

        Remove volumes from Nimble / Alletra 6K volumes collection in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_volumes_from_volume_collection(system_id, volume_collection_id, nimble_remove_volume_from_volume_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of volumeCollection. A 42 digit hexadecimal number. (required)
        :param NimbleRemoveVolumeFromVolumeCollectionInput nimble_remove_volume_from_volume_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_remove_volumes_from_volume_collection_with_http_info(system_id, volume_collection_id, nimble_remove_volume_from_volume_collection_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_remove_volumes_from_volume_collection_with_http_info(system_id, volume_collection_id, nimble_remove_volume_from_volume_collection_input, **kwargs)  # noqa: E501
            return data

    def device_type2_remove_volumes_from_volume_collection_with_http_info(self, system_id, volume_collection_id, nimble_remove_volume_from_volume_collection_input, **kwargs):  # noqa: E501
        """Remove volumes from Nimble / Alletra 6K volumes collection in system identified by {systemId}  # noqa: E501

        Remove volumes from Nimble / Alletra 6K volumes collection in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_remove_volumes_from_volume_collection_with_http_info(system_id, volume_collection_id, nimble_remove_volume_from_volume_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param str volume_collection_id: Identifier of volumeCollection. A 42 digit hexadecimal number. (required)
        :param NimbleRemoveVolumeFromVolumeCollectionInput nimble_remove_volume_from_volume_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'volume_collection_id', 'nimble_remove_volume_from_volume_collection_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_remove_volumes_from_volume_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_remove_volumes_from_volume_collection`")  # noqa: E501
        # verify the required parameter 'volume_collection_id' is set
        if ('volume_collection_id' not in params or
                params['volume_collection_id'] is None):
            raise ValueError("Missing the required parameter `volume_collection_id` when calling `device_type2_remove_volumes_from_volume_collection`")  # noqa: E501
        # verify the required parameter 'nimble_remove_volume_from_volume_collection_input' is set
        if ('nimble_remove_volume_from_volume_collection_input' not in params or
                params['nimble_remove_volume_from_volume_collection_input'] is None):
            raise ValueError("Missing the required parameter `nimble_remove_volume_from_volume_collection_input` when calling `device_type2_remove_volumes_from_volume_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'volume_collection_id' in params:
            path_params['volumeCollectionId'] = params['volume_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_remove_volume_from_volume_collection_input' in params:
            body_params = params['nimble_remove_volume_from_volume_collection_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections/{volumeCollectionId}/actions/remove-volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type2_volume_collection_create(self, system_id, nimble_create_volume_collection_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K volume collection in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K volume collection in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_volume_collection_create(system_id, nimble_create_volume_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateVolumeCollectionInput nimble_create_volume_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.device_type2_volume_collection_create_with_http_info(system_id, nimble_create_volume_collection_input, **kwargs)  # noqa: E501
        else:
            (data) = self.device_type2_volume_collection_create_with_http_info(system_id, nimble_create_volume_collection_input, **kwargs)  # noqa: E501
            return data

    def device_type2_volume_collection_create_with_http_info(self, system_id, nimble_create_volume_collection_input, **kwargs):  # noqa: E501
        """Create Nimble / Alletra 6K volume collection in system identified by {systemId}  # noqa: E501

        Create Nimble / Alletra 6K volume collection in system identified by {systemId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.device_type2_volume_collection_create_with_http_info(system_id, nimble_create_volume_collection_input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: ID of the storage system (required)
        :param NimbleCreateVolumeCollectionInput nimble_create_volume_collection_input: (required)
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'nimble_create_volume_collection_input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type2_volume_collection_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `device_type2_volume_collection_create`")  # noqa: E501
        # verify the required parameter 'nimble_create_volume_collection_input' is set
        if ('nimble_create_volume_collection_input' not in params or
                params['nimble_create_volume_collection_input'] is None):
            raise ValueError("Missing the required parameter `nimble_create_volume_collection_input` when calling `device_type2_volume_collection_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nimble_create_volume_collection_input' in params:
            body_params = params['nimble_create_volume_collection_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/device-type2/{systemId}/volume-collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumeset_get_by_id(self, id, **kwargs):  # noqa: E501
        """Get volume-set identified by id  # noqa: E501

        Get volume-set identified by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_get_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID of Volume Set (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumeSetDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volumeset_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.volumeset_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def volumeset_get_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get volume-set identified by id  # noqa: E501

        Get volume-set identified by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_get_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID of Volume Set (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumeSetDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumeset_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `volumeset_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/volume-sets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetVolumeSetDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumeset_get_byvolumeset_id(self, id, **kwargs):  # noqa: E501
        """Get volumes identified by volume set id  # noqa: E501

        Get volumes  identified by volume set id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_get_byvolumeset_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID of Volume Set (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :return: FleetVolumeset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volumeset_get_byvolumeset_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.volumeset_get_byvolumeset_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def volumeset_get_byvolumeset_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get volumes identified by volume set id  # noqa: E501

        Get volumes  identified by volume set id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_get_byvolumeset_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: UID of Volume Set (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :return: FleetVolumeset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'select', 'limit', 'offset', 'filter', 'sort']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumeset_get_byvolumeset_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `volumeset_get_byvolumeset_id`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `volumeset_get_byvolumeset_id`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `volumeset_get_byvolumeset_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/volume-sets/{id}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetVolumeset',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumeset_list(self, **kwargs):  # noqa: E501
        """Get all volume-sets  # noqa: E501

        Get all volume sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumeSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volumeset_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.volumeset_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def volumeset_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get all volume-sets  # noqa: E501

        Get all volume sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumeSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumeset_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `volumeset_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `volumeset_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/volume-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetVolumeSetList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumeset_list_for_system_by_system_id(self, system_id, **kwargs):  # noqa: E501
        """Get all volume-sets for a systemId  # noqa: E501

        Get all volume sets for a systemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_list_for_system_by_system_id(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumeSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volumeset_list_for_system_by_system_id_with_http_info(system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.volumeset_list_for_system_by_system_id_with_http_info(system_id, **kwargs)  # noqa: E501
            return data

    def volumeset_list_for_system_by_system_id_with_http_info(self, system_id, **kwargs):  # noqa: E501
        """Get all volume-sets for a systemId  # noqa: E501

        Get all volume sets for a systemId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_list_for_system_by_system_id_with_http_info(system_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param int limit: Number of items to return at a time
        :param int offset: The offset of the first item in the collection to return
        :param str filter: oData query to filter by Key.
        :param str sort: oData query to sort by Key.
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetVolumeSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'limit', 'offset', 'filter', 'sort', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumeset_list_for_system_by_system_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volumeset_list_for_system_by_system_id`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `volumeset_list_for_system_by_system_id`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `volumeset_list_for_system_by_system_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/{systemId}/volume-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetVolumeSetList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumeset_system_get_by_id(self, system_id, id, **kwargs):  # noqa: E501
        """Get volume-set identified by id  # noqa: E501

        Get volume-set identified by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_system_get_by_id(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of Volume Set (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetSystemVolumeset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.volumeset_system_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.volumeset_system_get_by_id_with_http_info(system_id, id, **kwargs)  # noqa: E501
            return data

    def volumeset_system_get_by_id_with_http_info(self, system_id, id, **kwargs):  # noqa: E501
        """Get volume-set identified by id  # noqa: E501

        Get volume-set identified by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.volumeset_system_get_by_id_with_http_info(system_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str system_id: systemId of the device-type1 storage system (required)
        :param str id: UID of Volume Set (required)
        :param str select: Query to select only the required parameters, separated by . if nested
        :return: FleetSystemVolumeset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'id', 'select']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumeset_system_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params or
                params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `volumeset_system_get_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `volumeset_system_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['systemId'] = params['system_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage-systems/{systemId}/volume-sets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FleetSystemVolumeset',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
