# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InitiatorSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'id': 'str',
        'ip_address': 'str',
        'name': 'str',
        'protocol': 'str',
        'systems': 'list[str]'
    }

    attribute_map = {
        'address': 'address',
        'id': 'id',
        'ip_address': 'ipAddress',
        'name': 'name',
        'protocol': 'protocol',
        'systems': 'systems'
    }

    def __init__(self, address=None, id=None, ip_address=None, name=None, protocol=None, systems=None):  # noqa: E501
        """InitiatorSummary - a model defined in OpenAPI"""  # noqa: E501

        self._address = None
        self._id = None
        self._ip_address = None
        self._name = None
        self._protocol = None
        self._systems = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if id is not None:
            self.id = id
        if ip_address is not None:
            self.ip_address = ip_address
        if name is not None:
            self.name = name
        if protocol is not None:
            self.protocol = protocol
        if systems is not None:
            self.systems = systems

    @property
    def address(self):
        """Gets the address of this InitiatorSummary.  # noqa: E501

        Address of the initiator.   # noqa: E501

        :return: The address of this InitiatorSummary.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InitiatorSummary.

        Address of the initiator.   # noqa: E501

        :param address: The address of this InitiatorSummary.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def id(self):
        """Gets the id of this InitiatorSummary.  # noqa: E501

        Identifier for an initiator.  # noqa: E501

        :return: The id of this InitiatorSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InitiatorSummary.

        Identifier for an initiator.  # noqa: E501

        :param id: The id of this InitiatorSummary.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this InitiatorSummary.  # noqa: E501

        IP address of the initiator.  # noqa: E501

        :return: The ip_address of this InitiatorSummary.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InitiatorSummary.

        IP address of the initiator.  # noqa: E501

        :param ip_address: The ip_address of this InitiatorSummary.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this InitiatorSummary.  # noqa: E501

        Name of the initiator.  # noqa: E501

        :return: The name of this InitiatorSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InitiatorSummary.

        Name of the initiator.  # noqa: E501

        :param name: The name of this InitiatorSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this InitiatorSummary.  # noqa: E501

        protocol supported are : FC ,iSCSI or NVMe  # noqa: E501

        :return: The protocol of this InitiatorSummary.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InitiatorSummary.

        protocol supported are : FC ,iSCSI or NVMe  # noqa: E501

        :param protocol: The protocol of this InitiatorSummary.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def systems(self):
        """Gets the systems of this InitiatorSummary.  # noqa: E501

        system IDs to which the initiator belongs to.  # noqa: E501

        :return: The systems of this InitiatorSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this InitiatorSummary.

        system IDs to which the initiator belongs to.  # noqa: E501

        :param systems: The systems of this InitiatorSummary.  # noqa: E501
        :type: list[str]
        """

        self._systems = systems

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiatorSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
