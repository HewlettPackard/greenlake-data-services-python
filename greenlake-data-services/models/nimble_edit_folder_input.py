# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleEditFolderInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'appserver_id': 'str',
        'description': 'str',
        'inherited_vol_perfpol_id': 'str',
        'limit_iops': 'int',
        'limit_mbps': 'int',
        'limit_size_bytes': 'int',
        'name': 'str',
        'overdraft_limit_pct': 'int',
        'provisioned_limit_size_bytes': 'int'
    }

    attribute_map = {
        'appserver_id': 'appserver_id',
        'description': 'description',
        'inherited_vol_perfpol_id': 'inherited_vol_perfpol_id',
        'limit_iops': 'limit_iops',
        'limit_mbps': 'limit_mbps',
        'limit_size_bytes': 'limit_size_bytes',
        'name': 'name',
        'overdraft_limit_pct': 'overdraft_limit_pct',
        'provisioned_limit_size_bytes': 'provisioned_limit_size_bytes'
    }

    def __init__(self, appserver_id=None, description=None, inherited_vol_perfpol_id=None, limit_iops=None, limit_mbps=None, limit_size_bytes=None, name=None, overdraft_limit_pct=None, provisioned_limit_size_bytes=None):  # noqa: E501
        """NimbleEditFolderInput - a model defined in OpenAPI"""  # noqa: E501

        self._appserver_id = None
        self._description = None
        self._inherited_vol_perfpol_id = None
        self._limit_iops = None
        self._limit_mbps = None
        self._limit_size_bytes = None
        self._name = None
        self._overdraft_limit_pct = None
        self._provisioned_limit_size_bytes = None
        self.discriminator = None

        if appserver_id is not None:
            self.appserver_id = appserver_id
        if description is not None:
            self.description = description
        if inherited_vol_perfpol_id is not None:
            self.inherited_vol_perfpol_id = inherited_vol_perfpol_id
        if limit_iops is not None:
            self.limit_iops = limit_iops
        if limit_mbps is not None:
            self.limit_mbps = limit_mbps
        if limit_size_bytes is not None:
            self.limit_size_bytes = limit_size_bytes
        if name is not None:
            self.name = name
        if overdraft_limit_pct is not None:
            self.overdraft_limit_pct = overdraft_limit_pct
        if provisioned_limit_size_bytes is not None:
            self.provisioned_limit_size_bytes = provisioned_limit_size_bytes

    @property
    def appserver_id(self):
        """Gets the appserver_id of this NimbleEditFolderInput.  # noqa: E501

        Identifier of the application server associated with the folder.  # noqa: E501

        :return: The appserver_id of this NimbleEditFolderInput.  # noqa: E501
        :rtype: str
        """
        return self._appserver_id

    @appserver_id.setter
    def appserver_id(self, appserver_id):
        """Sets the appserver_id of this NimbleEditFolderInput.

        Identifier of the application server associated with the folder.  # noqa: E501

        :param appserver_id: The appserver_id of this NimbleEditFolderInput.  # noqa: E501
        :type: str
        """

        self._appserver_id = appserver_id

    @property
    def description(self):
        """Gets the description of this NimbleEditFolderInput.  # noqa: E501

        Text description of folder.  # noqa: E501

        :return: The description of this NimbleEditFolderInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleEditFolderInput.

        Text description of folder.  # noqa: E501

        :param description: The description of this NimbleEditFolderInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def inherited_vol_perfpol_id(self):
        """Gets the inherited_vol_perfpol_id of this NimbleEditFolderInput.  # noqa: E501

        Identifier of the default performance policy for a newly created volume.  # noqa: E501

        :return: The inherited_vol_perfpol_id of this NimbleEditFolderInput.  # noqa: E501
        :rtype: str
        """
        return self._inherited_vol_perfpol_id

    @inherited_vol_perfpol_id.setter
    def inherited_vol_perfpol_id(self, inherited_vol_perfpol_id):
        """Sets the inherited_vol_perfpol_id of this NimbleEditFolderInput.

        Identifier of the default performance policy for a newly created volume.  # noqa: E501

        :param inherited_vol_perfpol_id: The inherited_vol_perfpol_id of this NimbleEditFolderInput.  # noqa: E501
        :type: str
        """

        self._inherited_vol_perfpol_id = inherited_vol_perfpol_id

    @property
    def limit_iops(self):
        """Gets the limit_iops of this NimbleEditFolderInput.  # noqa: E501

        IOPS limit for this folder. If limit_iops is not specified when a folder is created, or if limit_iops is set to -1, then the folder has no IOPS limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited.  # noqa: E501

        :return: The limit_iops of this NimbleEditFolderInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_iops

    @limit_iops.setter
    def limit_iops(self, limit_iops):
        """Sets the limit_iops of this NimbleEditFolderInput.

        IOPS limit for this folder. If limit_iops is not specified when a folder is created, or if limit_iops is set to -1, then the folder has no IOPS limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited.  # noqa: E501

        :param limit_iops: The limit_iops of this NimbleEditFolderInput.  # noqa: E501
        :type: int
        """

        self._limit_iops = limit_iops

    @property
    def limit_mbps(self):
        """Gets the limit_mbps of this NimbleEditFolderInput.  # noqa: E501

        Throughput limit for this folder in MB/s. If limit_mbps is not specified when a folder is created, or if limit_mbps is set to -1, then the folder has no throughput limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited.  # noqa: E501

        :return: The limit_mbps of this NimbleEditFolderInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_mbps

    @limit_mbps.setter
    def limit_mbps(self, limit_mbps):
        """Sets the limit_mbps of this NimbleEditFolderInput.

        Throughput limit for this folder in MB/s. If limit_mbps is not specified when a folder is created, or if limit_mbps is set to -1, then the folder has no throughput limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited.  # noqa: E501

        :param limit_mbps: The limit_mbps of this NimbleEditFolderInput.  # noqa: E501
        :type: int
        """

        self._limit_mbps = limit_mbps

    @property
    def limit_size_bytes(self):
        """Gets the limit_size_bytes of this NimbleEditFolderInput.  # noqa: E501

        Folder size limit in bytes. If limit_size_bytes is not specified when a folder is created, or if limit_size_bytes is set to -1, then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. Folders with an agent_type of 'smis' or 'vvol' must have a size limit.  # noqa: E501

        :return: The limit_size_bytes of this NimbleEditFolderInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_size_bytes

    @limit_size_bytes.setter
    def limit_size_bytes(self, limit_size_bytes):
        """Sets the limit_size_bytes of this NimbleEditFolderInput.

        Folder size limit in bytes. If limit_size_bytes is not specified when a folder is created, or if limit_size_bytes is set to -1, then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. Folders with an agent_type of 'smis' or 'vvol' must have a size limit.  # noqa: E501

        :param limit_size_bytes: The limit_size_bytes of this NimbleEditFolderInput.  # noqa: E501
        :type: int
        """

        self._limit_size_bytes = limit_size_bytes

    @property
    def name(self):
        """Gets the name of this NimbleEditFolderInput.  # noqa: E501

        Name of the folder.  # noqa: E501

        :return: The name of this NimbleEditFolderInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleEditFolderInput.

        Name of the folder.  # noqa: E501

        :param name: The name of this NimbleEditFolderInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def overdraft_limit_pct(self):
        """Gets the overdraft_limit_pct of this NimbleEditFolderInput.  # noqa: E501

        Amount of space to consider as overdraft range for this folder as a percentage of folder used limit. Valid values are from 0% - 200%. This is the limit above the folder usage limit beyond which enforcement action(volume offline/non-writable) is issued.  # noqa: E501

        :return: The overdraft_limit_pct of this NimbleEditFolderInput.  # noqa: E501
        :rtype: int
        """
        return self._overdraft_limit_pct

    @overdraft_limit_pct.setter
    def overdraft_limit_pct(self, overdraft_limit_pct):
        """Sets the overdraft_limit_pct of this NimbleEditFolderInput.

        Amount of space to consider as overdraft range for this folder as a percentage of folder used limit. Valid values are from 0% - 200%. This is the limit above the folder usage limit beyond which enforcement action(volume offline/non-writable) is issued.  # noqa: E501

        :param overdraft_limit_pct: The overdraft_limit_pct of this NimbleEditFolderInput.  # noqa: E501
        :type: int
        """

        self._overdraft_limit_pct = overdraft_limit_pct

    @property
    def provisioned_limit_size_bytes(self):
        """Gets the provisioned_limit_size_bytes of this NimbleEditFolderInput.  # noqa: E501

        Limit on the provisioned size of volumes in a folder. If provisioned_limit_size_bytes is not specified when a folder is created, or if provisioned_limit_size_bytes is set to -1, then the folder has no provisioned size limit.  # noqa: E501

        :return: The provisioned_limit_size_bytes of this NimbleEditFolderInput.  # noqa: E501
        :rtype: int
        """
        return self._provisioned_limit_size_bytes

    @provisioned_limit_size_bytes.setter
    def provisioned_limit_size_bytes(self, provisioned_limit_size_bytes):
        """Sets the provisioned_limit_size_bytes of this NimbleEditFolderInput.

        Limit on the provisioned size of volumes in a folder. If provisioned_limit_size_bytes is not specified when a folder is created, or if provisioned_limit_size_bytes is set to -1, then the folder has no provisioned size limit.  # noqa: E501

        :param provisioned_limit_size_bytes: The provisioned_limit_size_bytes of this NimbleEditFolderInput.  # noqa: E501
        :type: int
        """

        self._provisioned_limit_size_bytes = provisioned_limit_size_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleEditFolderInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
