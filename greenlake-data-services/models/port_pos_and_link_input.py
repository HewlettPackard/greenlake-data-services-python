# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PortPosAndLinkInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'link': 'str',
        'port_position': 'PortPositionInput'
    }

    attribute_map = {
        'link': 'link',
        'port_position': 'portPosition'
    }

    def __init__(self, link=None, port_position=None):  # noqa: E501
        """PortPosAndLinkInput - a model defined in OpenAPI"""  # noqa: E501

        self._link = None
        self._port_position = None
        self.discriminator = None

        self.link = link
        self.port_position = port_position

    @property
    def link(self):
        """Gets the link of this PortPosAndLinkInput.  # noqa: E501

        Specifies the link for the remote system. If the Link Protocol Type is IP, specify an IP address for the corresponding port on the remote system. If the Link Protocol Type is FC, specify the WWN of the peer port on the remote system  # noqa: E501

        :return: The link of this PortPosAndLinkInput.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PortPosAndLinkInput.

        Specifies the link for the remote system. If the Link Protocol Type is IP, specify an IP address for the corresponding port on the remote system. If the Link Protocol Type is FC, specify the WWN of the peer port on the remote system  # noqa: E501

        :param link: The link of this PortPosAndLinkInput.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def port_position(self):
        """Gets the port_position of this PortPosAndLinkInput.  # noqa: E501


        :return: The port_position of this PortPosAndLinkInput.  # noqa: E501
        :rtype: PortPositionInput
        """
        return self._port_position

    @port_position.setter
    def port_position(self, port_position):
        """Sets the port_position of this PortPosAndLinkInput.


        :param port_position: The port_position of this PortPosAndLinkInput.  # noqa: E501
        :type: PortPositionInput
        """
        if port_position is None:
            raise ValueError("Invalid value for `port_position`, must not be `None`")  # noqa: E501

        self._port_position = port_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortPosAndLinkInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
