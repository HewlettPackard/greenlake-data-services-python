# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleCreatePerformancePolicyInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_category': 'str',
        'block_size': 'int',
        'cache': 'bool',
        'cache_policy': 'str',
        'compress': 'bool',
        'dedupe_enabled': 'bool',
        'description': 'str',
        'name': 'str',
        'space_policy': 'str'
    }

    attribute_map = {
        'app_category': 'app_category',
        'block_size': 'block_size',
        'cache': 'cache',
        'cache_policy': 'cache_policy',
        'compress': 'compress',
        'dedupe_enabled': 'dedupe_enabled',
        'description': 'description',
        'name': 'name',
        'space_policy': 'space_policy'
    }

    def __init__(self, app_category=None, block_size=None, cache=None, cache_policy=None, compress=None, dedupe_enabled=None, description=None, name=None, space_policy=None):  # noqa: E501
        """NimbleCreatePerformancePolicyInput - a model defined in OpenAPI"""  # noqa: E501

        self._app_category = None
        self._block_size = None
        self._cache = None
        self._cache_policy = None
        self._compress = None
        self._dedupe_enabled = None
        self._description = None
        self._name = None
        self._space_policy = None
        self.discriminator = None

        if app_category is not None:
            self.app_category = app_category
        if block_size is not None:
            self.block_size = block_size
        if cache is not None:
            self.cache = cache
        if cache_policy is not None:
            self.cache_policy = cache_policy
        if compress is not None:
            self.compress = compress
        if dedupe_enabled is not None:
            self.dedupe_enabled = dedupe_enabled
        if description is not None:
            self.description = description
        self.name = name
        if space_policy is not None:
            self.space_policy = space_policy

    @property
    def app_category(self):
        """Gets the app_category of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Specifies the application category of the associated volume. Plain string. Defaults to 'Unassigned'.  # noqa: E501

        :return: The app_category of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: str
        """
        return self._app_category

    @app_category.setter
    def app_category(self, app_category):
        """Sets the app_category of this NimbleCreatePerformancePolicyInput.

        Specifies the application category of the associated volume. Plain string. Defaults to 'Unassigned'.  # noqa: E501

        :param app_category: The app_category of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: str
        """

        self._app_category = app_category

    @property
    def block_size(self):
        """Gets the block_size of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Block Size in bytes to be used by the volumes created with this specific performance policy. Supported block sizes are 4096 bytes (4 KB), 8192 bytes (8 KB), 16384 bytes(16 KB), and 32768 bytes (32 KB). Block size of a performance policy cannot be changed once the performance policy is created. Defaults to 4096.  # noqa: E501

        :return: The block_size of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this NimbleCreatePerformancePolicyInput.

        Block Size in bytes to be used by the volumes created with this specific performance policy. Supported block sizes are 4096 bytes (4 KB), 8192 bytes (8 KB), 16384 bytes(16 KB), and 32768 bytes (32 KB). Block size of a performance policy cannot be changed once the performance policy is created. Defaults to 4096.  # noqa: E501

        :param block_size: The block_size of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def cache(self):
        """Gets the cache of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Flag denoting if data in the associated volume should be cached. Defaults to 'true'.  # noqa: E501

        :return: The cache of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this NimbleCreatePerformancePolicyInput.

        Flag denoting if data in the associated volume should be cached. Defaults to 'true'.  # noqa: E501

        :param cache: The cache of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: bool
        """

        self._cache = cache

    @property
    def cache_policy(self):
        """Gets the cache_policy of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Specifies how data of associated volume should be cached. Supports two policies, 'normal' and 'aggressive'. 'normal' policy caches data but skips in certain conditions such as sequential I/O. 'aggressive' policy will accelerate caching of all data belonging to this volume, regardless of sequentiality. Possible values:'normal', 'no_write', 'aggressive_read_no_write', 'disabled', 'aggressive'. Defaults to 'normal'.  # noqa: E501

        :return: The cache_policy of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: str
        """
        return self._cache_policy

    @cache_policy.setter
    def cache_policy(self, cache_policy):
        """Sets the cache_policy of this NimbleCreatePerformancePolicyInput.

        Specifies how data of associated volume should be cached. Supports two policies, 'normal' and 'aggressive'. 'normal' policy caches data but skips in certain conditions such as sequential I/O. 'aggressive' policy will accelerate caching of all data belonging to this volume, regardless of sequentiality. Possible values:'normal', 'no_write', 'aggressive_read_no_write', 'disabled', 'aggressive'. Defaults to 'normal'.  # noqa: E501

        :param cache_policy: The cache_policy of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: str
        """

        self._cache_policy = cache_policy

    @property
    def compress(self):
        """Gets the compress of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Flag denoting if data in the associated volume should be compressed. Defaults to 'true'.  # noqa: E501

        :return: The compress of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: bool
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this NimbleCreatePerformancePolicyInput.

        Flag denoting if data in the associated volume should be compressed. Defaults to 'true'.  # noqa: E501

        :param compress: The compress of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: bool
        """

        self._compress = compress

    @property
    def dedupe_enabled(self):
        """Gets the dedupe_enabled of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Specifies if dedupe is enabled for volumes created with this performance policy.  # noqa: E501

        :return: The dedupe_enabled of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_enabled

    @dedupe_enabled.setter
    def dedupe_enabled(self, dedupe_enabled):
        """Sets the dedupe_enabled of this NimbleCreatePerformancePolicyInput.

        Specifies if dedupe is enabled for volumes created with this performance policy.  # noqa: E501

        :param dedupe_enabled: The dedupe_enabled of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: bool
        """

        self._dedupe_enabled = dedupe_enabled

    @property
    def description(self):
        """Gets the description of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Description of a performance policy. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleCreatePerformancePolicyInput.

        Description of a performance policy. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Name of the Performance Policy. String of up to 64 alphanumeric characters, - and . and : and space are allowed after first character.  # noqa: E501

        :return: The name of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleCreatePerformancePolicyInput.

        Name of the Performance Policy. String of up to 64 alphanumeric characters, - and . and : and space are allowed after first character.  # noqa: E501

        :param name: The name of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def space_policy(self):
        """Gets the space_policy of this NimbleCreatePerformancePolicyInput.  # noqa: E501

        Specifies the state of the volume upon space constraint violation such as volume limit violation or volumes above their volume reserve, if the pool free space is exhausted. Supports two policies, 'offline' and 'non_writable'. Possible values:'offline', 'login_only', 'non_writable', 'read_only', 'invalid'. Defaults to 'offline'.  # noqa: E501

        :return: The space_policy of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :rtype: str
        """
        return self._space_policy

    @space_policy.setter
    def space_policy(self, space_policy):
        """Sets the space_policy of this NimbleCreatePerformancePolicyInput.

        Specifies the state of the volume upon space constraint violation such as volume limit violation or volumes above their volume reserve, if the pool free space is exhausted. Supports two policies, 'offline' and 'non_writable'. Possible values:'offline', 'login_only', 'non_writable', 'read_only', 'invalid'. Defaults to 'offline'.  # noqa: E501

        :param space_policy: The space_policy of this NimbleCreatePerformancePolicyInput.  # noqa: E501
        :type: str
        """

        self._space_policy = space_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleCreatePerformancePolicyInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
