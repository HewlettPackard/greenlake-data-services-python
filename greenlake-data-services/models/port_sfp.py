# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PortSfp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fw_version': 'str',
        'manufacturing': 'ManufacturingSingle',
        'qualified': 'bool',
        'rx_loss_pin': 'RxLossPin',
        'rx_power_low': 'bool',
        'speed': 'int',
        'state': 'STATE',
        'support_ddm': 'bool',
        'tx_disable_pin': 'TxDisablePin',
        'tx_fault_pin': 'TxFaultPin'
    }

    attribute_map = {
        'fw_version': 'fwVersion',
        'manufacturing': 'manufacturing',
        'qualified': 'qualified',
        'rx_loss_pin': 'rxLossPin',
        'rx_power_low': 'rxPowerLow',
        'speed': 'speed',
        'state': 'state',
        'support_ddm': 'supportDDM',
        'tx_disable_pin': 'txDisablePin',
        'tx_fault_pin': 'txFaultPin'
    }

    def __init__(self, fw_version=None, manufacturing=None, qualified=None, rx_loss_pin=None, rx_power_low=None, speed=None, state=None, support_ddm=None, tx_disable_pin=None, tx_fault_pin=None):  # noqa: E501
        """PortSfp - a model defined in OpenAPI"""  # noqa: E501

        self._fw_version = None
        self._manufacturing = None
        self._qualified = None
        self._rx_loss_pin = None
        self._rx_power_low = None
        self._speed = None
        self._state = None
        self._support_ddm = None
        self._tx_disable_pin = None
        self._tx_fault_pin = None
        self.discriminator = None

        if fw_version is not None:
            self.fw_version = fw_version
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if qualified is not None:
            self.qualified = qualified
        if rx_loss_pin is not None:
            self.rx_loss_pin = rx_loss_pin
        if rx_power_low is not None:
            self.rx_power_low = rx_power_low
        if speed is not None:
            self.speed = speed
        if state is not None:
            self.state = state
        if support_ddm is not None:
            self.support_ddm = support_ddm
        if tx_disable_pin is not None:
            self.tx_disable_pin = tx_disable_pin
        if tx_fault_pin is not None:
            self.tx_fault_pin = tx_fault_pin

    @property
    def fw_version(self):
        """Gets the fw_version of this PortSfp.  # noqa: E501

        Firmware version  # noqa: E501

        :return: The fw_version of this PortSfp.  # noqa: E501
        :rtype: str
        """
        return self._fw_version

    @fw_version.setter
    def fw_version(self, fw_version):
        """Sets the fw_version of this PortSfp.

        Firmware version  # noqa: E501

        :param fw_version: The fw_version of this PortSfp.  # noqa: E501
        :type: str
        """

        self._fw_version = fw_version

    @property
    def manufacturing(self):
        """Gets the manufacturing of this PortSfp.  # noqa: E501


        :return: The manufacturing of this PortSfp.  # noqa: E501
        :rtype: ManufacturingSingle
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this PortSfp.


        :param manufacturing: The manufacturing of this PortSfp.  # noqa: E501
        :type: ManufacturingSingle
        """

        self._manufacturing = manufacturing

    @property
    def qualified(self):
        """Gets the qualified of this PortSfp.  # noqa: E501

        Indicates if the SFP is qualified or not  # noqa: E501

        :return: The qualified of this PortSfp.  # noqa: E501
        :rtype: bool
        """
        return self._qualified

    @qualified.setter
    def qualified(self, qualified):
        """Sets the qualified of this PortSfp.

        Indicates if the SFP is qualified or not  # noqa: E501

        :param qualified: The qualified of this PortSfp.  # noqa: E501
        :type: bool
        """

        self._qualified = qualified

    @property
    def rx_loss_pin(self):
        """Gets the rx_loss_pin of this PortSfp.  # noqa: E501


        :return: The rx_loss_pin of this PortSfp.  # noqa: E501
        :rtype: RxLossPin
        """
        return self._rx_loss_pin

    @rx_loss_pin.setter
    def rx_loss_pin(self, rx_loss_pin):
        """Sets the rx_loss_pin of this PortSfp.


        :param rx_loss_pin: The rx_loss_pin of this PortSfp.  # noqa: E501
        :type: RxLossPin
        """

        self._rx_loss_pin = rx_loss_pin

    @property
    def rx_power_low(self):
        """Gets the rx_power_low of this PortSfp.  # noqa: E501

        Indicates if RX power is low or not  # noqa: E501

        :return: The rx_power_low of this PortSfp.  # noqa: E501
        :rtype: bool
        """
        return self._rx_power_low

    @rx_power_low.setter
    def rx_power_low(self, rx_power_low):
        """Sets the rx_power_low of this PortSfp.

        Indicates if RX power is low or not  # noqa: E501

        :param rx_power_low: The rx_power_low of this PortSfp.  # noqa: E501
        :type: bool
        """

        self._rx_power_low = rx_power_low

    @property
    def speed(self):
        """Gets the speed of this PortSfp.  # noqa: E501

        Speed in bits per second  # noqa: E501

        :return: The speed of this PortSfp.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this PortSfp.

        Speed in bits per second  # noqa: E501

        :param speed: The speed of this PortSfp.  # noqa: E501
        :type: int
        """

        self._speed = speed

    @property
    def state(self):
        """Gets the state of this PortSfp.  # noqa: E501


        :return: The state of this PortSfp.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PortSfp.


        :param state: The state of this PortSfp.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def support_ddm(self):
        """Gets the support_ddm of this PortSfp.  # noqa: E501

        Indicates if the SFP supports DDM  # noqa: E501

        :return: The support_ddm of this PortSfp.  # noqa: E501
        :rtype: bool
        """
        return self._support_ddm

    @support_ddm.setter
    def support_ddm(self, support_ddm):
        """Sets the support_ddm of this PortSfp.

        Indicates if the SFP supports DDM  # noqa: E501

        :param support_ddm: The support_ddm of this PortSfp.  # noqa: E501
        :type: bool
        """

        self._support_ddm = support_ddm

    @property
    def tx_disable_pin(self):
        """Gets the tx_disable_pin of this PortSfp.  # noqa: E501


        :return: The tx_disable_pin of this PortSfp.  # noqa: E501
        :rtype: TxDisablePin
        """
        return self._tx_disable_pin

    @tx_disable_pin.setter
    def tx_disable_pin(self, tx_disable_pin):
        """Sets the tx_disable_pin of this PortSfp.


        :param tx_disable_pin: The tx_disable_pin of this PortSfp.  # noqa: E501
        :type: TxDisablePin
        """

        self._tx_disable_pin = tx_disable_pin

    @property
    def tx_fault_pin(self):
        """Gets the tx_fault_pin of this PortSfp.  # noqa: E501


        :return: The tx_fault_pin of this PortSfp.  # noqa: E501
        :rtype: TxFaultPin
        """
        return self._tx_fault_pin

    @tx_fault_pin.setter
    def tx_fault_pin(self, tx_fault_pin):
        """Sets the tx_fault_pin of this PortSfp.


        :param tx_fault_pin: The tx_fault_pin of this PortSfp.  # noqa: E501
        :type: TxFaultPin
        """

        self._tx_fault_pin = tx_fault_pin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortSfp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
