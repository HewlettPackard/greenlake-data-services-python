# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PortRCIPPing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'packet_size': 'int',
        'wait_time': 'int',
        'ip_address': 'str',
        'ip_addressv6': 'str',
        'ping_count': 'int'
    }

    attribute_map = {
        'packet_size': 'PacketSize',
        'wait_time': 'WaitTime',
        'ip_address': 'ipAddress',
        'ip_addressv6': 'ipAddressv6',
        'ping_count': 'pingCount'
    }

    def __init__(self, packet_size=None, wait_time=None, ip_address=None, ip_addressv6=None, ping_count=None):  # noqa: E501
        """PortRCIPPing - a model defined in OpenAPI"""  # noqa: E501

        self._packet_size = None
        self._wait_time = None
        self._ip_address = None
        self._ip_addressv6 = None
        self._ping_count = None
        self.discriminator = None

        if packet_size is not None:
            self.packet_size = packet_size
        if wait_time is not None:
            self.wait_time = wait_time
        if ip_address is not None:
            self.ip_address = ip_address
        if ip_addressv6 is not None:
            self.ip_addressv6 = ip_addressv6
        if ping_count is not None:
            self.ping_count = ping_count

    @property
    def packet_size(self):
        """Gets the packet_size of this PortRCIPPing.  # noqa: E501

        Packet size of the ping  # noqa: E501

        :return: The packet_size of this PortRCIPPing.  # noqa: E501
        :rtype: int
        """
        return self._packet_size

    @packet_size.setter
    def packet_size(self, packet_size):
        """Sets the packet_size of this PortRCIPPing.

        Packet size of the ping  # noqa: E501

        :param packet_size: The packet_size of this PortRCIPPing.  # noqa: E501
        :type: int
        """

        self._packet_size = packet_size

    @property
    def wait_time(self):
        """Gets the wait_time of this PortRCIPPing.  # noqa: E501

        Wait time  # noqa: E501

        :return: The wait_time of this PortRCIPPing.  # noqa: E501
        :rtype: int
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """Sets the wait_time of this PortRCIPPing.

        Wait time  # noqa: E501

        :param wait_time: The wait_time of this PortRCIPPing.  # noqa: E501
        :type: int
        """

        self._wait_time = wait_time

    @property
    def ip_address(self):
        """Gets the ip_address of this PortRCIPPing.  # noqa: E501

        IP Address to ping  # noqa: E501

        :return: The ip_address of this PortRCIPPing.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PortRCIPPing.

        IP Address to ping  # noqa: E501

        :param ip_address: The ip_address of this PortRCIPPing.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def ip_addressv6(self):
        """Gets the ip_addressv6 of this PortRCIPPing.  # noqa: E501

        IP Address to ping  # noqa: E501

        :return: The ip_addressv6 of this PortRCIPPing.  # noqa: E501
        :rtype: str
        """
        return self._ip_addressv6

    @ip_addressv6.setter
    def ip_addressv6(self, ip_addressv6):
        """Sets the ip_addressv6 of this PortRCIPPing.

        IP Address to ping  # noqa: E501

        :param ip_addressv6: The ip_addressv6 of this PortRCIPPing.  # noqa: E501
        :type: str
        """

        self._ip_addressv6 = ip_addressv6

    @property
    def ping_count(self):
        """Gets the ping_count of this PortRCIPPing.  # noqa: E501

        ping count  # noqa: E501

        :return: The ping_count of this PortRCIPPing.  # noqa: E501
        :rtype: int
        """
        return self._ping_count

    @ping_count.setter
    def ping_count(self, ping_count):
        """Sets the ping_count of this PortRCIPPing.

        ping count  # noqa: E501

        :param ping_count: The ping_count of this PortRCIPPing.  # noqa: E501
        :type: int
        """

        self._ping_count = ping_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortRCIPPing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
