# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ErrorsInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alarm_code': 'str',
        'alarm_text': 'str',
        'iom': 'str'
    }

    attribute_map = {
        'alarm_code': 'alarmCode',
        'alarm_text': 'alarmText',
        'iom': 'iom'
    }

    def __init__(self, alarm_code=None, alarm_text=None, iom=None):  # noqa: E501
        """ErrorsInner - a model defined in OpenAPI"""  # noqa: E501

        self._alarm_code = None
        self._alarm_text = None
        self._iom = None
        self.discriminator = None

        if alarm_code is not None:
            self.alarm_code = alarm_code
        if alarm_text is not None:
            self.alarm_text = alarm_text
        if iom is not None:
            self.iom = iom

    @property
    def alarm_code(self):
        """Gets the alarm_code of this ErrorsInner.  # noqa: E501

        Alarm code  # noqa: E501

        :return: The alarm_code of this ErrorsInner.  # noqa: E501
        :rtype: str
        """
        return self._alarm_code

    @alarm_code.setter
    def alarm_code(self, alarm_code):
        """Sets the alarm_code of this ErrorsInner.

        Alarm code  # noqa: E501

        :param alarm_code: The alarm_code of this ErrorsInner.  # noqa: E501
        :type: str
        """

        self._alarm_code = alarm_code

    @property
    def alarm_text(self):
        """Gets the alarm_text of this ErrorsInner.  # noqa: E501


        :return: The alarm_text of this ErrorsInner.  # noqa: E501
        :rtype: str
        """
        return self._alarm_text

    @alarm_text.setter
    def alarm_text(self, alarm_text):
        """Sets the alarm_text of this ErrorsInner.


        :param alarm_text: The alarm_text of this ErrorsInner.  # noqa: E501
        :type: str
        """

        self._alarm_text = alarm_text

    @property
    def iom(self):
        """Gets the iom of this ErrorsInner.  # noqa: E501


        :return: The iom of this ErrorsInner.  # noqa: E501
        :rtype: str
        """
        return self._iom

    @iom.setter
    def iom(self, iom):
        """Sets the iom of this ErrorsInner.


        :param iom: The iom of this ErrorsInner.  # noqa: E501
        :type: str
        """

        self._iom = iom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
