# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SystemPerformance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer_id': 'str',
        'iops': 'PmPerfData',
        'latency': 'PmPerfData',
        'request_uri': 'str',
        'resource_uri': 'str',
        'throughput': 'PmPerfData'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'iops': 'iops',
        'latency': 'latency',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'throughput': 'throughput'
    }

    def __init__(self, customer_id=None, iops=None, latency=None, request_uri=None, resource_uri=None, throughput=None):  # noqa: E501
        """SystemPerformance - a model defined in OpenAPI"""  # noqa: E501

        self._customer_id = None
        self._iops = None
        self._latency = None
        self._request_uri = None
        self._resource_uri = None
        self._throughput = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if iops is not None:
            self.iops = iops
        if latency is not None:
            self.latency = latency
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if throughput is not None:
            self.throughput = throughput

    @property
    def customer_id(self):
        """Gets the customer_id of this SystemPerformance.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this SystemPerformance.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SystemPerformance.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this SystemPerformance.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def iops(self):
        """Gets the iops of this SystemPerformance.  # noqa: E501


        :return: The iops of this SystemPerformance.  # noqa: E501
        :rtype: PmPerfData
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this SystemPerformance.


        :param iops: The iops of this SystemPerformance.  # noqa: E501
        :type: PmPerfData
        """

        self._iops = iops

    @property
    def latency(self):
        """Gets the latency of this SystemPerformance.  # noqa: E501


        :return: The latency of this SystemPerformance.  # noqa: E501
        :rtype: PmPerfData
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this SystemPerformance.


        :param latency: The latency of this SystemPerformance.  # noqa: E501
        :type: PmPerfData
        """

        self._latency = latency

    @property
    def request_uri(self):
        """Gets the request_uri of this SystemPerformance.  # noqa: E501

        requestUri for detailed storage object  # noqa: E501

        :return: The request_uri of this SystemPerformance.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this SystemPerformance.

        requestUri for detailed storage object  # noqa: E501

        :param request_uri: The request_uri of this SystemPerformance.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this SystemPerformance.  # noqa: E501

        resourceUri for detailed storage object  # noqa: E501

        :return: The resource_uri of this SystemPerformance.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this SystemPerformance.

        resourceUri for detailed storage object  # noqa: E501

        :param resource_uri: The resource_uri of this SystemPerformance.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def throughput(self):
        """Gets the throughput of this SystemPerformance.  # noqa: E501


        :return: The throughput of this SystemPerformance.  # noqa: E501
        :rtype: PmPerfData
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this SystemPerformance.


        :param throughput: The throughput of this SystemPerformance.  # noqa: E501
        :type: PmPerfData
        """

        self._throughput = throughput

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemPerformance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
