# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Allocated(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpgs': 'float',
        'cpgs_free': 'float',
        'cpgs_private': 'float',
        'cpgs_private_base': 'Private',
        'cpgs_private_snap': 'Private',
        'cpgs_shared': 'float',
        'legacy_volumes': 'float',
        'legacy_volumes_snap': 'float',
        'legacy_volumes_user': 'float',
        'system': 'float',
        'system_admin': 'float',
        'system_internal': 'float',
        'system_spare': 'float',
        'system_spare_unused': 'float',
        'system_spare_used': 'float',
        'total': 'float',
        'unmapped': 'float'
    }

    attribute_map = {
        'cpgs': 'cpgs',
        'cpgs_free': 'cpgsFree',
        'cpgs_private': 'cpgsPrivate',
        'cpgs_private_base': 'cpgsPrivateBase',
        'cpgs_private_snap': 'cpgsPrivateSnap',
        'cpgs_shared': 'cpgsShared',
        'legacy_volumes': 'legacyVolumes',
        'legacy_volumes_snap': 'legacyVolumesSnap',
        'legacy_volumes_user': 'legacyVolumesUser',
        'system': 'system',
        'system_admin': 'systemAdmin',
        'system_internal': 'systemInternal',
        'system_spare': 'systemSpare',
        'system_spare_unused': 'systemSpareUnused',
        'system_spare_used': 'systemSpareUsed',
        'total': 'total',
        'unmapped': 'unmapped'
    }

    def __init__(self, cpgs=None, cpgs_free=None, cpgs_private=None, cpgs_private_base=None, cpgs_private_snap=None, cpgs_shared=None, legacy_volumes=None, legacy_volumes_snap=None, legacy_volumes_user=None, system=None, system_admin=None, system_internal=None, system_spare=None, system_spare_unused=None, system_spare_used=None, total=None, unmapped=None):  # noqa: E501
        """Allocated - a model defined in OpenAPI"""  # noqa: E501

        self._cpgs = None
        self._cpgs_free = None
        self._cpgs_private = None
        self._cpgs_private_base = None
        self._cpgs_private_snap = None
        self._cpgs_shared = None
        self._legacy_volumes = None
        self._legacy_volumes_snap = None
        self._legacy_volumes_user = None
        self._system = None
        self._system_admin = None
        self._system_internal = None
        self._system_spare = None
        self._system_spare_unused = None
        self._system_spare_used = None
        self._total = None
        self._unmapped = None
        self.discriminator = None

        if cpgs is not None:
            self.cpgs = cpgs
        if cpgs_free is not None:
            self.cpgs_free = cpgs_free
        if cpgs_private is not None:
            self.cpgs_private = cpgs_private
        if cpgs_private_base is not None:
            self.cpgs_private_base = cpgs_private_base
        if cpgs_private_snap is not None:
            self.cpgs_private_snap = cpgs_private_snap
        if cpgs_shared is not None:
            self.cpgs_shared = cpgs_shared
        if legacy_volumes is not None:
            self.legacy_volumes = legacy_volumes
        if legacy_volumes_snap is not None:
            self.legacy_volumes_snap = legacy_volumes_snap
        if legacy_volumes_user is not None:
            self.legacy_volumes_user = legacy_volumes_user
        if system is not None:
            self.system = system
        if system_admin is not None:
            self.system_admin = system_admin
        if system_internal is not None:
            self.system_internal = system_internal
        if system_spare is not None:
            self.system_spare = system_spare
        if system_spare_unused is not None:
            self.system_spare_unused = system_spare_unused
        if system_spare_used is not None:
            self.system_spare_used = system_spare_used
        if total is not None:
            self.total = total
        if unmapped is not None:
            self.unmapped = unmapped

    @property
    def cpgs(self):
        """Gets the cpgs of this Allocated.  # noqa: E501


        :return: The cpgs of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._cpgs

    @cpgs.setter
    def cpgs(self, cpgs):
        """Sets the cpgs of this Allocated.


        :param cpgs: The cpgs of this Allocated.  # noqa: E501
        :type: float
        """

        self._cpgs = cpgs

    @property
    def cpgs_free(self):
        """Gets the cpgs_free of this Allocated.  # noqa: E501


        :return: The cpgs_free of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._cpgs_free

    @cpgs_free.setter
    def cpgs_free(self, cpgs_free):
        """Sets the cpgs_free of this Allocated.


        :param cpgs_free: The cpgs_free of this Allocated.  # noqa: E501
        :type: float
        """

        self._cpgs_free = cpgs_free

    @property
    def cpgs_private(self):
        """Gets the cpgs_private of this Allocated.  # noqa: E501


        :return: The cpgs_private of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._cpgs_private

    @cpgs_private.setter
    def cpgs_private(self, cpgs_private):
        """Sets the cpgs_private of this Allocated.


        :param cpgs_private: The cpgs_private of this Allocated.  # noqa: E501
        :type: float
        """

        self._cpgs_private = cpgs_private

    @property
    def cpgs_private_base(self):
        """Gets the cpgs_private_base of this Allocated.  # noqa: E501


        :return: The cpgs_private_base of this Allocated.  # noqa: E501
        :rtype: Private
        """
        return self._cpgs_private_base

    @cpgs_private_base.setter
    def cpgs_private_base(self, cpgs_private_base):
        """Sets the cpgs_private_base of this Allocated.


        :param cpgs_private_base: The cpgs_private_base of this Allocated.  # noqa: E501
        :type: Private
        """

        self._cpgs_private_base = cpgs_private_base

    @property
    def cpgs_private_snap(self):
        """Gets the cpgs_private_snap of this Allocated.  # noqa: E501


        :return: The cpgs_private_snap of this Allocated.  # noqa: E501
        :rtype: Private
        """
        return self._cpgs_private_snap

    @cpgs_private_snap.setter
    def cpgs_private_snap(self, cpgs_private_snap):
        """Sets the cpgs_private_snap of this Allocated.


        :param cpgs_private_snap: The cpgs_private_snap of this Allocated.  # noqa: E501
        :type: Private
        """

        self._cpgs_private_snap = cpgs_private_snap

    @property
    def cpgs_shared(self):
        """Gets the cpgs_shared of this Allocated.  # noqa: E501


        :return: The cpgs_shared of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._cpgs_shared

    @cpgs_shared.setter
    def cpgs_shared(self, cpgs_shared):
        """Sets the cpgs_shared of this Allocated.


        :param cpgs_shared: The cpgs_shared of this Allocated.  # noqa: E501
        :type: float
        """

        self._cpgs_shared = cpgs_shared

    @property
    def legacy_volumes(self):
        """Gets the legacy_volumes of this Allocated.  # noqa: E501


        :return: The legacy_volumes of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._legacy_volumes

    @legacy_volumes.setter
    def legacy_volumes(self, legacy_volumes):
        """Sets the legacy_volumes of this Allocated.


        :param legacy_volumes: The legacy_volumes of this Allocated.  # noqa: E501
        :type: float
        """

        self._legacy_volumes = legacy_volumes

    @property
    def legacy_volumes_snap(self):
        """Gets the legacy_volumes_snap of this Allocated.  # noqa: E501


        :return: The legacy_volumes_snap of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._legacy_volumes_snap

    @legacy_volumes_snap.setter
    def legacy_volumes_snap(self, legacy_volumes_snap):
        """Sets the legacy_volumes_snap of this Allocated.


        :param legacy_volumes_snap: The legacy_volumes_snap of this Allocated.  # noqa: E501
        :type: float
        """

        self._legacy_volumes_snap = legacy_volumes_snap

    @property
    def legacy_volumes_user(self):
        """Gets the legacy_volumes_user of this Allocated.  # noqa: E501


        :return: The legacy_volumes_user of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._legacy_volumes_user

    @legacy_volumes_user.setter
    def legacy_volumes_user(self, legacy_volumes_user):
        """Sets the legacy_volumes_user of this Allocated.


        :param legacy_volumes_user: The legacy_volumes_user of this Allocated.  # noqa: E501
        :type: float
        """

        self._legacy_volumes_user = legacy_volumes_user

    @property
    def system(self):
        """Gets the system of this Allocated.  # noqa: E501


        :return: The system of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Allocated.


        :param system: The system of this Allocated.  # noqa: E501
        :type: float
        """

        self._system = system

    @property
    def system_admin(self):
        """Gets the system_admin of this Allocated.  # noqa: E501


        :return: The system_admin of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._system_admin

    @system_admin.setter
    def system_admin(self, system_admin):
        """Sets the system_admin of this Allocated.


        :param system_admin: The system_admin of this Allocated.  # noqa: E501
        :type: float
        """

        self._system_admin = system_admin

    @property
    def system_internal(self):
        """Gets the system_internal of this Allocated.  # noqa: E501


        :return: The system_internal of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._system_internal

    @system_internal.setter
    def system_internal(self, system_internal):
        """Sets the system_internal of this Allocated.


        :param system_internal: The system_internal of this Allocated.  # noqa: E501
        :type: float
        """

        self._system_internal = system_internal

    @property
    def system_spare(self):
        """Gets the system_spare of this Allocated.  # noqa: E501


        :return: The system_spare of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._system_spare

    @system_spare.setter
    def system_spare(self, system_spare):
        """Sets the system_spare of this Allocated.


        :param system_spare: The system_spare of this Allocated.  # noqa: E501
        :type: float
        """

        self._system_spare = system_spare

    @property
    def system_spare_unused(self):
        """Gets the system_spare_unused of this Allocated.  # noqa: E501


        :return: The system_spare_unused of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._system_spare_unused

    @system_spare_unused.setter
    def system_spare_unused(self, system_spare_unused):
        """Sets the system_spare_unused of this Allocated.


        :param system_spare_unused: The system_spare_unused of this Allocated.  # noqa: E501
        :type: float
        """

        self._system_spare_unused = system_spare_unused

    @property
    def system_spare_used(self):
        """Gets the system_spare_used of this Allocated.  # noqa: E501


        :return: The system_spare_used of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._system_spare_used

    @system_spare_used.setter
    def system_spare_used(self, system_spare_used):
        """Sets the system_spare_used of this Allocated.


        :param system_spare_used: The system_spare_used of this Allocated.  # noqa: E501
        :type: float
        """

        self._system_spare_used = system_spare_used

    @property
    def total(self):
        """Gets the total of this Allocated.  # noqa: E501

        Total allocated percentage  # noqa: E501

        :return: The total of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Allocated.

        Total allocated percentage  # noqa: E501

        :param total: The total of this Allocated.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def unmapped(self):
        """Gets the unmapped of this Allocated.  # noqa: E501


        :return: The unmapped of this Allocated.  # noqa: E501
        :rtype: float
        """
        return self._unmapped

    @unmapped.setter
    def unmapped(self, unmapped):
        """Sets the unmapped of this Allocated.


        :param unmapped: The unmapped of this Allocated.  # noqa: E501
        :type: float
        """

        self._unmapped = unmapped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Allocated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
