# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleMailSettingInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'smtp_port': 'int',
        'smtp_server': 'str'
    }

    attribute_map = {
        'smtp_port': 'smtp_port',
        'smtp_server': 'smtp_server'
    }

    def __init__(self, smtp_port=None, smtp_server=None):  # noqa: E501
        """NimbleMailSettingInput - a model defined in OpenAPI"""  # noqa: E501

        self._smtp_port = None
        self._smtp_server = None
        self.discriminator = None

        if smtp_port is not None:
            self.smtp_port = smtp_port
        if smtp_server is not None:
            self.smtp_server = smtp_server

    @property
    def smtp_port(self):
        """Gets the smtp_port of this NimbleMailSettingInput.  # noqa: E501

        Port number of SMTP Server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The smtp_port of this NimbleMailSettingInput.  # noqa: E501
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this NimbleMailSettingInput.

        Port number of SMTP Server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param smtp_port: The smtp_port of this NimbleMailSettingInput.  # noqa: E501
        :type: int
        """

        self._smtp_port = smtp_port

    @property
    def smtp_server(self):
        """Gets the smtp_server of this NimbleMailSettingInput.  # noqa: E501

        Hostname or IP Address of SMTP Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The smtp_server of this NimbleMailSettingInput.  # noqa: E501
        :rtype: str
        """
        return self._smtp_server

    @smtp_server.setter
    def smtp_server(self, smtp_server):
        """Sets the smtp_server of this NimbleMailSettingInput.

        Hostname or IP Address of SMTP Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param smtp_server: The smtp_server of this NimbleMailSettingInput.  # noqa: E501
        :type: str
        """

        self._smtp_server = smtp_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleMailSettingInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
