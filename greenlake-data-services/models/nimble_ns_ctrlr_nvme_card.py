# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNsCtrlrNvmeCard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'serial_number': 'str',
        'size': 'int',
        'state': 'str'
    }

    attribute_map = {
        'serial_number': 'serial_number',
        'size': 'size',
        'state': 'state'
    }

    def __init__(self, serial_number=None, size=None, state=None):  # noqa: E501
        """NimbleNsCtrlrNvmeCard - a model defined in OpenAPI"""  # noqa: E501

        self._serial_number = None
        self._size = None
        self._state = None
        self.discriminator = None

        if serial_number is not None:
            self.serial_number = serial_number
        if size is not None:
            self.size = size
        if state is not None:
            self.state = state

    @property
    def serial_number(self):
        """Gets the serial_number of this NimbleNsCtrlrNvmeCard.  # noqa: E501

        Serial number.  # noqa: E501

        :return: The serial_number of this NimbleNsCtrlrNvmeCard.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this NimbleNsCtrlrNvmeCard.

        Serial number.  # noqa: E501

        :param serial_number: The serial_number of this NimbleNsCtrlrNvmeCard.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def size(self):
        """Gets the size of this NimbleNsCtrlrNvmeCard.  # noqa: E501

        NVMe card cache size in bytes.  # noqa: E501

        :return: The size of this NimbleNsCtrlrNvmeCard.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NimbleNsCtrlrNvmeCard.

        NVMe card cache size in bytes.  # noqa: E501

        :param size: The size of this NimbleNsCtrlrNvmeCard.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def state(self):
        """Gets the state of this NimbleNsCtrlrNvmeCard.  # noqa: E501

        Online state. Possible values: 'valid', 'in use', 'failed'.  # noqa: E501

        :return: The state of this NimbleNsCtrlrNvmeCard.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NimbleNsCtrlrNvmeCard.

        Online state. Possible values: 'valid', 'in use', 'failed'.  # noqa: E501

        :param state: The state of this NimbleNsCtrlrNvmeCard.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNsCtrlrNvmeCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
