# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InitiatorPort(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aliases': 'str',
        'current_speed': 'str',
        'hba_driver_version': 'str',
        'hba_firmware_version': 'str',
        'hba_manufacturer': 'str',
        'hba_model': 'str',
        'hba_os_name_version': 'str',
        'host_name': 'str',
        'number': 'int',
        'os_device_name': 'str',
        'ssan_qos_support': 'str',
        'ssan_security_support': 'str',
        'supported_speeds': 'str',
        'wwn': 'str'
    }

    attribute_map = {
        'aliases': 'aliases',
        'current_speed': 'currentSpeed',
        'hba_driver_version': 'hbaDriverVersion',
        'hba_firmware_version': 'hbaFirmwareVersion',
        'hba_manufacturer': 'hbaManufacturer',
        'hba_model': 'hbaModel',
        'hba_os_name_version': 'hbaOsNameVersion',
        'host_name': 'hostName',
        'number': 'number',
        'os_device_name': 'osDeviceName',
        'ssan_qos_support': 'ssanQosSupport',
        'ssan_security_support': 'ssanSecuritySupport',
        'supported_speeds': 'supportedSpeeds',
        'wwn': 'wwn'
    }

    def __init__(self, aliases=None, current_speed=None, hba_driver_version=None, hba_firmware_version=None, hba_manufacturer=None, hba_model=None, hba_os_name_version=None, host_name=None, number=None, os_device_name=None, ssan_qos_support=None, ssan_security_support=None, supported_speeds=None, wwn=None):  # noqa: E501
        """InitiatorPort - a model defined in OpenAPI"""  # noqa: E501

        self._aliases = None
        self._current_speed = None
        self._hba_driver_version = None
        self._hba_firmware_version = None
        self._hba_manufacturer = None
        self._hba_model = None
        self._hba_os_name_version = None
        self._host_name = None
        self._number = None
        self._os_device_name = None
        self._ssan_qos_support = None
        self._ssan_security_support = None
        self._supported_speeds = None
        self._wwn = None
        self.discriminator = None

        if aliases is not None:
            self.aliases = aliases
        if current_speed is not None:
            self.current_speed = current_speed
        if hba_driver_version is not None:
            self.hba_driver_version = hba_driver_version
        if hba_firmware_version is not None:
            self.hba_firmware_version = hba_firmware_version
        if hba_manufacturer is not None:
            self.hba_manufacturer = hba_manufacturer
        if hba_model is not None:
            self.hba_model = hba_model
        if hba_os_name_version is not None:
            self.hba_os_name_version = hba_os_name_version
        if host_name is not None:
            self.host_name = host_name
        if number is not None:
            self.number = number
        if os_device_name is not None:
            self.os_device_name = os_device_name
        if ssan_qos_support is not None:
            self.ssan_qos_support = ssan_qos_support
        if ssan_security_support is not None:
            self.ssan_security_support = ssan_security_support
        if supported_speeds is not None:
            self.supported_speeds = supported_speeds
        if wwn is not None:
            self.wwn = wwn

    @property
    def aliases(self):
        """Gets the aliases of this InitiatorPort.  # noqa: E501

        Initiator port alias  # noqa: E501

        :return: The aliases of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this InitiatorPort.

        Initiator port alias  # noqa: E501

        :param aliases: The aliases of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._aliases = aliases

    @property
    def current_speed(self):
        """Gets the current_speed of this InitiatorPort.  # noqa: E501

        Initiator port current  # noqa: E501

        :return: The current_speed of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._current_speed

    @current_speed.setter
    def current_speed(self, current_speed):
        """Sets the current_speed of this InitiatorPort.

        Initiator port current  # noqa: E501

        :param current_speed: The current_speed of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._current_speed = current_speed

    @property
    def hba_driver_version(self):
        """Gets the hba_driver_version of this InitiatorPort.  # noqa: E501

        Initiator port hba driver version  # noqa: E501

        :return: The hba_driver_version of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._hba_driver_version

    @hba_driver_version.setter
    def hba_driver_version(self, hba_driver_version):
        """Sets the hba_driver_version of this InitiatorPort.

        Initiator port hba driver version  # noqa: E501

        :param hba_driver_version: The hba_driver_version of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._hba_driver_version = hba_driver_version

    @property
    def hba_firmware_version(self):
        """Gets the hba_firmware_version of this InitiatorPort.  # noqa: E501

        Initiator port hba firmware version  # noqa: E501

        :return: The hba_firmware_version of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._hba_firmware_version

    @hba_firmware_version.setter
    def hba_firmware_version(self, hba_firmware_version):
        """Sets the hba_firmware_version of this InitiatorPort.

        Initiator port hba firmware version  # noqa: E501

        :param hba_firmware_version: The hba_firmware_version of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._hba_firmware_version = hba_firmware_version

    @property
    def hba_manufacturer(self):
        """Gets the hba_manufacturer of this InitiatorPort.  # noqa: E501

        Initiator port hba manufacturer  # noqa: E501

        :return: The hba_manufacturer of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._hba_manufacturer

    @hba_manufacturer.setter
    def hba_manufacturer(self, hba_manufacturer):
        """Sets the hba_manufacturer of this InitiatorPort.

        Initiator port hba manufacturer  # noqa: E501

        :param hba_manufacturer: The hba_manufacturer of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._hba_manufacturer = hba_manufacturer

    @property
    def hba_model(self):
        """Gets the hba_model of this InitiatorPort.  # noqa: E501

        Initiator port hba model  # noqa: E501

        :return: The hba_model of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._hba_model

    @hba_model.setter
    def hba_model(self, hba_model):
        """Sets the hba_model of this InitiatorPort.

        Initiator port hba model  # noqa: E501

        :param hba_model: The hba_model of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._hba_model = hba_model

    @property
    def hba_os_name_version(self):
        """Gets the hba_os_name_version of this InitiatorPort.  # noqa: E501

        Initiator port hba os version  # noqa: E501

        :return: The hba_os_name_version of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._hba_os_name_version

    @hba_os_name_version.setter
    def hba_os_name_version(self, hba_os_name_version):
        """Sets the hba_os_name_version of this InitiatorPort.

        Initiator port hba os version  # noqa: E501

        :param hba_os_name_version: The hba_os_name_version of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._hba_os_name_version = hba_os_name_version

    @property
    def host_name(self):
        """Gets the host_name of this InitiatorPort.  # noqa: E501

        Initiator port host name  # noqa: E501

        :return: The host_name of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this InitiatorPort.

        Initiator port host name  # noqa: E501

        :param host_name: The host_name of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def number(self):
        """Gets the number of this InitiatorPort.  # noqa: E501

        Initiator port number  # noqa: E501

        :return: The number of this InitiatorPort.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InitiatorPort.

        Initiator port number  # noqa: E501

        :param number: The number of this InitiatorPort.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def os_device_name(self):
        """Gets the os_device_name of this InitiatorPort.  # noqa: E501

        Initiator port os device name  # noqa: E501

        :return: The os_device_name of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._os_device_name

    @os_device_name.setter
    def os_device_name(self, os_device_name):
        """Sets the os_device_name of this InitiatorPort.

        Initiator port os device name  # noqa: E501

        :param os_device_name: The os_device_name of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._os_device_name = os_device_name

    @property
    def ssan_qos_support(self):
        """Gets the ssan_qos_support of this InitiatorPort.  # noqa: E501

        Initiator port Smart SAN qos support  # noqa: E501

        :return: The ssan_qos_support of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._ssan_qos_support

    @ssan_qos_support.setter
    def ssan_qos_support(self, ssan_qos_support):
        """Sets the ssan_qos_support of this InitiatorPort.

        Initiator port Smart SAN qos support  # noqa: E501

        :param ssan_qos_support: The ssan_qos_support of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._ssan_qos_support = ssan_qos_support

    @property
    def ssan_security_support(self):
        """Gets the ssan_security_support of this InitiatorPort.  # noqa: E501

        Initiator port Smart SAN security  # noqa: E501

        :return: The ssan_security_support of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._ssan_security_support

    @ssan_security_support.setter
    def ssan_security_support(self, ssan_security_support):
        """Sets the ssan_security_support of this InitiatorPort.

        Initiator port Smart SAN security  # noqa: E501

        :param ssan_security_support: The ssan_security_support of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._ssan_security_support = ssan_security_support

    @property
    def supported_speeds(self):
        """Gets the supported_speeds of this InitiatorPort.  # noqa: E501

        Initiator port supported speeds  # noqa: E501

        :return: The supported_speeds of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._supported_speeds

    @supported_speeds.setter
    def supported_speeds(self, supported_speeds):
        """Sets the supported_speeds of this InitiatorPort.

        Initiator port supported speeds  # noqa: E501

        :param supported_speeds: The supported_speeds of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._supported_speeds = supported_speeds

    @property
    def wwn(self):
        """Gets the wwn of this InitiatorPort.  # noqa: E501

        Initiator port wwn  # noqa: E501

        :return: The wwn of this InitiatorPort.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this InitiatorPort.

        Initiator port wwn  # noqa: E501

        :param wwn: The wwn of this InitiatorPort.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiatorPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
