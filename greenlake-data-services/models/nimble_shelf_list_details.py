# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleShelfListDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'driveset_list': 'list[NimbleDriveSetDetails]',
        'shelf_id': 'str'
    }

    attribute_map = {
        'driveset_list': 'driveset_list',
        'shelf_id': 'shelf_id'
    }

    def __init__(self, driveset_list=None, shelf_id=None):  # noqa: E501
        """NimbleShelfListDetails - a model defined in OpenAPI"""  # noqa: E501

        self._driveset_list = None
        self._shelf_id = None
        self.discriminator = None

        self.driveset_list = driveset_list
        self.shelf_id = shelf_id

    @property
    def driveset_list(self):
        """Gets the driveset_list of this NimbleShelfListDetails.  # noqa: E501

        List of driveset details.  # noqa: E501

        :return: The driveset_list of this NimbleShelfListDetails.  # noqa: E501
        :rtype: list[NimbleDriveSetDetails]
        """
        return self._driveset_list

    @driveset_list.setter
    def driveset_list(self, driveset_list):
        """Sets the driveset_list of this NimbleShelfListDetails.

        List of driveset details.  # noqa: E501

        :param driveset_list: The driveset_list of this NimbleShelfListDetails.  # noqa: E501
        :type: list[NimbleDriveSetDetails]
        """
        if driveset_list is None:
            raise ValueError("Invalid value for `driveset_list`, must not be `None`")  # noqa: E501

        self._driveset_list = driveset_list

    @property
    def shelf_id(self):
        """Gets the shelf_id of this NimbleShelfListDetails.  # noqa: E501

        ID of shelf. A 42 digit hexadecimal number.  # noqa: E501

        :return: The shelf_id of this NimbleShelfListDetails.  # noqa: E501
        :rtype: str
        """
        return self._shelf_id

    @shelf_id.setter
    def shelf_id(self, shelf_id):
        """Sets the shelf_id of this NimbleShelfListDetails.

        ID of shelf. A 42 digit hexadecimal number.  # noqa: E501

        :param shelf_id: The shelf_id of this NimbleShelfListDetails.  # noqa: E501
        :type: str
        """
        if shelf_id is None:
            raise ValueError("Invalid value for `shelf_id`, must not be `None`")  # noqa: E501

        self._shelf_id = shelf_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleShelfListDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
