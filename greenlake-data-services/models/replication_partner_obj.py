# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReplicationPartnerObj(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'control_port': 'int',
        'data_port': 'int',
        'description': 'str',
        'repl_hostname': 'str',
        'source': 'Source',
        'subnet_label': 'str',
        'subnet_type': 'str',
        'target': 'Target',
        'target_system_id': 'str',
        'throttles': 'list[ReplicationThrottle]'
    }

    attribute_map = {
        'control_port': 'control_port',
        'data_port': 'data_port',
        'description': 'description',
        'repl_hostname': 'repl_hostname',
        'source': 'source',
        'subnet_label': 'subnet_label',
        'subnet_type': 'subnet_type',
        'target': 'target',
        'target_system_id': 'targetSystemId',
        'throttles': 'throttles'
    }

    def __init__(self, control_port=None, data_port=None, description=None, repl_hostname=None, source=None, subnet_label=None, subnet_type=None, target=None, target_system_id=None, throttles=None):  # noqa: E501
        """ReplicationPartnerObj - a model defined in OpenAPI"""  # noqa: E501

        self._control_port = None
        self._data_port = None
        self._description = None
        self._repl_hostname = None
        self._source = None
        self._subnet_label = None
        self._subnet_type = None
        self._target = None
        self._target_system_id = None
        self._throttles = None
        self.discriminator = None

        if control_port is not None:
            self.control_port = control_port
        if data_port is not None:
            self.data_port = data_port
        if description is not None:
            self.description = description
        if repl_hostname is not None:
            self.repl_hostname = repl_hostname
        self.source = source
        if subnet_label is not None:
            self.subnet_label = subnet_label
        if subnet_type is not None:
            self.subnet_type = subnet_type
        self.target = target
        self.target_system_id = target_system_id
        if throttles is not None:
            self.throttles = throttles

    @property
    def control_port(self):
        """Gets the control_port of this ReplicationPartnerObj.  # noqa: E501

        Port number of partner control interface. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The control_port of this ReplicationPartnerObj.  # noqa: E501
        :rtype: int
        """
        return self._control_port

    @control_port.setter
    def control_port(self, control_port):
        """Sets the control_port of this ReplicationPartnerObj.

        Port number of partner control interface. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param control_port: The control_port of this ReplicationPartnerObj.  # noqa: E501
        :type: int
        """

        self._control_port = control_port

    @property
    def data_port(self):
        """Gets the data_port of this ReplicationPartnerObj.  # noqa: E501

        Port number of partner data interface. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The data_port of this ReplicationPartnerObj.  # noqa: E501
        :rtype: int
        """
        return self._data_port

    @data_port.setter
    def data_port(self, data_port):
        """Sets the data_port of this ReplicationPartnerObj.

        Port number of partner data interface. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param data_port: The data_port of this ReplicationPartnerObj.  # noqa: E501
        :type: int
        """

        self._data_port = data_port

    @property
    def description(self):
        """Gets the description of this ReplicationPartnerObj.  # noqa: E501

        Description of replication partner. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this ReplicationPartnerObj.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReplicationPartnerObj.

        Description of replication partner. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this ReplicationPartnerObj.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def repl_hostname(self):
        """Gets the repl_hostname of this ReplicationPartnerObj.  # noqa: E501

        IP address or hostname of partner data interface. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.  # noqa: E501

        :return: The repl_hostname of this ReplicationPartnerObj.  # noqa: E501
        :rtype: str
        """
        return self._repl_hostname

    @repl_hostname.setter
    def repl_hostname(self, repl_hostname):
        """Sets the repl_hostname of this ReplicationPartnerObj.

        IP address or hostname of partner data interface. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.  # noqa: E501

        :param repl_hostname: The repl_hostname of this ReplicationPartnerObj.  # noqa: E501
        :type: str
        """

        self._repl_hostname = repl_hostname

    @property
    def source(self):
        """Gets the source of this ReplicationPartnerObj.  # noqa: E501


        :return: The source of this ReplicationPartnerObj.  # noqa: E501
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ReplicationPartnerObj.


        :param source: The source of this ReplicationPartnerObj.  # noqa: E501
        :type: Source
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def subnet_label(self):
        """Gets the subnet_label of this ReplicationPartnerObj.  # noqa: E501

        Label of the subnet used to replicate to this partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.  # noqa: E501

        :return: The subnet_label of this ReplicationPartnerObj.  # noqa: E501
        :rtype: str
        """
        return self._subnet_label

    @subnet_label.setter
    def subnet_label(self, subnet_label):
        """Sets the subnet_label of this ReplicationPartnerObj.

        Label of the subnet used to replicate to this partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.  # noqa: E501

        :param subnet_label: The subnet_label of this ReplicationPartnerObj.  # noqa: E501
        :type: str
        """

        self._subnet_label = subnet_label

    @property
    def subnet_type(self):
        """Gets the subnet_type of this ReplicationPartnerObj.  # noqa: E501

        Type of the subnet used to replicate to this partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.  # noqa: E501

        :return: The subnet_type of this ReplicationPartnerObj.  # noqa: E501
        :rtype: str
        """
        return self._subnet_type

    @subnet_type.setter
    def subnet_type(self, subnet_type):
        """Sets the subnet_type of this ReplicationPartnerObj.

        Type of the subnet used to replicate to this partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.  # noqa: E501

        :param subnet_type: The subnet_type of this ReplicationPartnerObj.  # noqa: E501
        :type: str
        """

        self._subnet_type = subnet_type

    @property
    def target(self):
        """Gets the target of this ReplicationPartnerObj.  # noqa: E501


        :return: The target of this ReplicationPartnerObj.  # noqa: E501
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ReplicationPartnerObj.


        :param target: The target of this ReplicationPartnerObj.  # noqa: E501
        :type: Target
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def target_system_id(self):
        """Gets the target_system_id of this ReplicationPartnerObj.  # noqa: E501

        Target system ID  # noqa: E501

        :return: The target_system_id of this ReplicationPartnerObj.  # noqa: E501
        :rtype: str
        """
        return self._target_system_id

    @target_system_id.setter
    def target_system_id(self, target_system_id):
        """Sets the target_system_id of this ReplicationPartnerObj.

        Target system ID  # noqa: E501

        :param target_system_id: The target_system_id of this ReplicationPartnerObj.  # noqa: E501
        :type: str
        """
        if target_system_id is None:
            raise ValueError("Invalid value for `target_system_id`, must not be `None`")  # noqa: E501

        self._target_system_id = target_system_id

    @property
    def throttles(self):
        """Gets the throttles of this ReplicationPartnerObj.  # noqa: E501

        Throttles used while replicating from/to this partner. All the throttles for the partner.  # noqa: E501

        :return: The throttles of this ReplicationPartnerObj.  # noqa: E501
        :rtype: list[ReplicationThrottle]
        """
        return self._throttles

    @throttles.setter
    def throttles(self, throttles):
        """Sets the throttles of this ReplicationPartnerObj.

        Throttles used while replicating from/to this partner. All the throttles for the partner.  # noqa: E501

        :param throttles: The throttles of this ReplicationPartnerObj.  # noqa: E501
        :type: list[ReplicationThrottle]
        """

        self._throttles = throttles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationPartnerObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
