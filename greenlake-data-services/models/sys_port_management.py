# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SysPortManagement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'SysAssociatedLinks',
        'authentication_required': 'str',
        'console_uri': 'str',
        'customer_id': 'str',
        'default_route_i_pv4': 'str',
        'default_route_i_pv6': 'str',
        'displayname': 'str',
        'dns_server': 'str',
        'domain': 'str',
        'generation': 'int',
        'id': 'str',
        'ip_v4_data': 'Address',
        'ip_v6_data': 'Address',
        'new_default_route_i_pv4': 'str',
        'new_default_route_i_pv6': 'str',
        'new_ip_v4_data': 'Address',
        'new_ipv6_data': 'Address',
        'ntp_server': 'str',
        'proxy_port': 'int',
        'proxy_protocol': 'str',
        'proxy_server': 'str',
        'proxy_user': 'str',
        'system_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'authentication_required': 'authenticationRequired',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'default_route_i_pv4': 'defaultRouteIPv4',
        'default_route_i_pv6': 'defaultRouteIPv6',
        'displayname': 'displayname',
        'dns_server': 'dnsServer',
        'domain': 'domain',
        'generation': 'generation',
        'id': 'id',
        'ip_v4_data': 'ipV4Data',
        'ip_v6_data': 'ipV6Data',
        'new_default_route_i_pv4': 'newDefaultRouteIPv4',
        'new_default_route_i_pv6': 'newDefaultRouteIPv6',
        'new_ip_v4_data': 'newIpV4Data',
        'new_ipv6_data': 'newIpv6Data',
        'ntp_server': 'ntpServer',
        'proxy_port': 'proxyPort',
        'proxy_protocol': 'proxyProtocol',
        'proxy_server': 'proxyServer',
        'proxy_user': 'proxyUser',
        'system_id': 'systemId',
        'type': 'type'
    }

    def __init__(self, associated_links=None, authentication_required=None, console_uri=None, customer_id=None, default_route_i_pv4=None, default_route_i_pv6=None, displayname=None, dns_server=None, domain=None, generation=None, id=None, ip_v4_data=None, ip_v6_data=None, new_default_route_i_pv4=None, new_default_route_i_pv6=None, new_ip_v4_data=None, new_ipv6_data=None, ntp_server=None, proxy_port=None, proxy_protocol=None, proxy_server=None, proxy_user=None, system_id=None, type=None):  # noqa: E501
        """SysPortManagement - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._authentication_required = None
        self._console_uri = None
        self._customer_id = None
        self._default_route_i_pv4 = None
        self._default_route_i_pv6 = None
        self._displayname = None
        self._dns_server = None
        self._domain = None
        self._generation = None
        self._id = None
        self._ip_v4_data = None
        self._ip_v6_data = None
        self._new_default_route_i_pv4 = None
        self._new_default_route_i_pv6 = None
        self._new_ip_v4_data = None
        self._new_ipv6_data = None
        self._ntp_server = None
        self._proxy_port = None
        self._proxy_protocol = None
        self._proxy_server = None
        self._proxy_user = None
        self._system_id = None
        self._type = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if authentication_required is not None:
            self.authentication_required = authentication_required
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if default_route_i_pv4 is not None:
            self.default_route_i_pv4 = default_route_i_pv4
        if default_route_i_pv6 is not None:
            self.default_route_i_pv6 = default_route_i_pv6
        if displayname is not None:
            self.displayname = displayname
        if dns_server is not None:
            self.dns_server = dns_server
        if domain is not None:
            self.domain = domain
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if ip_v4_data is not None:
            self.ip_v4_data = ip_v4_data
        if ip_v6_data is not None:
            self.ip_v6_data = ip_v6_data
        if new_default_route_i_pv4 is not None:
            self.new_default_route_i_pv4 = new_default_route_i_pv4
        if new_default_route_i_pv6 is not None:
            self.new_default_route_i_pv6 = new_default_route_i_pv6
        if new_ip_v4_data is not None:
            self.new_ip_v4_data = new_ip_v4_data
        if new_ipv6_data is not None:
            self.new_ipv6_data = new_ipv6_data
        if ntp_server is not None:
            self.ntp_server = ntp_server
        if proxy_port is not None:
            self.proxy_port = proxy_port
        if proxy_protocol is not None:
            self.proxy_protocol = proxy_protocol
        if proxy_server is not None:
            self.proxy_server = proxy_server
        if proxy_user is not None:
            self.proxy_user = proxy_user
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type

    @property
    def associated_links(self):
        """Gets the associated_links of this SysPortManagement.  # noqa: E501


        :return: The associated_links of this SysPortManagement.  # noqa: E501
        :rtype: SysAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this SysPortManagement.


        :param associated_links: The associated_links of this SysPortManagement.  # noqa: E501
        :type: SysAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def authentication_required(self):
        """Gets the authentication_required of this SysPortManagement.  # noqa: E501

        Is authentication required. Allowed values are enabled or disabled  # noqa: E501

        :return: The authentication_required of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._authentication_required

    @authentication_required.setter
    def authentication_required(self, authentication_required):
        """Sets the authentication_required of this SysPortManagement.

        Is authentication required. Allowed values are enabled or disabled  # noqa: E501

        :param authentication_required: The authentication_required of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._authentication_required = authentication_required

    @property
    def console_uri(self):
        """Gets the console_uri of this SysPortManagement.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this SysPortManagement.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this SysPortManagement.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SysPortManagement.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def default_route_i_pv4(self):
        """Gets the default_route_i_pv4 of this SysPortManagement.  # noqa: E501

        Default IPV4 route address of the network port  # noqa: E501

        :return: The default_route_i_pv4 of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._default_route_i_pv4

    @default_route_i_pv4.setter
    def default_route_i_pv4(self, default_route_i_pv4):
        """Sets the default_route_i_pv4 of this SysPortManagement.

        Default IPV4 route address of the network port  # noqa: E501

        :param default_route_i_pv4: The default_route_i_pv4 of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._default_route_i_pv4 = default_route_i_pv4

    @property
    def default_route_i_pv6(self):
        """Gets the default_route_i_pv6 of this SysPortManagement.  # noqa: E501

        Default IPV6 route address of the network port  # noqa: E501

        :return: The default_route_i_pv6 of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._default_route_i_pv6

    @default_route_i_pv6.setter
    def default_route_i_pv6(self, default_route_i_pv6):
        """Sets the default_route_i_pv6 of this SysPortManagement.

        Default IPV6 route address of the network port  # noqa: E501

        :param default_route_i_pv6: The default_route_i_pv6 of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._default_route_i_pv6 = default_route_i_pv6

    @property
    def displayname(self):
        """Gets the displayname of this SysPortManagement.  # noqa: E501

        Name to be used for display purposes  # noqa: E501

        :return: The displayname of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this SysPortManagement.

        Name to be used for display purposes  # noqa: E501

        :param displayname: The displayname of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def dns_server(self):
        """Gets the dns_server of this SysPortManagement.  # noqa: E501

        DNS Server of the network port  # noqa: E501

        :return: The dns_server of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._dns_server

    @dns_server.setter
    def dns_server(self, dns_server):
        """Sets the dns_server of this SysPortManagement.

        DNS Server of the network port  # noqa: E501

        :param dns_server: The dns_server of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._dns_server = dns_server

    @property
    def domain(self):
        """Gets the domain of this SysPortManagement.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SysPortManagement.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def generation(self):
        """Gets the generation of this SysPortManagement.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :return: The generation of this SysPortManagement.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this SysPortManagement.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :param generation: The generation of this SysPortManagement.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this SysPortManagement.  # noqa: E501

        Unique Identifier of the resource  # noqa: E501

        :return: The id of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SysPortManagement.

        Unique Identifier of the resource  # noqa: E501

        :param id: The id of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_v4_data(self):
        """Gets the ip_v4_data of this SysPortManagement.  # noqa: E501


        :return: The ip_v4_data of this SysPortManagement.  # noqa: E501
        :rtype: Address
        """
        return self._ip_v4_data

    @ip_v4_data.setter
    def ip_v4_data(self, ip_v4_data):
        """Sets the ip_v4_data of this SysPortManagement.


        :param ip_v4_data: The ip_v4_data of this SysPortManagement.  # noqa: E501
        :type: Address
        """

        self._ip_v4_data = ip_v4_data

    @property
    def ip_v6_data(self):
        """Gets the ip_v6_data of this SysPortManagement.  # noqa: E501


        :return: The ip_v6_data of this SysPortManagement.  # noqa: E501
        :rtype: Address
        """
        return self._ip_v6_data

    @ip_v6_data.setter
    def ip_v6_data(self, ip_v6_data):
        """Sets the ip_v6_data of this SysPortManagement.


        :param ip_v6_data: The ip_v6_data of this SysPortManagement.  # noqa: E501
        :type: Address
        """

        self._ip_v6_data = ip_v6_data

    @property
    def new_default_route_i_pv4(self):
        """Gets the new_default_route_i_pv4 of this SysPortManagement.  # noqa: E501

        New default IPV4 route address of the network port  # noqa: E501

        :return: The new_default_route_i_pv4 of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._new_default_route_i_pv4

    @new_default_route_i_pv4.setter
    def new_default_route_i_pv4(self, new_default_route_i_pv4):
        """Sets the new_default_route_i_pv4 of this SysPortManagement.

        New default IPV4 route address of the network port  # noqa: E501

        :param new_default_route_i_pv4: The new_default_route_i_pv4 of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._new_default_route_i_pv4 = new_default_route_i_pv4

    @property
    def new_default_route_i_pv6(self):
        """Gets the new_default_route_i_pv6 of this SysPortManagement.  # noqa: E501

        New default IPV6 route address of the network port  # noqa: E501

        :return: The new_default_route_i_pv6 of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._new_default_route_i_pv6

    @new_default_route_i_pv6.setter
    def new_default_route_i_pv6(self, new_default_route_i_pv6):
        """Sets the new_default_route_i_pv6 of this SysPortManagement.

        New default IPV6 route address of the network port  # noqa: E501

        :param new_default_route_i_pv6: The new_default_route_i_pv6 of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._new_default_route_i_pv6 = new_default_route_i_pv6

    @property
    def new_ip_v4_data(self):
        """Gets the new_ip_v4_data of this SysPortManagement.  # noqa: E501


        :return: The new_ip_v4_data of this SysPortManagement.  # noqa: E501
        :rtype: Address
        """
        return self._new_ip_v4_data

    @new_ip_v4_data.setter
    def new_ip_v4_data(self, new_ip_v4_data):
        """Sets the new_ip_v4_data of this SysPortManagement.


        :param new_ip_v4_data: The new_ip_v4_data of this SysPortManagement.  # noqa: E501
        :type: Address
        """

        self._new_ip_v4_data = new_ip_v4_data

    @property
    def new_ipv6_data(self):
        """Gets the new_ipv6_data of this SysPortManagement.  # noqa: E501


        :return: The new_ipv6_data of this SysPortManagement.  # noqa: E501
        :rtype: Address
        """
        return self._new_ipv6_data

    @new_ipv6_data.setter
    def new_ipv6_data(self, new_ipv6_data):
        """Sets the new_ipv6_data of this SysPortManagement.


        :param new_ipv6_data: The new_ipv6_data of this SysPortManagement.  # noqa: E501
        :type: Address
        """

        self._new_ipv6_data = new_ipv6_data

    @property
    def ntp_server(self):
        """Gets the ntp_server of this SysPortManagement.  # noqa: E501

        NTP Server of the network port  # noqa: E501

        :return: The ntp_server of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._ntp_server

    @ntp_server.setter
    def ntp_server(self, ntp_server):
        """Sets the ntp_server of this SysPortManagement.

        NTP Server of the network port  # noqa: E501

        :param ntp_server: The ntp_server of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._ntp_server = ntp_server

    @property
    def proxy_port(self):
        """Gets the proxy_port of this SysPortManagement.  # noqa: E501

        Proxy Server Port. Allowed values are 1-65535  # noqa: E501

        :return: The proxy_port of this SysPortManagement.  # noqa: E501
        :rtype: int
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """Sets the proxy_port of this SysPortManagement.

        Proxy Server Port. Allowed values are 1-65535  # noqa: E501

        :param proxy_port: The proxy_port of this SysPortManagement.  # noqa: E501
        :type: int
        """

        self._proxy_port = proxy_port

    @property
    def proxy_protocol(self):
        """Gets the proxy_protocol of this SysPortManagement.  # noqa: E501

        Supported proxy protocols are HTTP, SOCKS4 and SOCKS5.  # noqa: E501

        :return: The proxy_protocol of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._proxy_protocol

    @proxy_protocol.setter
    def proxy_protocol(self, proxy_protocol):
        """Sets the proxy_protocol of this SysPortManagement.

        Supported proxy protocols are HTTP, SOCKS4 and SOCKS5.  # noqa: E501

        :param proxy_protocol: The proxy_protocol of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._proxy_protocol = proxy_protocol

    @property
    def proxy_server(self):
        """Gets the proxy_server of this SysPortManagement.  # noqa: E501

        Proxy server IP address  # noqa: E501

        :return: The proxy_server of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server

    @proxy_server.setter
    def proxy_server(self, proxy_server):
        """Sets the proxy_server of this SysPortManagement.

        Proxy server IP address  # noqa: E501

        :param proxy_server: The proxy_server of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._proxy_server = proxy_server

    @property
    def proxy_user(self):
        """Gets the proxy_user of this SysPortManagement.  # noqa: E501

        Username for authentication. (Required only if Authentication required is enabled)  # noqa: E501

        :return: The proxy_user of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._proxy_user

    @proxy_user.setter
    def proxy_user(self, proxy_user):
        """Sets the proxy_user of this SysPortManagement.

        Username for authentication. (Required only if Authentication required is enabled)  # noqa: E501

        :param proxy_user: The proxy_user of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._proxy_user = proxy_user

    @property
    def system_id(self):
        """Gets the system_id of this SysPortManagement.  # noqa: E501

        Serial Number of the array  # noqa: E501

        :return: The system_id of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SysPortManagement.

        Serial Number of the array  # noqa: E501

        :param system_id: The system_id of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this SysPortManagement.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this SysPortManagement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SysPortManagement.

        The type of resource.  # noqa: E501

        :param type: The type of this SysPortManagement.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SysPortManagement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
