# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimblePerformancePolicyFieldsWithoutSortKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_category': 'str',
        'cache': 'bool',
        'cache_policy': 'str',
        'compress': 'bool',
        'creation_time': 'int',
        'dedupe_enabled': 'bool',
        'id': 'str',
        'last_modified': 'int',
        'name': 'str',
        'predefined': 'bool',
        'space_policy': 'str'
    }

    attribute_map = {
        'app_category': 'app_category',
        'cache': 'cache',
        'cache_policy': 'cache_policy',
        'compress': 'compress',
        'creation_time': 'creation_time',
        'dedupe_enabled': 'dedupe_enabled',
        'id': 'id',
        'last_modified': 'last_modified',
        'name': 'name',
        'predefined': 'predefined',
        'space_policy': 'space_policy'
    }

    def __init__(self, app_category=None, cache=None, cache_policy=None, compress=None, creation_time=None, dedupe_enabled=None, id=None, last_modified=None, name=None, predefined=None, space_policy=None):  # noqa: E501
        """NimblePerformancePolicyFieldsWithoutSortKey - a model defined in OpenAPI"""  # noqa: E501

        self._app_category = None
        self._cache = None
        self._cache_policy = None
        self._compress = None
        self._creation_time = None
        self._dedupe_enabled = None
        self._id = None
        self._last_modified = None
        self._name = None
        self._predefined = None
        self._space_policy = None
        self.discriminator = None

        if app_category is not None:
            self.app_category = app_category
        if cache is not None:
            self.cache = cache
        if cache_policy is not None:
            self.cache_policy = cache_policy
        if compress is not None:
            self.compress = compress
        if creation_time is not None:
            self.creation_time = creation_time
        if dedupe_enabled is not None:
            self.dedupe_enabled = dedupe_enabled
        if id is not None:
            self.id = id
        if last_modified is not None:
            self.last_modified = last_modified
        if name is not None:
            self.name = name
        if predefined is not None:
            self.predefined = predefined
        if space_policy is not None:
            self.space_policy = space_policy

    @property
    def app_category(self):
        """Gets the app_category of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Specifies the application category of the associated volume.  # noqa: E501

        :return: The app_category of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._app_category

    @app_category.setter
    def app_category(self, app_category):
        """Sets the app_category of this NimblePerformancePolicyFieldsWithoutSortKey.

        Specifies the application category of the associated volume.  # noqa: E501

        :param app_category: The app_category of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._app_category = app_category

    @property
    def cache(self):
        """Gets the cache of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Flag denoting if data in the associated volume should be cached.  # noqa: E501

        :return: The cache of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this NimblePerformancePolicyFieldsWithoutSortKey.

        Flag denoting if data in the associated volume should be cached.  # noqa: E501

        :param cache: The cache of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: bool
        """

        self._cache = cache

    @property
    def cache_policy(self):
        """Gets the cache_policy of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Specifies how data of associated volume should be cached. Supports two policies, 'normal' and 'aggressive'. 'normal' policy caches data but skips in certain conditions such as sequential I/O. 'aggressive' policy will accelerate caching of all data belonging to this volume, regardless of sequentiality. Possible values:'normal', 'no_write', 'aggressive_read_no_write', 'disabled', 'aggressive'.  # noqa: E501

        :return: The cache_policy of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._cache_policy

    @cache_policy.setter
    def cache_policy(self, cache_policy):
        """Sets the cache_policy of this NimblePerformancePolicyFieldsWithoutSortKey.

        Specifies how data of associated volume should be cached. Supports two policies, 'normal' and 'aggressive'. 'normal' policy caches data but skips in certain conditions such as sequential I/O. 'aggressive' policy will accelerate caching of all data belonging to this volume, regardless of sequentiality. Possible values:'normal', 'no_write', 'aggressive_read_no_write', 'disabled', 'aggressive'.  # noqa: E501

        :param cache_policy: The cache_policy of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._cache_policy = cache_policy

    @property
    def compress(self):
        """Gets the compress of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Flag denoting if data in the associated volume should be compressed.  # noqa: E501

        :return: The compress of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: bool
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this NimblePerformancePolicyFieldsWithoutSortKey.

        Flag denoting if data in the associated volume should be compressed.  # noqa: E501

        :param compress: The compress of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: bool
        """

        self._compress = compress

    @property
    def creation_time(self):
        """Gets the creation_time of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Time when the performance policy was created.  # noqa: E501

        :return: The creation_time of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimblePerformancePolicyFieldsWithoutSortKey.

        Time when the performance policy was created.  # noqa: E501

        :param creation_time: The creation_time of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def dedupe_enabled(self):
        """Gets the dedupe_enabled of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Specifies if dedupe is enabled for volumes created with this performance policy.  # noqa: E501

        :return: The dedupe_enabled of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_enabled

    @dedupe_enabled.setter
    def dedupe_enabled(self, dedupe_enabled):
        """Sets the dedupe_enabled of this NimblePerformancePolicyFieldsWithoutSortKey.

        Specifies if dedupe is enabled for volumes created with this performance policy.  # noqa: E501

        :param dedupe_enabled: The dedupe_enabled of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: bool
        """

        self._dedupe_enabled = dedupe_enabled

    @property
    def id(self):
        """Gets the id of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Unique Identifier for the Performance Policy.  # noqa: E501

        :return: The id of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimblePerformancePolicyFieldsWithoutSortKey.

        Unique Identifier for the Performance Policy.  # noqa: E501

        :param id: The id of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Time when the performance policy's configurations were last modified.  # noqa: E501

        :return: The last_modified of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimblePerformancePolicyFieldsWithoutSortKey.

        Time when the performance policy's configurations were last modified.  # noqa: E501

        :param last_modified: The last_modified of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Name of the Performance Policy.  # noqa: E501

        :return: The name of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimblePerformancePolicyFieldsWithoutSortKey.

        Name of the Performance Policy.  # noqa: E501

        :param name: The name of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def predefined(self):
        """Gets the predefined of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Specifies if this performance policy is predefined (read-only).  # noqa: E501

        :return: The predefined of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: bool
        """
        return self._predefined

    @predefined.setter
    def predefined(self, predefined):
        """Sets the predefined of this NimblePerformancePolicyFieldsWithoutSortKey.

        Specifies if this performance policy is predefined (read-only).  # noqa: E501

        :param predefined: The predefined of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: bool
        """

        self._predefined = predefined

    @property
    def space_policy(self):
        """Gets the space_policy of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501

        Specifies the state of the volume upon space constraint violation such as volume limit violation or volumes above their volume reserve, if the pool free space is exhausted. Supports two policies, 'offline' and 'non_writable'. Possible values:'offline', 'login_only', 'non_writable', 'read_only', 'invalid'.  # noqa: E501

        :return: The space_policy of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._space_policy

    @space_policy.setter
    def space_policy(self, space_policy):
        """Sets the space_policy of this NimblePerformancePolicyFieldsWithoutSortKey.

        Specifies the state of the volume upon space constraint violation such as volume limit violation or volumes above their volume reserve, if the pool free space is exhausted. Supports two policies, 'offline' and 'non_writable'. Possible values:'offline', 'login_only', 'non_writable', 'read_only', 'invalid'.  # noqa: E501

        :param space_policy: The space_policy of this NimblePerformancePolicyFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._space_policy = space_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimblePerformancePolicyFieldsWithoutSortKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
