# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReplicationPartnerCommonFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'list[PrimeraVolumeDetailsAssociatedLinks]',
        'buffer_size_b': 'int',
        'customer_id': 'str',
        'display_name': 'str',
        'domain': 'str',
        'flags': 'int',
        'generation': 'int',
        'health': 'int',
        'is_remote_array_support_replication': 'bool',
        'min_period_secs': 'int',
        'node_wwn': 'str',
        'num_sockets': 'int',
        'policies': 'ReplicationPartnerCommonFieldsPolicies',
        'quorum_atf_timeout': 'int',
        'quorum_ip_address': 'str',
        'quorum_ssl_port': 'int',
        'quorum_status': 'str',
        'quorum_status_qual': 'str',
        'quorum_version': 'str',
        'remote_id': 'str',
        'remote_name': 'str',
        'remote_replication_id': 'int',
        'remote_system_id': 'str',
        'remote_system_name': 'str',
        'replication_id': 'int',
        'replication_partner_links': 'RemoteCopyLinks',
        'replication_system_id': 'int',
        'resource_uri': 'str',
        'state': 'str',
        'system_id': 'str',
        'system_name': 'str',
        'system_wwn': 'str',
        'type': 'str',
        'version': 'int'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'buffer_size_b': 'bufferSizeB',
        'customer_id': 'customerId',
        'display_name': 'displayName',
        'domain': 'domain',
        'flags': 'flags',
        'generation': 'generation',
        'health': 'health',
        'is_remote_array_support_replication': 'isRemoteArraySupportReplication',
        'min_period_secs': 'minPeriodSecs',
        'node_wwn': 'nodeWWN',
        'num_sockets': 'numSockets',
        'policies': 'policies',
        'quorum_atf_timeout': 'quorumATFTimeout',
        'quorum_ip_address': 'quorumIpAddress',
        'quorum_ssl_port': 'quorumSSLPort',
        'quorum_status': 'quorumStatus',
        'quorum_status_qual': 'quorumStatusQual',
        'quorum_version': 'quorumVersion',
        'remote_id': 'remoteId',
        'remote_name': 'remoteName',
        'remote_replication_id': 'remoteReplicationId',
        'remote_system_id': 'remoteSystemId',
        'remote_system_name': 'remoteSystemName',
        'replication_id': 'replicationId',
        'replication_partner_links': 'replicationPartnerLinks',
        'replication_system_id': 'replicationSystemId',
        'resource_uri': 'resourceUri',
        'state': 'state',
        'system_id': 'systemId',
        'system_name': 'systemName',
        'system_wwn': 'systemWWN',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, associated_links=None, buffer_size_b=None, customer_id=None, display_name=None, domain=None, flags=None, generation=None, health=None, is_remote_array_support_replication=None, min_period_secs=None, node_wwn=None, num_sockets=None, policies=None, quorum_atf_timeout=None, quorum_ip_address=None, quorum_ssl_port=None, quorum_status=None, quorum_status_qual=None, quorum_version=None, remote_id=None, remote_name=None, remote_replication_id=None, remote_system_id=None, remote_system_name=None, replication_id=None, replication_partner_links=None, replication_system_id=None, resource_uri=None, state=None, system_id=None, system_name=None, system_wwn=None, type=None, version=None):  # noqa: E501
        """ReplicationPartnerCommonFields - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._buffer_size_b = None
        self._customer_id = None
        self._display_name = None
        self._domain = None
        self._flags = None
        self._generation = None
        self._health = None
        self._is_remote_array_support_replication = None
        self._min_period_secs = None
        self._node_wwn = None
        self._num_sockets = None
        self._policies = None
        self._quorum_atf_timeout = None
        self._quorum_ip_address = None
        self._quorum_ssl_port = None
        self._quorum_status = None
        self._quorum_status_qual = None
        self._quorum_version = None
        self._remote_id = None
        self._remote_name = None
        self._remote_replication_id = None
        self._remote_system_id = None
        self._remote_system_name = None
        self._replication_id = None
        self._replication_partner_links = None
        self._replication_system_id = None
        self._resource_uri = None
        self._state = None
        self._system_id = None
        self._system_name = None
        self._system_wwn = None
        self._type = None
        self._version = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if buffer_size_b is not None:
            self.buffer_size_b = buffer_size_b
        if customer_id is not None:
            self.customer_id = customer_id
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if flags is not None:
            self.flags = flags
        if generation is not None:
            self.generation = generation
        if health is not None:
            self.health = health
        if is_remote_array_support_replication is not None:
            self.is_remote_array_support_replication = is_remote_array_support_replication
        if min_period_secs is not None:
            self.min_period_secs = min_period_secs
        if node_wwn is not None:
            self.node_wwn = node_wwn
        if num_sockets is not None:
            self.num_sockets = num_sockets
        if policies is not None:
            self.policies = policies
        if quorum_atf_timeout is not None:
            self.quorum_atf_timeout = quorum_atf_timeout
        if quorum_ip_address is not None:
            self.quorum_ip_address = quorum_ip_address
        if quorum_ssl_port is not None:
            self.quorum_ssl_port = quorum_ssl_port
        if quorum_status is not None:
            self.quorum_status = quorum_status
        if quorum_status_qual is not None:
            self.quorum_status_qual = quorum_status_qual
        if quorum_version is not None:
            self.quorum_version = quorum_version
        if remote_id is not None:
            self.remote_id = remote_id
        if remote_name is not None:
            self.remote_name = remote_name
        if remote_replication_id is not None:
            self.remote_replication_id = remote_replication_id
        if remote_system_id is not None:
            self.remote_system_id = remote_system_id
        if remote_system_name is not None:
            self.remote_system_name = remote_system_name
        if replication_id is not None:
            self.replication_id = replication_id
        if replication_partner_links is not None:
            self.replication_partner_links = replication_partner_links
        if replication_system_id is not None:
            self.replication_system_id = replication_system_id
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if state is not None:
            self.state = state
        if system_id is not None:
            self.system_id = system_id
        if system_name is not None:
            self.system_name = system_name
        if system_wwn is not None:
            self.system_wwn = system_wwn
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def associated_links(self):
        """Gets the associated_links of this ReplicationPartnerCommonFields.  # noqa: E501

        Associated Links  # noqa: E501

        :return: The associated_links of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: list[PrimeraVolumeDetailsAssociatedLinks]
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this ReplicationPartnerCommonFields.

        Associated Links  # noqa: E501

        :param associated_links: The associated_links of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: list[PrimeraVolumeDetailsAssociatedLinks]
        """

        self._associated_links = associated_links

    @property
    def buffer_size_b(self):
        """Gets the buffer_size_b of this ReplicationPartnerCommonFields.  # noqa: E501

        Socket buffer size to use.  # noqa: E501

        :return: The buffer_size_b of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._buffer_size_b

    @buffer_size_b.setter
    def buffer_size_b(self, buffer_size_b):
        """Sets the buffer_size_b of this ReplicationPartnerCommonFields.

        Socket buffer size to use.  # noqa: E501

        :param buffer_size_b: The buffer_size_b of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._buffer_size_b = buffer_size_b

    @property
    def customer_id(self):
        """Gets the customer_id of this ReplicationPartnerCommonFields.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ReplicationPartnerCommonFields.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def display_name(self):
        """Gets the display_name of this ReplicationPartnerCommonFields.  # noqa: E501

        Replication partner displayname.  # noqa: E501

        :return: The display_name of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ReplicationPartnerCommonFields.

        Replication partner displayname.  # noqa: E501

        :param display_name: The display_name of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self):
        """Gets the domain of this ReplicationPartnerCommonFields.  # noqa: E501

        Domain that the resource belongs to.  # noqa: E501

        :return: The domain of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ReplicationPartnerCommonFields.

        Domain that the resource belongs to.  # noqa: E501

        :param domain: The domain of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def flags(self):
        """Gets the flags of this ReplicationPartnerCommonFields.  # noqa: E501

        Partner flags.  # noqa: E501

        :return: The flags of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this ReplicationPartnerCommonFields.

        Partner flags.  # noqa: E501

        :param flags: The flags of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._flags = flags

    @property
    def generation(self):
        """Gets the generation of this ReplicationPartnerCommonFields.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this ReplicationPartnerCommonFields.

        generation  # noqa: E501

        :param generation: The generation of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def health(self):
        """Gets the health of this ReplicationPartnerCommonFields.  # noqa: E501

        Partner health status.  # noqa: E501

        :return: The health of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this ReplicationPartnerCommonFields.

        Partner health status.  # noqa: E501

        :param health: The health of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._health = health

    @property
    def is_remote_array_support_replication(self):
        """Gets the is_remote_array_support_replication of this ReplicationPartnerCommonFields.  # noqa: E501

        Boolean value to indicate if remote array OS version supports replication  # noqa: E501

        :return: The is_remote_array_support_replication of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_remote_array_support_replication

    @is_remote_array_support_replication.setter
    def is_remote_array_support_replication(self, is_remote_array_support_replication):
        """Sets the is_remote_array_support_replication of this ReplicationPartnerCommonFields.

        Boolean value to indicate if remote array OS version supports replication  # noqa: E501

        :param is_remote_array_support_replication: The is_remote_array_support_replication of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: bool
        """

        self._is_remote_array_support_replication = is_remote_array_support_replication

    @property
    def min_period_secs(self):
        """Gets the min_period_secs of this ReplicationPartnerCommonFields.  # noqa: E501

        Minimum supported Async Periodic period for the partner. The field is omitted if unset or unavailable for the version of partner firmware.  # noqa: E501

        :return: The min_period_secs of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._min_period_secs

    @min_period_secs.setter
    def min_period_secs(self, min_period_secs):
        """Sets the min_period_secs of this ReplicationPartnerCommonFields.

        Minimum supported Async Periodic period for the partner. The field is omitted if unset or unavailable for the version of partner firmware.  # noqa: E501

        :param min_period_secs: The min_period_secs of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._min_period_secs = min_period_secs

    @property
    def node_wwn(self):
        """Gets the node_wwn of this ReplicationPartnerCommonFields.  # noqa: E501

        Partner options, with FC partners this includes the partner system's node WWN. Omitted if unpopulated.  # noqa: E501

        :return: The node_wwn of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._node_wwn

    @node_wwn.setter
    def node_wwn(self, node_wwn):
        """Sets the node_wwn of this ReplicationPartnerCommonFields.

        Partner options, with FC partners this includes the partner system's node WWN. Omitted if unpopulated.  # noqa: E501

        :param node_wwn: The node_wwn of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._node_wwn = node_wwn

    @property
    def num_sockets(self):
        """Gets the num_sockets of this ReplicationPartnerCommonFields.  # noqa: E501

        Number of sockets to use.  # noqa: E501

        :return: The num_sockets of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._num_sockets

    @num_sockets.setter
    def num_sockets(self, num_sockets):
        """Sets the num_sockets of this ReplicationPartnerCommonFields.

        Number of sockets to use.  # noqa: E501

        :param num_sockets: The num_sockets of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._num_sockets = num_sockets

    @property
    def policies(self):
        """Gets the policies of this ReplicationPartnerCommonFields.  # noqa: E501


        :return: The policies of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: ReplicationPartnerCommonFieldsPolicies
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this ReplicationPartnerCommonFields.


        :param policies: The policies of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: ReplicationPartnerCommonFieldsPolicies
        """

        self._policies = policies

    @property
    def quorum_atf_timeout(self):
        """Gets the quorum_atf_timeout of this ReplicationPartnerCommonFields.  # noqa: E501

        Automatic Transparent Failover quorum partner failure timeout.  # noqa: E501

        :return: The quorum_atf_timeout of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._quorum_atf_timeout

    @quorum_atf_timeout.setter
    def quorum_atf_timeout(self, quorum_atf_timeout):
        """Sets the quorum_atf_timeout of this ReplicationPartnerCommonFields.

        Automatic Transparent Failover quorum partner failure timeout.  # noqa: E501

        :param quorum_atf_timeout: The quorum_atf_timeout of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._quorum_atf_timeout = quorum_atf_timeout

    @property
    def quorum_ip_address(self):
        """Gets the quorum_ip_address of this ReplicationPartnerCommonFields.  # noqa: E501

        Quorum IP Address associated with the partner. Set to 'NA' if not available.  # noqa: E501

        :return: The quorum_ip_address of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._quorum_ip_address

    @quorum_ip_address.setter
    def quorum_ip_address(self, quorum_ip_address):
        """Sets the quorum_ip_address of this ReplicationPartnerCommonFields.

        Quorum IP Address associated with the partner. Set to 'NA' if not available.  # noqa: E501

        :param quorum_ip_address: The quorum_ip_address of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._quorum_ip_address = quorum_ip_address

    @property
    def quorum_ssl_port(self):
        """Gets the quorum_ssl_port of this ReplicationPartnerCommonFields.  # noqa: E501

        Quorum SSL port number.  # noqa: E501

        :return: The quorum_ssl_port of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._quorum_ssl_port

    @quorum_ssl_port.setter
    def quorum_ssl_port(self, quorum_ssl_port):
        """Sets the quorum_ssl_port of this ReplicationPartnerCommonFields.

        Quorum SSL port number.  # noqa: E501

        :param quorum_ssl_port: The quorum_ssl_port of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._quorum_ssl_port = quorum_ssl_port

    @property
    def quorum_status(self):
        """Gets the quorum_status of this ReplicationPartnerCommonFields.  # noqa: E501

        Quorum status of the partner. Possible values - Uninitialized, Initializing, Standby, Active, Failsafe, Failover or Restarting. Null if unset.  # noqa: E501

        :return: The quorum_status of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._quorum_status

    @quorum_status.setter
    def quorum_status(self, quorum_status):
        """Sets the quorum_status of this ReplicationPartnerCommonFields.

        Quorum status of the partner. Possible values - Uninitialized, Initializing, Standby, Active, Failsafe, Failover or Restarting. Null if unset.  # noqa: E501

        :param quorum_status: The quorum_status of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._quorum_status = quorum_status

    @property
    def quorum_status_qual(self):
        """Gets the quorum_status_qual of this ReplicationPartnerCommonFields.  # noqa: E501

        Quorum status qualifier. Set to 'NA' if not available.  # noqa: E501

        :return: The quorum_status_qual of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._quorum_status_qual

    @quorum_status_qual.setter
    def quorum_status_qual(self, quorum_status_qual):
        """Sets the quorum_status_qual of this ReplicationPartnerCommonFields.

        Quorum status qualifier. Set to 'NA' if not available.  # noqa: E501

        :param quorum_status_qual: The quorum_status_qual of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._quorum_status_qual = quorum_status_qual

    @property
    def quorum_version(self):
        """Gets the quorum_version of this ReplicationPartnerCommonFields.  # noqa: E501

        Quorum version.  # noqa: E501

        :return: The quorum_version of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._quorum_version

    @quorum_version.setter
    def quorum_version(self, quorum_version):
        """Sets the quorum_version of this ReplicationPartnerCommonFields.

        Quorum version.  # noqa: E501

        :param quorum_version: The quorum_version of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._quorum_version = quorum_version

    @property
    def remote_id(self):
        """Gets the remote_id of this ReplicationPartnerCommonFields.  # noqa: E501

        Unique id of the remote replication partner.  # noqa: E501

        :return: The remote_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this ReplicationPartnerCommonFields.

        Unique id of the remote replication partner.  # noqa: E501

        :param remote_id: The remote_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def remote_name(self):
        """Gets the remote_name of this ReplicationPartnerCommonFields.  # noqa: E501

        Name of the remote replication partner.  # noqa: E501

        :return: The remote_name of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._remote_name

    @remote_name.setter
    def remote_name(self, remote_name):
        """Sets the remote_name of this ReplicationPartnerCommonFields.

        Name of the remote replication partner.  # noqa: E501

        :param remote_name: The remote_name of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._remote_name = remote_name

    @property
    def remote_replication_id(self):
        """Gets the remote_replication_id of this ReplicationPartnerCommonFields.  # noqa: E501

        Replication ID of the remote replication partner.  # noqa: E501

        :return: The remote_replication_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._remote_replication_id

    @remote_replication_id.setter
    def remote_replication_id(self, remote_replication_id):
        """Sets the remote_replication_id of this ReplicationPartnerCommonFields.

        Replication ID of the remote replication partner.  # noqa: E501

        :param remote_replication_id: The remote_replication_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._remote_replication_id = remote_replication_id

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this ReplicationPartnerCommonFields.  # noqa: E501

        Unique ID or serial number of the remote system.  # noqa: E501

        :return: The remote_system_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this ReplicationPartnerCommonFields.

        Unique ID or serial number of the remote system.  # noqa: E501

        :param remote_system_id: The remote_system_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._remote_system_id = remote_system_id

    @property
    def remote_system_name(self):
        """Gets the remote_system_name of this ReplicationPartnerCommonFields.  # noqa: E501

        Name of the remote system.  # noqa: E501

        :return: The remote_system_name of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_name

    @remote_system_name.setter
    def remote_system_name(self, remote_system_name):
        """Sets the remote_system_name of this ReplicationPartnerCommonFields.

        Name of the remote system.  # noqa: E501

        :param remote_system_name: The remote_system_name of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._remote_system_name = remote_system_name

    @property
    def replication_id(self):
        """Gets the replication_id of this ReplicationPartnerCommonFields.  # noqa: E501

        Replication ID of the partner.  # noqa: E501

        :return: The replication_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._replication_id

    @replication_id.setter
    def replication_id(self, replication_id):
        """Sets the replication_id of this ReplicationPartnerCommonFields.

        Replication ID of the partner.  # noqa: E501

        :param replication_id: The replication_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._replication_id = replication_id

    @property
    def replication_partner_links(self):
        """Gets the replication_partner_links of this ReplicationPartnerCommonFields.  # noqa: E501


        :return: The replication_partner_links of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: RemoteCopyLinks
        """
        return self._replication_partner_links

    @replication_partner_links.setter
    def replication_partner_links(self, replication_partner_links):
        """Sets the replication_partner_links of this ReplicationPartnerCommonFields.


        :param replication_partner_links: The replication_partner_links of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: RemoteCopyLinks
        """

        self._replication_partner_links = replication_partner_links

    @property
    def replication_system_id(self):
        """Gets the replication_system_id of this ReplicationPartnerCommonFields.  # noqa: E501

        ID of the remote system.  # noqa: E501

        :return: The replication_system_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._replication_system_id

    @replication_system_id.setter
    def replication_system_id(self, replication_system_id):
        """Sets the replication_system_id of this ReplicationPartnerCommonFields.

        ID of the remote system.  # noqa: E501

        :param replication_system_id: The replication_system_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._replication_system_id = replication_system_id

    @property
    def resource_uri(self):
        """Gets the resource_uri of this ReplicationPartnerCommonFields.  # noqa: E501

        resourceUri for detailed replication partner object  # noqa: E501

        :return: The resource_uri of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this ReplicationPartnerCommonFields.

        resourceUri for detailed replication partner object  # noqa: E501

        :param resource_uri: The resource_uri of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def state(self):
        """Gets the state of this ReplicationPartnerCommonFields.  # noqa: E501

        State of the replication partner.  # noqa: E501

        :return: The state of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReplicationPartnerCommonFields.

        State of the replication partner.  # noqa: E501

        :param state: The state of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def system_id(self):
        """Gets the system_id of this ReplicationPartnerCommonFields.  # noqa: E501

        Unique ID or serial number of the system.  # noqa: E501

        :return: The system_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this ReplicationPartnerCommonFields.

        Unique ID or serial number of the system.  # noqa: E501

        :param system_id: The system_id of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_name(self):
        """Gets the system_name of this ReplicationPartnerCommonFields.  # noqa: E501

        Name of the system.  # noqa: E501

        :return: The system_name of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this ReplicationPartnerCommonFields.

        Name of the system.  # noqa: E501

        :param system_name: The system_name of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def system_wwn(self):
        """Gets the system_wwn of this ReplicationPartnerCommonFields.  # noqa: E501

        WWN of the system.  # noqa: E501

        :return: The system_wwn of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._system_wwn

    @system_wwn.setter
    def system_wwn(self, system_wwn):
        """Sets the system_wwn of this ReplicationPartnerCommonFields.

        WWN of the system.  # noqa: E501

        :param system_wwn: The system_wwn of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._system_wwn = system_wwn

    @property
    def type(self):
        """Gets the type of this ReplicationPartnerCommonFields.  # noqa: E501

        type  # noqa: E501

        :return: The type of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReplicationPartnerCommonFields.

        type  # noqa: E501

        :param type: The type of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this ReplicationPartnerCommonFields.  # noqa: E501

        Partner version.  # noqa: E501

        :return: The version of this ReplicationPartnerCommonFields.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReplicationPartnerCommonFields.

        Partner version.  # noqa: E501

        :param version: The version of this ReplicationPartnerCommonFields.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationPartnerCommonFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
