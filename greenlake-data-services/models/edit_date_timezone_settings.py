# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditDateTimezoneSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'int',
        'ntp_server': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'date': 'date',
        'ntp_server': 'ntp_server',
        'timezone': 'timezone'
    }

    def __init__(self, date=None, ntp_server=None, timezone=None):  # noqa: E501
        """EditDateTimezoneSettings - a model defined in OpenAPI"""  # noqa: E501

        self._date = None
        self._ntp_server = None
        self._timezone = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if ntp_server is not None:
            self.ntp_server = ntp_server
        if timezone is not None:
            self.timezone = timezone

    @property
    def date(self):
        """Gets the date of this EditDateTimezoneSettings.  # noqa: E501

        Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970. Setting this along with ntp_server causes ntp_server to be reset.  # noqa: E501

        :return: The date of this EditDateTimezoneSettings.  # noqa: E501
        :rtype: int
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this EditDateTimezoneSettings.

        Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970. Setting this along with ntp_server causes ntp_server to be reset.  # noqa: E501

        :param date: The date of this EditDateTimezoneSettings.  # noqa: E501
        :type: int
        """

        self._date = date

    @property
    def ntp_server(self):
        """Gets the ntp_server of this EditDateTimezoneSettings.  # noqa: E501

        Either IP address or hostname of the NTP server for this group.  # noqa: E501

        :return: The ntp_server of this EditDateTimezoneSettings.  # noqa: E501
        :rtype: str
        """
        return self._ntp_server

    @ntp_server.setter
    def ntp_server(self, ntp_server):
        """Sets the ntp_server of this EditDateTimezoneSettings.

        Either IP address or hostname of the NTP server for this group.  # noqa: E501

        :param ntp_server: The ntp_server of this EditDateTimezoneSettings.  # noqa: E501
        :type: str
        """

        self._ntp_server = ntp_server

    @property
    def timezone(self):
        """Gets the timezone of this EditDateTimezoneSettings.  # noqa: E501

        Timezone in which this group is located. Plain string.  # noqa: E501

        :return: The timezone of this EditDateTimezoneSettings.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this EditDateTimezoneSettings.

        Timezone in which this group is located. Plain string.  # noqa: E501

        :param timezone: The timezone of this EditDateTimezoneSettings.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditDateTimezoneSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
