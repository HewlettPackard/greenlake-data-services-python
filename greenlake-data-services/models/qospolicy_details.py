# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class QospolicyDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'qos_capped_objs_data': 'CappedObjData',
        'qos_un_capped_objs_data': 'UncappedObjData',
        'recvd_total': 'int',
        'total': 'int'
    }

    attribute_map = {
        'qos_capped_objs_data': 'qosCappedObjsData',
        'qos_un_capped_objs_data': 'qosUnCappedObjsData',
        'recvd_total': 'recvdTotal',
        'total': 'total'
    }

    def __init__(self, qos_capped_objs_data=None, qos_un_capped_objs_data=None, recvd_total=None, total=None):  # noqa: E501
        """QospolicyDetails - a model defined in OpenAPI"""  # noqa: E501

        self._qos_capped_objs_data = None
        self._qos_un_capped_objs_data = None
        self._recvd_total = None
        self._total = None
        self.discriminator = None

        if qos_capped_objs_data is not None:
            self.qos_capped_objs_data = qos_capped_objs_data
        if qos_un_capped_objs_data is not None:
            self.qos_un_capped_objs_data = qos_un_capped_objs_data
        if recvd_total is not None:
            self.recvd_total = recvd_total
        if total is not None:
            self.total = total

    @property
    def qos_capped_objs_data(self):
        """Gets the qos_capped_objs_data of this QospolicyDetails.  # noqa: E501


        :return: The qos_capped_objs_data of this QospolicyDetails.  # noqa: E501
        :rtype: CappedObjData
        """
        return self._qos_capped_objs_data

    @qos_capped_objs_data.setter
    def qos_capped_objs_data(self, qos_capped_objs_data):
        """Sets the qos_capped_objs_data of this QospolicyDetails.


        :param qos_capped_objs_data: The qos_capped_objs_data of this QospolicyDetails.  # noqa: E501
        :type: CappedObjData
        """

        self._qos_capped_objs_data = qos_capped_objs_data

    @property
    def qos_un_capped_objs_data(self):
        """Gets the qos_un_capped_objs_data of this QospolicyDetails.  # noqa: E501


        :return: The qos_un_capped_objs_data of this QospolicyDetails.  # noqa: E501
        :rtype: UncappedObjData
        """
        return self._qos_un_capped_objs_data

    @qos_un_capped_objs_data.setter
    def qos_un_capped_objs_data(self, qos_un_capped_objs_data):
        """Sets the qos_un_capped_objs_data of this QospolicyDetails.


        :param qos_un_capped_objs_data: The qos_un_capped_objs_data of this QospolicyDetails.  # noqa: E501
        :type: UncappedObjData
        """

        self._qos_un_capped_objs_data = qos_un_capped_objs_data

    @property
    def recvd_total(self):
        """Gets the recvd_total of this QospolicyDetails.  # noqa: E501

        Total number of received QoS policy details for a device based on the given query parameters  # noqa: E501

        :return: The recvd_total of this QospolicyDetails.  # noqa: E501
        :rtype: int
        """
        return self._recvd_total

    @recvd_total.setter
    def recvd_total(self, recvd_total):
        """Sets the recvd_total of this QospolicyDetails.

        Total number of received QoS policy details for a device based on the given query parameters  # noqa: E501

        :param recvd_total: The recvd_total of this QospolicyDetails.  # noqa: E501
        :type: int
        """

        self._recvd_total = recvd_total

    @property
    def total(self):
        """Gets the total of this QospolicyDetails.  # noqa: E501

        Total number of QoS policy details for a device based on the given query parameters  # noqa: E501

        :return: The total of this QospolicyDetails.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this QospolicyDetails.

        Total number of QoS policy details for a device based on the given query parameters  # noqa: E501

        :param total: The total of this QospolicyDetails.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QospolicyDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
