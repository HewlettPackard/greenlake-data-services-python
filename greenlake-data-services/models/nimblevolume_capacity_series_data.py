# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimblevolumeCapacitySeriesData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'snapshot_usage': 'float',
        'timestamp': 'int',
        'volume_usage': 'float'
    }

    attribute_map = {
        'snapshot_usage': 'snapshot_usage',
        'timestamp': 'timestamp',
        'volume_usage': 'volume_usage'
    }

    def __init__(self, snapshot_usage=None, timestamp=None, volume_usage=None):  # noqa: E501
        """NimblevolumeCapacitySeriesData - a model defined in OpenAPI"""  # noqa: E501

        self._snapshot_usage = None
        self._timestamp = None
        self._volume_usage = None
        self.discriminator = None

        if snapshot_usage is not None:
            self.snapshot_usage = snapshot_usage
        if timestamp is not None:
            self.timestamp = timestamp
        if volume_usage is not None:
            self.volume_usage = volume_usage

    @property
    def snapshot_usage(self):
        """Gets the snapshot_usage of this NimblevolumeCapacitySeriesData.  # noqa: E501

        capacity usage value at particular timestamp  (in MiB)  # noqa: E501

        :return: The snapshot_usage of this NimblevolumeCapacitySeriesData.  # noqa: E501
        :rtype: float
        """
        return self._snapshot_usage

    @snapshot_usage.setter
    def snapshot_usage(self, snapshot_usage):
        """Sets the snapshot_usage of this NimblevolumeCapacitySeriesData.

        capacity usage value at particular timestamp  (in MiB)  # noqa: E501

        :param snapshot_usage: The snapshot_usage of this NimblevolumeCapacitySeriesData.  # noqa: E501
        :type: float
        """

        self._snapshot_usage = snapshot_usage

    @property
    def timestamp(self):
        """Gets the timestamp of this NimblevolumeCapacitySeriesData.  # noqa: E501

        epoch timestamp  # noqa: E501

        :return: The timestamp of this NimblevolumeCapacitySeriesData.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this NimblevolumeCapacitySeriesData.

        epoch timestamp  # noqa: E501

        :param timestamp: The timestamp of this NimblevolumeCapacitySeriesData.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def volume_usage(self):
        """Gets the volume_usage of this NimblevolumeCapacitySeriesData.  # noqa: E501

        capacity usage value at particular timestamp  (in MiB)  # noqa: E501

        :return: The volume_usage of this NimblevolumeCapacitySeriesData.  # noqa: E501
        :rtype: float
        """
        return self._volume_usage

    @volume_usage.setter
    def volume_usage(self, volume_usage):
        """Sets the volume_usage of this NimblevolumeCapacitySeriesData.

        capacity usage value at particular timestamp  (in MiB)  # noqa: E501

        :param volume_usage: The volume_usage of this NimblevolumeCapacitySeriesData.  # noqa: E501
        :type: float
        """

        self._volume_usage = volume_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimblevolumeCapacitySeriesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
