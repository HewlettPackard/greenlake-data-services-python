# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReplicationPartnerVolumeList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer_id': 'str',
        'display_name': 'str',
        'domain': 'str',
        'generation': 'int',
        'group_id': 'str',
        'group_name': 'str',
        'group_object_id': 'int',
        'id': 'str',
        'is_remote_array_support_replication': 'bool',
        'local_volume_id': 'int',
        'local_volume_name': 'str',
        'remote_volume': 'ReplicationPartnerVolumeListRemoteVolume',
        'resource_uri': 'str',
        'system_id': 'str',
        'system_wwn': 'str',
        'type': 'str'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'display_name': 'displayName',
        'domain': 'domain',
        'generation': 'generation',
        'group_id': 'groupId',
        'group_name': 'groupName',
        'group_object_id': 'groupObjectId',
        'id': 'id',
        'is_remote_array_support_replication': 'isRemoteArraySupportReplication',
        'local_volume_id': 'localVolumeId',
        'local_volume_name': 'localVolumeName',
        'remote_volume': 'remoteVolume',
        'resource_uri': 'resourceUri',
        'system_id': 'systemId',
        'system_wwn': 'systemWWN',
        'type': 'type'
    }

    def __init__(self, customer_id=None, display_name=None, domain=None, generation=None, group_id=None, group_name=None, group_object_id=None, id=None, is_remote_array_support_replication=None, local_volume_id=None, local_volume_name=None, remote_volume=None, resource_uri=None, system_id=None, system_wwn=None, type=None):  # noqa: E501
        """ReplicationPartnerVolumeList - a model defined in OpenAPI"""  # noqa: E501

        self._customer_id = None
        self._display_name = None
        self._domain = None
        self._generation = None
        self._group_id = None
        self._group_name = None
        self._group_object_id = None
        self._id = None
        self._is_remote_array_support_replication = None
        self._local_volume_id = None
        self._local_volume_name = None
        self._remote_volume = None
        self._resource_uri = None
        self._system_id = None
        self._system_wwn = None
        self._type = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if generation is not None:
            self.generation = generation
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if group_object_id is not None:
            self.group_object_id = group_object_id
        if id is not None:
            self.id = id
        if is_remote_array_support_replication is not None:
            self.is_remote_array_support_replication = is_remote_array_support_replication
        if local_volume_id is not None:
            self.local_volume_id = local_volume_id
        if local_volume_name is not None:
            self.local_volume_name = local_volume_name
        if remote_volume is not None:
            self.remote_volume = remote_volume
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if system_id is not None:
            self.system_id = system_id
        if system_wwn is not None:
            self.system_wwn = system_wwn
        if type is not None:
            self.type = type

    @property
    def customer_id(self):
        """Gets the customer_id of this ReplicationPartnerVolumeList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ReplicationPartnerVolumeList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def display_name(self):
        """Gets the display_name of this ReplicationPartnerVolumeList.  # noqa: E501

        Volume display name  # noqa: E501

        :return: The display_name of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ReplicationPartnerVolumeList.

        Volume display name  # noqa: E501

        :param display_name: The display_name of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self):
        """Gets the domain of this ReplicationPartnerVolumeList.  # noqa: E501

        Domain that the resource belongs to.  # noqa: E501

        :return: The domain of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ReplicationPartnerVolumeList.

        Domain that the resource belongs to.  # noqa: E501

        :param domain: The domain of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def generation(self):
        """Gets the generation of this ReplicationPartnerVolumeList.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this ReplicationPartnerVolumeList.

        generation  # noqa: E501

        :param generation: The generation of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def group_id(self):
        """Gets the group_id of this ReplicationPartnerVolumeList.  # noqa: E501

        Unique id of replication partner remote group.  # noqa: E501

        :return: The group_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ReplicationPartnerVolumeList.

        Unique id of replication partner remote group.  # noqa: E501

        :param group_id: The group_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this ReplicationPartnerVolumeList.  # noqa: E501

        Replication partner remote group name.  # noqa: E501

        :return: The group_name of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ReplicationPartnerVolumeList.

        Replication partner remote group name.  # noqa: E501

        :param group_name: The group_name of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_object_id(self):
        """Gets the group_object_id of this ReplicationPartnerVolumeList.  # noqa: E501

        Replication partner group ID.  # noqa: E501

        :return: The group_object_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: int
        """
        return self._group_object_id

    @group_object_id.setter
    def group_object_id(self, group_object_id):
        """Sets the group_object_id of this ReplicationPartnerVolumeList.

        Replication partner group ID.  # noqa: E501

        :param group_object_id: The group_object_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: int
        """

        self._group_object_id = group_object_id

    @property
    def id(self):
        """Gets the id of this ReplicationPartnerVolumeList.  # noqa: E501

        Unique Identifier of the volume.  # noqa: E501

        :return: The id of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationPartnerVolumeList.

        Unique Identifier of the volume.  # noqa: E501

        :param id: The id of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_remote_array_support_replication(self):
        """Gets the is_remote_array_support_replication of this ReplicationPartnerVolumeList.  # noqa: E501

        Boolean value to indicate if remote array OS version supports replication  # noqa: E501

        :return: The is_remote_array_support_replication of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: bool
        """
        return self._is_remote_array_support_replication

    @is_remote_array_support_replication.setter
    def is_remote_array_support_replication(self, is_remote_array_support_replication):
        """Sets the is_remote_array_support_replication of this ReplicationPartnerVolumeList.

        Boolean value to indicate if remote array OS version supports replication  # noqa: E501

        :param is_remote_array_support_replication: The is_remote_array_support_replication of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: bool
        """

        self._is_remote_array_support_replication = is_remote_array_support_replication

    @property
    def local_volume_id(self):
        """Gets the local_volume_id of this ReplicationPartnerVolumeList.  # noqa: E501

        Volume ID.  # noqa: E501

        :return: The local_volume_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: int
        """
        return self._local_volume_id

    @local_volume_id.setter
    def local_volume_id(self, local_volume_id):
        """Sets the local_volume_id of this ReplicationPartnerVolumeList.

        Volume ID.  # noqa: E501

        :param local_volume_id: The local_volume_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: int
        """

        self._local_volume_id = local_volume_id

    @property
    def local_volume_name(self):
        """Gets the local_volume_name of this ReplicationPartnerVolumeList.  # noqa: E501

        Volume name.  # noqa: E501

        :return: The local_volume_name of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._local_volume_name

    @local_volume_name.setter
    def local_volume_name(self, local_volume_name):
        """Sets the local_volume_name of this ReplicationPartnerVolumeList.

        Volume name.  # noqa: E501

        :param local_volume_name: The local_volume_name of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._local_volume_name = local_volume_name

    @property
    def remote_volume(self):
        """Gets the remote_volume of this ReplicationPartnerVolumeList.  # noqa: E501


        :return: The remote_volume of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: ReplicationPartnerVolumeListRemoteVolume
        """
        return self._remote_volume

    @remote_volume.setter
    def remote_volume(self, remote_volume):
        """Sets the remote_volume of this ReplicationPartnerVolumeList.


        :param remote_volume: The remote_volume of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: ReplicationPartnerVolumeListRemoteVolume
        """

        self._remote_volume = remote_volume

    @property
    def resource_uri(self):
        """Gets the resource_uri of this ReplicationPartnerVolumeList.  # noqa: E501

        resourceUri for detailed volume object  # noqa: E501

        :return: The resource_uri of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this ReplicationPartnerVolumeList.

        resourceUri for detailed volume object  # noqa: E501

        :param resource_uri: The resource_uri of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def system_id(self):
        """Gets the system_id of this ReplicationPartnerVolumeList.  # noqa: E501

        Unique ID or serial number of the system.  # noqa: E501

        :return: The system_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this ReplicationPartnerVolumeList.

        Unique ID or serial number of the system.  # noqa: E501

        :param system_id: The system_id of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_wwn(self):
        """Gets the system_wwn of this ReplicationPartnerVolumeList.  # noqa: E501

        WWN of the system.  # noqa: E501

        :return: The system_wwn of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._system_wwn

    @system_wwn.setter
    def system_wwn(self, system_wwn):
        """Sets the system_wwn of this ReplicationPartnerVolumeList.

        WWN of the system.  # noqa: E501

        :param system_wwn: The system_wwn of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._system_wwn = system_wwn

    @property
    def type(self):
        """Gets the type of this ReplicationPartnerVolumeList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this ReplicationPartnerVolumeList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReplicationPartnerVolumeList.

        type  # noqa: E501

        :param type: The type of this ReplicationPartnerVolumeList.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationPartnerVolumeList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
