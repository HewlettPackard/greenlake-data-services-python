# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateQuorumWitnessInputParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip_address': 'str',
        'port': 'int',
        'ssl': 'bool'
    }

    attribute_map = {
        'ip_address': 'ipAddress',
        'port': 'port',
        'ssl': 'ssl'
    }

    def __init__(self, ip_address=None, port=None, ssl=None):  # noqa: E501
        """CreateQuorumWitnessInputParameters - a model defined in OpenAPI"""  # noqa: E501

        self._ip_address = None
        self._port = None
        self._ssl = None
        self.discriminator = None

        if ip_address is not None:
            self.ip_address = ip_address
        if port is not None:
            self.port = port
        if ssl is not None:
            self.ssl = ssl

    @property
    def ip_address(self):
        """Gets the ip_address of this CreateQuorumWitnessInputParameters.  # noqa: E501

        Specifies the IP address of the Quorum Witness (QW) application to which the connectivity is created  # noqa: E501

        :return: The ip_address of this CreateQuorumWitnessInputParameters.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this CreateQuorumWitnessInputParameters.

        Specifies the IP address of the Quorum Witness (QW) application to which the connectivity is created  # noqa: E501

        :param ip_address: The ip_address of this CreateQuorumWitnessInputParameters.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this CreateQuorumWitnessInputParameters.  # noqa: E501

        Specifies port number to be used to communicate with SSL to the Quorum Witness application.Default value is 8843  # noqa: E501

        :return: The port of this CreateQuorumWitnessInputParameters.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateQuorumWitnessInputParameters.

        Specifies port number to be used to communicate with SSL to the Quorum Witness application.Default value is 8843  # noqa: E501

        :param port: The port of this CreateQuorumWitnessInputParameters.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def ssl(self):
        """Gets the ssl of this CreateQuorumWitnessInputParameters.  # noqa: E501

        Specifies the SSL connectivity to the Quorum Witness to be created  # noqa: E501

        :return: The ssl of this CreateQuorumWitnessInputParameters.  # noqa: E501
        :rtype: bool
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this CreateQuorumWitnessInputParameters.

        Specifies the SSL connectivity to the Quorum Witness to be created  # noqa: E501

        :param ssl: The ssl of this CreateQuorumWitnessInputParameters.  # noqa: E501
        :type: bool
        """

        self._ssl = ssl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateQuorumWitnessInputParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
