# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleFibreChannelFabricInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fabric_switch_name': 'str',
        'fabric_switch_port': 'int',
        'fabric_switch_wwnn': 'str',
        'fabric_switch_wwpn': 'str',
        'fabric_wwn': 'str',
        'fc_id': 'str',
        'logged_in': 'bool'
    }

    attribute_map = {
        'fabric_switch_name': 'fabric_switch_name',
        'fabric_switch_port': 'fabric_switch_port',
        'fabric_switch_wwnn': 'fabric_switch_wwnn',
        'fabric_switch_wwpn': 'fabric_switch_wwpn',
        'fabric_wwn': 'fabric_wwn',
        'fc_id': 'fc_id',
        'logged_in': 'logged_in'
    }

    def __init__(self, fabric_switch_name=None, fabric_switch_port=None, fabric_switch_wwnn=None, fabric_switch_wwpn=None, fabric_wwn=None, fc_id=None, logged_in=None):  # noqa: E501
        """NimbleFibreChannelFabricInfo - a model defined in OpenAPI"""  # noqa: E501

        self._fabric_switch_name = None
        self._fabric_switch_port = None
        self._fabric_switch_wwnn = None
        self._fabric_switch_wwpn = None
        self._fabric_wwn = None
        self._fc_id = None
        self._logged_in = None
        self.discriminator = None

        if fabric_switch_name is not None:
            self.fabric_switch_name = fabric_switch_name
        if fabric_switch_port is not None:
            self.fabric_switch_port = fabric_switch_port
        if fabric_switch_wwnn is not None:
            self.fabric_switch_wwnn = fabric_switch_wwnn
        if fabric_switch_wwpn is not None:
            self.fabric_switch_wwpn = fabric_switch_wwpn
        if fabric_wwn is not None:
            self.fabric_wwn = fabric_wwn
        if fc_id is not None:
            self.fc_id = fc_id
        if logged_in is not None:
            self.logged_in = logged_in

    @property
    def fabric_switch_name(self):
        """Gets the fabric_switch_name of this NimbleFibreChannelFabricInfo.  # noqa: E501

        Name of the Fibre Channel switch.  # noqa: E501

        :return: The fabric_switch_name of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :rtype: str
        """
        return self._fabric_switch_name

    @fabric_switch_name.setter
    def fabric_switch_name(self, fabric_switch_name):
        """Sets the fabric_switch_name of this NimbleFibreChannelFabricInfo.

        Name of the Fibre Channel switch.  # noqa: E501

        :param fabric_switch_name: The fabric_switch_name of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :type: str
        """

        self._fabric_switch_name = fabric_switch_name

    @property
    def fabric_switch_port(self):
        """Gets the fabric_switch_port of this NimbleFibreChannelFabricInfo.  # noqa: E501

        Port on the Fibre Channel switch to which connection is established.  # noqa: E501

        :return: The fabric_switch_port of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :rtype: int
        """
        return self._fabric_switch_port

    @fabric_switch_port.setter
    def fabric_switch_port(self, fabric_switch_port):
        """Sets the fabric_switch_port of this NimbleFibreChannelFabricInfo.

        Port on the Fibre Channel switch to which connection is established.  # noqa: E501

        :param fabric_switch_port: The fabric_switch_port of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :type: int
        """

        self._fabric_switch_port = fabric_switch_port

    @property
    def fabric_switch_wwnn(self):
        """Gets the fabric_switch_wwnn of this NimbleFibreChannelFabricInfo.  # noqa: E501

        World Wide Node Name for the connected port on the fabric switch.  # noqa: E501

        :return: The fabric_switch_wwnn of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :rtype: str
        """
        return self._fabric_switch_wwnn

    @fabric_switch_wwnn.setter
    def fabric_switch_wwnn(self, fabric_switch_wwnn):
        """Sets the fabric_switch_wwnn of this NimbleFibreChannelFabricInfo.

        World Wide Node Name for the connected port on the fabric switch.  # noqa: E501

        :param fabric_switch_wwnn: The fabric_switch_wwnn of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :type: str
        """

        self._fabric_switch_wwnn = fabric_switch_wwnn

    @property
    def fabric_switch_wwpn(self):
        """Gets the fabric_switch_wwpn of this NimbleFibreChannelFabricInfo.  # noqa: E501

        World Wide Port Name for the connected port on the fabric switch.  # noqa: E501

        :return: The fabric_switch_wwpn of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :rtype: str
        """
        return self._fabric_switch_wwpn

    @fabric_switch_wwpn.setter
    def fabric_switch_wwpn(self, fabric_switch_wwpn):
        """Sets the fabric_switch_wwpn of this NimbleFibreChannelFabricInfo.

        World Wide Port Name for the connected port on the fabric switch.  # noqa: E501

        :param fabric_switch_wwpn: The fabric_switch_wwpn of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :type: str
        """

        self._fabric_switch_wwpn = fabric_switch_wwpn

    @property
    def fabric_wwn(self):
        """Gets the fabric_wwn of this NimbleFibreChannelFabricInfo.  # noqa: E501

        World Wide Node Name for the Fabric Switch.  # noqa: E501

        :return: The fabric_wwn of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :rtype: str
        """
        return self._fabric_wwn

    @fabric_wwn.setter
    def fabric_wwn(self, fabric_wwn):
        """Sets the fabric_wwn of this NimbleFibreChannelFabricInfo.

        World Wide Node Name for the Fabric Switch.  # noqa: E501

        :param fabric_wwn: The fabric_wwn of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :type: str
        """

        self._fabric_wwn = fabric_wwn

    @property
    def fc_id(self):
        """Gets the fc_id of this NimbleFibreChannelFabricInfo.  # noqa: E501

        FCID assigned to the Fabric Channel fabric port.  # noqa: E501

        :return: The fc_id of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :rtype: str
        """
        return self._fc_id

    @fc_id.setter
    def fc_id(self, fc_id):
        """Sets the fc_id of this NimbleFibreChannelFabricInfo.

        FCID assigned to the Fabric Channel fabric port.  # noqa: E501

        :param fc_id: The fc_id of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :type: str
        """

        self._fc_id = fc_id

    @property
    def logged_in(self):
        """Gets the logged_in of this NimbleFibreChannelFabricInfo.  # noqa: E501

        Login information for interface. True if interface has logged in to the Fibre Channel fabric, else false.  # noqa: E501

        :return: The logged_in of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :rtype: bool
        """
        return self._logged_in

    @logged_in.setter
    def logged_in(self, logged_in):
        """Sets the logged_in of this NimbleFibreChannelFabricInfo.

        Login information for interface. True if interface has logged in to the Fibre Channel fabric, else false.  # noqa: E501

        :param logged_in: The logged_in of this NimbleFibreChannelFabricInfo.  # noqa: E501
        :type: bool
        """

        self._logged_in = logged_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleFibreChannelFabricInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
