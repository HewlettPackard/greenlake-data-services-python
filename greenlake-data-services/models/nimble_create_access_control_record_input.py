# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleCreateAccessControlRecordInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'apply_to': 'str',
        'chap_user_id': 'str',
        'initiator_group_id': 'str',
        'lun': 'int',
        'pe_id': 'str',
        'pe_ids': 'list[str]',
        'snap_id': 'str',
        'vol_id': 'str'
    }

    attribute_map = {
        'apply_to': 'apply_to',
        'chap_user_id': 'chap_user_id',
        'initiator_group_id': 'initiator_group_id',
        'lun': 'lun',
        'pe_id': 'pe_id',
        'pe_ids': 'pe_ids',
        'snap_id': 'snap_id',
        'vol_id': 'vol_id'
    }

    def __init__(self, apply_to=None, chap_user_id=None, initiator_group_id=None, lun=None, pe_id=None, pe_ids=None, snap_id=None, vol_id=None):  # noqa: E501
        """NimbleCreateAccessControlRecordInput - a model defined in OpenAPI"""  # noqa: E501

        self._apply_to = None
        self._chap_user_id = None
        self._initiator_group_id = None
        self._lun = None
        self._pe_id = None
        self._pe_ids = None
        self._snap_id = None
        self._vol_id = None
        self.discriminator = None

        if apply_to is not None:
            self.apply_to = apply_to
        if chap_user_id is not None:
            self.chap_user_id = chap_user_id
        if initiator_group_id is not None:
            self.initiator_group_id = initiator_group_id
        if lun is not None:
            self.lun = lun
        if pe_id is not None:
            self.pe_id = pe_id
        if pe_ids is not None:
            self.pe_ids = pe_ids
        if snap_id is not None:
            self.snap_id = snap_id
        if vol_id is not None:
            self.vol_id = vol_id

    @property
    def apply_to(self):
        """Gets the apply_to of this NimbleCreateAccessControlRecordInput.  # noqa: E501

        External management agent type. Possible values:'volume', 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.  # noqa: E501

        :return: The apply_to of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this NimbleCreateAccessControlRecordInput.

        External management agent type. Possible values:'volume', 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.  # noqa: E501

        :param apply_to: The apply_to of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :type: str
        """

        self._apply_to = apply_to

    @property
    def chap_user_id(self):
        """Gets the chap_user_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501

        Identifier for the CHAP user.  # noqa: E501

        :return: The chap_user_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._chap_user_id

    @chap_user_id.setter
    def chap_user_id(self, chap_user_id):
        """Sets the chap_user_id of this NimbleCreateAccessControlRecordInput.

        Identifier for the CHAP user.  # noqa: E501

        :param chap_user_id: The chap_user_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :type: str
        """

        self._chap_user_id = chap_user_id

    @property
    def initiator_group_id(self):
        """Gets the initiator_group_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501

        Identifier for the initiator group.  # noqa: E501

        :return: The initiator_group_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._initiator_group_id

    @initiator_group_id.setter
    def initiator_group_id(self, initiator_group_id):
        """Sets the initiator_group_id of this NimbleCreateAccessControlRecordInput.

        Identifier for the initiator group.  # noqa: E501

        :param initiator_group_id: The initiator_group_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :type: str
        """

        self._initiator_group_id = initiator_group_id

    @property
    def lun(self):
        """Gets the lun of this NimbleCreateAccessControlRecordInput.  # noqa: E501

        If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.  # noqa: E501

        :return: The lun of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this NimbleCreateAccessControlRecordInput.

        If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.  # noqa: E501

        :param lun: The lun of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :type: int
        """

        self._lun = lun

    @property
    def pe_id(self):
        """Gets the pe_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501

        Identifier for the protocol endpoint this access control record applies to.  # noqa: E501

        :return: The pe_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._pe_id

    @pe_id.setter
    def pe_id(self, pe_id):
        """Sets the pe_id of this NimbleCreateAccessControlRecordInput.

        Identifier for the protocol endpoint this access control record applies to.  # noqa: E501

        :param pe_id: The pe_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :type: str
        """

        self._pe_id = pe_id

    @property
    def pe_ids(self):
        """Gets the pe_ids of this NimbleCreateAccessControlRecordInput.  # noqa: E501

        List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume.  # noqa: E501

        :return: The pe_ids of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._pe_ids

    @pe_ids.setter
    def pe_ids(self, pe_ids):
        """Sets the pe_ids of this NimbleCreateAccessControlRecordInput.

        List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume.  # noqa: E501

        :param pe_ids: The pe_ids of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :type: list[str]
        """

        self._pe_ids = pe_ids

    @property
    def snap_id(self):
        """Gets the snap_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501

        Identifier for the snapshot this access control record applies to.  # noqa: E501

        :return: The snap_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._snap_id

    @snap_id.setter
    def snap_id(self, snap_id):
        """Sets the snap_id of this NimbleCreateAccessControlRecordInput.

        Identifier for the snapshot this access control record applies to.  # noqa: E501

        :param snap_id: The snap_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :type: str
        """

        self._snap_id = snap_id

    @property
    def vol_id(self):
        """Gets the vol_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501

        Identifier for the volume this access control record applies to.  # noqa: E501

        :return: The vol_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :rtype: str
        """
        return self._vol_id

    @vol_id.setter
    def vol_id(self, vol_id):
        """Sets the vol_id of this NimbleCreateAccessControlRecordInput.

        Identifier for the volume this access control record applies to.  # noqa: E501

        :param vol_id: The vol_id of this NimbleCreateAccessControlRecordInput.  # noqa: E501
        :type: str
        """

        self._vol_id = vol_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleCreateAccessControlRecordInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
