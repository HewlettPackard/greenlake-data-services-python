# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Policy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_service': 'bool',
        'host_dif3par': 'bool',
        'host_dif_std': 'bool',
        'no_cache': 'bool',
        'one_host': 'bool',
        'stale_snapshot': 'bool',
        'system': 'bool',
        'zero_detect': 'bool',
        'zero_fill': 'bool'
    }

    attribute_map = {
        'file_service': 'fileService',
        'host_dif3par': 'hostDif3par',
        'host_dif_std': 'hostDifStd',
        'no_cache': 'noCache',
        'one_host': 'oneHost',
        'stale_snapshot': 'staleSnapshot',
        'system': 'system',
        'zero_detect': 'zeroDetect',
        'zero_fill': 'zeroFill'
    }

    def __init__(self, file_service=None, host_dif3par=None, host_dif_std=None, no_cache=None, one_host=None, stale_snapshot=None, system=None, zero_detect=None, zero_fill=None):  # noqa: E501
        """Policy - a model defined in OpenAPI"""  # noqa: E501

        self._file_service = None
        self._host_dif3par = None
        self._host_dif_std = None
        self._no_cache = None
        self._one_host = None
        self._stale_snapshot = None
        self._system = None
        self._zero_detect = None
        self._zero_fill = None
        self.discriminator = None

        if file_service is not None:
            self.file_service = file_service
        if host_dif3par is not None:
            self.host_dif3par = host_dif3par
        if host_dif_std is not None:
            self.host_dif_std = host_dif_std
        if no_cache is not None:
            self.no_cache = no_cache
        if one_host is not None:
            self.one_host = one_host
        if stale_snapshot is not None:
            self.stale_snapshot = stale_snapshot
        if system is not None:
            self.system = system
        if zero_detect is not None:
            self.zero_detect = zero_detect
        if zero_fill is not None:
            self.zero_fill = zero_fill

    @property
    def file_service(self):
        """Gets the file_service of this Policy.  # noqa: E501


        :return: The file_service of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._file_service

    @file_service.setter
    def file_service(self, file_service):
        """Sets the file_service of this Policy.


        :param file_service: The file_service of this Policy.  # noqa: E501
        :type: bool
        """

        self._file_service = file_service

    @property
    def host_dif3par(self):
        """Gets the host_dif3par of this Policy.  # noqa: E501


        :return: The host_dif3par of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._host_dif3par

    @host_dif3par.setter
    def host_dif3par(self, host_dif3par):
        """Sets the host_dif3par of this Policy.


        :param host_dif3par: The host_dif3par of this Policy.  # noqa: E501
        :type: bool
        """

        self._host_dif3par = host_dif3par

    @property
    def host_dif_std(self):
        """Gets the host_dif_std of this Policy.  # noqa: E501


        :return: The host_dif_std of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._host_dif_std

    @host_dif_std.setter
    def host_dif_std(self, host_dif_std):
        """Sets the host_dif_std of this Policy.


        :param host_dif_std: The host_dif_std of this Policy.  # noqa: E501
        :type: bool
        """

        self._host_dif_std = host_dif_std

    @property
    def no_cache(self):
        """Gets the no_cache of this Policy.  # noqa: E501


        :return: The no_cache of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._no_cache

    @no_cache.setter
    def no_cache(self, no_cache):
        """Sets the no_cache of this Policy.


        :param no_cache: The no_cache of this Policy.  # noqa: E501
        :type: bool
        """

        self._no_cache = no_cache

    @property
    def one_host(self):
        """Gets the one_host of this Policy.  # noqa: E501


        :return: The one_host of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._one_host

    @one_host.setter
    def one_host(self, one_host):
        """Sets the one_host of this Policy.


        :param one_host: The one_host of this Policy.  # noqa: E501
        :type: bool
        """

        self._one_host = one_host

    @property
    def stale_snapshot(self):
        """Gets the stale_snapshot of this Policy.  # noqa: E501


        :return: The stale_snapshot of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._stale_snapshot

    @stale_snapshot.setter
    def stale_snapshot(self, stale_snapshot):
        """Sets the stale_snapshot of this Policy.


        :param stale_snapshot: The stale_snapshot of this Policy.  # noqa: E501
        :type: bool
        """

        self._stale_snapshot = stale_snapshot

    @property
    def system(self):
        """Gets the system of this Policy.  # noqa: E501


        :return: The system of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Policy.


        :param system: The system of this Policy.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def zero_detect(self):
        """Gets the zero_detect of this Policy.  # noqa: E501


        :return: The zero_detect of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._zero_detect

    @zero_detect.setter
    def zero_detect(self, zero_detect):
        """Sets the zero_detect of this Policy.


        :param zero_detect: The zero_detect of this Policy.  # noqa: E501
        :type: bool
        """

        self._zero_detect = zero_detect

    @property
    def zero_fill(self):
        """Gets the zero_fill of this Policy.  # noqa: E501


        :return: The zero_fill of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._zero_fill

    @zero_fill.setter
    def zero_fill(self, zero_fill):
        """Sets the zero_fill of this Policy.


        :param zero_fill: The zero_fill of this Policy.  # noqa: E501
        :type: bool
        """

        self._zero_fill = zero_fill

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
