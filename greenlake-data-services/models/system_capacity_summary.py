# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SystemCapacitySummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allocated': 'Allocated',
        'allocated_percentage': 'float',
        'compaction': 'float',
        'compression': 'float',
        'data_reduction': 'float',
        'dedup': 'float',
        'failed': 'float',
        'failed_percentage': 'float',
        'free': 'float',
        'free_initialized': 'float',
        'free_percentage': 'float',
        'free_uninitialized': 'float',
        'over_provisioning': 'float',
        'total': 'float',
        'unavailable': 'float',
        'unavailable_percentage': 'float'
    }

    attribute_map = {
        'allocated': 'allocated',
        'allocated_percentage': 'allocatedPercentage',
        'compaction': 'compaction',
        'compression': 'compression',
        'data_reduction': 'dataReduction',
        'dedup': 'dedup',
        'failed': 'failed',
        'failed_percentage': 'failedPercentage',
        'free': 'free',
        'free_initialized': 'freeInitialized',
        'free_percentage': 'freePercentage',
        'free_uninitialized': 'freeUninitialized',
        'over_provisioning': 'overProvisioning',
        'total': 'total',
        'unavailable': 'unavailable',
        'unavailable_percentage': 'unavailablePercentage'
    }

    def __init__(self, allocated=None, allocated_percentage=None, compaction=None, compression=None, data_reduction=None, dedup=None, failed=None, failed_percentage=None, free=None, free_initialized=None, free_percentage=None, free_uninitialized=None, over_provisioning=None, total=None, unavailable=None, unavailable_percentage=None):  # noqa: E501
        """SystemCapacitySummary - a model defined in OpenAPI"""  # noqa: E501

        self._allocated = None
        self._allocated_percentage = None
        self._compaction = None
        self._compression = None
        self._data_reduction = None
        self._dedup = None
        self._failed = None
        self._failed_percentage = None
        self._free = None
        self._free_initialized = None
        self._free_percentage = None
        self._free_uninitialized = None
        self._over_provisioning = None
        self._total = None
        self._unavailable = None
        self._unavailable_percentage = None
        self.discriminator = None

        if allocated is not None:
            self.allocated = allocated
        if allocated_percentage is not None:
            self.allocated_percentage = allocated_percentage
        if compaction is not None:
            self.compaction = compaction
        if compression is not None:
            self.compression = compression
        if data_reduction is not None:
            self.data_reduction = data_reduction
        if dedup is not None:
            self.dedup = dedup
        if failed is not None:
            self.failed = failed
        if failed_percentage is not None:
            self.failed_percentage = failed_percentage
        if free is not None:
            self.free = free
        if free_initialized is not None:
            self.free_initialized = free_initialized
        if free_percentage is not None:
            self.free_percentage = free_percentage
        if free_uninitialized is not None:
            self.free_uninitialized = free_uninitialized
        if over_provisioning is not None:
            self.over_provisioning = over_provisioning
        if total is not None:
            self.total = total
        if unavailable is not None:
            self.unavailable = unavailable
        if unavailable_percentage is not None:
            self.unavailable_percentage = unavailable_percentage

    @property
    def allocated(self):
        """Gets the allocated of this SystemCapacitySummary.  # noqa: E501


        :return: The allocated of this SystemCapacitySummary.  # noqa: E501
        :rtype: Allocated
        """
        return self._allocated

    @allocated.setter
    def allocated(self, allocated):
        """Sets the allocated of this SystemCapacitySummary.


        :param allocated: The allocated of this SystemCapacitySummary.  # noqa: E501
        :type: Allocated
        """

        self._allocated = allocated

    @property
    def allocated_percentage(self):
        """Gets the allocated_percentage of this SystemCapacitySummary.  # noqa: E501

        Percentage of allocated capacity for the system  # noqa: E501

        :return: The allocated_percentage of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._allocated_percentage

    @allocated_percentage.setter
    def allocated_percentage(self, allocated_percentage):
        """Sets the allocated_percentage of this SystemCapacitySummary.

        Percentage of allocated capacity for the system  # noqa: E501

        :param allocated_percentage: The allocated_percentage of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._allocated_percentage = allocated_percentage

    @property
    def compaction(self):
        """Gets the compaction of this SystemCapacitySummary.  # noqa: E501

        Compaction details  # noqa: E501

        :return: The compaction of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._compaction

    @compaction.setter
    def compaction(self, compaction):
        """Sets the compaction of this SystemCapacitySummary.

        Compaction details  # noqa: E501

        :param compaction: The compaction of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._compaction = compaction

    @property
    def compression(self):
        """Gets the compression of this SystemCapacitySummary.  # noqa: E501

        Compression details  # noqa: E501

        :return: The compression of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this SystemCapacitySummary.

        Compression details  # noqa: E501

        :param compression: The compression of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._compression = compression

    @property
    def data_reduction(self):
        """Gets the data_reduction of this SystemCapacitySummary.  # noqa: E501

        Data reduction  # noqa: E501

        :return: The data_reduction of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._data_reduction

    @data_reduction.setter
    def data_reduction(self, data_reduction):
        """Sets the data_reduction of this SystemCapacitySummary.

        Data reduction  # noqa: E501

        :param data_reduction: The data_reduction of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._data_reduction = data_reduction

    @property
    def dedup(self):
        """Gets the dedup of this SystemCapacitySummary.  # noqa: E501

        Dedup Details  # noqa: E501

        :return: The dedup of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._dedup

    @dedup.setter
    def dedup(self, dedup):
        """Sets the dedup of this SystemCapacitySummary.

        Dedup Details  # noqa: E501

        :param dedup: The dedup of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._dedup = dedup

    @property
    def failed(self):
        """Gets the failed of this SystemCapacitySummary.  # noqa: E501

        Failed capacity  # noqa: E501

        :return: The failed of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this SystemCapacitySummary.

        Failed capacity  # noqa: E501

        :param failed: The failed of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._failed = failed

    @property
    def failed_percentage(self):
        """Gets the failed_percentage of this SystemCapacitySummary.  # noqa: E501

        Percentage of failed capacity  # noqa: E501

        :return: The failed_percentage of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._failed_percentage

    @failed_percentage.setter
    def failed_percentage(self, failed_percentage):
        """Sets the failed_percentage of this SystemCapacitySummary.

        Percentage of failed capacity  # noqa: E501

        :param failed_percentage: The failed_percentage of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._failed_percentage = failed_percentage

    @property
    def free(self):
        """Gets the free of this SystemCapacitySummary.  # noqa: E501

        Free capacity of the system  # noqa: E501

        :return: The free of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this SystemCapacitySummary.

        Free capacity of the system  # noqa: E501

        :param free: The free of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._free = free

    @property
    def free_initialized(self):
        """Gets the free_initialized of this SystemCapacitySummary.  # noqa: E501

        Intialized capacity out of the free capacity  # noqa: E501

        :return: The free_initialized of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._free_initialized

    @free_initialized.setter
    def free_initialized(self, free_initialized):
        """Sets the free_initialized of this SystemCapacitySummary.

        Intialized capacity out of the free capacity  # noqa: E501

        :param free_initialized: The free_initialized of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._free_initialized = free_initialized

    @property
    def free_percentage(self):
        """Gets the free_percentage of this SystemCapacitySummary.  # noqa: E501

        Percentage of the free capacity  # noqa: E501

        :return: The free_percentage of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._free_percentage

    @free_percentage.setter
    def free_percentage(self, free_percentage):
        """Sets the free_percentage of this SystemCapacitySummary.

        Percentage of the free capacity  # noqa: E501

        :param free_percentage: The free_percentage of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._free_percentage = free_percentage

    @property
    def free_uninitialized(self):
        """Gets the free_uninitialized of this SystemCapacitySummary.  # noqa: E501

        Uninitialized capacity out of the free capacity  # noqa: E501

        :return: The free_uninitialized of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._free_uninitialized

    @free_uninitialized.setter
    def free_uninitialized(self, free_uninitialized):
        """Sets the free_uninitialized of this SystemCapacitySummary.

        Uninitialized capacity out of the free capacity  # noqa: E501

        :param free_uninitialized: The free_uninitialized of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._free_uninitialized = free_uninitialized

    @property
    def over_provisioning(self):
        """Gets the over_provisioning of this SystemCapacitySummary.  # noqa: E501

        Over provisioning ratio  # noqa: E501

        :return: The over_provisioning of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._over_provisioning

    @over_provisioning.setter
    def over_provisioning(self, over_provisioning):
        """Sets the over_provisioning of this SystemCapacitySummary.

        Over provisioning ratio  # noqa: E501

        :param over_provisioning: The over_provisioning of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._over_provisioning = over_provisioning

    @property
    def total(self):
        """Gets the total of this SystemCapacitySummary.  # noqa: E501

        Total capacity of the system  # noqa: E501

        :return: The total of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SystemCapacitySummary.

        Total capacity of the system  # noqa: E501

        :param total: The total of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def unavailable(self):
        """Gets the unavailable of this SystemCapacitySummary.  # noqa: E501

        Unavailable storage  # noqa: E501

        :return: The unavailable of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._unavailable

    @unavailable.setter
    def unavailable(self, unavailable):
        """Sets the unavailable of this SystemCapacitySummary.

        Unavailable storage  # noqa: E501

        :param unavailable: The unavailable of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._unavailable = unavailable

    @property
    def unavailable_percentage(self):
        """Gets the unavailable_percentage of this SystemCapacitySummary.  # noqa: E501

        Percentage of storage that is unavailable  # noqa: E501

        :return: The unavailable_percentage of this SystemCapacitySummary.  # noqa: E501
        :rtype: float
        """
        return self._unavailable_percentage

    @unavailable_percentage.setter
    def unavailable_percentage(self, unavailable_percentage):
        """Sets the unavailable_percentage of this SystemCapacitySummary.

        Percentage of storage that is unavailable  # noqa: E501

        :param unavailable_percentage: The unavailable_percentage of this SystemCapacitySummary.  # noqa: E501
        :type: float
        """

        self._unavailable_percentage = unavailable_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemCapacitySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
