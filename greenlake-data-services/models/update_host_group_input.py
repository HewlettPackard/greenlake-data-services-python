# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UpdateHostGroupInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host_proximity_values': 'list[HostProximityValue]',
        'hosts_to_create': 'list[CreateHostInput]',
        'name': 'str',
        'removed_hosts': 'list[str]',
        'updated_hosts': 'list[str]'
    }

    attribute_map = {
        'host_proximity_values': 'hostProximityValues',
        'hosts_to_create': 'hostsToCreate',
        'name': 'name',
        'removed_hosts': 'removedHosts',
        'updated_hosts': 'updatedHosts'
    }

    def __init__(self, host_proximity_values=None, hosts_to_create=None, name=None, removed_hosts=None, updated_hosts=None):  # noqa: E501
        """UpdateHostGroupInput - a model defined in OpenAPI"""  # noqa: E501

        self._host_proximity_values = None
        self._hosts_to_create = None
        self._name = None
        self._removed_hosts = None
        self._updated_hosts = None
        self.discriminator = None

        if host_proximity_values is not None:
            self.host_proximity_values = host_proximity_values
        if hosts_to_create is not None:
            self.hosts_to_create = hosts_to_create
        if name is not None:
            self.name = name
        if removed_hosts is not None:
            self.removed_hosts = removed_hosts
        if updated_hosts is not None:
            self.updated_hosts = updated_hosts

    @property
    def host_proximity_values(self):
        """Gets the host_proximity_values of this UpdateHostGroupInput.  # noqa: E501

        Change Proximity for list of hosts  # noqa: E501

        :return: The host_proximity_values of this UpdateHostGroupInput.  # noqa: E501
        :rtype: list[HostProximityValue]
        """
        return self._host_proximity_values

    @host_proximity_values.setter
    def host_proximity_values(self, host_proximity_values):
        """Sets the host_proximity_values of this UpdateHostGroupInput.

        Change Proximity for list of hosts  # noqa: E501

        :param host_proximity_values: The host_proximity_values of this UpdateHostGroupInput.  # noqa: E501
        :type: list[HostProximityValue]
        """

        self._host_proximity_values = host_proximity_values

    @property
    def hosts_to_create(self):
        """Gets the hosts_to_create of this UpdateHostGroupInput.  # noqa: E501

        List of hosts to be replaced to the group  # noqa: E501

        :return: The hosts_to_create of this UpdateHostGroupInput.  # noqa: E501
        :rtype: list[CreateHostInput]
        """
        return self._hosts_to_create

    @hosts_to_create.setter
    def hosts_to_create(self, hosts_to_create):
        """Sets the hosts_to_create of this UpdateHostGroupInput.

        List of hosts to be replaced to the group  # noqa: E501

        :param hosts_to_create: The hosts_to_create of this UpdateHostGroupInput.  # noqa: E501
        :type: list[CreateHostInput]
        """

        self._hosts_to_create = hosts_to_create

    @property
    def name(self):
        """Gets the name of this UpdateHostGroupInput.  # noqa: E501

        Name of the host group  # noqa: E501

        :return: The name of this UpdateHostGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateHostGroupInput.

        Name of the host group  # noqa: E501

        :param name: The name of this UpdateHostGroupInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def removed_hosts(self):
        """Gets the removed_hosts of this UpdateHostGroupInput.  # noqa: E501

        List of host IDs to be removed from the group  # noqa: E501

        :return: The removed_hosts of this UpdateHostGroupInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._removed_hosts

    @removed_hosts.setter
    def removed_hosts(self, removed_hosts):
        """Sets the removed_hosts of this UpdateHostGroupInput.

        List of host IDs to be removed from the group  # noqa: E501

        :param removed_hosts: The removed_hosts of this UpdateHostGroupInput.  # noqa: E501
        :type: list[str]
        """

        self._removed_hosts = removed_hosts

    @property
    def updated_hosts(self):
        """Gets the updated_hosts of this UpdateHostGroupInput.  # noqa: E501

        List of host IDs to be added to the group  # noqa: E501

        :return: The updated_hosts of this UpdateHostGroupInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._updated_hosts

    @updated_hosts.setter
    def updated_hosts(self, updated_hosts):
        """Sets the updated_hosts of this UpdateHostGroupInput.

        List of host IDs to be added to the group  # noqa: E501

        :param updated_hosts: The updated_hosts of this UpdateHostGroupInput.  # noqa: E501
        :type: list[str]
        """

        self._updated_hosts = updated_hosts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateHostGroupInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
