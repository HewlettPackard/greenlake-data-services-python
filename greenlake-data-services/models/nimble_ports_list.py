# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimblePortsList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'AssociatedLinks',
        'fibre_channel_interface': 'NimblePortsListFibreChannelInterface',
        'network_interface': 'NimblePortsListNetworkInterface',
        'page_limit': 'int',
        'page_offset': 'int',
        'request_uri': 'str',
        'resource_uri': 'str',
        'total': 'int'
    }

    attribute_map = {
        'associated_links': 'associated_links',
        'fibre_channel_interface': 'fibre_channel_interface',
        'network_interface': 'network_interface',
        'page_limit': 'pageLimit',
        'page_offset': 'pageOffset',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'total': 'total'
    }

    def __init__(self, associated_links=None, fibre_channel_interface=None, network_interface=None, page_limit=None, page_offset=None, request_uri=None, resource_uri=None, total=None):  # noqa: E501
        """NimblePortsList - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._fibre_channel_interface = None
        self._network_interface = None
        self._page_limit = None
        self._page_offset = None
        self._request_uri = None
        self._resource_uri = None
        self._total = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if fibre_channel_interface is not None:
            self.fibre_channel_interface = fibre_channel_interface
        if network_interface is not None:
            self.network_interface = network_interface
        if page_limit is not None:
            self.page_limit = page_limit
        if page_offset is not None:
            self.page_offset = page_offset
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if total is not None:
            self.total = total

    @property
    def associated_links(self):
        """Gets the associated_links of this NimblePortsList.  # noqa: E501


        :return: The associated_links of this NimblePortsList.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimblePortsList.


        :param associated_links: The associated_links of this NimblePortsList.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def fibre_channel_interface(self):
        """Gets the fibre_channel_interface of this NimblePortsList.  # noqa: E501


        :return: The fibre_channel_interface of this NimblePortsList.  # noqa: E501
        :rtype: NimblePortsListFibreChannelInterface
        """
        return self._fibre_channel_interface

    @fibre_channel_interface.setter
    def fibre_channel_interface(self, fibre_channel_interface):
        """Sets the fibre_channel_interface of this NimblePortsList.


        :param fibre_channel_interface: The fibre_channel_interface of this NimblePortsList.  # noqa: E501
        :type: NimblePortsListFibreChannelInterface
        """

        self._fibre_channel_interface = fibre_channel_interface

    @property
    def network_interface(self):
        """Gets the network_interface of this NimblePortsList.  # noqa: E501


        :return: The network_interface of this NimblePortsList.  # noqa: E501
        :rtype: NimblePortsListNetworkInterface
        """
        return self._network_interface

    @network_interface.setter
    def network_interface(self, network_interface):
        """Sets the network_interface of this NimblePortsList.


        :param network_interface: The network_interface of this NimblePortsList.  # noqa: E501
        :type: NimblePortsListNetworkInterface
        """

        self._network_interface = network_interface

    @property
    def page_limit(self):
        """Gets the page_limit of this NimblePortsList.  # noqa: E501

        page limit  # noqa: E501

        :return: The page_limit of this NimblePortsList.  # noqa: E501
        :rtype: int
        """
        return self._page_limit

    @page_limit.setter
    def page_limit(self, page_limit):
        """Sets the page_limit of this NimblePortsList.

        page limit  # noqa: E501

        :param page_limit: The page_limit of this NimblePortsList.  # noqa: E501
        :type: int
        """

        self._page_limit = page_limit

    @property
    def page_offset(self):
        """Gets the page_offset of this NimblePortsList.  # noqa: E501

        page offset  # noqa: E501

        :return: The page_offset of this NimblePortsList.  # noqa: E501
        :rtype: int
        """
        return self._page_offset

    @page_offset.setter
    def page_offset(self, page_offset):
        """Sets the page_offset of this NimblePortsList.

        page offset  # noqa: E501

        :param page_offset: The page_offset of this NimblePortsList.  # noqa: E501
        :type: int
        """

        self._page_offset = page_offset

    @property
    def request_uri(self):
        """Gets the request_uri of this NimblePortsList.  # noqa: E501

        requestUri for storage port objects  # noqa: E501

        :return: The request_uri of this NimblePortsList.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this NimblePortsList.

        requestUri for storage port objects  # noqa: E501

        :param request_uri: The request_uri of this NimblePortsList.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimblePortsList.  # noqa: E501


        :return: The resource_uri of this NimblePortsList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimblePortsList.


        :param resource_uri: The resource_uri of this NimblePortsList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def total(self):
        """Gets the total of this NimblePortsList.  # noqa: E501

        Total number of fibre channel interface and network interface ports.  # noqa: E501

        :return: The total of this NimblePortsList.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this NimblePortsList.

        Total number of fibre channel interface and network interface ports.  # noqa: E501

        :param total: The total of this NimblePortsList.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimblePortsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
