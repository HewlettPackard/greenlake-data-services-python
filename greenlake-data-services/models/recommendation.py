# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Recommendation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'SysAssociatedLinks',
        'check_time': 'CalendarTime',
        'displayname': 'str',
        'domain': 'str',
        'id': 'str',
        'patches': 'list[SwRecommendedPackageId]',
        'releases': 'list[SwRecommendedPackageId]',
        'request_uri': 'str',
        'resource_uri': 'str',
        'system_id': 'str',
        'update_time': 'CalendarTime'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'check_time': 'checkTime',
        'displayname': 'displayname',
        'domain': 'domain',
        'id': 'id',
        'patches': 'patches',
        'releases': 'releases',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'system_id': 'systemId',
        'update_time': 'updateTime'
    }

    def __init__(self, associated_links=None, check_time=None, displayname=None, domain=None, id=None, patches=None, releases=None, request_uri=None, resource_uri=None, system_id=None, update_time=None):  # noqa: E501
        """Recommendation - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._check_time = None
        self._displayname = None
        self._domain = None
        self._id = None
        self._patches = None
        self._releases = None
        self._request_uri = None
        self._resource_uri = None
        self._system_id = None
        self._update_time = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if check_time is not None:
            self.check_time = check_time
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if id is not None:
            self.id = id
        if patches is not None:
            self.patches = patches
        if releases is not None:
            self.releases = releases
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if system_id is not None:
            self.system_id = system_id
        if update_time is not None:
            self.update_time = update_time

    @property
    def associated_links(self):
        """Gets the associated_links of this Recommendation.  # noqa: E501


        :return: The associated_links of this Recommendation.  # noqa: E501
        :rtype: SysAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this Recommendation.


        :param associated_links: The associated_links of this Recommendation.  # noqa: E501
        :type: SysAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def check_time(self):
        """Gets the check_time of this Recommendation.  # noqa: E501


        :return: The check_time of this Recommendation.  # noqa: E501
        :rtype: CalendarTime
        """
        return self._check_time

    @check_time.setter
    def check_time(self, check_time):
        """Sets the check_time of this Recommendation.


        :param check_time: The check_time of this Recommendation.  # noqa: E501
        :type: CalendarTime
        """

        self._check_time = check_time

    @property
    def displayname(self):
        """Gets the displayname of this Recommendation.  # noqa: E501

        Display name  # noqa: E501

        :return: The displayname of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this Recommendation.

        Display name  # noqa: E501

        :param displayname: The displayname of this Recommendation.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this Recommendation.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Recommendation.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this Recommendation.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this Recommendation.  # noqa: E501

        SystemWWN/UUID string uniquely identifying the object.  # noqa: E501

        :return: The id of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Recommendation.

        SystemWWN/UUID string uniquely identifying the object.  # noqa: E501

        :param id: The id of this Recommendation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def patches(self):
        """Gets the patches of this Recommendation.  # noqa: E501


        :return: The patches of this Recommendation.  # noqa: E501
        :rtype: list[SwRecommendedPackageId]
        """
        return self._patches

    @patches.setter
    def patches(self, patches):
        """Sets the patches of this Recommendation.


        :param patches: The patches of this Recommendation.  # noqa: E501
        :type: list[SwRecommendedPackageId]
        """

        self._patches = patches

    @property
    def releases(self):
        """Gets the releases of this Recommendation.  # noqa: E501


        :return: The releases of this Recommendation.  # noqa: E501
        :rtype: list[SwRecommendedPackageId]
        """
        return self._releases

    @releases.setter
    def releases(self, releases):
        """Sets the releases of this Recommendation.


        :param releases: The releases of this Recommendation.  # noqa: E501
        :type: list[SwRecommendedPackageId]
        """

        self._releases = releases

    @property
    def request_uri(self):
        """Gets the request_uri of this Recommendation.  # noqa: E501

        requestUri for detailed storage object  # noqa: E501

        :return: The request_uri of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this Recommendation.

        requestUri for detailed storage object  # noqa: E501

        :param request_uri: The request_uri of this Recommendation.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this Recommendation.  # noqa: E501

        resourceUri for detailed storage object  # noqa: E501

        :return: The resource_uri of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this Recommendation.

        resourceUri for detailed storage object  # noqa: E501

        :param resource_uri: The resource_uri of this Recommendation.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def system_id(self):
        """Gets the system_id of this Recommendation.  # noqa: E501

        SystemUid/serialNumber of the array.  # noqa: E501

        :return: The system_id of this Recommendation.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this Recommendation.

        SystemUid/serialNumber of the array.  # noqa: E501

        :param system_id: The system_id of this Recommendation.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def update_time(self):
        """Gets the update_time of this Recommendation.  # noqa: E501


        :return: The update_time of this Recommendation.  # noqa: E501
        :rtype: CalendarTime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Recommendation.


        :param update_time: The update_time of this Recommendation.  # noqa: E501
        :type: CalendarTime
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recommendation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
