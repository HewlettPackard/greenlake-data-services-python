# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNsCtrlrHwSensorInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ctrlr_owner': 'str',
        'current_reading': 'int',
        'display_name': 'str',
        'location': 'str',
        'name': 'str',
        'state': 'str'
    }

    attribute_map = {
        'ctrlr_owner': 'ctrlr_owner',
        'current_reading': 'current_reading',
        'display_name': 'display_name',
        'location': 'location',
        'name': 'name',
        'state': 'state'
    }

    def __init__(self, ctrlr_owner=None, current_reading=None, display_name=None, location=None, name=None, state=None):  # noqa: E501
        """NimbleNsCtrlrHwSensorInfo - a model defined in OpenAPI"""  # noqa: E501

        self._ctrlr_owner = None
        self._current_reading = None
        self._display_name = None
        self._location = None
        self._name = None
        self._state = None
        self.discriminator = None

        if ctrlr_owner is not None:
            self.ctrlr_owner = ctrlr_owner
        if current_reading is not None:
            self.current_reading = current_reading
        if display_name is not None:
            self.display_name = display_name
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state

    @property
    def ctrlr_owner(self):
        """Gets the ctrlr_owner of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501

        The controller owning this sensor. Possible values: 'A', 'B', 'independent'.  # noqa: E501

        :return: The ctrlr_owner of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :rtype: str
        """
        return self._ctrlr_owner

    @ctrlr_owner.setter
    def ctrlr_owner(self, ctrlr_owner):
        """Sets the ctrlr_owner of this NimbleNsCtrlrHwSensorInfo.

        The controller owning this sensor. Possible values: 'A', 'B', 'independent'.  # noqa: E501

        :param ctrlr_owner: The ctrlr_owner of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :type: str
        """

        self._ctrlr_owner = ctrlr_owner

    @property
    def current_reading(self):
        """Gets the current_reading of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501

        A sensor type specific reading (RPM for fans, degrees celsius for temperature).  # noqa: E501

        :return: The current_reading of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :rtype: int
        """
        return self._current_reading

    @current_reading.setter
    def current_reading(self, current_reading):
        """Sets the current_reading of this NimbleNsCtrlrHwSensorInfo.

        A sensor type specific reading (RPM for fans, degrees celsius for temperature).  # noqa: E501

        :param current_reading: The current_reading of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :type: int
        """

        self._current_reading = current_reading

    @property
    def display_name(self):
        """Gets the display_name of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501

        A human readable name for the sensor.  # noqa: E501

        :return: The display_name of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NimbleNsCtrlrHwSensorInfo.

        A human readable name for the sensor.  # noqa: E501

        :param display_name: The display_name of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def location(self):
        """Gets the location of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501

        The location of this sensor.  # noqa: E501

        :return: The location of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NimbleNsCtrlrHwSensorInfo.

        The location of this sensor.  # noqa: E501

        :param location: The location of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501

        A uniquely identifying name.  # noqa: E501

        :return: The name of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleNsCtrlrHwSensorInfo.

        A uniquely identifying name.  # noqa: E501

        :param name: The name of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501

        The current state of this sensor. Possible values: 'sensor_ok', 'sensor_alert_cond', 'sensor_missing', 'sensor_reading_unavail', 'sensor_failed'.  # noqa: E501

        :return: The state of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NimbleNsCtrlrHwSensorInfo.

        The current state of this sensor. Possible values: 'sensor_ok', 'sensor_alert_cond', 'sensor_missing', 'sensor_reading_unavail', 'sensor_failed'.  # noqa: E501

        :param state: The state of this NimbleNsCtrlrHwSensorInfo.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNsCtrlrHwSensorInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
