# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NodeBatteriesList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'list[AssociatedLinksInner]',
        'charge_level': 'int',
        'customer_id': 'str',
        'discharge_led': 'LED',
        'displayname': 'str',
        'domain': 'str',
        'expiration_date': 'ExpirationDate',
        'fault_led': 'LED',
        'fully_charged': 'bool',
        'generation': 'int',
        'id': 'str',
        'life': 'int',
        'locate_enabled': 'bool',
        'manufacturing': 'ManufacturingSingle',
        'max_life': 'int',
        'name': 'str',
        'node_battery_id': 'int',
        'power_supply_id': 'int',
        'primary_node_id': 'int',
        'resource_uri': 'str',
        'safe_to_remove': 'bool',
        'secondary_node_id': 'int',
        'service_led': 'LED',
        'state': 'STATE',
        'status_led': 'LED',
        'system_id': 'str',
        'test_in_progress': 'bool',
        'time_to_charge': 'int',
        'type': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'charge_level': 'chargeLevel',
        'customer_id': 'customerId',
        'discharge_led': 'dischargeLED',
        'displayname': 'displayname',
        'domain': 'domain',
        'expiration_date': 'expirationDate',
        'fault_led': 'faultLED',
        'fully_charged': 'fullyCharged',
        'generation': 'generation',
        'id': 'id',
        'life': 'life',
        'locate_enabled': 'locateEnabled',
        'manufacturing': 'manufacturing',
        'max_life': 'maxLife',
        'name': 'name',
        'node_battery_id': 'nodeBatteryId',
        'power_supply_id': 'powerSupplyId',
        'primary_node_id': 'primaryNodeId',
        'resource_uri': 'resourceUri',
        'safe_to_remove': 'safeToRemove',
        'secondary_node_id': 'secondaryNodeId',
        'service_led': 'serviceLED',
        'state': 'state',
        'status_led': 'statusLED',
        'system_id': 'systemId',
        'test_in_progress': 'testInProgress',
        'time_to_charge': 'timeToCharge',
        'type': 'type'
    }

    def __init__(self, associated_links=None, charge_level=None, customer_id=None, discharge_led=None, displayname=None, domain=None, expiration_date=None, fault_led=None, fully_charged=None, generation=None, id=None, life=None, locate_enabled=None, manufacturing=None, max_life=None, name=None, node_battery_id=None, power_supply_id=None, primary_node_id=None, resource_uri=None, safe_to_remove=None, secondary_node_id=None, service_led=None, state=None, status_led=None, system_id=None, test_in_progress=None, time_to_charge=None, type=None):  # noqa: E501
        """NodeBatteriesList - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._charge_level = None
        self._customer_id = None
        self._discharge_led = None
        self._displayname = None
        self._domain = None
        self._expiration_date = None
        self._fault_led = None
        self._fully_charged = None
        self._generation = None
        self._id = None
        self._life = None
        self._locate_enabled = None
        self._manufacturing = None
        self._max_life = None
        self._name = None
        self._node_battery_id = None
        self._power_supply_id = None
        self._primary_node_id = None
        self._resource_uri = None
        self._safe_to_remove = None
        self._secondary_node_id = None
        self._service_led = None
        self._state = None
        self._status_led = None
        self._system_id = None
        self._test_in_progress = None
        self._time_to_charge = None
        self._type = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if charge_level is not None:
            self.charge_level = charge_level
        if customer_id is not None:
            self.customer_id = customer_id
        if discharge_led is not None:
            self.discharge_led = discharge_led
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if fault_led is not None:
            self.fault_led = fault_led
        if fully_charged is not None:
            self.fully_charged = fully_charged
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if life is not None:
            self.life = life
        if locate_enabled is not None:
            self.locate_enabled = locate_enabled
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if max_life is not None:
            self.max_life = max_life
        if name is not None:
            self.name = name
        if node_battery_id is not None:
            self.node_battery_id = node_battery_id
        if power_supply_id is not None:
            self.power_supply_id = power_supply_id
        if primary_node_id is not None:
            self.primary_node_id = primary_node_id
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if safe_to_remove is not None:
            self.safe_to_remove = safe_to_remove
        if secondary_node_id is not None:
            self.secondary_node_id = secondary_node_id
        if service_led is not None:
            self.service_led = service_led
        if state is not None:
            self.state = state
        if status_led is not None:
            self.status_led = status_led
        if system_id is not None:
            self.system_id = system_id
        if test_in_progress is not None:
            self.test_in_progress = test_in_progress
        if time_to_charge is not None:
            self.time_to_charge = time_to_charge
        if type is not None:
            self.type = type

    @property
    def associated_links(self):
        """Gets the associated_links of this NodeBatteriesList.  # noqa: E501

        Associated Links Details  # noqa: E501

        :return: The associated_links of this NodeBatteriesList.  # noqa: E501
        :rtype: list[AssociatedLinksInner]
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NodeBatteriesList.

        Associated Links Details  # noqa: E501

        :param associated_links: The associated_links of this NodeBatteriesList.  # noqa: E501
        :type: list[AssociatedLinksInner]
        """

        self._associated_links = associated_links

    @property
    def charge_level(self):
        """Gets the charge_level of this NodeBatteriesList.  # noqa: E501

        Battery charge level.  # noqa: E501

        :return: The charge_level of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._charge_level

    @charge_level.setter
    def charge_level(self, charge_level):
        """Sets the charge_level of this NodeBatteriesList.

        Battery charge level.  # noqa: E501

        :param charge_level: The charge_level of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._charge_level = charge_level

    @property
    def customer_id(self):
        """Gets the customer_id of this NodeBatteriesList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NodeBatteriesList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NodeBatteriesList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NodeBatteriesList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def discharge_led(self):
        """Gets the discharge_led of this NodeBatteriesList.  # noqa: E501


        :return: The discharge_led of this NodeBatteriesList.  # noqa: E501
        :rtype: LED
        """
        return self._discharge_led

    @discharge_led.setter
    def discharge_led(self, discharge_led):
        """Sets the discharge_led of this NodeBatteriesList.


        :param discharge_led: The discharge_led of this NodeBatteriesList.  # noqa: E501
        :type: LED
        """

        self._discharge_led = discharge_led

    @property
    def displayname(self):
        """Gets the displayname of this NodeBatteriesList.  # noqa: E501

        Name to be used for display purposes  # noqa: E501

        :return: The displayname of this NodeBatteriesList.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this NodeBatteriesList.

        Name to be used for display purposes  # noqa: E501

        :param displayname: The displayname of this NodeBatteriesList.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this NodeBatteriesList.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this NodeBatteriesList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this NodeBatteriesList.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this NodeBatteriesList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def expiration_date(self):
        """Gets the expiration_date of this NodeBatteriesList.  # noqa: E501


        :return: The expiration_date of this NodeBatteriesList.  # noqa: E501
        :rtype: ExpirationDate
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this NodeBatteriesList.


        :param expiration_date: The expiration_date of this NodeBatteriesList.  # noqa: E501
        :type: ExpirationDate
        """

        self._expiration_date = expiration_date

    @property
    def fault_led(self):
        """Gets the fault_led of this NodeBatteriesList.  # noqa: E501


        :return: The fault_led of this NodeBatteriesList.  # noqa: E501
        :rtype: LED
        """
        return self._fault_led

    @fault_led.setter
    def fault_led(self, fault_led):
        """Sets the fault_led of this NodeBatteriesList.


        :param fault_led: The fault_led of this NodeBatteriesList.  # noqa: E501
        :type: LED
        """

        self._fault_led = fault_led

    @property
    def fully_charged(self):
        """Gets the fully_charged of this NodeBatteriesList.  # noqa: E501

        Indicates if battery is fully charged or not  # noqa: E501

        :return: The fully_charged of this NodeBatteriesList.  # noqa: E501
        :rtype: bool
        """
        return self._fully_charged

    @fully_charged.setter
    def fully_charged(self, fully_charged):
        """Sets the fully_charged of this NodeBatteriesList.

        Indicates if battery is fully charged or not  # noqa: E501

        :param fully_charged: The fully_charged of this NodeBatteriesList.  # noqa: E501
        :type: bool
        """

        self._fully_charged = fully_charged

    @property
    def generation(self):
        """Gets the generation of this NodeBatteriesList.  # noqa: E501

        generation `Filter, Sort`  # noqa: E501

        :return: The generation of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NodeBatteriesList.

        generation `Filter, Sort`  # noqa: E501

        :param generation: The generation of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this NodeBatteriesList.  # noqa: E501

        Unique Identifier of the resource. `Filter`  # noqa: E501

        :return: The id of this NodeBatteriesList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeBatteriesList.

        Unique Identifier of the resource. `Filter`  # noqa: E501

        :param id: The id of this NodeBatteriesList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def life(self):
        """Gets the life of this NodeBatteriesList.  # noqa: E501

        Life of the battery  # noqa: E501

        :return: The life of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._life

    @life.setter
    def life(self, life):
        """Sets the life of this NodeBatteriesList.

        Life of the battery  # noqa: E501

        :param life: The life of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._life = life

    @property
    def locate_enabled(self):
        """Gets the locate_enabled of this NodeBatteriesList.  # noqa: E501

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :return: The locate_enabled of this NodeBatteriesList.  # noqa: E501
        :rtype: bool
        """
        return self._locate_enabled

    @locate_enabled.setter
    def locate_enabled(self, locate_enabled):
        """Sets the locate_enabled of this NodeBatteriesList.

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :param locate_enabled: The locate_enabled of this NodeBatteriesList.  # noqa: E501
        :type: bool
        """

        self._locate_enabled = locate_enabled

    @property
    def manufacturing(self):
        """Gets the manufacturing of this NodeBatteriesList.  # noqa: E501


        :return: The manufacturing of this NodeBatteriesList.  # noqa: E501
        :rtype: ManufacturingSingle
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this NodeBatteriesList.


        :param manufacturing: The manufacturing of this NodeBatteriesList.  # noqa: E501
        :type: ManufacturingSingle
        """

        self._manufacturing = manufacturing

    @property
    def max_life(self):
        """Gets the max_life of this NodeBatteriesList.  # noqa: E501

        Maximum life of the battery  # noqa: E501

        :return: The max_life of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._max_life

    @max_life.setter
    def max_life(self, max_life):
        """Sets the max_life of this NodeBatteriesList.

        Maximum life of the battery  # noqa: E501

        :param max_life: The max_life of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._max_life = max_life

    @property
    def name(self):
        """Gets the name of this NodeBatteriesList.  # noqa: E501

        Name of the resource. `Filter, Sort`  # noqa: E501

        :return: The name of this NodeBatteriesList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeBatteriesList.

        Name of the resource. `Filter, Sort`  # noqa: E501

        :param name: The name of this NodeBatteriesList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_battery_id(self):
        """Gets the node_battery_id of this NodeBatteriesList.  # noqa: E501

        Numeric ID of the resource  # noqa: E501

        :return: The node_battery_id of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._node_battery_id

    @node_battery_id.setter
    def node_battery_id(self, node_battery_id):
        """Sets the node_battery_id of this NodeBatteriesList.

        Numeric ID of the resource  # noqa: E501

        :param node_battery_id: The node_battery_id of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._node_battery_id = node_battery_id

    @property
    def power_supply_id(self):
        """Gets the power_supply_id of this NodeBatteriesList.  # noqa: E501

        Power supply ID for this battery.  # noqa: E501

        :return: The power_supply_id of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._power_supply_id

    @power_supply_id.setter
    def power_supply_id(self, power_supply_id):
        """Sets the power_supply_id of this NodeBatteriesList.

        Power supply ID for this battery.  # noqa: E501

        :param power_supply_id: The power_supply_id of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._power_supply_id = power_supply_id

    @property
    def primary_node_id(self):
        """Gets the primary_node_id of this NodeBatteriesList.  # noqa: E501

        Primary node ID. `Filter, Sort`  # noqa: E501

        :return: The primary_node_id of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._primary_node_id

    @primary_node_id.setter
    def primary_node_id(self, primary_node_id):
        """Sets the primary_node_id of this NodeBatteriesList.

        Primary node ID. `Filter, Sort`  # noqa: E501

        :param primary_node_id: The primary_node_id of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._primary_node_id = primary_node_id

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NodeBatteriesList.  # noqa: E501

        resourceUri for detailed node battery object  # noqa: E501

        :return: The resource_uri of this NodeBatteriesList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NodeBatteriesList.

        resourceUri for detailed node battery object  # noqa: E501

        :param resource_uri: The resource_uri of this NodeBatteriesList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def safe_to_remove(self):
        """Gets the safe_to_remove of this NodeBatteriesList.  # noqa: E501

        Indicates if the component is safe to remove  # noqa: E501

        :return: The safe_to_remove of this NodeBatteriesList.  # noqa: E501
        :rtype: bool
        """
        return self._safe_to_remove

    @safe_to_remove.setter
    def safe_to_remove(self, safe_to_remove):
        """Sets the safe_to_remove of this NodeBatteriesList.

        Indicates if the component is safe to remove  # noqa: E501

        :param safe_to_remove: The safe_to_remove of this NodeBatteriesList.  # noqa: E501
        :type: bool
        """

        self._safe_to_remove = safe_to_remove

    @property
    def secondary_node_id(self):
        """Gets the secondary_node_id of this NodeBatteriesList.  # noqa: E501

        Secondary node ID  # noqa: E501

        :return: The secondary_node_id of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._secondary_node_id

    @secondary_node_id.setter
    def secondary_node_id(self, secondary_node_id):
        """Sets the secondary_node_id of this NodeBatteriesList.

        Secondary node ID  # noqa: E501

        :param secondary_node_id: The secondary_node_id of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._secondary_node_id = secondary_node_id

    @property
    def service_led(self):
        """Gets the service_led of this NodeBatteriesList.  # noqa: E501


        :return: The service_led of this NodeBatteriesList.  # noqa: E501
        :rtype: LED
        """
        return self._service_led

    @service_led.setter
    def service_led(self, service_led):
        """Sets the service_led of this NodeBatteriesList.


        :param service_led: The service_led of this NodeBatteriesList.  # noqa: E501
        :type: LED
        """

        self._service_led = service_led

    @property
    def state(self):
        """Gets the state of this NodeBatteriesList.  # noqa: E501


        :return: The state of this NodeBatteriesList.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeBatteriesList.


        :param state: The state of this NodeBatteriesList.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def status_led(self):
        """Gets the status_led of this NodeBatteriesList.  # noqa: E501


        :return: The status_led of this NodeBatteriesList.  # noqa: E501
        :rtype: LED
        """
        return self._status_led

    @status_led.setter
    def status_led(self, status_led):
        """Sets the status_led of this NodeBatteriesList.


        :param status_led: The status_led of this NodeBatteriesList.  # noqa: E501
        :type: LED
        """

        self._status_led = status_led

    @property
    def system_id(self):
        """Gets the system_id of this NodeBatteriesList.  # noqa: E501

        systemId/Serial Number  of the array.  # noqa: E501

        :return: The system_id of this NodeBatteriesList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this NodeBatteriesList.

        systemId/Serial Number  of the array.  # noqa: E501

        :param system_id: The system_id of this NodeBatteriesList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def test_in_progress(self):
        """Gets the test_in_progress of this NodeBatteriesList.  # noqa: E501

        Indicates if test is in progress or not  # noqa: E501

        :return: The test_in_progress of this NodeBatteriesList.  # noqa: E501
        :rtype: bool
        """
        return self._test_in_progress

    @test_in_progress.setter
    def test_in_progress(self, test_in_progress):
        """Sets the test_in_progress of this NodeBatteriesList.

        Indicates if test is in progress or not  # noqa: E501

        :param test_in_progress: The test_in_progress of this NodeBatteriesList.  # noqa: E501
        :type: bool
        """

        self._test_in_progress = test_in_progress

    @property
    def time_to_charge(self):
        """Gets the time_to_charge of this NodeBatteriesList.  # noqa: E501

        Remaining time to charge  # noqa: E501

        :return: The time_to_charge of this NodeBatteriesList.  # noqa: E501
        :rtype: int
        """
        return self._time_to_charge

    @time_to_charge.setter
    def time_to_charge(self, time_to_charge):
        """Sets the time_to_charge of this NodeBatteriesList.

        Remaining time to charge  # noqa: E501

        :param time_to_charge: The time_to_charge of this NodeBatteriesList.  # noqa: E501
        :type: int
        """

        self._time_to_charge = time_to_charge

    @property
    def type(self):
        """Gets the type of this NodeBatteriesList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NodeBatteriesList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeBatteriesList.

        type  # noqa: E501

        :param type: The type of this NodeBatteriesList.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeBatteriesList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
