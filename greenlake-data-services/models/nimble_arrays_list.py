# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleArraysList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'array_name': 'str',
        'array_id': 'str',
        'ctrlr_a_fc_config': 'NimbleControllerConfig',
        'ctrlr_b_fc_config': 'NimbleControllerConfig',
        'id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'array_name': 'array-name',
        'array_id': 'array_id',
        'ctrlr_a_fc_config': 'ctrlr_a_fc_config',
        'ctrlr_b_fc_config': 'ctrlr_b_fc_config',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, array_name=None, array_id=None, ctrlr_a_fc_config=None, ctrlr_b_fc_config=None, id=None, name=None):  # noqa: E501
        """NimbleArraysList - a model defined in OpenAPI"""  # noqa: E501

        self._array_name = None
        self._array_id = None
        self._ctrlr_a_fc_config = None
        self._ctrlr_b_fc_config = None
        self._id = None
        self._name = None
        self.discriminator = None

        if array_name is not None:
            self.array_name = array_name
        if array_id is not None:
            self.array_id = array_id
        if ctrlr_a_fc_config is not None:
            self.ctrlr_a_fc_config = ctrlr_a_fc_config
        if ctrlr_b_fc_config is not None:
            self.ctrlr_b_fc_config = ctrlr_b_fc_config
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def array_name(self):
        """Gets the array_name of this NimbleArraysList.  # noqa: E501

        Name of the  array . String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The array_name of this NimbleArraysList.  # noqa: E501
        :rtype: str
        """
        return self._array_name

    @array_name.setter
    def array_name(self, array_name):
        """Sets the array_name of this NimbleArraysList.

        Name of the  array . String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param array_name: The array_name of this NimbleArraysList.  # noqa: E501
        :type: str
        """

        self._array_name = array_name

    @property
    def array_id(self):
        """Gets the array_id of this NimbleArraysList.  # noqa: E501

        Identifier for the array. A 42 digit hexadecimal number.  # noqa: E501

        :return: The array_id of this NimbleArraysList.  # noqa: E501
        :rtype: str
        """
        return self._array_id

    @array_id.setter
    def array_id(self, array_id):
        """Sets the array_id of this NimbleArraysList.

        Identifier for the array. A 42 digit hexadecimal number.  # noqa: E501

        :param array_id: The array_id of this NimbleArraysList.  # noqa: E501
        :type: str
        """

        self._array_id = array_id

    @property
    def ctrlr_a_fc_config(self):
        """Gets the ctrlr_a_fc_config of this NimbleArraysList.  # noqa: E501


        :return: The ctrlr_a_fc_config of this NimbleArraysList.  # noqa: E501
        :rtype: NimbleControllerConfig
        """
        return self._ctrlr_a_fc_config

    @ctrlr_a_fc_config.setter
    def ctrlr_a_fc_config(self, ctrlr_a_fc_config):
        """Sets the ctrlr_a_fc_config of this NimbleArraysList.


        :param ctrlr_a_fc_config: The ctrlr_a_fc_config of this NimbleArraysList.  # noqa: E501
        :type: NimbleControllerConfig
        """

        self._ctrlr_a_fc_config = ctrlr_a_fc_config

    @property
    def ctrlr_b_fc_config(self):
        """Gets the ctrlr_b_fc_config of this NimbleArraysList.  # noqa: E501


        :return: The ctrlr_b_fc_config of this NimbleArraysList.  # noqa: E501
        :rtype: NimbleControllerConfig
        """
        return self._ctrlr_b_fc_config

    @ctrlr_b_fc_config.setter
    def ctrlr_b_fc_config(self, ctrlr_b_fc_config):
        """Sets the ctrlr_b_fc_config of this NimbleArraysList.


        :param ctrlr_b_fc_config: The ctrlr_b_fc_config of this NimbleArraysList.  # noqa: E501
        :type: NimbleControllerConfig
        """

        self._ctrlr_b_fc_config = ctrlr_b_fc_config

    @property
    def id(self):
        """Gets the id of this NimbleArraysList.  # noqa: E501

        Identifier for the array. A 42 digit hexadecimal number.  # noqa: E501

        :return: The id of this NimbleArraysList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleArraysList.

        Identifier for the array. A 42 digit hexadecimal number.  # noqa: E501

        :param id: The id of this NimbleArraysList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NimbleArraysList.  # noqa: E501

        Name of the  array list. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The name of this NimbleArraysList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleArraysList.

        Name of the  array list. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param name: The name of this NimbleArraysList.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleArraysList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
