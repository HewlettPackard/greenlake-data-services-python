# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleUpdateSnapshotCollectionsStateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'online': 'bool',
        'snapshot_collection_ids': 'list[str]'
    }

    attribute_map = {
        'online': 'online',
        'snapshot_collection_ids': 'snapshot_collection_ids'
    }

    def __init__(self, online=None, snapshot_collection_ids=None):  # noqa: E501
        """NimbleUpdateSnapshotCollectionsStateInput - a model defined in OpenAPI"""  # noqa: E501

        self._online = None
        self._snapshot_collection_ids = None
        self.discriminator = None

        self.online = online
        self.snapshot_collection_ids = snapshot_collection_ids

    @property
    def online(self):
        """Gets the online of this NimbleUpdateSnapshotCollectionsStateInput.  # noqa: E501

        Online state for the corresponding snapshots. For a snapshot, 'online' means it could be mounted for data restore.  # noqa: E501

        :return: The online of this NimbleUpdateSnapshotCollectionsStateInput.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this NimbleUpdateSnapshotCollectionsStateInput.

        Online state for the corresponding snapshots. For a snapshot, 'online' means it could be mounted for data restore.  # noqa: E501

        :param online: The online of this NimbleUpdateSnapshotCollectionsStateInput.  # noqa: E501
        :type: bool
        """
        if online is None:
            raise ValueError("Invalid value for `online`, must not be `None`")  # noqa: E501

        self._online = online

    @property
    def snapshot_collection_ids(self):
        """Gets the snapshot_collection_ids of this NimbleUpdateSnapshotCollectionsStateInput.  # noqa: E501

        List of IDs of snapshot collections to be set online/offline.  # noqa: E501

        :return: The snapshot_collection_ids of this NimbleUpdateSnapshotCollectionsStateInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._snapshot_collection_ids

    @snapshot_collection_ids.setter
    def snapshot_collection_ids(self, snapshot_collection_ids):
        """Sets the snapshot_collection_ids of this NimbleUpdateSnapshotCollectionsStateInput.

        List of IDs of snapshot collections to be set online/offline.  # noqa: E501

        :param snapshot_collection_ids: The snapshot_collection_ids of this NimbleUpdateSnapshotCollectionsStateInput.  # noqa: E501
        :type: list[str]
        """
        if snapshot_collection_ids is None:
            raise ValueError("Invalid value for `snapshot_collection_ids`, must not be `None`")  # noqa: E501

        self._snapshot_collection_ids = snapshot_collection_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleUpdateSnapshotCollectionsStateInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
