# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditDnsSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dns_servers': 'list[IPAddressObject]',
        'domain_name': 'str'
    }

    attribute_map = {
        'dns_servers': 'dns_servers',
        'domain_name': 'domain_name'
    }

    def __init__(self, dns_servers=None, domain_name=None):  # noqa: E501
        """EditDnsSettings - a model defined in OpenAPI"""  # noqa: E501

        self._dns_servers = None
        self._domain_name = None
        self.discriminator = None

        if dns_servers is not None:
            self.dns_servers = dns_servers
        if domain_name is not None:
            self.domain_name = domain_name

    @property
    def dns_servers(self):
        """Gets the dns_servers of this EditDnsSettings.  # noqa: E501

        IP addresses for this groups dns servers. List of IP Addresses.  # noqa: E501

        :return: The dns_servers of this EditDnsSettings.  # noqa: E501
        :rtype: list[IPAddressObject]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this EditDnsSettings.

        IP addresses for this groups dns servers. List of IP Addresses.  # noqa: E501

        :param dns_servers: The dns_servers of this EditDnsSettings.  # noqa: E501
        :type: list[IPAddressObject]
        """

        self._dns_servers = dns_servers

    @property
    def domain_name(self):
        """Gets the domain_name of this EditDnsSettings.  # noqa: E501

        Domain name for this group. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The domain_name of this EditDnsSettings.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this EditDnsSettings.

        Domain name for this group. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param domain_name: The domain_name of this EditDnsSettings.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditDnsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
