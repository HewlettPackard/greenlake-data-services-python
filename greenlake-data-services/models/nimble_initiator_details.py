# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleInitiatorDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_protocol': 'str',
        'alias': 'str',
        'associated_links': 'AssociatedLinks',
        'chapuser_id': 'str',
        'creation_time': 'int',
        'id': 'str',
        'initiator_group_id': 'str',
        'initiator_group_name': 'str',
        'ip_address': 'str',
        'iqn': 'str',
        'label': 'str',
        'last_modified': 'int',
        'override_existing_alias': 'bool',
        'request_uri': 'str',
        'wwpn': 'str'
    }

    attribute_map = {
        'access_protocol': 'access_protocol',
        'alias': 'alias',
        'associated_links': 'associated_links',
        'chapuser_id': 'chapuser_id',
        'creation_time': 'creation_time',
        'id': 'id',
        'initiator_group_id': 'initiator_group_id',
        'initiator_group_name': 'initiator_group_name',
        'ip_address': 'ip_address',
        'iqn': 'iqn',
        'label': 'label',
        'last_modified': 'last_modified',
        'override_existing_alias': 'override_existing_alias',
        'request_uri': 'requestUri',
        'wwpn': 'wwpn'
    }

    def __init__(self, access_protocol=None, alias=None, associated_links=None, chapuser_id=None, creation_time=None, id=None, initiator_group_id=None, initiator_group_name=None, ip_address=None, iqn=None, label=None, last_modified=None, override_existing_alias=None, request_uri=None, wwpn=None):  # noqa: E501
        """NimbleInitiatorDetails - a model defined in OpenAPI"""  # noqa: E501

        self._access_protocol = None
        self._alias = None
        self._associated_links = None
        self._chapuser_id = None
        self._creation_time = None
        self._id = None
        self._initiator_group_id = None
        self._initiator_group_name = None
        self._ip_address = None
        self._iqn = None
        self._label = None
        self._last_modified = None
        self._override_existing_alias = None
        self._request_uri = None
        self._wwpn = None
        self.discriminator = None

        if access_protocol is not None:
            self.access_protocol = access_protocol
        if alias is not None:
            self.alias = alias
        if associated_links is not None:
            self.associated_links = associated_links
        if chapuser_id is not None:
            self.chapuser_id = chapuser_id
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if initiator_group_id is not None:
            self.initiator_group_id = initiator_group_id
        if initiator_group_name is not None:
            self.initiator_group_name = initiator_group_name
        if ip_address is not None:
            self.ip_address = ip_address
        if iqn is not None:
            self.iqn = iqn
        if label is not None:
            self.label = label
        if last_modified is not None:
            self.last_modified = last_modified
        if override_existing_alias is not None:
            self.override_existing_alias = override_existing_alias
        if request_uri is not None:
            self.request_uri = request_uri
        if wwpn is not None:
            self.wwpn = wwpn

    @property
    def access_protocol(self):
        """Gets the access_protocol of this NimbleInitiatorDetails.  # noqa: E501

        Access protocol used by the initiator. Possible values: 'iscsi', 'fc'.  # noqa: E501

        :return: The access_protocol of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._access_protocol

    @access_protocol.setter
    def access_protocol(self, access_protocol):
        """Sets the access_protocol of this NimbleInitiatorDetails.

        Access protocol used by the initiator. Possible values: 'iscsi', 'fc'.  # noqa: E501

        :param access_protocol: The access_protocol of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._access_protocol = access_protocol

    @property
    def alias(self):
        """Gets the alias of this NimbleInitiatorDetails.  # noqa: E501

        Alias of the Fibre Channel initiator. Maximum alias length is 32 characters. Each initiator alias must have an associated WWPN specified using the 'wwpn' attribute.You can choose not to enter the WWPN for an initiator when using previously saved initiator alias.String of up to 32 alphanumeric characters, or one of $^-_.: cannot begin with non-alphanumeric character.  # noqa: E501

        :return: The alias of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this NimbleInitiatorDetails.

        Alias of the Fibre Channel initiator. Maximum alias length is 32 characters. Each initiator alias must have an associated WWPN specified using the 'wwpn' attribute.You can choose not to enter the WWPN for an initiator when using previously saved initiator alias.String of up to 32 alphanumeric characters, or one of $^-_.: cannot begin with non-alphanumeric character.  # noqa: E501

        :param alias: The alias of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleInitiatorDetails.  # noqa: E501


        :return: The associated_links of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleInitiatorDetails.


        :param associated_links: The associated_links of this NimbleInitiatorDetails.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def chapuser_id(self):
        """Gets the chapuser_id of this NimbleInitiatorDetails.  # noqa: E501

        Identifier for the CHAP user.  # noqa: E501

        :return: The chapuser_id of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._chapuser_id

    @chapuser_id.setter
    def chapuser_id(self, chapuser_id):
        """Sets the chapuser_id of this NimbleInitiatorDetails.

        Identifier for the CHAP user.  # noqa: E501

        :param chapuser_id: The chapuser_id of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._chapuser_id = chapuser_id

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleInitiatorDetails.  # noqa: E501

        Time when this initiator group was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The creation_time of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleInitiatorDetails.

        Time when this initiator group was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param creation_time: The creation_time of this NimbleInitiatorDetails.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this NimbleInitiatorDetails.  # noqa: E501

        Identifier for initiator. A 42 digit hexadecimal number.  # noqa: E501

        :return: The id of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleInitiatorDetails.

        Identifier for initiator. A 42 digit hexadecimal number.  # noqa: E501

        :param id: The id of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initiator_group_id(self):
        """Gets the initiator_group_id of this NimbleInitiatorDetails.  # noqa: E501

        Identifier of the initiator group that this initiator is assigned to. A 42 digit hexadecimal number.  # noqa: E501

        :return: The initiator_group_id of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._initiator_group_id

    @initiator_group_id.setter
    def initiator_group_id(self, initiator_group_id):
        """Sets the initiator_group_id of this NimbleInitiatorDetails.

        Identifier of the initiator group that this initiator is assigned to. A 42 digit hexadecimal number.  # noqa: E501

        :param initiator_group_id: The initiator_group_id of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._initiator_group_id = initiator_group_id

    @property
    def initiator_group_name(self):
        """Gets the initiator_group_name of this NimbleInitiatorDetails.  # noqa: E501

        Name of the initiator group that this initiator is assigned to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character  # noqa: E501

        :return: The initiator_group_name of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._initiator_group_name

    @initiator_group_name.setter
    def initiator_group_name(self, initiator_group_name):
        """Sets the initiator_group_name of this NimbleInitiatorDetails.

        Name of the initiator group that this initiator is assigned to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character  # noqa: E501

        :param initiator_group_name: The initiator_group_name of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._initiator_group_name = initiator_group_name

    @property
    def ip_address(self):
        """Gets the ip_address of this NimbleInitiatorDetails.  # noqa: E501

        IP address of the iSCSI initiator. Each initiator IP address must have an associated name specified using 'name' attribute.You can choose not to enter the name for an initiator if you prefer not to authenticate using both name and IP address, in this case the IQN name will be returned as '*'. Alphanumeric, hyphenated, colon or period separated string of up to 255 characters or '*'  # noqa: E501

        :return: The ip_address of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NimbleInitiatorDetails.

        IP address of the iSCSI initiator. Each initiator IP address must have an associated name specified using 'name' attribute.You can choose not to enter the name for an initiator if you prefer not to authenticate using both name and IP address, in this case the IQN name will be returned as '*'. Alphanumeric, hyphenated, colon or period separated string of up to 255 characters or '*'  # noqa: E501

        :param ip_address: The ip_address of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def iqn(self):
        """Gets the iqn of this NimbleInitiatorDetails.  # noqa: E501

        IQN name of the iSCSI initiator. Each initiator IQN name must have an associated IP address specified using the 'ip_address' attribute.You can choose not to enter the IP address for an initiator if you prefer not to authenticate using both name and IP address,in this case the IP address will be returned as '*'.  # noqa: E501

        :return: The iqn of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn):
        """Sets the iqn of this NimbleInitiatorDetails.

        IQN name of the iSCSI initiator. Each initiator IQN name must have an associated IP address specified using the 'ip_address' attribute.You can choose not to enter the IP address for an initiator if you prefer not to authenticate using both name and IP address,in this case the IP address will be returned as '*'.  # noqa: E501

        :param iqn: The iqn of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._iqn = iqn

    @property
    def label(self):
        """Gets the label of this NimbleInitiatorDetails.  # noqa: E501

        Unique Identifier of the iSCSI initiator. Label is required when creating iSCSI initiator. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The label of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NimbleInitiatorDetails.

        Unique Identifier of the iSCSI initiator. Label is required when creating iSCSI initiator. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param label: The label of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleInitiatorDetails.  # noqa: E501

        Time when this initiator group was last modified.Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The last_modified of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleInitiatorDetails.

        Time when this initiator group was last modified.Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param last_modified: The last_modified of this NimbleInitiatorDetails.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def override_existing_alias(self):
        """Gets the override_existing_alias of this NimbleInitiatorDetails.  # noqa: E501

        Forcibly add Fibre Channel initiator to initiator group by updating or removing conflicting Fibre Channel initiator aliases.  # noqa: E501

        :return: The override_existing_alias of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: bool
        """
        return self._override_existing_alias

    @override_existing_alias.setter
    def override_existing_alias(self, override_existing_alias):
        """Sets the override_existing_alias of this NimbleInitiatorDetails.

        Forcibly add Fibre Channel initiator to initiator group by updating or removing conflicting Fibre Channel initiator aliases.  # noqa: E501

        :param override_existing_alias: The override_existing_alias of this NimbleInitiatorDetails.  # noqa: E501
        :type: bool
        """

        self._override_existing_alias = override_existing_alias

    @property
    def request_uri(self):
        """Gets the request_uri of this NimbleInitiatorDetails.  # noqa: E501

        requestUri for detailed initiators object  # noqa: E501

        :return: The request_uri of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this NimbleInitiatorDetails.

        requestUri for detailed initiators object  # noqa: E501

        :param request_uri: The request_uri of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def wwpn(self):
        """Gets the wwpn of this NimbleInitiatorDetails.  # noqa: E501

        WWPN (World Wide Port Name) of the Fibre Channel initiator. WWPN is required when creating a Fibre Channel initiator. Each initiator WWPN can have an associated alias specified using the 'alias' attribute. You can choose not to enter the alias for an initiator if you prefer not to assign an initiator alias. Eight bytes expressed in hex separated by colons.  # noqa: E501

        :return: The wwpn of this NimbleInitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._wwpn

    @wwpn.setter
    def wwpn(self, wwpn):
        """Sets the wwpn of this NimbleInitiatorDetails.

        WWPN (World Wide Port Name) of the Fibre Channel initiator. WWPN is required when creating a Fibre Channel initiator. Each initiator WWPN can have an associated alias specified using the 'alias' attribute. You can choose not to enter the alias for an initiator if you prefer not to assign an initiator alias. Eight bytes expressed in hex separated by colons.  # noqa: E501

        :param wwpn: The wwpn of this NimbleInitiatorDetails.  # noqa: E501
        :type: str
        """

        self._wwpn = wwpn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleInitiatorDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
