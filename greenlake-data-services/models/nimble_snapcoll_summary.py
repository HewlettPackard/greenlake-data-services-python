# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleSnapcollSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'snapcoll_creation_time': 'str',
        'snapcoll_id': 'str',
        'snapcoll_name': 'str'
    }

    attribute_map = {
        'snapcoll_creation_time': 'snapcoll_creation_time',
        'snapcoll_id': 'snapcoll_id',
        'snapcoll_name': 'snapcoll_name'
    }

    def __init__(self, snapcoll_creation_time=None, snapcoll_id=None, snapcoll_name=None):  # noqa: E501
        """NimbleSnapcollSummary - a model defined in OpenAPI"""  # noqa: E501

        self._snapcoll_creation_time = None
        self._snapcoll_id = None
        self._snapcoll_name = None
        self.discriminator = None

        if snapcoll_creation_time is not None:
            self.snapcoll_creation_time = snapcoll_creation_time
        if snapcoll_id is not None:
            self.snapcoll_id = snapcoll_id
        if snapcoll_name is not None:
            self.snapcoll_name = snapcoll_name

    @property
    def snapcoll_creation_time(self):
        """Gets the snapcoll_creation_time of this NimbleSnapcollSummary.  # noqa: E501

        Creation time of snapshot collection.  # noqa: E501

        :return: The snapcoll_creation_time of this NimbleSnapcollSummary.  # noqa: E501
        :rtype: str
        """
        return self._snapcoll_creation_time

    @snapcoll_creation_time.setter
    def snapcoll_creation_time(self, snapcoll_creation_time):
        """Sets the snapcoll_creation_time of this NimbleSnapcollSummary.

        Creation time of snapshot collection.  # noqa: E501

        :param snapcoll_creation_time: The snapcoll_creation_time of this NimbleSnapcollSummary.  # noqa: E501
        :type: str
        """

        self._snapcoll_creation_time = snapcoll_creation_time

    @property
    def snapcoll_id(self):
        """Gets the snapcoll_id of this NimbleSnapcollSummary.  # noqa: E501

        ID of snapshot collection.  # noqa: E501

        :return: The snapcoll_id of this NimbleSnapcollSummary.  # noqa: E501
        :rtype: str
        """
        return self._snapcoll_id

    @snapcoll_id.setter
    def snapcoll_id(self, snapcoll_id):
        """Sets the snapcoll_id of this NimbleSnapcollSummary.

        ID of snapshot collection.  # noqa: E501

        :param snapcoll_id: The snapcoll_id of this NimbleSnapcollSummary.  # noqa: E501
        :type: str
        """

        self._snapcoll_id = snapcoll_id

    @property
    def snapcoll_name(self):
        """Gets the snapcoll_name of this NimbleSnapcollSummary.  # noqa: E501

        Name of snapshot collection.  # noqa: E501

        :return: The snapcoll_name of this NimbleSnapcollSummary.  # noqa: E501
        :rtype: str
        """
        return self._snapcoll_name

    @snapcoll_name.setter
    def snapcoll_name(self, snapcoll_name):
        """Sets the snapcoll_name of this NimbleSnapcollSummary.

        Name of snapshot collection.  # noqa: E501

        :param snapcoll_name: The snapcoll_name of this NimbleSnapcollSummary.  # noqa: E501
        :type: str
        """

        self._snapcoll_name = snapcoll_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleSnapcollSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
