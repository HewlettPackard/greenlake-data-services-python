# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleDiskCommon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'AssociatedLinks',
        'bank': 'int',
        'block_type': 'str',
        'console_uri': 'str',
        'customer_id': 'str',
        'disk_internal_stat1': 'str',
        'firmware_version': 'str',
        'generation': 'int',
        'hba': 'int',
        'is_dfc': 'bool',
        'path': 'str',
        'port': 'int',
        'raid_id': 'int',
        'raid_resync_average_speed': 'int',
        'raid_resync_current_speed': 'int',
        'raid_resync_percent': 'int',
        'raid_state': 'str',
        'resource_uri': 'str',
        'shelf_location': 'str',
        'shelf_location_id': 'int',
        'size': 'int',
        'slot': 'int',
        'smart_attribute_list': 'list[NimbleDiskSmartAttributes]',
        'type': 'str',
        'vendor': 'str',
        'vshelf_id': 'int'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'bank': 'bank',
        'block_type': 'block_type',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'disk_internal_stat1': 'disk_internal_stat1',
        'firmware_version': 'firmware_version',
        'generation': 'generation',
        'hba': 'hba',
        'is_dfc': 'is_dfc',
        'path': 'path',
        'port': 'port',
        'raid_id': 'raid_id',
        'raid_resync_average_speed': 'raid_resync_average_speed',
        'raid_resync_current_speed': 'raid_resync_current_speed',
        'raid_resync_percent': 'raid_resync_percent',
        'raid_state': 'raid_state',
        'resource_uri': 'resourceUri',
        'shelf_location': 'shelf_location',
        'shelf_location_id': 'shelf_location_id',
        'size': 'size',
        'slot': 'slot',
        'smart_attribute_list': 'smart_attribute_list',
        'type': 'type',
        'vendor': 'vendor',
        'vshelf_id': 'vshelf_id'
    }

    def __init__(self, associated_links=None, bank=None, block_type=None, console_uri=None, customer_id=None, disk_internal_stat1=None, firmware_version=None, generation=None, hba=None, is_dfc=None, path=None, port=None, raid_id=None, raid_resync_average_speed=None, raid_resync_current_speed=None, raid_resync_percent=None, raid_state=None, resource_uri=None, shelf_location=None, shelf_location_id=None, size=None, slot=None, smart_attribute_list=None, type=None, vendor=None, vshelf_id=None):  # noqa: E501
        """NimbleDiskCommon - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._bank = None
        self._block_type = None
        self._console_uri = None
        self._customer_id = None
        self._disk_internal_stat1 = None
        self._firmware_version = None
        self._generation = None
        self._hba = None
        self._is_dfc = None
        self._path = None
        self._port = None
        self._raid_id = None
        self._raid_resync_average_speed = None
        self._raid_resync_current_speed = None
        self._raid_resync_percent = None
        self._raid_state = None
        self._resource_uri = None
        self._shelf_location = None
        self._shelf_location_id = None
        self._size = None
        self._slot = None
        self._smart_attribute_list = None
        self._type = None
        self._vendor = None
        self._vshelf_id = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if bank is not None:
            self.bank = bank
        if block_type is not None:
            self.block_type = block_type
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if disk_internal_stat1 is not None:
            self.disk_internal_stat1 = disk_internal_stat1
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if generation is not None:
            self.generation = generation
        if hba is not None:
            self.hba = hba
        if is_dfc is not None:
            self.is_dfc = is_dfc
        if path is not None:
            self.path = path
        if port is not None:
            self.port = port
        if raid_id is not None:
            self.raid_id = raid_id
        if raid_resync_average_speed is not None:
            self.raid_resync_average_speed = raid_resync_average_speed
        if raid_resync_current_speed is not None:
            self.raid_resync_current_speed = raid_resync_current_speed
        if raid_resync_percent is not None:
            self.raid_resync_percent = raid_resync_percent
        if raid_state is not None:
            self.raid_state = raid_state
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if shelf_location is not None:
            self.shelf_location = shelf_location
        if shelf_location_id is not None:
            self.shelf_location_id = shelf_location_id
        if size is not None:
            self.size = size
        if slot is not None:
            self.slot = slot
        if smart_attribute_list is not None:
            self.smart_attribute_list = smart_attribute_list
        if type is not None:
            self.type = type
        if vendor is not None:
            self.vendor = vendor
        if vshelf_id is not None:
            self.vshelf_id = vshelf_id

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleDiskCommon.  # noqa: E501


        :return: The associated_links of this NimbleDiskCommon.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleDiskCommon.


        :param associated_links: The associated_links of this NimbleDiskCommon.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def bank(self):
        """Gets the bank of this NimbleDiskCommon.  # noqa: E501

        Disk bank number.  # noqa: E501

        :return: The bank of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this NimbleDiskCommon.

        Disk bank number.  # noqa: E501

        :param bank: The bank of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._bank = bank

    @property
    def block_type(self):
        """Gets the block_type of this NimbleDiskCommon.  # noqa: E501

        Native block type of the disk. Possible values: 'block_512e', 'block_4Kn', 'block_none', 'block_512n'.  # noqa: E501

        :return: The block_type of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._block_type

    @block_type.setter
    def block_type(self, block_type):
        """Sets the block_type of this NimbleDiskCommon.

        Native block type of the disk. Possible values: 'block_512e', 'block_4Kn', 'block_none', 'block_512n'.  # noqa: E501

        :param block_type: The block_type of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._block_type = block_type

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleDiskCommon.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleDiskCommon.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleDiskCommon.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleDiskCommon.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def disk_internal_stat1(self):
        """Gets the disk_internal_stat1 of this NimbleDiskCommon.  # noqa: E501

        Internal disk statistic 1.  # noqa: E501

        :return: The disk_internal_stat1 of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._disk_internal_stat1

    @disk_internal_stat1.setter
    def disk_internal_stat1(self, disk_internal_stat1):
        """Sets the disk_internal_stat1 of this NimbleDiskCommon.

        Internal disk statistic 1.  # noqa: E501

        :param disk_internal_stat1: The disk_internal_stat1 of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._disk_internal_stat1 = disk_internal_stat1

    @property
    def firmware_version(self):
        """Gets the firmware_version of this NimbleDiskCommon.  # noqa: E501

        Firmware version on the disk.  # noqa: E501

        :return: The firmware_version of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this NimbleDiskCommon.

        Firmware version on the disk.  # noqa: E501

        :param firmware_version: The firmware_version of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def generation(self):
        """Gets the generation of this NimbleDiskCommon.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleDiskCommon.

        generation  # noqa: E501

        :param generation: The generation of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def hba(self):
        """Gets the hba of this NimbleDiskCommon.  # noqa: E501

        HBA ID the disk is connected to.  # noqa: E501

        :return: The hba of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._hba

    @hba.setter
    def hba(self, hba):
        """Sets the hba of this NimbleDiskCommon.

        HBA ID the disk is connected to.  # noqa: E501

        :param hba: The hba of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._hba = hba

    @property
    def is_dfc(self):
        """Gets the is_dfc of this NimbleDiskCommon.  # noqa: E501

        Is disk part of dual flash carrier.  # noqa: E501

        :return: The is_dfc of this NimbleDiskCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_dfc

    @is_dfc.setter
    def is_dfc(self, is_dfc):
        """Sets the is_dfc of this NimbleDiskCommon.

        Is disk part of dual flash carrier.  # noqa: E501

        :param is_dfc: The is_dfc of this NimbleDiskCommon.  # noqa: E501
        :type: bool
        """

        self._is_dfc = is_dfc

    @property
    def path(self):
        """Gets the path of this NimbleDiskCommon.  # noqa: E501

        Disk SCSI device path.  # noqa: E501

        :return: The path of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NimbleDiskCommon.

        Disk SCSI device path.  # noqa: E501

        :param path: The path of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this NimbleDiskCommon.  # noqa: E501

        HBA port number the disk is connected to.  # noqa: E501

        :return: The port of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NimbleDiskCommon.

        HBA port number the disk is connected to.  # noqa: E501

        :param port: The port of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def raid_id(self):
        """Gets the raid_id of this NimbleDiskCommon.  # noqa: E501

        Raid ID.  # noqa: E501

        :return: The raid_id of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._raid_id

    @raid_id.setter
    def raid_id(self, raid_id):
        """Sets the raid_id of this NimbleDiskCommon.

        Raid ID.  # noqa: E501

        :param raid_id: The raid_id of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._raid_id = raid_id

    @property
    def raid_resync_average_speed(self):
        """Gets the raid_resync_average_speed of this NimbleDiskCommon.  # noqa: E501

        Average RAID rebuild speed (bytes/sec).  # noqa: E501

        :return: The raid_resync_average_speed of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._raid_resync_average_speed

    @raid_resync_average_speed.setter
    def raid_resync_average_speed(self, raid_resync_average_speed):
        """Sets the raid_resync_average_speed of this NimbleDiskCommon.

        Average RAID rebuild speed (bytes/sec).  # noqa: E501

        :param raid_resync_average_speed: The raid_resync_average_speed of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._raid_resync_average_speed = raid_resync_average_speed

    @property
    def raid_resync_current_speed(self):
        """Gets the raid_resync_current_speed of this NimbleDiskCommon.  # noqa: E501

        Current RAID rebuild speed (bytes/sec).  # noqa: E501

        :return: The raid_resync_current_speed of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._raid_resync_current_speed

    @raid_resync_current_speed.setter
    def raid_resync_current_speed(self, raid_resync_current_speed):
        """Sets the raid_resync_current_speed of this NimbleDiskCommon.

        Current RAID rebuild speed (bytes/sec).  # noqa: E501

        :param raid_resync_current_speed: The raid_resync_current_speed of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._raid_resync_current_speed = raid_resync_current_speed

    @property
    def raid_resync_percent(self):
        """Gets the raid_resync_percent of this NimbleDiskCommon.  # noqa: E501

        Percentage RAID rebuild completed on this disk.  # noqa: E501

        :return: The raid_resync_percent of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._raid_resync_percent

    @raid_resync_percent.setter
    def raid_resync_percent(self, raid_resync_percent):
        """Sets the raid_resync_percent of this NimbleDiskCommon.

        Percentage RAID rebuild completed on this disk.  # noqa: E501

        :param raid_resync_percent: The raid_resync_percent of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._raid_resync_percent = raid_resync_percent

    @property
    def raid_state(self):
        """Gets the raid_state of this NimbleDiskCommon.  # noqa: E501

        RAID status for the disk (N/A, okay, resynchronizing, spare, faulty). Disk RAID state. Possible values: 'N/A', 'okay', 'resynchronizing', 'spare', 'faulty'.  # noqa: E501

        :return: The raid_state of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._raid_state

    @raid_state.setter
    def raid_state(self, raid_state):
        """Sets the raid_state of this NimbleDiskCommon.

        RAID status for the disk (N/A, okay, resynchronizing, spare, faulty). Disk RAID state. Possible values: 'N/A', 'okay', 'resynchronizing', 'spare', 'faulty'.  # noqa: E501

        :param raid_state: The raid_state of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._raid_state = raid_state

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleDiskCommon.  # noqa: E501


        :return: The resource_uri of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleDiskCommon.


        :param resource_uri: The resource_uri of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def shelf_location(self):
        """Gets the shelf_location of this NimbleDiskCommon.  # noqa: E501

        Identifies the controller, port, and chain position of the shelf the disk belongs to.  # noqa: E501

        :return: The shelf_location of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._shelf_location

    @shelf_location.setter
    def shelf_location(self, shelf_location):
        """Sets the shelf_location of this NimbleDiskCommon.

        Identifies the controller, port, and chain position of the shelf the disk belongs to.  # noqa: E501

        :param shelf_location: The shelf_location of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._shelf_location = shelf_location

    @property
    def shelf_location_id(self):
        """Gets the shelf_location_id of this NimbleDiskCommon.  # noqa: E501

        Identifies the position shelf the disk belongs to, as coded integer.  # noqa: E501

        :return: The shelf_location_id of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._shelf_location_id

    @shelf_location_id.setter
    def shelf_location_id(self, shelf_location_id):
        """Sets the shelf_location_id of this NimbleDiskCommon.

        Identifies the position shelf the disk belongs to, as coded integer.  # noqa: E501

        :param shelf_location_id: The shelf_location_id of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._shelf_location_id = shelf_location_id

    @property
    def size(self):
        """Gets the size of this NimbleDiskCommon.  # noqa: E501

        Disk size in bytes.  # noqa: E501

        :return: The size of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NimbleDiskCommon.

        Disk size in bytes.  # noqa: E501

        :param size: The size of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def slot(self):
        """Gets the slot of this NimbleDiskCommon.  # noqa: E501

        Disk slot number.  # noqa: E501

        :return: The slot of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this NimbleDiskCommon.

        Disk slot number.  # noqa: E501

        :param slot: The slot of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def smart_attribute_list(self):
        """Gets the smart_attribute_list of this NimbleDiskCommon.  # noqa: E501

        S.M.A.R.T. attributes for the disk. List of Smart attributes.  # noqa: E501

        :return: The smart_attribute_list of this NimbleDiskCommon.  # noqa: E501
        :rtype: list[NimbleDiskSmartAttributes]
        """
        return self._smart_attribute_list

    @smart_attribute_list.setter
    def smart_attribute_list(self, smart_attribute_list):
        """Sets the smart_attribute_list of this NimbleDiskCommon.

        S.M.A.R.T. attributes for the disk. List of Smart attributes.  # noqa: E501

        :param smart_attribute_list: The smart_attribute_list of this NimbleDiskCommon.  # noqa: E501
        :type: list[NimbleDiskSmartAttributes]
        """

        self._smart_attribute_list = smart_attribute_list

    @property
    def type(self):
        """Gets the type of this NimbleDiskCommon.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleDiskCommon.

        type  # noqa: E501

        :param type: The type of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vendor(self):
        """Gets the vendor of this NimbleDiskCommon.  # noqa: E501

        Vendor name of the disk manufacturer.  # noqa: E501

        :return: The vendor of this NimbleDiskCommon.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this NimbleDiskCommon.

        Vendor name of the disk manufacturer.  # noqa: E501

        :param vendor: The vendor of this NimbleDiskCommon.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def vshelf_id(self):
        """Gets the vshelf_id of this NimbleDiskCommon.  # noqa: E501

        Identifies the local shelf id the disk belongs to.  # noqa: E501

        :return: The vshelf_id of this NimbleDiskCommon.  # noqa: E501
        :rtype: int
        """
        return self._vshelf_id

    @vshelf_id.setter
    def vshelf_id(self, vshelf_id):
        """Sets the vshelf_id of this NimbleDiskCommon.

        Identifies the local shelf id the disk belongs to.  # noqa: E501

        :param vshelf_id: The vshelf_id of this NimbleDiskCommon.  # noqa: E501
        :type: int
        """

        self._vshelf_id = vshelf_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleDiskCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
