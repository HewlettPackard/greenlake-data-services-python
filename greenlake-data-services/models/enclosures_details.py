# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EnclosuresDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'EncAssociatedLinks',
        'chain_pos_loop_a': 'int',
        'chain_pos_loop_b': 'int',
        'console_uri': 'str',
        'customer_id': 'str',
        'dc4data': 'Dc4data',
        'dcsdata': 'EncDcsdata',
        'detailed_state': 'str',
        'displayname': 'str',
        'domain': 'str',
        'enclosure_id': 'int',
        'enclosure_type': 'EnclosureTypeSingle',
        'errors': 'Errors',
        'fail_indicator': 'bool',
        'fail_requested': 'bool',
        'form_factor': 'str',
        'generation': 'int',
        'id': 'str',
        'locate_enabled': 'bool',
        'location': 'str',
        'loop_split': 'bool',
        'manufacturing': 'ManufacturingSingle',
        'name': 'str',
        'node_wwn': 'str',
        'request_uri': 'str',
        'resource_uri': 'str',
        'state': 'STATE',
        'sub_type': 'str',
        'system_id': 'str',
        'type': 'str',
        'warn_indicator': 'bool',
        'warn_requested': 'bool'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'chain_pos_loop_a': 'chainPosLoopA',
        'chain_pos_loop_b': 'chainPosLoopB',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'dc4data': 'dc4data',
        'dcsdata': 'dcsdata',
        'detailed_state': 'detailedState',
        'displayname': 'displayname',
        'domain': 'domain',
        'enclosure_id': 'enclosureId',
        'enclosure_type': 'enclosureType',
        'errors': 'errors',
        'fail_indicator': 'failIndicator',
        'fail_requested': 'failRequested',
        'form_factor': 'formFactor',
        'generation': 'generation',
        'id': 'id',
        'locate_enabled': 'locateEnabled',
        'location': 'location',
        'loop_split': 'loopSplit',
        'manufacturing': 'manufacturing',
        'name': 'name',
        'node_wwn': 'nodeWwn',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'state': 'state',
        'sub_type': 'subType',
        'system_id': 'systemId',
        'type': 'type',
        'warn_indicator': 'warnIndicator',
        'warn_requested': 'warnRequested'
    }

    def __init__(self, associated_links=None, chain_pos_loop_a=None, chain_pos_loop_b=None, console_uri=None, customer_id=None, dc4data=None, dcsdata=None, detailed_state=None, displayname=None, domain=None, enclosure_id=None, enclosure_type=None, errors=None, fail_indicator=None, fail_requested=None, form_factor=None, generation=None, id=None, locate_enabled=None, location=None, loop_split=None, manufacturing=None, name=None, node_wwn=None, request_uri=None, resource_uri=None, state=None, sub_type=None, system_id=None, type=None, warn_indicator=None, warn_requested=None):  # noqa: E501
        """EnclosuresDetails - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._chain_pos_loop_a = None
        self._chain_pos_loop_b = None
        self._console_uri = None
        self._customer_id = None
        self._dc4data = None
        self._dcsdata = None
        self._detailed_state = None
        self._displayname = None
        self._domain = None
        self._enclosure_id = None
        self._enclosure_type = None
        self._errors = None
        self._fail_indicator = None
        self._fail_requested = None
        self._form_factor = None
        self._generation = None
        self._id = None
        self._locate_enabled = None
        self._location = None
        self._loop_split = None
        self._manufacturing = None
        self._name = None
        self._node_wwn = None
        self._request_uri = None
        self._resource_uri = None
        self._state = None
        self._sub_type = None
        self._system_id = None
        self._type = None
        self._warn_indicator = None
        self._warn_requested = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if chain_pos_loop_a is not None:
            self.chain_pos_loop_a = chain_pos_loop_a
        if chain_pos_loop_b is not None:
            self.chain_pos_loop_b = chain_pos_loop_b
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if dc4data is not None:
            self.dc4data = dc4data
        if dcsdata is not None:
            self.dcsdata = dcsdata
        if detailed_state is not None:
            self.detailed_state = detailed_state
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if enclosure_id is not None:
            self.enclosure_id = enclosure_id
        if enclosure_type is not None:
            self.enclosure_type = enclosure_type
        if errors is not None:
            self.errors = errors
        if fail_indicator is not None:
            self.fail_indicator = fail_indicator
        if fail_requested is not None:
            self.fail_requested = fail_requested
        if form_factor is not None:
            self.form_factor = form_factor
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if locate_enabled is not None:
            self.locate_enabled = locate_enabled
        if location is not None:
            self.location = location
        if loop_split is not None:
            self.loop_split = loop_split
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if name is not None:
            self.name = name
        if node_wwn is not None:
            self.node_wwn = node_wwn
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if state is not None:
            self.state = state
        if sub_type is not None:
            self.sub_type = sub_type
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type
        if warn_indicator is not None:
            self.warn_indicator = warn_indicator
        if warn_requested is not None:
            self.warn_requested = warn_requested

    @property
    def associated_links(self):
        """Gets the associated_links of this EnclosuresDetails.  # noqa: E501


        :return: The associated_links of this EnclosuresDetails.  # noqa: E501
        :rtype: EncAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this EnclosuresDetails.


        :param associated_links: The associated_links of this EnclosuresDetails.  # noqa: E501
        :type: EncAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def chain_pos_loop_a(self):
        """Gets the chain_pos_loop_a of this EnclosuresDetails.  # noqa: E501


        :return: The chain_pos_loop_a of this EnclosuresDetails.  # noqa: E501
        :rtype: int
        """
        return self._chain_pos_loop_a

    @chain_pos_loop_a.setter
    def chain_pos_loop_a(self, chain_pos_loop_a):
        """Sets the chain_pos_loop_a of this EnclosuresDetails.


        :param chain_pos_loop_a: The chain_pos_loop_a of this EnclosuresDetails.  # noqa: E501
        :type: int
        """

        self._chain_pos_loop_a = chain_pos_loop_a

    @property
    def chain_pos_loop_b(self):
        """Gets the chain_pos_loop_b of this EnclosuresDetails.  # noqa: E501


        :return: The chain_pos_loop_b of this EnclosuresDetails.  # noqa: E501
        :rtype: int
        """
        return self._chain_pos_loop_b

    @chain_pos_loop_b.setter
    def chain_pos_loop_b(self, chain_pos_loop_b):
        """Sets the chain_pos_loop_b of this EnclosuresDetails.


        :param chain_pos_loop_b: The chain_pos_loop_b of this EnclosuresDetails.  # noqa: E501
        :type: int
        """

        self._chain_pos_loop_b = chain_pos_loop_b

    @property
    def console_uri(self):
        """Gets the console_uri of this EnclosuresDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this EnclosuresDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this EnclosuresDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this EnclosuresDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def dc4data(self):
        """Gets the dc4data of this EnclosuresDetails.  # noqa: E501


        :return: The dc4data of this EnclosuresDetails.  # noqa: E501
        :rtype: Dc4data
        """
        return self._dc4data

    @dc4data.setter
    def dc4data(self, dc4data):
        """Sets the dc4data of this EnclosuresDetails.


        :param dc4data: The dc4data of this EnclosuresDetails.  # noqa: E501
        :type: Dc4data
        """

        self._dc4data = dc4data

    @property
    def dcsdata(self):
        """Gets the dcsdata of this EnclosuresDetails.  # noqa: E501


        :return: The dcsdata of this EnclosuresDetails.  # noqa: E501
        :rtype: EncDcsdata
        """
        return self._dcsdata

    @dcsdata.setter
    def dcsdata(self, dcsdata):
        """Sets the dcsdata of this EnclosuresDetails.


        :param dcsdata: The dcsdata of this EnclosuresDetails.  # noqa: E501
        :type: EncDcsdata
        """

        self._dcsdata = dcsdata

    @property
    def detailed_state(self):
        """Gets the detailed_state of this EnclosuresDetails.  # noqa: E501


        :return: The detailed_state of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._detailed_state

    @detailed_state.setter
    def detailed_state(self, detailed_state):
        """Sets the detailed_state of this EnclosuresDetails.


        :param detailed_state: The detailed_state of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._detailed_state = detailed_state

    @property
    def displayname(self):
        """Gets the displayname of this EnclosuresDetails.  # noqa: E501

        Enclosure Display name  # noqa: E501

        :return: The displayname of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this EnclosuresDetails.

        Enclosure Display name  # noqa: E501

        :param displayname: The displayname of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this EnclosuresDetails.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EnclosuresDetails.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def enclosure_id(self):
        """Gets the enclosure_id of this EnclosuresDetails.  # noqa: E501

        Numeric ID of the resource  # noqa: E501

        :return: The enclosure_id of this EnclosuresDetails.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_id

    @enclosure_id.setter
    def enclosure_id(self, enclosure_id):
        """Sets the enclosure_id of this EnclosuresDetails.

        Numeric ID of the resource  # noqa: E501

        :param enclosure_id: The enclosure_id of this EnclosuresDetails.  # noqa: E501
        :type: int
        """

        self._enclosure_id = enclosure_id

    @property
    def enclosure_type(self):
        """Gets the enclosure_type of this EnclosuresDetails.  # noqa: E501


        :return: The enclosure_type of this EnclosuresDetails.  # noqa: E501
        :rtype: EnclosureTypeSingle
        """
        return self._enclosure_type

    @enclosure_type.setter
    def enclosure_type(self, enclosure_type):
        """Sets the enclosure_type of this EnclosuresDetails.


        :param enclosure_type: The enclosure_type of this EnclosuresDetails.  # noqa: E501
        :type: EnclosureTypeSingle
        """

        self._enclosure_type = enclosure_type

    @property
    def errors(self):
        """Gets the errors of this EnclosuresDetails.  # noqa: E501


        :return: The errors of this EnclosuresDetails.  # noqa: E501
        :rtype: Errors
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this EnclosuresDetails.


        :param errors: The errors of this EnclosuresDetails.  # noqa: E501
        :type: Errors
        """

        self._errors = errors

    @property
    def fail_indicator(self):
        """Gets the fail_indicator of this EnclosuresDetails.  # noqa: E501


        :return: The fail_indicator of this EnclosuresDetails.  # noqa: E501
        :rtype: bool
        """
        return self._fail_indicator

    @fail_indicator.setter
    def fail_indicator(self, fail_indicator):
        """Sets the fail_indicator of this EnclosuresDetails.


        :param fail_indicator: The fail_indicator of this EnclosuresDetails.  # noqa: E501
        :type: bool
        """

        self._fail_indicator = fail_indicator

    @property
    def fail_requested(self):
        """Gets the fail_requested of this EnclosuresDetails.  # noqa: E501


        :return: The fail_requested of this EnclosuresDetails.  # noqa: E501
        :rtype: bool
        """
        return self._fail_requested

    @fail_requested.setter
    def fail_requested(self, fail_requested):
        """Sets the fail_requested of this EnclosuresDetails.


        :param fail_requested: The fail_requested of this EnclosuresDetails.  # noqa: E501
        :type: bool
        """

        self._fail_requested = fail_requested

    @property
    def form_factor(self):
        """Gets the form_factor of this EnclosuresDetails.  # noqa: E501


        :return: The form_factor of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this EnclosuresDetails.


        :param form_factor: The form_factor of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._form_factor = form_factor

    @property
    def generation(self):
        """Gets the generation of this EnclosuresDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this EnclosuresDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this EnclosuresDetails.

        generation  # noqa: E501

        :param generation: The generation of this EnclosuresDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this EnclosuresDetails.  # noqa: E501

        Unique Identifier of the resource.  # noqa: E501

        :return: The id of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnclosuresDetails.

        Unique Identifier of the resource.  # noqa: E501

        :param id: The id of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def locate_enabled(self):
        """Gets the locate_enabled of this EnclosuresDetails.  # noqa: E501

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :return: The locate_enabled of this EnclosuresDetails.  # noqa: E501
        :rtype: bool
        """
        return self._locate_enabled

    @locate_enabled.setter
    def locate_enabled(self, locate_enabled):
        """Sets the locate_enabled of this EnclosuresDetails.

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :param locate_enabled: The locate_enabled of this EnclosuresDetails.  # noqa: E501
        :type: bool
        """

        self._locate_enabled = locate_enabled

    @property
    def location(self):
        """Gets the location of this EnclosuresDetails.  # noqa: E501

        Location of the resource  # noqa: E501

        :return: The location of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EnclosuresDetails.

        Location of the resource  # noqa: E501

        :param location: The location of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def loop_split(self):
        """Gets the loop_split of this EnclosuresDetails.  # noqa: E501


        :return: The loop_split of this EnclosuresDetails.  # noqa: E501
        :rtype: bool
        """
        return self._loop_split

    @loop_split.setter
    def loop_split(self, loop_split):
        """Sets the loop_split of this EnclosuresDetails.


        :param loop_split: The loop_split of this EnclosuresDetails.  # noqa: E501
        :type: bool
        """

        self._loop_split = loop_split

    @property
    def manufacturing(self):
        """Gets the manufacturing of this EnclosuresDetails.  # noqa: E501


        :return: The manufacturing of this EnclosuresDetails.  # noqa: E501
        :rtype: ManufacturingSingle
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this EnclosuresDetails.


        :param manufacturing: The manufacturing of this EnclosuresDetails.  # noqa: E501
        :type: ManufacturingSingle
        """

        self._manufacturing = manufacturing

    @property
    def name(self):
        """Gets the name of this EnclosuresDetails.  # noqa: E501

        Name of the resource.  # noqa: E501

        :return: The name of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnclosuresDetails.

        Name of the resource.  # noqa: E501

        :param name: The name of this EnclosuresDetails.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def node_wwn(self):
        """Gets the node_wwn of this EnclosuresDetails.  # noqa: E501

        WWn of the node resource  # noqa: E501

        :return: The node_wwn of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._node_wwn

    @node_wwn.setter
    def node_wwn(self, node_wwn):
        """Sets the node_wwn of this EnclosuresDetails.

        WWn of the node resource  # noqa: E501

        :param node_wwn: The node_wwn of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._node_wwn = node_wwn

    @property
    def request_uri(self):
        """Gets the request_uri of this EnclosuresDetails.  # noqa: E501

        resourceUri for detailed enclosure object  # noqa: E501

        :return: The request_uri of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this EnclosuresDetails.

        resourceUri for detailed enclosure object  # noqa: E501

        :param request_uri: The request_uri of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this EnclosuresDetails.  # noqa: E501

        resourceUri for detailed enclosure object  # noqa: E501

        :return: The resource_uri of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this EnclosuresDetails.

        resourceUri for detailed enclosure object  # noqa: E501

        :param resource_uri: The resource_uri of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def state(self):
        """Gets the state of this EnclosuresDetails.  # noqa: E501


        :return: The state of this EnclosuresDetails.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EnclosuresDetails.


        :param state: The state of this EnclosuresDetails.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def sub_type(self):
        """Gets the sub_type of this EnclosuresDetails.  # noqa: E501

        Enclosure sub type  # noqa: E501

        :return: The sub_type of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this EnclosuresDetails.

        Enclosure sub type  # noqa: E501

        :param sub_type: The sub_type of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def system_id(self):
        """Gets the system_id of this EnclosuresDetails.  # noqa: E501

        SystemUid/Serial Number  of the array.  # noqa: E501

        :return: The system_id of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this EnclosuresDetails.

        SystemUid/Serial Number  of the array.  # noqa: E501

        :param system_id: The system_id of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this EnclosuresDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this EnclosuresDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnclosuresDetails.

        type  # noqa: E501

        :param type: The type of this EnclosuresDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def warn_indicator(self):
        """Gets the warn_indicator of this EnclosuresDetails.  # noqa: E501


        :return: The warn_indicator of this EnclosuresDetails.  # noqa: E501
        :rtype: bool
        """
        return self._warn_indicator

    @warn_indicator.setter
    def warn_indicator(self, warn_indicator):
        """Sets the warn_indicator of this EnclosuresDetails.


        :param warn_indicator: The warn_indicator of this EnclosuresDetails.  # noqa: E501
        :type: bool
        """

        self._warn_indicator = warn_indicator

    @property
    def warn_requested(self):
        """Gets the warn_requested of this EnclosuresDetails.  # noqa: E501


        :return: The warn_requested of this EnclosuresDetails.  # noqa: E501
        :rtype: bool
        """
        return self._warn_requested

    @warn_requested.setter
    def warn_requested(self, warn_requested):
        """Sets the warn_requested of this EnclosuresDetails.


        :param warn_requested: The warn_requested of this EnclosuresDetails.  # noqa: E501
        :type: bool
        """

        self._warn_requested = warn_requested

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnclosuresDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
