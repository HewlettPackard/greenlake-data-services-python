# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleFCTargetInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'target_fcid': 'str',
        'target_port_array_name': 'str',
        'target_port_ctrlr_name': 'str',
        'target_port_interface_name': 'str',
        'target_wwnn': 'str',
        'target_wwpn': 'str'
    }

    attribute_map = {
        'target_fcid': 'target_fcid',
        'target_port_array_name': 'target_port_array_name',
        'target_port_ctrlr_name': 'target_port_ctrlr_name',
        'target_port_interface_name': 'target_port_interface_name',
        'target_wwnn': 'target_wwnn',
        'target_wwpn': 'target_wwpn'
    }

    def __init__(self, target_fcid=None, target_port_array_name=None, target_port_ctrlr_name=None, target_port_interface_name=None, target_wwnn=None, target_wwpn=None):  # noqa: E501
        """NimbleFCTargetInfo - a model defined in OpenAPI"""  # noqa: E501

        self._target_fcid = None
        self._target_port_array_name = None
        self._target_port_ctrlr_name = None
        self._target_port_interface_name = None
        self._target_wwnn = None
        self._target_wwpn = None
        self.discriminator = None

        if target_fcid is not None:
            self.target_fcid = target_fcid
        if target_port_array_name is not None:
            self.target_port_array_name = target_port_array_name
        if target_port_ctrlr_name is not None:
            self.target_port_ctrlr_name = target_port_ctrlr_name
        if target_port_interface_name is not None:
            self.target_port_interface_name = target_port_interface_name
        if target_wwnn is not None:
            self.target_wwnn = target_wwnn
        if target_wwpn is not None:
            self.target_wwpn = target_wwpn

    @property
    def target_fcid(self):
        """Gets the target_fcid of this NimbleFCTargetInfo.  # noqa: E501

        FCID assigned to the Fibre Channel target port.  # noqa: E501

        :return: The target_fcid of this NimbleFCTargetInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_fcid

    @target_fcid.setter
    def target_fcid(self, target_fcid):
        """Sets the target_fcid of this NimbleFCTargetInfo.

        FCID assigned to the Fibre Channel target port.  # noqa: E501

        :param target_fcid: The target_fcid of this NimbleFCTargetInfo.  # noqa: E501
        :type: str
        """

        self._target_fcid = target_fcid

    @property
    def target_port_array_name(self):
        """Gets the target_port_array_name of this NimbleFCTargetInfo.  # noqa: E501

        Name of the array hosting the Fibre Channel target port.  # noqa: E501

        :return: The target_port_array_name of this NimbleFCTargetInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_port_array_name

    @target_port_array_name.setter
    def target_port_array_name(self, target_port_array_name):
        """Sets the target_port_array_name of this NimbleFCTargetInfo.

        Name of the array hosting the Fibre Channel target port.  # noqa: E501

        :param target_port_array_name: The target_port_array_name of this NimbleFCTargetInfo.  # noqa: E501
        :type: str
        """

        self._target_port_array_name = target_port_array_name

    @property
    def target_port_ctrlr_name(self):
        """Gets the target_port_ctrlr_name of this NimbleFCTargetInfo.  # noqa: E501

        Name (A or B) of the controller to which the port belongs.  # noqa: E501

        :return: The target_port_ctrlr_name of this NimbleFCTargetInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_port_ctrlr_name

    @target_port_ctrlr_name.setter
    def target_port_ctrlr_name(self, target_port_ctrlr_name):
        """Sets the target_port_ctrlr_name of this NimbleFCTargetInfo.

        Name (A or B) of the controller to which the port belongs.  # noqa: E501

        :param target_port_ctrlr_name: The target_port_ctrlr_name of this NimbleFCTargetInfo.  # noqa: E501
        :type: str
        """

        self._target_port_ctrlr_name = target_port_ctrlr_name

    @property
    def target_port_interface_name(self):
        """Gets the target_port_interface_name of this NimbleFCTargetInfo.  # noqa: E501

        Name of the interface hosted on the Fibre Channel target port.  # noqa: E501

        :return: The target_port_interface_name of this NimbleFCTargetInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_port_interface_name

    @target_port_interface_name.setter
    def target_port_interface_name(self, target_port_interface_name):
        """Sets the target_port_interface_name of this NimbleFCTargetInfo.

        Name of the interface hosted on the Fibre Channel target port.  # noqa: E501

        :param target_port_interface_name: The target_port_interface_name of this NimbleFCTargetInfo.  # noqa: E501
        :type: str
        """

        self._target_port_interface_name = target_port_interface_name

    @property
    def target_wwnn(self):
        """Gets the target_wwnn of this NimbleFCTargetInfo.  # noqa: E501

        WWNN (World Wide Node Name) of the Fibre Channel target port.  # noqa: E501

        :return: The target_wwnn of this NimbleFCTargetInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_wwnn

    @target_wwnn.setter
    def target_wwnn(self, target_wwnn):
        """Sets the target_wwnn of this NimbleFCTargetInfo.

        WWNN (World Wide Node Name) of the Fibre Channel target port.  # noqa: E501

        :param target_wwnn: The target_wwnn of this NimbleFCTargetInfo.  # noqa: E501
        :type: str
        """

        self._target_wwnn = target_wwnn

    @property
    def target_wwpn(self):
        """Gets the target_wwpn of this NimbleFCTargetInfo.  # noqa: E501

        WWPN (World Wide Port Name) of the Fibre Channel target port.  # noqa: E501

        :return: The target_wwpn of this NimbleFCTargetInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_wwpn

    @target_wwpn.setter
    def target_wwpn(self, target_wwpn):
        """Sets the target_wwpn of this NimbleFCTargetInfo.

        WWPN (World Wide Port Name) of the Fibre Channel target port.  # noqa: E501

        :param target_wwpn: The target_wwpn of this NimbleFCTargetInfo.  # noqa: E501
        :type: str
        """

        self._target_wwpn = target_wwpn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleFCTargetInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
