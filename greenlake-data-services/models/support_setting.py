# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SupportSetting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'SysAssociatedLinks',
        'connect_to_hpe': 'str',
        'console_uri': 'str',
        'customer_id': 'str',
        'email_notifications': 'str',
        'enterprise_server_url': 'str',
        'generation': 'int',
        'id': 'str',
        'mini_insplore_enabled': 'str',
        'rap_forwarding': 'str',
        'remote_access': 'str',
        'request_uri': 'str',
        'resource_uri': 'str',
        'rts_enabled': 'str',
        'type': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'connect_to_hpe': 'connectToHPE',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'email_notifications': 'emailNotifications',
        'enterprise_server_url': 'enterpriseServerURL',
        'generation': 'generation',
        'id': 'id',
        'mini_insplore_enabled': 'miniInsploreEnabled',
        'rap_forwarding': 'rapForwarding',
        'remote_access': 'remoteAccess',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'rts_enabled': 'rtsEnabled',
        'type': 'type'
    }

    def __init__(self, associated_links=None, connect_to_hpe=None, console_uri=None, customer_id=None, email_notifications=None, enterprise_server_url=None, generation=None, id=None, mini_insplore_enabled=None, rap_forwarding=None, remote_access=None, request_uri=None, resource_uri=None, rts_enabled=None, type=None):  # noqa: E501
        """SupportSetting - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._connect_to_hpe = None
        self._console_uri = None
        self._customer_id = None
        self._email_notifications = None
        self._enterprise_server_url = None
        self._generation = None
        self._id = None
        self._mini_insplore_enabled = None
        self._rap_forwarding = None
        self._remote_access = None
        self._request_uri = None
        self._resource_uri = None
        self._rts_enabled = None
        self._type = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if connect_to_hpe is not None:
            self.connect_to_hpe = connect_to_hpe
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if email_notifications is not None:
            self.email_notifications = email_notifications
        if enterprise_server_url is not None:
            self.enterprise_server_url = enterprise_server_url
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if mini_insplore_enabled is not None:
            self.mini_insplore_enabled = mini_insplore_enabled
        if rap_forwarding is not None:
            self.rap_forwarding = rap_forwarding
        if remote_access is not None:
            self.remote_access = remote_access
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if rts_enabled is not None:
            self.rts_enabled = rts_enabled
        if type is not None:
            self.type = type

    @property
    def associated_links(self):
        """Gets the associated_links of this SupportSetting.  # noqa: E501


        :return: The associated_links of this SupportSetting.  # noqa: E501
        :rtype: SysAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this SupportSetting.


        :param associated_links: The associated_links of this SupportSetting.  # noqa: E501
        :type: SysAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def connect_to_hpe(self):
        """Gets the connect_to_hpe of this SupportSetting.  # noqa: E501

        Enable remote support by allowing sending of files from device to HPE. Allowed values: enabled or disabled.  # noqa: E501

        :return: The connect_to_hpe of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._connect_to_hpe

    @connect_to_hpe.setter
    def connect_to_hpe(self, connect_to_hpe):
        """Sets the connect_to_hpe of this SupportSetting.

        Enable remote support by allowing sending of files from device to HPE. Allowed values: enabled or disabled.  # noqa: E501

        :param connect_to_hpe: The connect_to_hpe of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._connect_to_hpe = connect_to_hpe

    @property
    def console_uri(self):
        """Gets the console_uri of this SupportSetting.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this SupportSetting.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this SupportSetting.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SupportSetting.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def email_notifications(self):
        """Gets the email_notifications of this SupportSetting.  # noqa: E501

        Receive email notifications. Allowed values: enabled or disabled.  # noqa: E501

        :return: The email_notifications of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications):
        """Sets the email_notifications of this SupportSetting.

        Receive email notifications. Allowed values: enabled or disabled.  # noqa: E501

        :param email_notifications: The email_notifications of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._email_notifications = email_notifications

    @property
    def enterprise_server_url(self):
        """Gets the enterprise_server_url of this SupportSetting.  # noqa: E501

        Callhome collection server URL  # noqa: E501

        :return: The enterprise_server_url of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_server_url

    @enterprise_server_url.setter
    def enterprise_server_url(self, enterprise_server_url):
        """Sets the enterprise_server_url of this SupportSetting.

        Callhome collection server URL  # noqa: E501

        :param enterprise_server_url: The enterprise_server_url of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._enterprise_server_url = enterprise_server_url

    @property
    def generation(self):
        """Gets the generation of this SupportSetting.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :return: The generation of this SupportSetting.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this SupportSetting.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :param generation: The generation of this SupportSetting.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this SupportSetting.  # noqa: E501

        Unique identifier of the support settings.  # noqa: E501

        :return: The id of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupportSetting.

        Unique identifier of the support settings.  # noqa: E501

        :param id: The id of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mini_insplore_enabled(self):
        """Gets the mini_insplore_enabled of this SupportSetting.  # noqa: E501

        Enables/Disable scheduled Mini-Insplore collection. Allowed values: enabled or disabled.  # noqa: E501

        :return: The mini_insplore_enabled of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._mini_insplore_enabled

    @mini_insplore_enabled.setter
    def mini_insplore_enabled(self, mini_insplore_enabled):
        """Sets the mini_insplore_enabled of this SupportSetting.

        Enables/Disable scheduled Mini-Insplore collection. Allowed values: enabled or disabled.  # noqa: E501

        :param mini_insplore_enabled: The mini_insplore_enabled of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._mini_insplore_enabled = mini_insplore_enabled

    @property
    def rap_forwarding(self):
        """Gets the rap_forwarding of this SupportSetting.  # noqa: E501

        Enable/Disable RAP forwarding. Allowed values: enabled or disabled.  # noqa: E501

        :return: The rap_forwarding of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._rap_forwarding

    @rap_forwarding.setter
    def rap_forwarding(self, rap_forwarding):
        """Sets the rap_forwarding of this SupportSetting.

        Enable/Disable RAP forwarding. Allowed values: enabled or disabled.  # noqa: E501

        :param rap_forwarding: The rap_forwarding of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._rap_forwarding = rap_forwarding

    @property
    def remote_access(self):
        """Gets the remote_access of this SupportSetting.  # noqa: E501

        Enable/Disable Remote Access. Allowed values: DISABLE or ENABLE_NONROOT or ENABLE_ROOT. It is mandatory.  # noqa: E501

        :return: The remote_access of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._remote_access

    @remote_access.setter
    def remote_access(self, remote_access):
        """Sets the remote_access of this SupportSetting.

        Enable/Disable Remote Access. Allowed values: DISABLE or ENABLE_NONROOT or ENABLE_ROOT. It is mandatory.  # noqa: E501

        :param remote_access: The remote_access of this SupportSetting.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISABLE", "ENABLE_NONROOT", "ENABLE_ROOT"]  # noqa: E501
        if remote_access not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_access` ({0}), must be one of {1}"  # noqa: E501
                .format(remote_access, allowed_values)
            )

        self._remote_access = remote_access

    @property
    def request_uri(self):
        """Gets the request_uri of this SupportSetting.  # noqa: E501

        requestUri for detailed storage object  # noqa: E501

        :return: The request_uri of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this SupportSetting.

        requestUri for detailed storage object  # noqa: E501

        :param request_uri: The request_uri of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this SupportSetting.  # noqa: E501

        resourceUri for detailed storage object  # noqa: E501

        :return: The resource_uri of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this SupportSetting.

        resourceUri for detailed storage object  # noqa: E501

        :param resource_uri: The resource_uri of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def rts_enabled(self):
        """Gets the rts_enabled of this SupportSetting.  # noqa: E501

        Enable/Disable Real time data scrubbing. Allowed values: enabled or disabled.  # noqa: E501

        :return: The rts_enabled of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._rts_enabled

    @rts_enabled.setter
    def rts_enabled(self, rts_enabled):
        """Sets the rts_enabled of this SupportSetting.

        Enable/Disable Real time data scrubbing. Allowed values: enabled or disabled.  # noqa: E501

        :param rts_enabled: The rts_enabled of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._rts_enabled = rts_enabled

    @property
    def type(self):
        """Gets the type of this SupportSetting.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this SupportSetting.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SupportSetting.

        The type of resource.  # noqa: E501

        :param type: The type of this SupportSetting.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
