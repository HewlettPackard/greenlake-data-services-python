# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PerfStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cache_percentage': 'PerfData',
        'cpu_percentage': 'PerfData',
        'customer_id': 'str',
        'request_uri': 'str'
    }

    attribute_map = {
        'cache_percentage': 'cachePercentage',
        'cpu_percentage': 'cpuPercentage',
        'customer_id': 'customerId',
        'request_uri': 'requestUri'
    }

    def __init__(self, cache_percentage=None, cpu_percentage=None, customer_id=None, request_uri=None):  # noqa: E501
        """PerfStats - a model defined in OpenAPI"""  # noqa: E501

        self._cache_percentage = None
        self._cpu_percentage = None
        self._customer_id = None
        self._request_uri = None
        self.discriminator = None

        if cache_percentage is not None:
            self.cache_percentage = cache_percentage
        if cpu_percentage is not None:
            self.cpu_percentage = cpu_percentage
        if customer_id is not None:
            self.customer_id = customer_id
        if request_uri is not None:
            self.request_uri = request_uri

    @property
    def cache_percentage(self):
        """Gets the cache_percentage of this PerfStats.  # noqa: E501


        :return: The cache_percentage of this PerfStats.  # noqa: E501
        :rtype: PerfData
        """
        return self._cache_percentage

    @cache_percentage.setter
    def cache_percentage(self, cache_percentage):
        """Sets the cache_percentage of this PerfStats.


        :param cache_percentage: The cache_percentage of this PerfStats.  # noqa: E501
        :type: PerfData
        """

        self._cache_percentage = cache_percentage

    @property
    def cpu_percentage(self):
        """Gets the cpu_percentage of this PerfStats.  # noqa: E501


        :return: The cpu_percentage of this PerfStats.  # noqa: E501
        :rtype: PerfData
        """
        return self._cpu_percentage

    @cpu_percentage.setter
    def cpu_percentage(self, cpu_percentage):
        """Sets the cpu_percentage of this PerfStats.


        :param cpu_percentage: The cpu_percentage of this PerfStats.  # noqa: E501
        :type: PerfData
        """

        self._cpu_percentage = cpu_percentage

    @property
    def customer_id(self):
        """Gets the customer_id of this PerfStats.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this PerfStats.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PerfStats.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this PerfStats.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def request_uri(self):
        """Gets the request_uri of this PerfStats.  # noqa: E501

        requestUri for detailed performance stats object  # noqa: E501

        :return: The request_uri of this PerfStats.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this PerfStats.

        requestUri for detailed performance stats object  # noqa: E501

        :param request_uri: The request_uri of this PerfStats.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerfStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
