# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleEditSystemSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alert_settings': 'EditAlertSettings',
        'date_timezone_settings': 'EditDateTimezoneSettings',
        'dns_settings': 'EditDnsSettings',
        'isns_settings': 'EditIsnsSettings',
        'name': 'str',
        'proxy_settings': 'EditProxySettings',
        'security_settings': 'EditSecuritySettings',
        'smtp_settings': 'EditSmtpMailSettings',
        'snmp_settings': 'EditSnmpSettings',
        'support_settings': 'EditSupportSettings',
        'syslogd_settings': 'EditSyslogdSettings',
        'system_parameters': 'EditSystemParameters'
    }

    attribute_map = {
        'alert_settings': 'alert_settings',
        'date_timezone_settings': 'date_timezone_settings',
        'dns_settings': 'dns_settings',
        'isns_settings': 'isns_settings',
        'name': 'name',
        'proxy_settings': 'proxy_settings',
        'security_settings': 'security_settings',
        'smtp_settings': 'smtp_settings',
        'snmp_settings': 'snmp_settings',
        'support_settings': 'support_settings',
        'syslogd_settings': 'syslogd_settings',
        'system_parameters': 'system_parameters'
    }

    def __init__(self, alert_settings=None, date_timezone_settings=None, dns_settings=None, isns_settings=None, name=None, proxy_settings=None, security_settings=None, smtp_settings=None, snmp_settings=None, support_settings=None, syslogd_settings=None, system_parameters=None):  # noqa: E501
        """NimbleEditSystemSettings - a model defined in OpenAPI"""  # noqa: E501

        self._alert_settings = None
        self._date_timezone_settings = None
        self._dns_settings = None
        self._isns_settings = None
        self._name = None
        self._proxy_settings = None
        self._security_settings = None
        self._smtp_settings = None
        self._snmp_settings = None
        self._support_settings = None
        self._syslogd_settings = None
        self._system_parameters = None
        self.discriminator = None

        if alert_settings is not None:
            self.alert_settings = alert_settings
        if date_timezone_settings is not None:
            self.date_timezone_settings = date_timezone_settings
        if dns_settings is not None:
            self.dns_settings = dns_settings
        if isns_settings is not None:
            self.isns_settings = isns_settings
        if name is not None:
            self.name = name
        if proxy_settings is not None:
            self.proxy_settings = proxy_settings
        if security_settings is not None:
            self.security_settings = security_settings
        if smtp_settings is not None:
            self.smtp_settings = smtp_settings
        if snmp_settings is not None:
            self.snmp_settings = snmp_settings
        if support_settings is not None:
            self.support_settings = support_settings
        if syslogd_settings is not None:
            self.syslogd_settings = syslogd_settings
        if system_parameters is not None:
            self.system_parameters = system_parameters

    @property
    def alert_settings(self):
        """Gets the alert_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The alert_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditAlertSettings
        """
        return self._alert_settings

    @alert_settings.setter
    def alert_settings(self, alert_settings):
        """Sets the alert_settings of this NimbleEditSystemSettings.


        :param alert_settings: The alert_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditAlertSettings
        """

        self._alert_settings = alert_settings

    @property
    def date_timezone_settings(self):
        """Gets the date_timezone_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The date_timezone_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditDateTimezoneSettings
        """
        return self._date_timezone_settings

    @date_timezone_settings.setter
    def date_timezone_settings(self, date_timezone_settings):
        """Sets the date_timezone_settings of this NimbleEditSystemSettings.


        :param date_timezone_settings: The date_timezone_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditDateTimezoneSettings
        """

        self._date_timezone_settings = date_timezone_settings

    @property
    def dns_settings(self):
        """Gets the dns_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The dns_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditDnsSettings
        """
        return self._dns_settings

    @dns_settings.setter
    def dns_settings(self, dns_settings):
        """Sets the dns_settings of this NimbleEditSystemSettings.


        :param dns_settings: The dns_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditDnsSettings
        """

        self._dns_settings = dns_settings

    @property
    def isns_settings(self):
        """Gets the isns_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The isns_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditIsnsSettings
        """
        return self._isns_settings

    @isns_settings.setter
    def isns_settings(self, isns_settings):
        """Sets the isns_settings of this NimbleEditSystemSettings.


        :param isns_settings: The isns_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditIsnsSettings
        """

        self._isns_settings = isns_settings

    @property
    def name(self):
        """Gets the name of this NimbleEditSystemSettings.  # noqa: E501

        Name of the group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The name of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleEditSystemSettings.

        Name of the group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param name: The name of this NimbleEditSystemSettings.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def proxy_settings(self):
        """Gets the proxy_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The proxy_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditProxySettings
        """
        return self._proxy_settings

    @proxy_settings.setter
    def proxy_settings(self, proxy_settings):
        """Sets the proxy_settings of this NimbleEditSystemSettings.


        :param proxy_settings: The proxy_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditProxySettings
        """

        self._proxy_settings = proxy_settings

    @property
    def security_settings(self):
        """Gets the security_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The security_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditSecuritySettings
        """
        return self._security_settings

    @security_settings.setter
    def security_settings(self, security_settings):
        """Sets the security_settings of this NimbleEditSystemSettings.


        :param security_settings: The security_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditSecuritySettings
        """

        self._security_settings = security_settings

    @property
    def smtp_settings(self):
        """Gets the smtp_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The smtp_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditSmtpMailSettings
        """
        return self._smtp_settings

    @smtp_settings.setter
    def smtp_settings(self, smtp_settings):
        """Sets the smtp_settings of this NimbleEditSystemSettings.


        :param smtp_settings: The smtp_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditSmtpMailSettings
        """

        self._smtp_settings = smtp_settings

    @property
    def snmp_settings(self):
        """Gets the snmp_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The snmp_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditSnmpSettings
        """
        return self._snmp_settings

    @snmp_settings.setter
    def snmp_settings(self, snmp_settings):
        """Sets the snmp_settings of this NimbleEditSystemSettings.


        :param snmp_settings: The snmp_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditSnmpSettings
        """

        self._snmp_settings = snmp_settings

    @property
    def support_settings(self):
        """Gets the support_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The support_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditSupportSettings
        """
        return self._support_settings

    @support_settings.setter
    def support_settings(self, support_settings):
        """Sets the support_settings of this NimbleEditSystemSettings.


        :param support_settings: The support_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditSupportSettings
        """

        self._support_settings = support_settings

    @property
    def syslogd_settings(self):
        """Gets the syslogd_settings of this NimbleEditSystemSettings.  # noqa: E501


        :return: The syslogd_settings of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditSyslogdSettings
        """
        return self._syslogd_settings

    @syslogd_settings.setter
    def syslogd_settings(self, syslogd_settings):
        """Sets the syslogd_settings of this NimbleEditSystemSettings.


        :param syslogd_settings: The syslogd_settings of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditSyslogdSettings
        """

        self._syslogd_settings = syslogd_settings

    @property
    def system_parameters(self):
        """Gets the system_parameters of this NimbleEditSystemSettings.  # noqa: E501


        :return: The system_parameters of this NimbleEditSystemSettings.  # noqa: E501
        :rtype: EditSystemParameters
        """
        return self._system_parameters

    @system_parameters.setter
    def system_parameters(self, system_parameters):
        """Sets the system_parameters of this NimbleEditSystemSettings.


        :param system_parameters: The system_parameters of this NimbleEditSystemSettings.  # noqa: E501
        :type: EditSystemParameters
        """

        self._system_parameters = system_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleEditSystemSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
