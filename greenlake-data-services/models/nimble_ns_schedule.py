# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNsSchedule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'at_time': 'int',
        'days': 'str',
        'disable_appsync': 'bool',
        'downstream_partner': 'str',
        'downstream_partner_id': 'str',
        'downstream_partner_name': 'str',
        'id': 'str',
        'name': 'str',
        'num_retain': 'int',
        'num_retain_replica': 'int',
        'period': 'int',
        'period_unit': 'str',
        'repl_alert_thres': 'int',
        'replicate_every': 'int',
        'schedule_id': 'str',
        'schedule_name': 'str',
        'schedule_type': 'str',
        'skip_db_consistency_check': 'bool',
        'snap_verify': 'bool',
        'until_time': 'int'
    }

    attribute_map = {
        'active': 'active',
        'at_time': 'at_time',
        'days': 'days',
        'disable_appsync': 'disable_appsync',
        'downstream_partner': 'downstream_partner',
        'downstream_partner_id': 'downstream_partner_id',
        'downstream_partner_name': 'downstream_partner_name',
        'id': 'id',
        'name': 'name',
        'num_retain': 'num_retain',
        'num_retain_replica': 'num_retain_replica',
        'period': 'period',
        'period_unit': 'period_unit',
        'repl_alert_thres': 'repl_alert_thres',
        'replicate_every': 'replicate_every',
        'schedule_id': 'schedule_id',
        'schedule_name': 'schedule_name',
        'schedule_type': 'schedule_type',
        'skip_db_consistency_check': 'skip_db_consistency_check',
        'snap_verify': 'snap_verify',
        'until_time': 'until_time'
    }

    def __init__(self, active=None, at_time=None, days=None, disable_appsync=None, downstream_partner=None, downstream_partner_id=None, downstream_partner_name=None, id=None, name=None, num_retain=None, num_retain_replica=None, period=None, period_unit=None, repl_alert_thres=None, replicate_every=None, schedule_id=None, schedule_name=None, schedule_type=None, skip_db_consistency_check=None, snap_verify=None, until_time=None):  # noqa: E501
        """NimbleNsSchedule - a model defined in OpenAPI"""  # noqa: E501

        self._active = None
        self._at_time = None
        self._days = None
        self._disable_appsync = None
        self._downstream_partner = None
        self._downstream_partner_id = None
        self._downstream_partner_name = None
        self._id = None
        self._name = None
        self._num_retain = None
        self._num_retain_replica = None
        self._period = None
        self._period_unit = None
        self._repl_alert_thres = None
        self._replicate_every = None
        self._schedule_id = None
        self._schedule_name = None
        self._schedule_type = None
        self._skip_db_consistency_check = None
        self._snap_verify = None
        self._until_time = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if at_time is not None:
            self.at_time = at_time
        if days is not None:
            self.days = days
        if disable_appsync is not None:
            self.disable_appsync = disable_appsync
        if downstream_partner is not None:
            self.downstream_partner = downstream_partner
        if downstream_partner_id is not None:
            self.downstream_partner_id = downstream_partner_id
        if downstream_partner_name is not None:
            self.downstream_partner_name = downstream_partner_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if num_retain is not None:
            self.num_retain = num_retain
        if num_retain_replica is not None:
            self.num_retain_replica = num_retain_replica
        if period is not None:
            self.period = period
        if period_unit is not None:
            self.period_unit = period_unit
        if repl_alert_thres is not None:
            self.repl_alert_thres = repl_alert_thres
        if replicate_every is not None:
            self.replicate_every = replicate_every
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if schedule_name is not None:
            self.schedule_name = schedule_name
        if schedule_type is not None:
            self.schedule_type = schedule_type
        if skip_db_consistency_check is not None:
            self.skip_db_consistency_check = skip_db_consistency_check
        if snap_verify is not None:
            self.snap_verify = snap_verify
        if until_time is not None:
            self.until_time = until_time

    @property
    def active(self):
        """Gets the active of this NimbleNsSchedule.  # noqa: E501

        A schedule is active only if it is owned by the same owner as the volume collection. Only active schedules of a volume collection participate in the creation of snapshots and replication.  # noqa: E501

        :return: The active of this NimbleNsSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this NimbleNsSchedule.

        A schedule is active only if it is owned by the same owner as the volume collection. Only active schedules of a volume collection participate in the creation of snapshots and replication.  # noqa: E501

        :param active: The active of this NimbleNsSchedule.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def at_time(self):
        """Gets the at_time of this NimbleNsSchedule.  # noqa: E501

        Time of day when snapshot should be taken.  # noqa: E501

        :return: The at_time of this NimbleNsSchedule.  # noqa: E501
        :rtype: int
        """
        return self._at_time

    @at_time.setter
    def at_time(self, at_time):
        """Sets the at_time of this NimbleNsSchedule.

        Time of day when snapshot should be taken.  # noqa: E501

        :param at_time: The at_time of this NimbleNsSchedule.  # noqa: E501
        :type: int
        """

        self._at_time = at_time

    @property
    def days(self):
        """Gets the days of this NimbleNsSchedule.  # noqa: E501

        Which days snapshots should be taken.  # noqa: E501

        :return: The days of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this NimbleNsSchedule.

        Which days snapshots should be taken.  # noqa: E501

        :param days: The days of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._days = days

    @property
    def disable_appsync(self):
        """Gets the disable_appsync of this NimbleNsSchedule.  # noqa: E501

        Disables application synchronized snapshots and creates crash consistent snapshots instead.  # noqa: E501

        :return: The disable_appsync of this NimbleNsSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._disable_appsync

    @disable_appsync.setter
    def disable_appsync(self, disable_appsync):
        """Sets the disable_appsync of this NimbleNsSchedule.

        Disables application synchronized snapshots and creates crash consistent snapshots instead.  # noqa: E501

        :param disable_appsync: The disable_appsync of this NimbleNsSchedule.  # noqa: E501
        :type: bool
        """

        self._disable_appsync = disable_appsync

    @property
    def downstream_partner(self):
        """Gets the downstream_partner of this NimbleNsSchedule.  # noqa: E501

        Partner name if snapshots created by this schedule should be replicated.  # noqa: E501

        :return: The downstream_partner of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._downstream_partner

    @downstream_partner.setter
    def downstream_partner(self, downstream_partner):
        """Sets the downstream_partner of this NimbleNsSchedule.

        Partner name if snapshots created by this schedule should be replicated.  # noqa: E501

        :param downstream_partner: The downstream_partner of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._downstream_partner = downstream_partner

    @property
    def downstream_partner_id(self):
        """Gets the downstream_partner_id of this NimbleNsSchedule.  # noqa: E501

        Partner ID if snapshots created by this schedule should be replicated.  # noqa: E501

        :return: The downstream_partner_id of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._downstream_partner_id

    @downstream_partner_id.setter
    def downstream_partner_id(self, downstream_partner_id):
        """Sets the downstream_partner_id of this NimbleNsSchedule.

        Partner ID if snapshots created by this schedule should be replicated.  # noqa: E501

        :param downstream_partner_id: The downstream_partner_id of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._downstream_partner_id = downstream_partner_id

    @property
    def downstream_partner_name(self):
        """Gets the downstream_partner_name of this NimbleNsSchedule.  # noqa: E501

        Partner name if snapshots created by this schedule should be replicated.  # noqa: E501

        :return: The downstream_partner_name of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._downstream_partner_name

    @downstream_partner_name.setter
    def downstream_partner_name(self, downstream_partner_name):
        """Sets the downstream_partner_name of this NimbleNsSchedule.

        Partner name if snapshots created by this schedule should be replicated.  # noqa: E501

        :param downstream_partner_name: The downstream_partner_name of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._downstream_partner_name = downstream_partner_name

    @property
    def id(self):
        """Gets the id of this NimbleNsSchedule.  # noqa: E501

        ID of protection schedule.  # noqa: E501

        :return: The id of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleNsSchedule.

        ID of protection schedule.  # noqa: E501

        :param id: The id of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NimbleNsSchedule.  # noqa: E501

        Name of protection schedule.  # noqa: E501

        :return: The name of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleNsSchedule.

        Name of protection schedule.  # noqa: E501

        :param name: The name of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_retain(self):
        """Gets the num_retain of this NimbleNsSchedule.  # noqa: E501

        Number of snapshots to retain.  # noqa: E501

        :return: The num_retain of this NimbleNsSchedule.  # noqa: E501
        :rtype: int
        """
        return self._num_retain

    @num_retain.setter
    def num_retain(self, num_retain):
        """Sets the num_retain of this NimbleNsSchedule.

        Number of snapshots to retain.  # noqa: E501

        :param num_retain: The num_retain of this NimbleNsSchedule.  # noqa: E501
        :type: int
        """

        self._num_retain = num_retain

    @property
    def num_retain_replica(self):
        """Gets the num_retain_replica of this NimbleNsSchedule.  # noqa: E501

        Number of snapshots to retain on the replica.  # noqa: E501

        :return: The num_retain_replica of this NimbleNsSchedule.  # noqa: E501
        :rtype: int
        """
        return self._num_retain_replica

    @num_retain_replica.setter
    def num_retain_replica(self, num_retain_replica):
        """Sets the num_retain_replica of this NimbleNsSchedule.

        Number of snapshots to retain on the replica.  # noqa: E501

        :param num_retain_replica: The num_retain_replica of this NimbleNsSchedule.  # noqa: E501
        :type: int
        """

        self._num_retain_replica = num_retain_replica

    @property
    def period(self):
        """Gets the period of this NimbleNsSchedule.  # noqa: E501

        Frequency of snapshots.  # noqa: E501

        :return: The period of this NimbleNsSchedule.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this NimbleNsSchedule.

        Frequency of snapshots.  # noqa: E501

        :param period: The period of this NimbleNsSchedule.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def period_unit(self):
        """Gets the period_unit of this NimbleNsSchedule.  # noqa: E501

        Units for repeat frequency -- minutes, hours, days or weeks. Possible values: 'hours', 'weeks', 'minutes', 'days'.  # noqa: E501

        :return: The period_unit of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._period_unit

    @period_unit.setter
    def period_unit(self, period_unit):
        """Sets the period_unit of this NimbleNsSchedule.

        Units for repeat frequency -- minutes, hours, days or weeks. Possible values: 'hours', 'weeks', 'minutes', 'days'.  # noqa: E501

        :param period_unit: The period_unit of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._period_unit = period_unit

    @property
    def repl_alert_thres(self):
        """Gets the repl_alert_thres of this NimbleNsSchedule.  # noqa: E501

        Replication alert threshold.  # noqa: E501

        :return: The repl_alert_thres of this NimbleNsSchedule.  # noqa: E501
        :rtype: int
        """
        return self._repl_alert_thres

    @repl_alert_thres.setter
    def repl_alert_thres(self, repl_alert_thres):
        """Sets the repl_alert_thres of this NimbleNsSchedule.

        Replication alert threshold.  # noqa: E501

        :param repl_alert_thres: The repl_alert_thres of this NimbleNsSchedule.  # noqa: E501
        :type: int
        """

        self._repl_alert_thres = repl_alert_thres

    @property
    def replicate_every(self):
        """Gets the replicate_every of this NimbleNsSchedule.  # noqa: E501

        Which snapshots should be replicated.  # noqa: E501

        :return: The replicate_every of this NimbleNsSchedule.  # noqa: E501
        :rtype: int
        """
        return self._replicate_every

    @replicate_every.setter
    def replicate_every(self, replicate_every):
        """Sets the replicate_every of this NimbleNsSchedule.

        Which snapshots should be replicated.  # noqa: E501

        :param replicate_every: The replicate_every of this NimbleNsSchedule.  # noqa: E501
        :type: int
        """

        self._replicate_every = replicate_every

    @property
    def schedule_id(self):
        """Gets the schedule_id of this NimbleNsSchedule.  # noqa: E501

        ID of protection schedule.  # noqa: E501

        :return: The schedule_id of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this NimbleNsSchedule.

        ID of protection schedule.  # noqa: E501

        :param schedule_id: The schedule_id of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._schedule_id = schedule_id

    @property
    def schedule_name(self):
        """Gets the schedule_name of this NimbleNsSchedule.  # noqa: E501

        Name of protection schedule.  # noqa: E501

        :return: The schedule_name of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._schedule_name

    @schedule_name.setter
    def schedule_name(self, schedule_name):
        """Sets the schedule_name of this NimbleNsSchedule.

        Name of protection schedule.  # noqa: E501

        :param schedule_name: The schedule_name of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._schedule_name = schedule_name

    @property
    def schedule_type(self):
        """Gets the schedule_type of this NimbleNsSchedule.  # noqa: E501

        regular or external_trigger. Possible values: 'external_trigger', 'regular'.  # noqa: E501

        :return: The schedule_type of this NimbleNsSchedule.  # noqa: E501
        :rtype: str
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this NimbleNsSchedule.

        regular or external_trigger. Possible values: 'external_trigger', 'regular'.  # noqa: E501

        :param schedule_type: The schedule_type of this NimbleNsSchedule.  # noqa: E501
        :type: str
        """

        self._schedule_type = schedule_type

    @property
    def skip_db_consistency_check(self):
        """Gets the skip_db_consistency_check of this NimbleNsSchedule.  # noqa: E501

        Skip consistency check for database files on snapshots created by this schedule.  # noqa: E501

        :return: The skip_db_consistency_check of this NimbleNsSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._skip_db_consistency_check

    @skip_db_consistency_check.setter
    def skip_db_consistency_check(self, skip_db_consistency_check):
        """Sets the skip_db_consistency_check of this NimbleNsSchedule.

        Skip consistency check for database files on snapshots created by this schedule.  # noqa: E501

        :param skip_db_consistency_check: The skip_db_consistency_check of this NimbleNsSchedule.  # noqa: E501
        :type: bool
        """

        self._skip_db_consistency_check = skip_db_consistency_check

    @property
    def snap_verify(self):
        """Gets the snap_verify of this NimbleNsSchedule.  # noqa: E501

        Run verification tool on snapshot created by this schedule.  # noqa: E501

        :return: The snap_verify of this NimbleNsSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._snap_verify

    @snap_verify.setter
    def snap_verify(self, snap_verify):
        """Sets the snap_verify of this NimbleNsSchedule.

        Run verification tool on snapshot created by this schedule.  # noqa: E501

        :param snap_verify: The snap_verify of this NimbleNsSchedule.  # noqa: E501
        :type: bool
        """

        self._snap_verify = snap_verify

    @property
    def until_time(self):
        """Gets the until_time of this NimbleNsSchedule.  # noqa: E501

        Time of day to stop taking snapshots.  # noqa: E501

        :return: The until_time of this NimbleNsSchedule.  # noqa: E501
        :rtype: int
        """
        return self._until_time

    @until_time.setter
    def until_time(self, until_time):
        """Sets the until_time of this NimbleNsSchedule.

        Time of day to stop taking snapshots.  # noqa: E501

        :param until_time: The until_time of this NimbleNsSchedule.  # noqa: E501
        :type: int
        """

        self._until_time = until_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNsSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
