# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNsShelfSensor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cid': 'str',
        'display_name': 'str',
        'location': 'str',
        'name': 'str',
        'status': 'str',
        'type': 'str',
        'value': 'int'
    }

    attribute_map = {
        'cid': 'cid',
        'display_name': 'display_name',
        'location': 'location',
        'name': 'name',
        'status': 'status',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, cid=None, display_name=None, location=None, name=None, status=None, type=None, value=None):  # noqa: E501
        """NimbleNsShelfSensor - a model defined in OpenAPI"""  # noqa: E501

        self._cid = None
        self._display_name = None
        self._location = None
        self._name = None
        self._status = None
        self._type = None
        self._value = None
        self.discriminator = None

        if cid is not None:
            self.cid = cid
        if display_name is not None:
            self.display_name = display_name
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def cid(self):
        """Gets the cid of this NimbleNsShelfSensor.  # noqa: E501

        Which controller this sensor applies to. Possible values:'A', 'B', 'unknown'.  # noqa: E501

        :return: The cid of this NimbleNsShelfSensor.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this NimbleNsShelfSensor.

        Which controller this sensor applies to. Possible values:'A', 'B', 'unknown'.  # noqa: E501

        :param cid: The cid of this NimbleNsShelfSensor.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def display_name(self):
        """Gets the display_name of this NimbleNsShelfSensor.  # noqa: E501

        Name for display purpose.  # noqa: E501

        :return: The display_name of this NimbleNsShelfSensor.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NimbleNsShelfSensor.

        Name for display purpose.  # noqa: E501

        :param display_name: The display_name of this NimbleNsShelfSensor.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def location(self):
        """Gets the location of this NimbleNsShelfSensor.  # noqa: E501

        Location of the sensor.  # noqa: E501

        :return: The location of this NimbleNsShelfSensor.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NimbleNsShelfSensor.

        Location of the sensor.  # noqa: E501

        :param location: The location of this NimbleNsShelfSensor.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this NimbleNsShelfSensor.  # noqa: E501

        Internal name of the sensor.  # noqa: E501

        :return: The name of this NimbleNsShelfSensor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleNsShelfSensor.

        Internal name of the sensor.  # noqa: E501

        :param name: The name of this NimbleNsShelfSensor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this NimbleNsShelfSensor.  # noqa: E501

        Sensor status. Possible values:'Missing', 'Failed', 'OK', 'Alerted'.  # noqa: E501

        :return: The status of this NimbleNsShelfSensor.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NimbleNsShelfSensor.

        Sensor status. Possible values:'Missing', 'Failed', 'OK', 'Alerted'.  # noqa: E501

        :param status: The status of this NimbleNsShelfSensor.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this NimbleNsShelfSensor.  # noqa: E501

        Type of the sensor. Possible values:'fan', 'nvram', 'temperature', 'power supply'.  # noqa: E501

        :return: The type of this NimbleNsShelfSensor.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleNsShelfSensor.

        Type of the sensor. Possible values:'fan', 'nvram', 'temperature', 'power supply'.  # noqa: E501

        :param type: The type of this NimbleNsShelfSensor.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this NimbleNsShelfSensor.  # noqa: E501

        Value of the sensor reading.  # noqa: E501

        :return: The value of this NimbleNsShelfSensor.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NimbleNsShelfSensor.

        Value of the sensor reading.  # noqa: E501

        :param value: The value of this NimbleNsShelfSensor.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNsShelfSensor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
