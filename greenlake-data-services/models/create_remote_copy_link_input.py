# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateRemoteCopyLinkInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'port_pos': 'CreateRemoteCopyLinkInputPortPos',
        'target_name': 'str',
        'type': 'int'
    }

    attribute_map = {
        'address': 'address',
        'port_pos': 'portPos',
        'target_name': 'targetName',
        'type': 'type'
    }

    def __init__(self, address=None, port_pos=None, target_name=None, type=None):  # noqa: E501
        """CreateRemoteCopyLinkInput - a model defined in OpenAPI"""  # noqa: E501

        self._address = None
        self._port_pos = None
        self._target_name = None
        self._type = None
        self.discriminator = None

        self.address = address
        self.port_pos = port_pos
        self.target_name = target_name
        self.type = type

    @property
    def address(self):
        """Gets the address of this CreateRemoteCopyLinkInput.  # noqa: E501

        IP Address or WWN of Remote Copy target for this link, depending on the link type IP or FC  # noqa: E501

        :return: The address of this CreateRemoteCopyLinkInput.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateRemoteCopyLinkInput.

        IP Address or WWN of Remote Copy target for this link, depending on the link type IP or FC  # noqa: E501

        :param address: The address of this CreateRemoteCopyLinkInput.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def port_pos(self):
        """Gets the port_pos of this CreateRemoteCopyLinkInput.  # noqa: E501


        :return: The port_pos of this CreateRemoteCopyLinkInput.  # noqa: E501
        :rtype: CreateRemoteCopyLinkInputPortPos
        """
        return self._port_pos

    @port_pos.setter
    def port_pos(self, port_pos):
        """Sets the port_pos of this CreateRemoteCopyLinkInput.


        :param port_pos: The port_pos of this CreateRemoteCopyLinkInput.  # noqa: E501
        :type: CreateRemoteCopyLinkInputPortPos
        """
        if port_pos is None:
            raise ValueError("Invalid value for `port_pos`, must not be `None`")  # noqa: E501

        self._port_pos = port_pos

    @property
    def target_name(self):
        """Gets the target_name of this CreateRemoteCopyLinkInput.  # noqa: E501

        Remote Copy target with which the link is affiliated  # noqa: E501

        :return: The target_name of this CreateRemoteCopyLinkInput.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this CreateRemoteCopyLinkInput.

        Remote Copy target with which the link is affiliated  # noqa: E501

        :param target_name: The target_name of this CreateRemoteCopyLinkInput.  # noqa: E501
        :type: str
        """
        if target_name is None:
            raise ValueError("Invalid value for `target_name`, must not be `None`")  # noqa: E501

        self._target_name = target_name

    @property
    def type(self):
        """Gets the type of this CreateRemoteCopyLinkInput.  # noqa: E501

        Remote Copy link type. 1 for IP and 2 for FC  # noqa: E501

        :return: The type of this CreateRemoteCopyLinkInput.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateRemoteCopyLinkInput.

        Remote Copy link type. 1 for IP and 2 for FC  # noqa: E501

        :param type: The type of this CreateRemoteCopyLinkInput.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateRemoteCopyLinkInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
