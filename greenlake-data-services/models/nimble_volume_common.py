# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleVolumeCommon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_control_records': 'list[AccessControlRecord]',
        'agent_type': 'str',
        'app_category': 'str',
        'app_uuid': 'str',
        'associated_links': 'AssociatedLinks',
        'block_size': 'int',
        'cache_needed_for_pin': 'int',
        'cache_pinned': 'bool',
        'cache_policy': 'str',
        'caching_enabled': 'bool',
        'cksum_last_verified': 'int',
        'console_uri': 'str',
        'content_repl_errors_found': 'bool',
        'creation_time': 'int',
        'customer_id': 'str',
        'dedupe_enabled': 'bool',
        'description': 'str',
        'encryption_cipher': 'str',
        'force': 'bool',
        'full_name': 'str',
        'generation': 'int',
        'inherit_acl': 'bool',
        'iscsi_target_scope': 'str',
        'last_content_snap_br_cg_uid': 'int',
        'last_content_snap_br_gid': 'int',
        'last_content_snap_id': 'int',
        'last_modified': 'int',
        'last_snap': 'SnapSummary',
        'limit': 'int',
        'limit_iops': 'int',
        'limit_mbps': 'int',
        'metadata': 'list[KeyValue]',
        'move_aborting': 'bool',
        'move_bytes_migrated': 'int',
        'move_bytes_remaining': 'int',
        'move_est_compl_time': 'int',
        'move_start_time': 'int',
        'multi_initiator': 'bool',
        'needs_content_repl': 'bool',
        'num_snaps': 'int',
        'offline_reason': 'str',
        'online_snaps': 'list[SnapshotFromVolume]',
        'pinned_cache_size': 'int',
        'pre_filter': 'str',
        'previously_deduped': 'bool',
        'projected_num_snaps': 'int',
        'protection_type': 'str',
        'reserve': 'int',
        'resource_uri': 'str',
        'search_name': 'str',
        'snap_reserve': 'int',
        'snap_usage_compressed_bytes': 'int',
        'snap_usage_populated_bytes': 'int',
        'snap_usage_uncompressed_bytes': 'int',
        'snap_warn_level': 'int',
        'space_usage_level': 'str',
        'srep_last_sync': 'int',
        'srep_resync_sync': 'int',
        'thinly_provisioned': 'bool',
        'total_usage_bytes': 'int',
        'type': 'str',
        'upstream_cache_pinned': 'bool',
        'usage_valid': 'bool',
        'vol_state': 'str',
        'vol_usage_compressed_bytes': 'int',
        'vol_usage_uncompressed_bytes': 'int',
        'vpd_ieee0': 'str',
        'vpd_ieee1': 'str',
        'vpd_t10': 'str',
        'warn_level': 'int'
    }

    attribute_map = {
        'access_control_records': 'access_control_records',
        'agent_type': 'agent_type',
        'app_category': 'app_category',
        'app_uuid': 'app_uuid',
        'associated_links': 'associated_links',
        'block_size': 'block_size',
        'cache_needed_for_pin': 'cache_needed_for_pin',
        'cache_pinned': 'cache_pinned',
        'cache_policy': 'cache_policy',
        'caching_enabled': 'caching_enabled',
        'cksum_last_verified': 'cksum_last_verified',
        'console_uri': 'consoleUri',
        'content_repl_errors_found': 'content_repl_errors_found',
        'creation_time': 'creation_time',
        'customer_id': 'customerId',
        'dedupe_enabled': 'dedupe_enabled',
        'description': 'description',
        'encryption_cipher': 'encryption_cipher',
        'force': 'force',
        'full_name': 'full_name',
        'generation': 'generation',
        'inherit_acl': 'inherit_acl',
        'iscsi_target_scope': 'iscsi_target_scope',
        'last_content_snap_br_cg_uid': 'last_content_snap_br_cg_uid',
        'last_content_snap_br_gid': 'last_content_snap_br_gid',
        'last_content_snap_id': 'last_content_snap_id',
        'last_modified': 'last_modified',
        'last_snap': 'last_snap',
        'limit': 'limit',
        'limit_iops': 'limit_iops',
        'limit_mbps': 'limit_mbps',
        'metadata': 'metadata',
        'move_aborting': 'move_aborting',
        'move_bytes_migrated': 'move_bytes_migrated',
        'move_bytes_remaining': 'move_bytes_remaining',
        'move_est_compl_time': 'move_est_compl_time',
        'move_start_time': 'move_start_time',
        'multi_initiator': 'multi_initiator',
        'needs_content_repl': 'needs_content_repl',
        'num_snaps': 'num_snaps',
        'offline_reason': 'offline_reason',
        'online_snaps': 'online_snaps',
        'pinned_cache_size': 'pinned_cache_size',
        'pre_filter': 'pre_filter',
        'previously_deduped': 'previously_deduped',
        'projected_num_snaps': 'projected_num_snaps',
        'protection_type': 'protection_type',
        'reserve': 'reserve',
        'resource_uri': 'resourceUri',
        'search_name': 'search_name',
        'snap_reserve': 'snap_reserve',
        'snap_usage_compressed_bytes': 'snap_usage_compressed_bytes',
        'snap_usage_populated_bytes': 'snap_usage_populated_bytes',
        'snap_usage_uncompressed_bytes': 'snap_usage_uncompressed_bytes',
        'snap_warn_level': 'snap_warn_level',
        'space_usage_level': 'space_usage_level',
        'srep_last_sync': 'srep_last_sync',
        'srep_resync_sync': 'srep_resync_sync',
        'thinly_provisioned': 'thinly_provisioned',
        'total_usage_bytes': 'total_usage_bytes',
        'type': 'type',
        'upstream_cache_pinned': 'upstream_cache_pinned',
        'usage_valid': 'usage_valid',
        'vol_state': 'vol_state',
        'vol_usage_compressed_bytes': 'vol_usage_compressed_bytes',
        'vol_usage_uncompressed_bytes': 'vol_usage_uncompressed_bytes',
        'vpd_ieee0': 'vpd_ieee0',
        'vpd_ieee1': 'vpd_ieee1',
        'vpd_t10': 'vpd_t10',
        'warn_level': 'warn_level'
    }

    def __init__(self, access_control_records=None, agent_type=None, app_category=None, app_uuid=None, associated_links=None, block_size=None, cache_needed_for_pin=None, cache_pinned=None, cache_policy=None, caching_enabled=None, cksum_last_verified=None, console_uri=None, content_repl_errors_found=None, creation_time=None, customer_id=None, dedupe_enabled=None, description=None, encryption_cipher=None, force=None, full_name=None, generation=None, inherit_acl=None, iscsi_target_scope=None, last_content_snap_br_cg_uid=None, last_content_snap_br_gid=None, last_content_snap_id=None, last_modified=None, last_snap=None, limit=None, limit_iops=None, limit_mbps=None, metadata=None, move_aborting=None, move_bytes_migrated=None, move_bytes_remaining=None, move_est_compl_time=None, move_start_time=None, multi_initiator=None, needs_content_repl=None, num_snaps=None, offline_reason=None, online_snaps=None, pinned_cache_size=None, pre_filter=None, previously_deduped=None, projected_num_snaps=None, protection_type=None, reserve=None, resource_uri=None, search_name=None, snap_reserve=None, snap_usage_compressed_bytes=None, snap_usage_populated_bytes=None, snap_usage_uncompressed_bytes=None, snap_warn_level=None, space_usage_level=None, srep_last_sync=None, srep_resync_sync=None, thinly_provisioned=None, total_usage_bytes=None, type=None, upstream_cache_pinned=None, usage_valid=None, vol_state=None, vol_usage_compressed_bytes=None, vol_usage_uncompressed_bytes=None, vpd_ieee0=None, vpd_ieee1=None, vpd_t10=None, warn_level=None):  # noqa: E501
        """NimbleVolumeCommon - a model defined in OpenAPI"""  # noqa: E501

        self._access_control_records = None
        self._agent_type = None
        self._app_category = None
        self._app_uuid = None
        self._associated_links = None
        self._block_size = None
        self._cache_needed_for_pin = None
        self._cache_pinned = None
        self._cache_policy = None
        self._caching_enabled = None
        self._cksum_last_verified = None
        self._console_uri = None
        self._content_repl_errors_found = None
        self._creation_time = None
        self._customer_id = None
        self._dedupe_enabled = None
        self._description = None
        self._encryption_cipher = None
        self._force = None
        self._full_name = None
        self._generation = None
        self._inherit_acl = None
        self._iscsi_target_scope = None
        self._last_content_snap_br_cg_uid = None
        self._last_content_snap_br_gid = None
        self._last_content_snap_id = None
        self._last_modified = None
        self._last_snap = None
        self._limit = None
        self._limit_iops = None
        self._limit_mbps = None
        self._metadata = None
        self._move_aborting = None
        self._move_bytes_migrated = None
        self._move_bytes_remaining = None
        self._move_est_compl_time = None
        self._move_start_time = None
        self._multi_initiator = None
        self._needs_content_repl = None
        self._num_snaps = None
        self._offline_reason = None
        self._online_snaps = None
        self._pinned_cache_size = None
        self._pre_filter = None
        self._previously_deduped = None
        self._projected_num_snaps = None
        self._protection_type = None
        self._reserve = None
        self._resource_uri = None
        self._search_name = None
        self._snap_reserve = None
        self._snap_usage_compressed_bytes = None
        self._snap_usage_populated_bytes = None
        self._snap_usage_uncompressed_bytes = None
        self._snap_warn_level = None
        self._space_usage_level = None
        self._srep_last_sync = None
        self._srep_resync_sync = None
        self._thinly_provisioned = None
        self._total_usage_bytes = None
        self._type = None
        self._upstream_cache_pinned = None
        self._usage_valid = None
        self._vol_state = None
        self._vol_usage_compressed_bytes = None
        self._vol_usage_uncompressed_bytes = None
        self._vpd_ieee0 = None
        self._vpd_ieee1 = None
        self._vpd_t10 = None
        self._warn_level = None
        self.discriminator = None

        if access_control_records is not None:
            self.access_control_records = access_control_records
        if agent_type is not None:
            self.agent_type = agent_type
        if app_category is not None:
            self.app_category = app_category
        if app_uuid is not None:
            self.app_uuid = app_uuid
        if associated_links is not None:
            self.associated_links = associated_links
        if block_size is not None:
            self.block_size = block_size
        if cache_needed_for_pin is not None:
            self.cache_needed_for_pin = cache_needed_for_pin
        if cache_pinned is not None:
            self.cache_pinned = cache_pinned
        if cache_policy is not None:
            self.cache_policy = cache_policy
        if caching_enabled is not None:
            self.caching_enabled = caching_enabled
        if cksum_last_verified is not None:
            self.cksum_last_verified = cksum_last_verified
        if console_uri is not None:
            self.console_uri = console_uri
        if content_repl_errors_found is not None:
            self.content_repl_errors_found = content_repl_errors_found
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if dedupe_enabled is not None:
            self.dedupe_enabled = dedupe_enabled
        if description is not None:
            self.description = description
        if encryption_cipher is not None:
            self.encryption_cipher = encryption_cipher
        if force is not None:
            self.force = force
        if full_name is not None:
            self.full_name = full_name
        if generation is not None:
            self.generation = generation
        if inherit_acl is not None:
            self.inherit_acl = inherit_acl
        if iscsi_target_scope is not None:
            self.iscsi_target_scope = iscsi_target_scope
        if last_content_snap_br_cg_uid is not None:
            self.last_content_snap_br_cg_uid = last_content_snap_br_cg_uid
        if last_content_snap_br_gid is not None:
            self.last_content_snap_br_gid = last_content_snap_br_gid
        if last_content_snap_id is not None:
            self.last_content_snap_id = last_content_snap_id
        if last_modified is not None:
            self.last_modified = last_modified
        if last_snap is not None:
            self.last_snap = last_snap
        if limit is not None:
            self.limit = limit
        if limit_iops is not None:
            self.limit_iops = limit_iops
        if limit_mbps is not None:
            self.limit_mbps = limit_mbps
        if metadata is not None:
            self.metadata = metadata
        if move_aborting is not None:
            self.move_aborting = move_aborting
        if move_bytes_migrated is not None:
            self.move_bytes_migrated = move_bytes_migrated
        if move_bytes_remaining is not None:
            self.move_bytes_remaining = move_bytes_remaining
        if move_est_compl_time is not None:
            self.move_est_compl_time = move_est_compl_time
        if move_start_time is not None:
            self.move_start_time = move_start_time
        if multi_initiator is not None:
            self.multi_initiator = multi_initiator
        if needs_content_repl is not None:
            self.needs_content_repl = needs_content_repl
        if num_snaps is not None:
            self.num_snaps = num_snaps
        if offline_reason is not None:
            self.offline_reason = offline_reason
        if online_snaps is not None:
            self.online_snaps = online_snaps
        if pinned_cache_size is not None:
            self.pinned_cache_size = pinned_cache_size
        if pre_filter is not None:
            self.pre_filter = pre_filter
        if previously_deduped is not None:
            self.previously_deduped = previously_deduped
        if projected_num_snaps is not None:
            self.projected_num_snaps = projected_num_snaps
        if protection_type is not None:
            self.protection_type = protection_type
        if reserve is not None:
            self.reserve = reserve
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if search_name is not None:
            self.search_name = search_name
        if snap_reserve is not None:
            self.snap_reserve = snap_reserve
        if snap_usage_compressed_bytes is not None:
            self.snap_usage_compressed_bytes = snap_usage_compressed_bytes
        if snap_usage_populated_bytes is not None:
            self.snap_usage_populated_bytes = snap_usage_populated_bytes
        if snap_usage_uncompressed_bytes is not None:
            self.snap_usage_uncompressed_bytes = snap_usage_uncompressed_bytes
        if snap_warn_level is not None:
            self.snap_warn_level = snap_warn_level
        if space_usage_level is not None:
            self.space_usage_level = space_usage_level
        if srep_last_sync is not None:
            self.srep_last_sync = srep_last_sync
        if srep_resync_sync is not None:
            self.srep_resync_sync = srep_resync_sync
        if thinly_provisioned is not None:
            self.thinly_provisioned = thinly_provisioned
        if total_usage_bytes is not None:
            self.total_usage_bytes = total_usage_bytes
        if type is not None:
            self.type = type
        if upstream_cache_pinned is not None:
            self.upstream_cache_pinned = upstream_cache_pinned
        if usage_valid is not None:
            self.usage_valid = usage_valid
        if vol_state is not None:
            self.vol_state = vol_state
        if vol_usage_compressed_bytes is not None:
            self.vol_usage_compressed_bytes = vol_usage_compressed_bytes
        if vol_usage_uncompressed_bytes is not None:
            self.vol_usage_uncompressed_bytes = vol_usage_uncompressed_bytes
        if vpd_ieee0 is not None:
            self.vpd_ieee0 = vpd_ieee0
        if vpd_ieee1 is not None:
            self.vpd_ieee1 = vpd_ieee1
        if vpd_t10 is not None:
            self.vpd_t10 = vpd_t10
        if warn_level is not None:
            self.warn_level = warn_level

    @property
    def access_control_records(self):
        """Gets the access_control_records of this NimbleVolumeCommon.  # noqa: E501

        List of access control records that apply to this volume. List of access control records associated with a volume or snapshot or protocol endpoint.  # noqa: E501

        :return: The access_control_records of this NimbleVolumeCommon.  # noqa: E501
        :rtype: list[AccessControlRecord]
        """
        return self._access_control_records

    @access_control_records.setter
    def access_control_records(self, access_control_records):
        """Sets the access_control_records of this NimbleVolumeCommon.

        List of access control records that apply to this volume. List of access control records associated with a volume or snapshot or protocol endpoint.  # noqa: E501

        :param access_control_records: The access_control_records of this NimbleVolumeCommon.  # noqa: E501
        :type: list[AccessControlRecord]
        """

        self._access_control_records = access_control_records

    @property
    def agent_type(self):
        """Gets the agent_type of this NimbleVolumeCommon.  # noqa: E501

        External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.  # noqa: E501

        :return: The agent_type of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """Sets the agent_type of this NimbleVolumeCommon.

        External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.  # noqa: E501

        :param agent_type: The agent_type of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._agent_type = agent_type

    @property
    def app_category(self):
        """Gets the app_category of this NimbleVolumeCommon.  # noqa: E501

        Application category that the volume belongs to. Plain string.  # noqa: E501

        :return: The app_category of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._app_category

    @app_category.setter
    def app_category(self, app_category):
        """Sets the app_category of this NimbleVolumeCommon.

        Application category that the volume belongs to. Plain string.  # noqa: E501

        :param app_category: The app_category of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._app_category = app_category

    @property
    def app_uuid(self):
        """Gets the app_uuid of this NimbleVolumeCommon.  # noqa: E501

        Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.  # noqa: E501

        :return: The app_uuid of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid):
        """Sets the app_uuid of this NimbleVolumeCommon.

        Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.  # noqa: E501

        :param app_uuid: The app_uuid of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._app_uuid = app_uuid

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleVolumeCommon.  # noqa: E501


        :return: The associated_links of this NimbleVolumeCommon.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleVolumeCommon.


        :param associated_links: The associated_links of this NimbleVolumeCommon.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def block_size(self):
        """Gets the block_size of this NimbleVolumeCommon.  # noqa: E501

        Size in bytes of blocks in the volume.  # noqa: E501

        :return: The block_size of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this NimbleVolumeCommon.

        Size in bytes of blocks in the volume.  # noqa: E501

        :param block_size: The block_size of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def cache_needed_for_pin(self):
        """Gets the cache_needed_for_pin of this NimbleVolumeCommon.  # noqa: E501

        The amount of flash needed to pin the volume.  # noqa: E501

        :return: The cache_needed_for_pin of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._cache_needed_for_pin

    @cache_needed_for_pin.setter
    def cache_needed_for_pin(self, cache_needed_for_pin):
        """Sets the cache_needed_for_pin of this NimbleVolumeCommon.

        The amount of flash needed to pin the volume.  # noqa: E501

        :param cache_needed_for_pin: The cache_needed_for_pin of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._cache_needed_for_pin = cache_needed_for_pin

    @property
    def cache_pinned(self):
        """Gets the cache_pinned of this NimbleVolumeCommon.  # noqa: E501

        If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume.  # noqa: E501

        :return: The cache_pinned of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._cache_pinned

    @cache_pinned.setter
    def cache_pinned(self, cache_pinned):
        """Sets the cache_pinned of this NimbleVolumeCommon.

        If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume.  # noqa: E501

        :param cache_pinned: The cache_pinned of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._cache_pinned = cache_pinned

    @property
    def cache_policy(self):
        """Gets the cache_policy of this NimbleVolumeCommon.  # noqa: E501

        Cache policy applied to the volume. Possible values: 'disabled', 'normal', 'aggressive', 'no_write', 'aggressive_read_no_write'.  # noqa: E501

        :return: The cache_policy of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._cache_policy

    @cache_policy.setter
    def cache_policy(self, cache_policy):
        """Sets the cache_policy of this NimbleVolumeCommon.

        Cache policy applied to the volume. Possible values: 'disabled', 'normal', 'aggressive', 'no_write', 'aggressive_read_no_write'.  # noqa: E501

        :param cache_policy: The cache_policy of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._cache_policy = cache_policy

    @property
    def caching_enabled(self):
        """Gets the caching_enabled of this NimbleVolumeCommon.  # noqa: E501

        Indicate caching the volume is enabled.  # noqa: E501

        :return: The caching_enabled of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._caching_enabled

    @caching_enabled.setter
    def caching_enabled(self, caching_enabled):
        """Sets the caching_enabled of this NimbleVolumeCommon.

        Indicate caching the volume is enabled.  # noqa: E501

        :param caching_enabled: The caching_enabled of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._caching_enabled = caching_enabled

    @property
    def cksum_last_verified(self):
        """Gets the cksum_last_verified of this NimbleVolumeCommon.  # noqa: E501

        Last checksum verification time.  # noqa: E501

        :return: The cksum_last_verified of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._cksum_last_verified

    @cksum_last_verified.setter
    def cksum_last_verified(self, cksum_last_verified):
        """Sets the cksum_last_verified of this NimbleVolumeCommon.

        Last checksum verification time.  # noqa: E501

        :param cksum_last_verified: The cksum_last_verified of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._cksum_last_verified = cksum_last_verified

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleVolumeCommon.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleVolumeCommon.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def content_repl_errors_found(self):
        """Gets the content_repl_errors_found of this NimbleVolumeCommon.  # noqa: E501

        Indicates whether the last content based replication had errors.  # noqa: E501

        :return: The content_repl_errors_found of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._content_repl_errors_found

    @content_repl_errors_found.setter
    def content_repl_errors_found(self, content_repl_errors_found):
        """Sets the content_repl_errors_found of this NimbleVolumeCommon.

        Indicates whether the last content based replication had errors.  # noqa: E501

        :param content_repl_errors_found: The content_repl_errors_found of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._content_repl_errors_found = content_repl_errors_found

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleVolumeCommon.  # noqa: E501

        Time when this volume was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The creation_time of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleVolumeCommon.

        Time when this volume was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param creation_time: The creation_time of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleVolumeCommon.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleVolumeCommon.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def dedupe_enabled(self):
        """Gets the dedupe_enabled of this NimbleVolumeCommon.  # noqa: E501

        Indicate whether dedupe is enabled.  # noqa: E501

        :return: The dedupe_enabled of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_enabled

    @dedupe_enabled.setter
    def dedupe_enabled(self, dedupe_enabled):
        """Sets the dedupe_enabled of this NimbleVolumeCommon.

        Indicate whether dedupe is enabled.  # noqa: E501

        :param dedupe_enabled: The dedupe_enabled of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._dedupe_enabled = dedupe_enabled

    @property
    def description(self):
        """Gets the description of this NimbleVolumeCommon.  # noqa: E501

        Text description of volume. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleVolumeCommon.

        Text description of volume. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def encryption_cipher(self):
        """Gets the encryption_cipher of this NimbleVolumeCommon.  # noqa: E501

        The encryption cipher of the volume. Possible values: 'none', 'aes_256_xts'.  # noqa: E501

        :return: The encryption_cipher of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._encryption_cipher

    @encryption_cipher.setter
    def encryption_cipher(self, encryption_cipher):
        """Sets the encryption_cipher of this NimbleVolumeCommon.

        The encryption cipher of the volume. Possible values: 'none', 'aes_256_xts'.  # noqa: E501

        :param encryption_cipher: The encryption_cipher of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._encryption_cipher = encryption_cipher

    @property
    def force(self):
        """Gets the force of this NimbleVolumeCommon.  # noqa: E501

        Forcibly offline, reduce size or change read-only status a volume.  # noqa: E501

        :return: The force of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this NimbleVolumeCommon.

        Forcibly offline, reduce size or change read-only status a volume.  # noqa: E501

        :param force: The force of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def full_name(self):
        """Gets the full_name of this NimbleVolumeCommon.  # noqa: E501

        Fully qualified name of volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.  # noqa: E501

        :return: The full_name of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this NimbleVolumeCommon.

        Fully qualified name of volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.  # noqa: E501

        :param full_name: The full_name of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def generation(self):
        """Gets the generation of this NimbleVolumeCommon.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleVolumeCommon.

        generation  # noqa: E501

        :param generation: The generation of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def inherit_acl(self):
        """Gets the inherit_acl of this NimbleVolumeCommon.  # noqa: E501

        In a volume clone operation, if both the parent and the clone have no external management agent (their agent_type property is \"none\"), then inherit_acl controls whether the clone will inherit a copy of the parent's access control list. If either the parent or the clone have an external management agent, then the clone will not inherit the parent's access control list.  # noqa: E501

        :return: The inherit_acl of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._inherit_acl

    @inherit_acl.setter
    def inherit_acl(self, inherit_acl):
        """Sets the inherit_acl of this NimbleVolumeCommon.

        In a volume clone operation, if both the parent and the clone have no external management agent (their agent_type property is \"none\"), then inherit_acl controls whether the clone will inherit a copy of the parent's access control list. If either the parent or the clone have an external management agent, then the clone will not inherit the parent's access control list.  # noqa: E501

        :param inherit_acl: The inherit_acl of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._inherit_acl = inherit_acl

    @property
    def iscsi_target_scope(self):
        """Gets the iscsi_target_scope of this NimbleVolumeCommon.  # noqa: E501

        This indicates whether volume is exported under iSCSI Group Target or iSCSI Volume Target. This attribute is only meaningful to iSCSI system. On FC system, all volumes are exported under the FC Group Target. In create operation, the volume's target type will be set by this attribute. If not specified, it will be set as the group-setting. In clone operation, the clone's target type will inherit from the parent' setting. Possible values: 'volume', 'group'.  # noqa: E501

        :return: The iscsi_target_scope of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._iscsi_target_scope

    @iscsi_target_scope.setter
    def iscsi_target_scope(self, iscsi_target_scope):
        """Sets the iscsi_target_scope of this NimbleVolumeCommon.

        This indicates whether volume is exported under iSCSI Group Target or iSCSI Volume Target. This attribute is only meaningful to iSCSI system. On FC system, all volumes are exported under the FC Group Target. In create operation, the volume's target type will be set by this attribute. If not specified, it will be set as the group-setting. In clone operation, the clone's target type will inherit from the parent' setting. Possible values: 'volume', 'group'.  # noqa: E501

        :param iscsi_target_scope: The iscsi_target_scope of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._iscsi_target_scope = iscsi_target_scope

    @property
    def last_content_snap_br_cg_uid(self):
        """Gets the last_content_snap_br_cg_uid of this NimbleVolumeCommon.  # noqa: E501

        The branch cg uid of the content based snapshot that was last replicated.  # noqa: E501

        :return: The last_content_snap_br_cg_uid of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._last_content_snap_br_cg_uid

    @last_content_snap_br_cg_uid.setter
    def last_content_snap_br_cg_uid(self, last_content_snap_br_cg_uid):
        """Sets the last_content_snap_br_cg_uid of this NimbleVolumeCommon.

        The branch cg uid of the content based snapshot that was last replicated.  # noqa: E501

        :param last_content_snap_br_cg_uid: The last_content_snap_br_cg_uid of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._last_content_snap_br_cg_uid = last_content_snap_br_cg_uid

    @property
    def last_content_snap_br_gid(self):
        """Gets the last_content_snap_br_gid of this NimbleVolumeCommon.  # noqa: E501

        The branch gid of the content based snapshot that was last replicated.  # noqa: E501

        :return: The last_content_snap_br_gid of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._last_content_snap_br_gid

    @last_content_snap_br_gid.setter
    def last_content_snap_br_gid(self, last_content_snap_br_gid):
        """Sets the last_content_snap_br_gid of this NimbleVolumeCommon.

        The branch gid of the content based snapshot that was last replicated.  # noqa: E501

        :param last_content_snap_br_gid: The last_content_snap_br_gid of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._last_content_snap_br_gid = last_content_snap_br_gid

    @property
    def last_content_snap_id(self):
        """Gets the last_content_snap_id of this NimbleVolumeCommon.  # noqa: E501

        The ID of the content based snapshot that was last replicated.  # noqa: E501

        :return: The last_content_snap_id of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._last_content_snap_id

    @last_content_snap_id.setter
    def last_content_snap_id(self, last_content_snap_id):
        """Sets the last_content_snap_id of this NimbleVolumeCommon.

        The ID of the content based snapshot that was last replicated.  # noqa: E501

        :param last_content_snap_id: The last_content_snap_id of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._last_content_snap_id = last_content_snap_id

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleVolumeCommon.  # noqa: E501

        Time when this volume was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The last_modified of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleVolumeCommon.

        Time when this volume was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param last_modified: The last_modified of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def last_snap(self):
        """Gets the last_snap of this NimbleVolumeCommon.  # noqa: E501


        :return: The last_snap of this NimbleVolumeCommon.  # noqa: E501
        :rtype: SnapSummary
        """
        return self._last_snap

    @last_snap.setter
    def last_snap(self, last_snap):
        """Sets the last_snap of this NimbleVolumeCommon.


        :param last_snap: The last_snap of this NimbleVolumeCommon.  # noqa: E501
        :type: SnapSummary
        """

        self._last_snap = last_snap

    @property
    def limit(self):
        """Gets the limit of this NimbleVolumeCommon.  # noqa: E501

        Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100.  # noqa: E501

        :return: The limit of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this NimbleVolumeCommon.

        Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100.  # noqa: E501

        :param limit: The limit of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def limit_iops(self):
        """Gets the limit_iops of this NimbleVolumeCommon.  # noqa: E501

        IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).  # noqa: E501

        :return: The limit_iops of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._limit_iops

    @limit_iops.setter
    def limit_iops(self, limit_iops):
        """Sets the limit_iops of this NimbleVolumeCommon.

        IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).  # noqa: E501

        :param limit_iops: The limit_iops of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._limit_iops = limit_iops

    @property
    def limit_mbps(self):
        """Gets the limit_mbps of this NimbleVolumeCommon.  # noqa: E501

        Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).  # noqa: E501

        :return: The limit_mbps of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._limit_mbps

    @limit_mbps.setter
    def limit_mbps(self, limit_mbps):
        """Sets the limit_mbps of this NimbleVolumeCommon.

        Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).  # noqa: E501

        :param limit_mbps: The limit_mbps of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._limit_mbps = limit_mbps

    @property
    def metadata(self):
        """Gets the metadata of this NimbleVolumeCommon.  # noqa: E501

        Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.  # noqa: E501

        :return: The metadata of this NimbleVolumeCommon.  # noqa: E501
        :rtype: list[KeyValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NimbleVolumeCommon.

        Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.  # noqa: E501

        :param metadata: The metadata of this NimbleVolumeCommon.  # noqa: E501
        :type: list[KeyValue]
        """

        self._metadata = metadata

    @property
    def move_aborting(self):
        """Gets the move_aborting of this NimbleVolumeCommon.  # noqa: E501

        This indicates whether the move of the volume is aborting or not.  # noqa: E501

        :return: The move_aborting of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._move_aborting

    @move_aborting.setter
    def move_aborting(self, move_aborting):
        """Sets the move_aborting of this NimbleVolumeCommon.

        This indicates whether the move of the volume is aborting or not.  # noqa: E501

        :param move_aborting: The move_aborting of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._move_aborting = move_aborting

    @property
    def move_bytes_migrated(self):
        """Gets the move_bytes_migrated of this NimbleVolumeCommon.  # noqa: E501

        The bytes of volume which have been moved.  # noqa: E501

        :return: The move_bytes_migrated of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._move_bytes_migrated

    @move_bytes_migrated.setter
    def move_bytes_migrated(self, move_bytes_migrated):
        """Sets the move_bytes_migrated of this NimbleVolumeCommon.

        The bytes of volume which have been moved.  # noqa: E501

        :param move_bytes_migrated: The move_bytes_migrated of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._move_bytes_migrated = move_bytes_migrated

    @property
    def move_bytes_remaining(self):
        """Gets the move_bytes_remaining of this NimbleVolumeCommon.  # noqa: E501

        The bytes of volume which have not been moved.  # noqa: E501

        :return: The move_bytes_remaining of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._move_bytes_remaining

    @move_bytes_remaining.setter
    def move_bytes_remaining(self, move_bytes_remaining):
        """Sets the move_bytes_remaining of this NimbleVolumeCommon.

        The bytes of volume which have not been moved.  # noqa: E501

        :param move_bytes_remaining: The move_bytes_remaining of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._move_bytes_remaining = move_bytes_remaining

    @property
    def move_est_compl_time(self):
        """Gets the move_est_compl_time of this NimbleVolumeCommon.  # noqa: E501

        The estimated time of completion of a move. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The move_est_compl_time of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._move_est_compl_time

    @move_est_compl_time.setter
    def move_est_compl_time(self, move_est_compl_time):
        """Sets the move_est_compl_time of this NimbleVolumeCommon.

        The estimated time of completion of a move. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param move_est_compl_time: The move_est_compl_time of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._move_est_compl_time = move_est_compl_time

    @property
    def move_start_time(self):
        """Gets the move_start_time of this NimbleVolumeCommon.  # noqa: E501

        The Start time when this volume was moved. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The move_start_time of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._move_start_time

    @move_start_time.setter
    def move_start_time(self, move_start_time):
        """Sets the move_start_time of this NimbleVolumeCommon.

        The Start time when this volume was moved. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param move_start_time: The move_start_time of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._move_start_time = move_start_time

    @property
    def multi_initiator(self):
        """Gets the multi_initiator of this NimbleVolumeCommon.  # noqa: E501

        This indicates whether volume and its snapshots are multi-initiator accessible. This attribute applies only to volumes and snapshots available to iSCSI initiators.Online state of volume, available for host initiators to establish connections.  # noqa: E501

        :return: The multi_initiator of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._multi_initiator

    @multi_initiator.setter
    def multi_initiator(self, multi_initiator):
        """Sets the multi_initiator of this NimbleVolumeCommon.

        This indicates whether volume and its snapshots are multi-initiator accessible. This attribute applies only to volumes and snapshots available to iSCSI initiators.Online state of volume, available for host initiators to establish connections.  # noqa: E501

        :param multi_initiator: The multi_initiator of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._multi_initiator = multi_initiator

    @property
    def needs_content_repl(self):
        """Gets the needs_content_repl of this NimbleVolumeCommon.  # noqa: E501

        Indicates whether the volume needs content based replication.  # noqa: E501

        :return: The needs_content_repl of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._needs_content_repl

    @needs_content_repl.setter
    def needs_content_repl(self, needs_content_repl):
        """Sets the needs_content_repl of this NimbleVolumeCommon.

        Indicates whether the volume needs content based replication.  # noqa: E501

        :param needs_content_repl: The needs_content_repl of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._needs_content_repl = needs_content_repl

    @property
    def num_snaps(self):
        """Gets the num_snaps of this NimbleVolumeCommon.  # noqa: E501

        Number of live, non-hidden snapshots for this volume.  # noqa: E501

        :return: The num_snaps of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._num_snaps

    @num_snaps.setter
    def num_snaps(self, num_snaps):
        """Sets the num_snaps of this NimbleVolumeCommon.

        Number of live, non-hidden snapshots for this volume.  # noqa: E501

        :param num_snaps: The num_snaps of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._num_snaps = num_snaps

    @property
    def offline_reason(self):
        """Gets the offline_reason of this NimbleVolumeCommon.  # noqa: E501

        Volume offline reason. Possible values: 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'over_snapshot_reserve', 'nvram_loss_recovery', 'serial_number_collision', 'encryption_inactive', 'encryption_key_deleted', 'vvol_unbind', 'cache_unpin_in_progress'.  # noqa: E501

        :return: The offline_reason of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._offline_reason

    @offline_reason.setter
    def offline_reason(self, offline_reason):
        """Sets the offline_reason of this NimbleVolumeCommon.

        Volume offline reason. Possible values: 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'over_snapshot_reserve', 'nvram_loss_recovery', 'serial_number_collision', 'encryption_inactive', 'encryption_key_deleted', 'vvol_unbind', 'cache_unpin_in_progress'.  # noqa: E501

        :param offline_reason: The offline_reason of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._offline_reason = offline_reason

    @property
    def online_snaps(self):
        """Gets the online_snaps of this NimbleVolumeCommon.  # noqa: E501

        The list of online snapshots of this volume. Snapshot list as presented in volumes object set.  # noqa: E501

        :return: The online_snaps of this NimbleVolumeCommon.  # noqa: E501
        :rtype: list[SnapshotFromVolume]
        """
        return self._online_snaps

    @online_snaps.setter
    def online_snaps(self, online_snaps):
        """Sets the online_snaps of this NimbleVolumeCommon.

        The list of online snapshots of this volume. Snapshot list as presented in volumes object set.  # noqa: E501

        :param online_snaps: The online_snaps of this NimbleVolumeCommon.  # noqa: E501
        :type: list[SnapshotFromVolume]
        """

        self._online_snaps = online_snaps

    @property
    def pinned_cache_size(self):
        """Gets the pinned_cache_size of this NimbleVolumeCommon.  # noqa: E501

        The amount of flash pinned on the volume.  # noqa: E501

        :return: The pinned_cache_size of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._pinned_cache_size

    @pinned_cache_size.setter
    def pinned_cache_size(self, pinned_cache_size):
        """Sets the pinned_cache_size of this NimbleVolumeCommon.

        The amount of flash pinned on the volume.  # noqa: E501

        :param pinned_cache_size: The pinned_cache_size of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._pinned_cache_size = pinned_cache_size

    @property
    def pre_filter(self):
        """Gets the pre_filter of this NimbleVolumeCommon.  # noqa: E501

        Pre-filtering criteria. Plain string.  # noqa: E501

        :return: The pre_filter of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._pre_filter

    @pre_filter.setter
    def pre_filter(self, pre_filter):
        """Sets the pre_filter of this NimbleVolumeCommon.

        Pre-filtering criteria. Plain string.  # noqa: E501

        :param pre_filter: The pre_filter of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._pre_filter = pre_filter

    @property
    def previously_deduped(self):
        """Gets the previously_deduped of this NimbleVolumeCommon.  # noqa: E501

        Indicate whether dedupe has ever been enabled on this volume.  # noqa: E501

        :return: The previously_deduped of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._previously_deduped

    @previously_deduped.setter
    def previously_deduped(self, previously_deduped):
        """Sets the previously_deduped of this NimbleVolumeCommon.

        Indicate whether dedupe has ever been enabled on this volume.  # noqa: E501

        :param previously_deduped: The previously_deduped of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._previously_deduped = previously_deduped

    @property
    def projected_num_snaps(self):
        """Gets the projected_num_snaps of this NimbleVolumeCommon.  # noqa: E501

        Depricated. Projected number of snapshots (including schedued and manual) for this volume.  # noqa: E501

        :return: The projected_num_snaps of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._projected_num_snaps

    @projected_num_snaps.setter
    def projected_num_snaps(self, projected_num_snaps):
        """Sets the projected_num_snaps of this NimbleVolumeCommon.

        Depricated. Projected number of snapshots (including schedued and manual) for this volume.  # noqa: E501

        :param projected_num_snaps: The projected_num_snaps of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._projected_num_snaps = projected_num_snaps

    @property
    def protection_type(self):
        """Gets the protection_type of this NimbleVolumeCommon.  # noqa: E501

        Specifies if volume is protected with schedules. If protected, indicate whether replication is setup. Volume Collection or volume is protected locally or remotely or unprotected. Possible values: 'local', 'remote' or 'unprotected'.  # noqa: E501

        :return: The protection_type of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._protection_type

    @protection_type.setter
    def protection_type(self, protection_type):
        """Sets the protection_type of this NimbleVolumeCommon.

        Specifies if volume is protected with schedules. If protected, indicate whether replication is setup. Volume Collection or volume is protected locally or remotely or unprotected. Possible values: 'local', 'remote' or 'unprotected'.  # noqa: E501

        :param protection_type: The protection_type of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._protection_type = protection_type

    @property
    def reserve(self):
        """Gets the reserve of this NimbleVolumeCommon.  # noqa: E501

        Amount of space to reserve for this volume as a percentage of volume size. Percentage as integer from 0 to 100.  # noqa: E501

        :return: The reserve of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._reserve

    @reserve.setter
    def reserve(self, reserve):
        """Sets the reserve of this NimbleVolumeCommon.

        Amount of space to reserve for this volume as a percentage of volume size. Percentage as integer from 0 to 100.  # noqa: E501

        :param reserve: The reserve of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._reserve = reserve

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleVolumeCommon.  # noqa: E501


        :return: The resource_uri of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleVolumeCommon.


        :param resource_uri: The resource_uri of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def search_name(self):
        """Gets the search_name of this NimbleVolumeCommon.  # noqa: E501

        Name of volume used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :return: The search_name of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._search_name

    @search_name.setter
    def search_name(self, search_name):
        """Sets the search_name of this NimbleVolumeCommon.

        Name of volume used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :param search_name: The search_name of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._search_name = search_name

    @property
    def snap_reserve(self):
        """Gets the snap_reserve of this NimbleVolumeCommon.  # noqa: E501

        Amount of space to reserve for snapshots of this volume as a percentage of volume size.  # noqa: E501

        :return: The snap_reserve of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._snap_reserve

    @snap_reserve.setter
    def snap_reserve(self, snap_reserve):
        """Sets the snap_reserve of this NimbleVolumeCommon.

        Amount of space to reserve for snapshots of this volume as a percentage of volume size.  # noqa: E501

        :param snap_reserve: The snap_reserve of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._snap_reserve = snap_reserve

    @property
    def snap_usage_compressed_bytes(self):
        """Gets the snap_usage_compressed_bytes of this NimbleVolumeCommon.  # noqa: E501

        Sum of compressed backup data in bytes stored in snapshots of this volume.  # noqa: E501

        :return: The snap_usage_compressed_bytes of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._snap_usage_compressed_bytes

    @snap_usage_compressed_bytes.setter
    def snap_usage_compressed_bytes(self, snap_usage_compressed_bytes):
        """Sets the snap_usage_compressed_bytes of this NimbleVolumeCommon.

        Sum of compressed backup data in bytes stored in snapshots of this volume.  # noqa: E501

        :param snap_usage_compressed_bytes: The snap_usage_compressed_bytes of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._snap_usage_compressed_bytes = snap_usage_compressed_bytes

    @property
    def snap_usage_populated_bytes(self):
        """Gets the snap_usage_populated_bytes of this NimbleVolumeCommon.  # noqa: E501

        Sum of backup data in bytes stored in snapshots of this volume without accounting for the sharing of data between snapshots.  # noqa: E501

        :return: The snap_usage_populated_bytes of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._snap_usage_populated_bytes

    @snap_usage_populated_bytes.setter
    def snap_usage_populated_bytes(self, snap_usage_populated_bytes):
        """Sets the snap_usage_populated_bytes of this NimbleVolumeCommon.

        Sum of backup data in bytes stored in snapshots of this volume without accounting for the sharing of data between snapshots.  # noqa: E501

        :param snap_usage_populated_bytes: The snap_usage_populated_bytes of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._snap_usage_populated_bytes = snap_usage_populated_bytes

    @property
    def snap_usage_uncompressed_bytes(self):
        """Gets the snap_usage_uncompressed_bytes of this NimbleVolumeCommon.  # noqa: E501

        Sum of uncompressed unique backup data in bytes stored in snapshots of this volume.  # noqa: E501

        :return: The snap_usage_uncompressed_bytes of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._snap_usage_uncompressed_bytes

    @snap_usage_uncompressed_bytes.setter
    def snap_usage_uncompressed_bytes(self, snap_usage_uncompressed_bytes):
        """Sets the snap_usage_uncompressed_bytes of this NimbleVolumeCommon.

        Sum of uncompressed unique backup data in bytes stored in snapshots of this volume.  # noqa: E501

        :param snap_usage_uncompressed_bytes: The snap_usage_uncompressed_bytes of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._snap_usage_uncompressed_bytes = snap_usage_uncompressed_bytes

    @property
    def snap_warn_level(self):
        """Gets the snap_warn_level of this NimbleVolumeCommon.  # noqa: E501

        Threshold for available space as a percentage of volume size below which an alert is raised.  # noqa: E501

        :return: The snap_warn_level of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._snap_warn_level

    @snap_warn_level.setter
    def snap_warn_level(self, snap_warn_level):
        """Sets the snap_warn_level of this NimbleVolumeCommon.

        Threshold for available space as a percentage of volume size below which an alert is raised.  # noqa: E501

        :param snap_warn_level: The snap_warn_level of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._snap_warn_level = snap_warn_level

    @property
    def space_usage_level(self):
        """Gets the space_usage_level of this NimbleVolumeCommon.  # noqa: E501

        Indicates space usage level based on warning level. Possible values: 'normal', 'warning', 'critical'.  # noqa: E501

        :return: The space_usage_level of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._space_usage_level

    @space_usage_level.setter
    def space_usage_level(self, space_usage_level):
        """Sets the space_usage_level of this NimbleVolumeCommon.

        Indicates space usage level based on warning level. Possible values: 'normal', 'warning', 'critical'.  # noqa: E501

        :param space_usage_level: The space_usage_level of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._space_usage_level = space_usage_level

    @property
    def srep_last_sync(self):
        """Gets the srep_last_sync of this NimbleVolumeCommon.  # noqa: E501

        Time when synchronously replicated volume was last synchronized.  # noqa: E501

        :return: The srep_last_sync of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._srep_last_sync

    @srep_last_sync.setter
    def srep_last_sync(self, srep_last_sync):
        """Sets the srep_last_sync of this NimbleVolumeCommon.

        Time when synchronously replicated volume was last synchronized.  # noqa: E501

        :param srep_last_sync: The srep_last_sync of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._srep_last_sync = srep_last_sync

    @property
    def srep_resync_sync(self):
        """Gets the srep_resync_sync of this NimbleVolumeCommon.  # noqa: E501

        Percentage of resync progress for synchronously replicated volume.  # noqa: E501

        :return: The srep_resync_sync of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._srep_resync_sync

    @srep_resync_sync.setter
    def srep_resync_sync(self, srep_resync_sync):
        """Sets the srep_resync_sync of this NimbleVolumeCommon.

        Percentage of resync progress for synchronously replicated volume.  # noqa: E501

        :param srep_resync_sync: The srep_resync_sync of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._srep_resync_sync = srep_resync_sync

    @property
    def thinly_provisioned(self):
        """Gets the thinly_provisioned of this NimbleVolumeCommon.  # noqa: E501

        Allow volume to be advertised as thinly provisioned to initiators supporting thin provisioning. For such volumes, soft limit notification is set to initiators when the volume space usage crosses its volume_warn_level. Default is yes. This change takes effect only for new connections to the volume. Initiators must disconnect and reconnect for the new setting to be take effect at the initiator level consistently.  # noqa: E501

        :return: The thinly_provisioned of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._thinly_provisioned

    @thinly_provisioned.setter
    def thinly_provisioned(self, thinly_provisioned):
        """Sets the thinly_provisioned of this NimbleVolumeCommon.

        Allow volume to be advertised as thinly provisioned to initiators supporting thin provisioning. For such volumes, soft limit notification is set to initiators when the volume space usage crosses its volume_warn_level. Default is yes. This change takes effect only for new connections to the volume. Initiators must disconnect and reconnect for the new setting to be take effect at the initiator level consistently.  # noqa: E501

        :param thinly_provisioned: The thinly_provisioned of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._thinly_provisioned = thinly_provisioned

    @property
    def total_usage_bytes(self):
        """Gets the total_usage_bytes of this NimbleVolumeCommon.  # noqa: E501

        Sum of compressed data and compressed backup data in bytes of this volume.  # noqa: E501

        :return: The total_usage_bytes of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._total_usage_bytes

    @total_usage_bytes.setter
    def total_usage_bytes(self, total_usage_bytes):
        """Sets the total_usage_bytes of this NimbleVolumeCommon.

        Sum of compressed data and compressed backup data in bytes of this volume.  # noqa: E501

        :param total_usage_bytes: The total_usage_bytes of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._total_usage_bytes = total_usage_bytes

    @property
    def type(self):
        """Gets the type of this NimbleVolumeCommon.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleVolumeCommon.

        type  # noqa: E501

        :param type: The type of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def upstream_cache_pinned(self):
        """Gets the upstream_cache_pinned of this NimbleVolumeCommon.  # noqa: E501

        This indicates whether the upstream volume is cache pinned or not.  # noqa: E501

        :return: The upstream_cache_pinned of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._upstream_cache_pinned

    @upstream_cache_pinned.setter
    def upstream_cache_pinned(self, upstream_cache_pinned):
        """Sets the upstream_cache_pinned of this NimbleVolumeCommon.

        This indicates whether the upstream volume is cache pinned or not.  # noqa: E501

        :param upstream_cache_pinned: The upstream_cache_pinned of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._upstream_cache_pinned = upstream_cache_pinned

    @property
    def usage_valid(self):
        """Gets the usage_valid of this NimbleVolumeCommon.  # noqa: E501

        This indicates whether usage information of volume and snapshots are valid or not.  # noqa: E501

        :return: The usage_valid of this NimbleVolumeCommon.  # noqa: E501
        :rtype: bool
        """
        return self._usage_valid

    @usage_valid.setter
    def usage_valid(self, usage_valid):
        """Sets the usage_valid of this NimbleVolumeCommon.

        This indicates whether usage information of volume and snapshots are valid or not.  # noqa: E501

        :param usage_valid: The usage_valid of this NimbleVolumeCommon.  # noqa: E501
        :type: bool
        """

        self._usage_valid = usage_valid

    @property
    def vol_state(self):
        """Gets the vol_state of this NimbleVolumeCommon.  # noqa: E501

        Status of the volume.  Possible values: 'online', 'offline', 'non_writable', 'read_only', 'login_only'.  # noqa: E501

        :return: The vol_state of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._vol_state

    @vol_state.setter
    def vol_state(self, vol_state):
        """Sets the vol_state of this NimbleVolumeCommon.

        Status of the volume.  Possible values: 'online', 'offline', 'non_writable', 'read_only', 'login_only'.  # noqa: E501

        :param vol_state: The vol_state of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._vol_state = vol_state

    @property
    def vol_usage_compressed_bytes(self):
        """Gets the vol_usage_compressed_bytes of this NimbleVolumeCommon.  # noqa: E501

        Compressed data in bytes for this volume.  # noqa: E501

        :return: The vol_usage_compressed_bytes of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._vol_usage_compressed_bytes

    @vol_usage_compressed_bytes.setter
    def vol_usage_compressed_bytes(self, vol_usage_compressed_bytes):
        """Sets the vol_usage_compressed_bytes of this NimbleVolumeCommon.

        Compressed data in bytes for this volume.  # noqa: E501

        :param vol_usage_compressed_bytes: The vol_usage_compressed_bytes of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._vol_usage_compressed_bytes = vol_usage_compressed_bytes

    @property
    def vol_usage_uncompressed_bytes(self):
        """Gets the vol_usage_uncompressed_bytes of this NimbleVolumeCommon.  # noqa: E501

        Uncompressed data in bytes for this volume.  # noqa: E501

        :return: The vol_usage_uncompressed_bytes of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._vol_usage_uncompressed_bytes

    @vol_usage_uncompressed_bytes.setter
    def vol_usage_uncompressed_bytes(self, vol_usage_uncompressed_bytes):
        """Sets the vol_usage_uncompressed_bytes of this NimbleVolumeCommon.

        Uncompressed data in bytes for this volume.  # noqa: E501

        :param vol_usage_uncompressed_bytes: The vol_usage_uncompressed_bytes of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._vol_usage_uncompressed_bytes = vol_usage_uncompressed_bytes

    @property
    def vpd_ieee0(self):
        """Gets the vpd_ieee0 of this NimbleVolumeCommon.  # noqa: E501

        The first 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. Plain string.  # noqa: E501

        :return: The vpd_ieee0 of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._vpd_ieee0

    @vpd_ieee0.setter
    def vpd_ieee0(self, vpd_ieee0):
        """Sets the vpd_ieee0 of this NimbleVolumeCommon.

        The first 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. Plain string.  # noqa: E501

        :param vpd_ieee0: The vpd_ieee0 of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._vpd_ieee0 = vpd_ieee0

    @property
    def vpd_ieee1(self):
        """Gets the vpd_ieee1 of this NimbleVolumeCommon.  # noqa: E501

        The last 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. Plain string.  # noqa: E501

        :return: The vpd_ieee1 of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._vpd_ieee1

    @vpd_ieee1.setter
    def vpd_ieee1(self, vpd_ieee1):
        """Sets the vpd_ieee1 of this NimbleVolumeCommon.

        The last 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. Plain string.  # noqa: E501

        :param vpd_ieee1: The vpd_ieee1 of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._vpd_ieee1 = vpd_ieee1

    @property
    def vpd_t10(self):
        """Gets the vpd_t10 of this NimbleVolumeCommon.  # noqa: E501

        The volume's T10 Vendor ID-based identifier. Plain string.  # noqa: E501

        :return: The vpd_t10 of this NimbleVolumeCommon.  # noqa: E501
        :rtype: str
        """
        return self._vpd_t10

    @vpd_t10.setter
    def vpd_t10(self, vpd_t10):
        """Sets the vpd_t10 of this NimbleVolumeCommon.

        The volume's T10 Vendor ID-based identifier. Plain string.  # noqa: E501

        :param vpd_t10: The vpd_t10 of this NimbleVolumeCommon.  # noqa: E501
        :type: str
        """

        self._vpd_t10 = vpd_t10

    @property
    def warn_level(self):
        """Gets the warn_level of this NimbleVolumeCommon.  # noqa: E501

        Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume.  # noqa: E501

        :return: The warn_level of this NimbleVolumeCommon.  # noqa: E501
        :rtype: int
        """
        return self._warn_level

    @warn_level.setter
    def warn_level(self, warn_level):
        """Sets the warn_level of this NimbleVolumeCommon.

        Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume.  # noqa: E501

        :param warn_level: The warn_level of this NimbleVolumeCommon.  # noqa: E501
        :type: int
        """

        self._warn_level = warn_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleVolumeCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
