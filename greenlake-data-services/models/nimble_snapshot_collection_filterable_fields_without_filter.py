# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleSnapshotCollectionFilterableFieldsWithoutFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'online_status': 'str',
        'schedule_id': 'str',
        'srep_owner_id': 'str',
        'volcoll_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'online_status': 'online_status',
        'schedule_id': 'schedule_id',
        'srep_owner_id': 'srep_owner_id',
        'volcoll_id': 'volcoll_id'
    }

    def __init__(self, id=None, name=None, online_status=None, schedule_id=None, srep_owner_id=None, volcoll_id=None):  # noqa: E501
        """NimbleSnapshotCollectionFilterableFieldsWithoutFilter - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._online_status = None
        self._schedule_id = None
        self._srep_owner_id = None
        self._volcoll_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if online_status is not None:
            self.online_status = online_status
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if srep_owner_id is not None:
            self.srep_owner_id = srep_owner_id
        if volcoll_id is not None:
            self.volcoll_id = volcoll_id

    @property
    def id(self):
        """Gets the id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501

        Identifier for the snapshot collection. A 42 digit hexadecimal number. `Filter`  # noqa: E501

        :return: The id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.

        Identifier for the snapshot collection. A 42 digit hexadecimal number. `Filter`  # noqa: E501

        :param id: The id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501

        Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`  # noqa: E501

        :return: The name of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.

        Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`  # noqa: E501

        :param name: The name of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def online_status(self):
        """Gets the online_status of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501

        Online status of snapshot collection. This is based on the online status of the individual snapshots. Online status based on that of the constituent entities. Possible values: 'online', 'offline' or 'partial'.  # noqa: E501

        :return: The online_status of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._online_status

    @online_status.setter
    def online_status(self, online_status):
        """Sets the online_status of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.

        Online status of snapshot collection. This is based on the online status of the individual snapshots. Online status based on that of the constituent entities. Possible values: 'online', 'offline' or 'partial'.  # noqa: E501

        :param online_status: The online_status of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._online_status = online_status

    @property
    def schedule_id(self):
        """Gets the schedule_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501

        Identifier of protection schedule. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The schedule_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.

        Identifier of protection schedule. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param schedule_id: The schedule_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._schedule_id = schedule_id

    @property
    def srep_owner_id(self):
        """Gets the srep_owner_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501

        ID of the partner where snapshots for this snapshot collection reside which were created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The srep_owner_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._srep_owner_id

    @srep_owner_id.setter
    def srep_owner_id(self, srep_owner_id):
        """Sets the srep_owner_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.

        ID of the partner where snapshots for this snapshot collection reside which were created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param srep_owner_id: The srep_owner_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._srep_owner_id = srep_owner_id

    @property
    def volcoll_id(self):
        """Gets the volcoll_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501

        Parent volume collection ID. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The volcoll_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._volcoll_id

    @volcoll_id.setter
    def volcoll_id(self, volcoll_id):
        """Sets the volcoll_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.

        Parent volume collection ID. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param volcoll_id: The volcoll_id of this NimbleSnapshotCollectionFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._volcoll_id = volcoll_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleSnapshotCollectionFilterableFieldsWithoutFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
