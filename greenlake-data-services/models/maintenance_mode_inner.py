# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MaintenanceModeInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comment': 'str',
        'end_time': 'MaintenanceModeInnerEndTime',
        'instances': 'int',
        'reason_code': 'str',
        'start_time': 'MaintenanceModeInnerStartTime',
        'user': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'end_time': 'endTime',
        'instances': 'instances',
        'reason_code': 'reasonCode',
        'start_time': 'startTime',
        'user': 'user'
    }

    def __init__(self, comment=None, end_time=None, instances=None, reason_code=None, start_time=None, user=None):  # noqa: E501
        """MaintenanceModeInner - a model defined in OpenAPI"""  # noqa: E501

        self._comment = None
        self._end_time = None
        self._instances = None
        self._reason_code = None
        self._start_time = None
        self._user = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if end_time is not None:
            self.end_time = end_time
        if instances is not None:
            self.instances = instances
        if reason_code is not None:
            self.reason_code = reason_code
        if start_time is not None:
            self.start_time = start_time
        if user is not None:
            self.user = user

    @property
    def comment(self):
        """Gets the comment of this MaintenanceModeInner.  # noqa: E501

        Comments  # noqa: E501

        :return: The comment of this MaintenanceModeInner.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MaintenanceModeInner.

        Comments  # noqa: E501

        :param comment: The comment of this MaintenanceModeInner.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def end_time(self):
        """Gets the end_time of this MaintenanceModeInner.  # noqa: E501


        :return: The end_time of this MaintenanceModeInner.  # noqa: E501
        :rtype: MaintenanceModeInnerEndTime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MaintenanceModeInner.


        :param end_time: The end_time of this MaintenanceModeInner.  # noqa: E501
        :type: MaintenanceModeInnerEndTime
        """

        self._end_time = end_time

    @property
    def instances(self):
        """Gets the instances of this MaintenanceModeInner.  # noqa: E501

        Instances  # noqa: E501

        :return: The instances of this MaintenanceModeInner.  # noqa: E501
        :rtype: int
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this MaintenanceModeInner.

        Instances  # noqa: E501

        :param instances: The instances of this MaintenanceModeInner.  # noqa: E501
        :type: int
        """

        self._instances = instances

    @property
    def reason_code(self):
        """Gets the reason_code of this MaintenanceModeInner.  # noqa: E501

        Reason code  # noqa: E501

        :return: The reason_code of this MaintenanceModeInner.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this MaintenanceModeInner.

        Reason code  # noqa: E501

        :param reason_code: The reason_code of this MaintenanceModeInner.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def start_time(self):
        """Gets the start_time of this MaintenanceModeInner.  # noqa: E501


        :return: The start_time of this MaintenanceModeInner.  # noqa: E501
        :rtype: MaintenanceModeInnerStartTime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MaintenanceModeInner.


        :param start_time: The start_time of this MaintenanceModeInner.  # noqa: E501
        :type: MaintenanceModeInnerStartTime
        """

        self._start_time = start_time

    @property
    def user(self):
        """Gets the user of this MaintenanceModeInner.  # noqa: E501

        User  # noqa: E501

        :return: The user of this MaintenanceModeInner.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MaintenanceModeInner.

        User  # noqa: E501

        :param user: The user of this MaintenanceModeInner.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceModeInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
