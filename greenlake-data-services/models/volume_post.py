# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VolumePost(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comment': 'str',
        'custom_name': 'str',
        'expire_secs': 'int',
        'name_pattern': 'NamePattern',
        'read_only': 'bool',
        'retain_secs': 'int'
    }

    attribute_map = {
        'comment': 'comment',
        'custom_name': 'customName',
        'expire_secs': 'expireSecs',
        'name_pattern': 'namePattern',
        'read_only': 'readOnly',
        'retain_secs': 'retainSecs'
    }

    def __init__(self, comment=None, custom_name=None, expire_secs=None, name_pattern=None, read_only=None, retain_secs=None):  # noqa: E501
        """VolumePost - a model defined in OpenAPI"""  # noqa: E501

        self._comment = None
        self._custom_name = None
        self._expire_secs = None
        self._name_pattern = None
        self._read_only = None
        self._retain_secs = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if custom_name is not None:
            self.custom_name = custom_name
        if expire_secs is not None:
            self.expire_secs = expire_secs
        self.name_pattern = name_pattern
        if read_only is not None:
            self.read_only = read_only
        if retain_secs is not None:
            self.retain_secs = retain_secs

    @property
    def comment(self):
        """Gets the comment of this VolumePost.  # noqa: E501

        Comment if any  # noqa: E501

        :return: The comment of this VolumePost.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this VolumePost.

        Comment if any  # noqa: E501

        :param comment: The comment of this VolumePost.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def custom_name(self):
        """Gets the custom_name of this VolumePost.  # noqa: E501

        Name for snapshot  # noqa: E501

        :return: The custom_name of this VolumePost.  # noqa: E501
        :rtype: str
        """
        return self._custom_name

    @custom_name.setter
    def custom_name(self, custom_name):
        """Sets the custom_name of this VolumePost.

        Name for snapshot  # noqa: E501

        :param custom_name: The custom_name of this VolumePost.  # noqa: E501
        :type: str
        """

        self._custom_name = custom_name

    @property
    def expire_secs(self):
        """Gets the expire_secs of this VolumePost.  # noqa: E501

        Expiration time in seconds  # noqa: E501

        :return: The expire_secs of this VolumePost.  # noqa: E501
        :rtype: int
        """
        return self._expire_secs

    @expire_secs.setter
    def expire_secs(self, expire_secs):
        """Sets the expire_secs of this VolumePost.

        Expiration time in seconds  # noqa: E501

        :param expire_secs: The expire_secs of this VolumePost.  # noqa: E501
        :type: int
        """

        self._expire_secs = expire_secs

    @property
    def name_pattern(self):
        """Gets the name_pattern of this VolumePost.  # noqa: E501


        :return: The name_pattern of this VolumePost.  # noqa: E501
        :rtype: NamePattern
        """
        return self._name_pattern

    @name_pattern.setter
    def name_pattern(self, name_pattern):
        """Sets the name_pattern of this VolumePost.


        :param name_pattern: The name_pattern of this VolumePost.  # noqa: E501
        :type: NamePattern
        """
        if name_pattern is None:
            raise ValueError("Invalid value for `name_pattern`, must not be `None`")  # noqa: E501

        self._name_pattern = name_pattern

    @property
    def read_only(self):
        """Gets the read_only of this VolumePost.  # noqa: E501

        Read only or Read/Write  # noqa: E501

        :return: The read_only of this VolumePost.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this VolumePost.

        Read only or Read/Write  # noqa: E501

        :param read_only: The read_only of this VolumePost.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def retain_secs(self):
        """Gets the retain_secs of this VolumePost.  # noqa: E501

        Reatain time in seconds  # noqa: E501

        :return: The retain_secs of this VolumePost.  # noqa: E501
        :rtype: int
        """
        return self._retain_secs

    @retain_secs.setter
    def retain_secs(self, retain_secs):
        """Sets the retain_secs of this VolumePost.

        Reatain time in seconds  # noqa: E501

        :param retain_secs: The retain_secs of this VolumePost.  # noqa: E501
        :type: int
        """

        self._retain_secs = retain_secs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumePost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
