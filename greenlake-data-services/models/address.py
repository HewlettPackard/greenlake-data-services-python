# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Address(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_node': 'int',
        'auto_sense': 'bool',
        'full_duplex': 'bool',
        'ip_address': 'str',
        'net_mask': 'str',
        'speed': 'int',
        'state': 'STATE',
        'status': 'str'
    }

    attribute_map = {
        'active_node': 'activeNode',
        'auto_sense': 'autoSense',
        'full_duplex': 'fullDuplex',
        'ip_address': 'ipAddress',
        'net_mask': 'netMask',
        'speed': 'speed',
        'state': 'state',
        'status': 'status'
    }

    def __init__(self, active_node=None, auto_sense=None, full_duplex=None, ip_address=None, net_mask=None, speed=None, state=None, status=None):  # noqa: E501
        """Address - a model defined in OpenAPI"""  # noqa: E501

        self._active_node = None
        self._auto_sense = None
        self._full_duplex = None
        self._ip_address = None
        self._net_mask = None
        self._speed = None
        self._state = None
        self._status = None
        self.discriminator = None

        if active_node is not None:
            self.active_node = active_node
        if auto_sense is not None:
            self.auto_sense = auto_sense
        if full_duplex is not None:
            self.full_duplex = full_duplex
        if ip_address is not None:
            self.ip_address = ip_address
        if net_mask is not None:
            self.net_mask = net_mask
        if speed is not None:
            self.speed = speed
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status

    @property
    def active_node(self):
        """Gets the active_node of this Address.  # noqa: E501

        Active node ID  # noqa: E501

        :return: The active_node of this Address.  # noqa: E501
        :rtype: int
        """
        return self._active_node

    @active_node.setter
    def active_node(self, active_node):
        """Sets the active_node of this Address.

        Active node ID  # noqa: E501

        :param active_node: The active_node of this Address.  # noqa: E501
        :type: int
        """

        self._active_node = active_node

    @property
    def auto_sense(self):
        """Gets the auto_sense of this Address.  # noqa: E501

        Specifies if the autosense is enabled for network port  # noqa: E501

        :return: The auto_sense of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._auto_sense

    @auto_sense.setter
    def auto_sense(self, auto_sense):
        """Sets the auto_sense of this Address.

        Specifies if the autosense is enabled for network port  # noqa: E501

        :param auto_sense: The auto_sense of this Address.  # noqa: E501
        :type: bool
        """

        self._auto_sense = auto_sense

    @property
    def full_duplex(self):
        """Gets the full_duplex of this Address.  # noqa: E501

        Is network port full duplex  # noqa: E501

        :return: The full_duplex of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._full_duplex

    @full_duplex.setter
    def full_duplex(self, full_duplex):
        """Sets the full_duplex of this Address.

        Is network port full duplex  # noqa: E501

        :param full_duplex: The full_duplex of this Address.  # noqa: E501
        :type: bool
        """

        self._full_duplex = full_duplex

    @property
    def ip_address(self):
        """Gets the ip_address of this Address.  # noqa: E501

        IP Address of the network port  # noqa: E501

        :return: The ip_address of this Address.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Address.

        IP Address of the network port  # noqa: E501

        :param ip_address: The ip_address of this Address.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def net_mask(self):
        """Gets the net_mask of this Address.  # noqa: E501

        Net mask of the network port  # noqa: E501

        :return: The net_mask of this Address.  # noqa: E501
        :rtype: str
        """
        return self._net_mask

    @net_mask.setter
    def net_mask(self, net_mask):
        """Sets the net_mask of this Address.

        Net mask of the network port  # noqa: E501

        :param net_mask: The net_mask of this Address.  # noqa: E501
        :type: str
        """

        self._net_mask = net_mask

    @property
    def speed(self):
        """Gets the speed of this Address.  # noqa: E501

        Speed of the network port  # noqa: E501

        :return: The speed of this Address.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Address.

        Speed of the network port  # noqa: E501

        :param speed: The speed of this Address.  # noqa: E501
        :type: int
        """

        self._speed = speed

    @property
    def state(self):
        """Gets the state of this Address.  # noqa: E501


        :return: The state of this Address.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.


        :param state: The state of this Address.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this Address.  # noqa: E501

        Status of the network port  # noqa: E501

        :return: The status of this Address.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Address.

        Status of the network port  # noqa: E501

        :param status: The status of this Address.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
