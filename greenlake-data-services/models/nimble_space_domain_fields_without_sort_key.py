# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleSpaceDomainFieldsWithoutSortKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_category_id': 'str',
        'app_category_name': 'str',
        'block_size': 'int',
        'clone_ratio': 'float',
        'compressed_usage_bytes': 'int',
        'compression_ratio': 'float',
        'dedupe_ratio': 'float',
        'deduped': 'bool',
        'encrypted': 'bool',
        'id': 'str',
        'logical_dedupe_usage': 'int',
        'physical_dedupe_usage': 'int',
        'pool_id': 'str',
        'pool_name': 'str',
        'savings_clone': 'int',
        'savings_compression': 'int',
        'savings_dedupe': 'int',
        'snap_logical_usage': 'int',
        'uncompressed_usage_bytes': 'int',
        'usage': 'int',
        'vol_logical_usage': 'int',
        'vol_mapped_usage': 'int'
    }

    attribute_map = {
        'app_category_id': 'app_category_id',
        'app_category_name': 'app_category_name',
        'block_size': 'block_size',
        'clone_ratio': 'clone_ratio',
        'compressed_usage_bytes': 'compressed_usage_bytes',
        'compression_ratio': 'compression_ratio',
        'dedupe_ratio': 'dedupe_ratio',
        'deduped': 'deduped',
        'encrypted': 'encrypted',
        'id': 'id',
        'logical_dedupe_usage': 'logical_dedupe_usage',
        'physical_dedupe_usage': 'physical_dedupe_usage',
        'pool_id': 'pool_id',
        'pool_name': 'pool_name',
        'savings_clone': 'savings_clone',
        'savings_compression': 'savings_compression',
        'savings_dedupe': 'savings_dedupe',
        'snap_logical_usage': 'snap_logical_usage',
        'uncompressed_usage_bytes': 'uncompressed_usage_bytes',
        'usage': 'usage',
        'vol_logical_usage': 'vol_logical_usage',
        'vol_mapped_usage': 'vol_mapped_usage'
    }

    def __init__(self, app_category_id=None, app_category_name=None, block_size=None, clone_ratio=None, compressed_usage_bytes=None, compression_ratio=None, dedupe_ratio=None, deduped=None, encrypted=None, id=None, logical_dedupe_usage=None, physical_dedupe_usage=None, pool_id=None, pool_name=None, savings_clone=None, savings_compression=None, savings_dedupe=None, snap_logical_usage=None, uncompressed_usage_bytes=None, usage=None, vol_logical_usage=None, vol_mapped_usage=None):  # noqa: E501
        """NimbleSpaceDomainFieldsWithoutSortKey - a model defined in OpenAPI"""  # noqa: E501

        self._app_category_id = None
        self._app_category_name = None
        self._block_size = None
        self._clone_ratio = None
        self._compressed_usage_bytes = None
        self._compression_ratio = None
        self._dedupe_ratio = None
        self._deduped = None
        self._encrypted = None
        self._id = None
        self._logical_dedupe_usage = None
        self._physical_dedupe_usage = None
        self._pool_id = None
        self._pool_name = None
        self._savings_clone = None
        self._savings_compression = None
        self._savings_dedupe = None
        self._snap_logical_usage = None
        self._uncompressed_usage_bytes = None
        self._usage = None
        self._vol_logical_usage = None
        self._vol_mapped_usage = None
        self.discriminator = None

        if app_category_id is not None:
            self.app_category_id = app_category_id
        if app_category_name is not None:
            self.app_category_name = app_category_name
        if block_size is not None:
            self.block_size = block_size
        if clone_ratio is not None:
            self.clone_ratio = clone_ratio
        if compressed_usage_bytes is not None:
            self.compressed_usage_bytes = compressed_usage_bytes
        if compression_ratio is not None:
            self.compression_ratio = compression_ratio
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if deduped is not None:
            self.deduped = deduped
        if encrypted is not None:
            self.encrypted = encrypted
        if id is not None:
            self.id = id
        if logical_dedupe_usage is not None:
            self.logical_dedupe_usage = logical_dedupe_usage
        if physical_dedupe_usage is not None:
            self.physical_dedupe_usage = physical_dedupe_usage
        if pool_id is not None:
            self.pool_id = pool_id
        if pool_name is not None:
            self.pool_name = pool_name
        if savings_clone is not None:
            self.savings_clone = savings_clone
        if savings_compression is not None:
            self.savings_compression = savings_compression
        if savings_dedupe is not None:
            self.savings_dedupe = savings_dedupe
        if snap_logical_usage is not None:
            self.snap_logical_usage = snap_logical_usage
        if uncompressed_usage_bytes is not None:
            self.uncompressed_usage_bytes = uncompressed_usage_bytes
        if usage is not None:
            self.usage = usage
        if vol_logical_usage is not None:
            self.vol_logical_usage = vol_logical_usage
        if vol_mapped_usage is not None:
            self.vol_mapped_usage = vol_mapped_usage

    @property
    def app_category_id(self):
        """Gets the app_category_id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Identifier of the application category associated with the space domain.  # noqa: E501

        :return: The app_category_id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._app_category_id

    @app_category_id.setter
    def app_category_id(self, app_category_id):
        """Sets the app_category_id of this NimbleSpaceDomainFieldsWithoutSortKey.

        Identifier of the application category associated with the space domain.  # noqa: E501

        :param app_category_id: The app_category_id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._app_category_id = app_category_id

    @property
    def app_category_name(self):
        """Gets the app_category_name of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Name of the application category associated with the space domain.  # noqa: E501

        :return: The app_category_name of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._app_category_name

    @app_category_name.setter
    def app_category_name(self, app_category_name):
        """Sets the app_category_name of this NimbleSpaceDomainFieldsWithoutSortKey.

        Name of the application category associated with the space domain.  # noqa: E501

        :param app_category_name: The app_category_name of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._app_category_name = app_category_name

    @property
    def block_size(self):
        """Gets the block_size of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Block size in bytes of volumes belonging to the space domain.  # noqa: E501

        :return: The block_size of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this NimbleSpaceDomainFieldsWithoutSortKey.

        Block size in bytes of volumes belonging to the space domain.  # noqa: E501

        :param block_size: The block_size of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def clone_ratio(self):
        """Gets the clone_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Clone savings for the space domain expressed as ratio.  # noqa: E501

        :return: The clone_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: float
        """
        return self._clone_ratio

    @clone_ratio.setter
    def clone_ratio(self, clone_ratio):
        """Sets the clone_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.

        Clone savings for the space domain expressed as ratio.  # noqa: E501

        :param clone_ratio: The clone_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: float
        """

        self._clone_ratio = clone_ratio

    @property
    def compressed_usage_bytes(self):
        """Gets the compressed_usage_bytes of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Compressed usage of volumes and snapshots in the space domain.  # noqa: E501

        :return: The compressed_usage_bytes of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._compressed_usage_bytes

    @compressed_usage_bytes.setter
    def compressed_usage_bytes(self, compressed_usage_bytes):
        """Sets the compressed_usage_bytes of this NimbleSpaceDomainFieldsWithoutSortKey.

        Compressed usage of volumes and snapshots in the space domain.  # noqa: E501

        :param compressed_usage_bytes: The compressed_usage_bytes of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._compressed_usage_bytes = compressed_usage_bytes

    @property
    def compression_ratio(self):
        """Gets the compression_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Compression savings for the space domain expressed as ratio.  # noqa: E501

        :return: The compression_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: float
        """
        return self._compression_ratio

    @compression_ratio.setter
    def compression_ratio(self, compression_ratio):
        """Sets the compression_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.

        Compression savings for the space domain expressed as ratio.  # noqa: E501

        :param compression_ratio: The compression_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: float
        """

        self._compression_ratio = compression_ratio

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Deduplication savings for the space domain expressed as ratio.  # noqa: E501

        :return: The dedupe_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.

        Deduplication savings for the space domain expressed as ratio.  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def deduped(self):
        """Gets the deduped of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Volumes in space domain are deduplicated by default.  # noqa: E501

        :return: The deduped of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: bool
        """
        return self._deduped

    @deduped.setter
    def deduped(self, deduped):
        """Sets the deduped of this NimbleSpaceDomainFieldsWithoutSortKey.

        Volumes in space domain are deduplicated by default.  # noqa: E501

        :param deduped: The deduped of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: bool
        """

        self._deduped = deduped

    @property
    def encrypted(self):
        """Gets the encrypted of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Volumes in space domain are encrypted.  # noqa: E501

        :return: The encrypted of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this NimbleSpaceDomainFieldsWithoutSortKey.

        Volumes in space domain are encrypted.  # noqa: E501

        :param encrypted: The encrypted of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def id(self):
        """Gets the id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Identifier of the application summery.  # noqa: E501

        :return: The id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleSpaceDomainFieldsWithoutSortKey.

        Identifier of the application summery.  # noqa: E501

        :param id: The id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def logical_dedupe_usage(self):
        """Gets the logical_dedupe_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Logical space usage of volumes when deduped.  # noqa: E501

        :return: The logical_dedupe_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._logical_dedupe_usage

    @logical_dedupe_usage.setter
    def logical_dedupe_usage(self, logical_dedupe_usage):
        """Sets the logical_dedupe_usage of this NimbleSpaceDomainFieldsWithoutSortKey.

        Logical space usage of volumes when deduped.  # noqa: E501

        :param logical_dedupe_usage: The logical_dedupe_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._logical_dedupe_usage = logical_dedupe_usage

    @property
    def physical_dedupe_usage(self):
        """Gets the physical_dedupe_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Physical space usage of volumes including snapshots when deduped.  # noqa: E501

        :return: The physical_dedupe_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._physical_dedupe_usage

    @physical_dedupe_usage.setter
    def physical_dedupe_usage(self, physical_dedupe_usage):
        """Sets the physical_dedupe_usage of this NimbleSpaceDomainFieldsWithoutSortKey.

        Physical space usage of volumes including snapshots when deduped.  # noqa: E501

        :param physical_dedupe_usage: The physical_dedupe_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._physical_dedupe_usage = physical_dedupe_usage

    @property
    def pool_id(self):
        """Gets the pool_id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Identifier associated with the pool in the storage pool table.  # noqa: E501

        :return: The pool_id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this NimbleSpaceDomainFieldsWithoutSortKey.

        Identifier associated with the pool in the storage pool table.  # noqa: E501

        :param pool_id: The pool_id of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._pool_id = pool_id

    @property
    def pool_name(self):
        """Gets the pool_name of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Name of the pool containing the space domain.  # noqa: E501

        :return: The pool_name of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this NimbleSpaceDomainFieldsWithoutSortKey.

        Name of the pool containing the space domain.  # noqa: E501

        :param pool_name: The pool_name of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def savings_clone(self):
        """Gets the savings_clone of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Space usage savings in the space domain due to cloning of volumes.  # noqa: E501

        :return: The savings_clone of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._savings_clone

    @savings_clone.setter
    def savings_clone(self, savings_clone):
        """Sets the savings_clone of this NimbleSpaceDomainFieldsWithoutSortKey.

        Space usage savings in the space domain due to cloning of volumes.  # noqa: E501

        :param savings_clone: The savings_clone of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._savings_clone = savings_clone

    @property
    def savings_compression(self):
        """Gets the savings_compression of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Space usage savings in the space domain due to compression.  # noqa: E501

        :return: The savings_compression of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._savings_compression

    @savings_compression.setter
    def savings_compression(self, savings_compression):
        """Sets the savings_compression of this NimbleSpaceDomainFieldsWithoutSortKey.

        Space usage savings in the space domain due to compression.  # noqa: E501

        :param savings_compression: The savings_compression of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._savings_compression = savings_compression

    @property
    def savings_dedupe(self):
        """Gets the savings_dedupe of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Space usage savings in the space domain due to deduplication.  # noqa: E501

        :return: The savings_dedupe of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._savings_dedupe

    @savings_dedupe.setter
    def savings_dedupe(self, savings_dedupe):
        """Sets the savings_dedupe of this NimbleSpaceDomainFieldsWithoutSortKey.

        Space usage savings in the space domain due to deduplication.  # noqa: E501

        :param savings_dedupe: The savings_dedupe of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._savings_dedupe = savings_dedupe

    @property
    def snap_logical_usage(self):
        """Gets the snap_logical_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Logical usage of snapshots in the space domain.  # noqa: E501

        :return: The snap_logical_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._snap_logical_usage

    @snap_logical_usage.setter
    def snap_logical_usage(self, snap_logical_usage):
        """Sets the snap_logical_usage of this NimbleSpaceDomainFieldsWithoutSortKey.

        Logical usage of snapshots in the space domain.  # noqa: E501

        :param snap_logical_usage: The snap_logical_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._snap_logical_usage = snap_logical_usage

    @property
    def uncompressed_usage_bytes(self):
        """Gets the uncompressed_usage_bytes of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Uncompressed usage of volumes and snapshots in the space domain.  # noqa: E501

        :return: The uncompressed_usage_bytes of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._uncompressed_usage_bytes

    @uncompressed_usage_bytes.setter
    def uncompressed_usage_bytes(self, uncompressed_usage_bytes):
        """Sets the uncompressed_usage_bytes of this NimbleSpaceDomainFieldsWithoutSortKey.

        Uncompressed usage of volumes and snapshots in the space domain.  # noqa: E501

        :param uncompressed_usage_bytes: The uncompressed_usage_bytes of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._uncompressed_usage_bytes = uncompressed_usage_bytes

    @property
    def usage(self):
        """Gets the usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Physical space usage of volumes in the space domain.  # noqa: E501

        :return: The usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this NimbleSpaceDomainFieldsWithoutSortKey.

        Physical space usage of volumes in the space domain.  # noqa: E501

        :param usage: The usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._usage = usage

    @property
    def vol_logical_usage(self):
        """Gets the vol_logical_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Logical usage of volumes in the space domain.  # noqa: E501

        :return: The vol_logical_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._vol_logical_usage

    @vol_logical_usage.setter
    def vol_logical_usage(self, vol_logical_usage):
        """Sets the vol_logical_usage of this NimbleSpaceDomainFieldsWithoutSortKey.

        Logical usage of volumes in the space domain.  # noqa: E501

        :param vol_logical_usage: The vol_logical_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._vol_logical_usage = vol_logical_usage

    @property
    def vol_mapped_usage(self):
        """Gets the vol_mapped_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501

        Mapped usage of volumes in the space domain, useful for computing clone savings.  # noqa: E501

        :return: The vol_mapped_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._vol_mapped_usage

    @vol_mapped_usage.setter
    def vol_mapped_usage(self, vol_mapped_usage):
        """Sets the vol_mapped_usage of this NimbleSpaceDomainFieldsWithoutSortKey.

        Mapped usage of volumes in the space domain, useful for computing clone savings.  # noqa: E501

        :param vol_mapped_usage: The vol_mapped_usage of this NimbleSpaceDomainFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._vol_mapped_usage = vol_mapped_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleSpaceDomainFieldsWithoutSortKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
