# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleCreateVolumeInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'agent_type': 'str',
        'app_uuid': 'str',
        'base_snap_id': 'str',
        'block_size': 'int',
        'cache_pinned': 'bool',
        'clone': 'bool',
        'dedupe_enabled': 'bool',
        'description': 'str',
        'dest_pool_id': 'str',
        'encryption_cipher': 'str',
        'folder_id': 'str',
        'limit': 'int',
        'limit_iops': 'int',
        'limit_mbps': 'int',
        'metadata': 'list[KeyValue]',
        'multi_initiator': 'bool',
        'name': 'str',
        'online': 'bool',
        'owned_by_group_id': 'str',
        'perfpolicy_id': 'str',
        'pool_id': 'str',
        'read_only': 'bool',
        'reserve': 'int',
        'size': 'int',
        'snap_reserve': 'int',
        'snap_warn_level': 'int',
        'suffix': 'int',
        'warn_level': 'int'
    }

    attribute_map = {
        'agent_type': 'agent_type',
        'app_uuid': 'app_uuid',
        'base_snap_id': 'base_snap_id',
        'block_size': 'block_size',
        'cache_pinned': 'cache_pinned',
        'clone': 'clone',
        'dedupe_enabled': 'dedupe_enabled',
        'description': 'description',
        'dest_pool_id': 'dest_pool_id',
        'encryption_cipher': 'encryption_cipher',
        'folder_id': 'folder_id',
        'limit': 'limit',
        'limit_iops': 'limit_iops',
        'limit_mbps': 'limit_mbps',
        'metadata': 'metadata',
        'multi_initiator': 'multi_initiator',
        'name': 'name',
        'online': 'online',
        'owned_by_group_id': 'owned_by_group_id',
        'perfpolicy_id': 'perfpolicy_id',
        'pool_id': 'pool_id',
        'read_only': 'read_only',
        'reserve': 'reserve',
        'size': 'size',
        'snap_reserve': 'snap_reserve',
        'snap_warn_level': 'snap_warn_level',
        'suffix': 'suffix',
        'warn_level': 'warn_level'
    }

    def __init__(self, agent_type=None, app_uuid=None, base_snap_id=None, block_size=None, cache_pinned=None, clone=None, dedupe_enabled=None, description=None, dest_pool_id=None, encryption_cipher=None, folder_id=None, limit=None, limit_iops=None, limit_mbps=None, metadata=None, multi_initiator=None, name=None, online=None, owned_by_group_id=None, perfpolicy_id=None, pool_id=None, read_only=None, reserve=None, size=None, snap_reserve=None, snap_warn_level=None, suffix=None, warn_level=None):  # noqa: E501
        """NimbleCreateVolumeInput - a model defined in OpenAPI"""  # noqa: E501

        self._agent_type = None
        self._app_uuid = None
        self._base_snap_id = None
        self._block_size = None
        self._cache_pinned = None
        self._clone = None
        self._dedupe_enabled = None
        self._description = None
        self._dest_pool_id = None
        self._encryption_cipher = None
        self._folder_id = None
        self._limit = None
        self._limit_iops = None
        self._limit_mbps = None
        self._metadata = None
        self._multi_initiator = None
        self._name = None
        self._online = None
        self._owned_by_group_id = None
        self._perfpolicy_id = None
        self._pool_id = None
        self._read_only = None
        self._reserve = None
        self._size = None
        self._snap_reserve = None
        self._snap_warn_level = None
        self._suffix = None
        self._warn_level = None
        self.discriminator = None

        if agent_type is not None:
            self.agent_type = agent_type
        if app_uuid is not None:
            self.app_uuid = app_uuid
        if base_snap_id is not None:
            self.base_snap_id = base_snap_id
        if block_size is not None:
            self.block_size = block_size
        if cache_pinned is not None:
            self.cache_pinned = cache_pinned
        if clone is not None:
            self.clone = clone
        if dedupe_enabled is not None:
            self.dedupe_enabled = dedupe_enabled
        if description is not None:
            self.description = description
        if dest_pool_id is not None:
            self.dest_pool_id = dest_pool_id
        if encryption_cipher is not None:
            self.encryption_cipher = encryption_cipher
        if folder_id is not None:
            self.folder_id = folder_id
        if limit is not None:
            self.limit = limit
        if limit_iops is not None:
            self.limit_iops = limit_iops
        if limit_mbps is not None:
            self.limit_mbps = limit_mbps
        if metadata is not None:
            self.metadata = metadata
        if multi_initiator is not None:
            self.multi_initiator = multi_initiator
        self.name = name
        if online is not None:
            self.online = online
        if owned_by_group_id is not None:
            self.owned_by_group_id = owned_by_group_id
        if perfpolicy_id is not None:
            self.perfpolicy_id = perfpolicy_id
        if pool_id is not None:
            self.pool_id = pool_id
        if read_only is not None:
            self.read_only = read_only
        if reserve is not None:
            self.reserve = reserve
        if size is not None:
            self.size = size
        if snap_reserve is not None:
            self.snap_reserve = snap_reserve
        if snap_warn_level is not None:
            self.snap_warn_level = snap_warn_level
        if suffix is not None:
            self.suffix = suffix
        if warn_level is not None:
            self.warn_level = warn_level

    @property
    def agent_type(self):
        """Gets the agent_type of this NimbleCreateVolumeInput.  # noqa: E501

        External management agent type. Defaults to 'none'. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'  # noqa: E501

        :return: The agent_type of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """Sets the agent_type of this NimbleCreateVolumeInput.

        External management agent type. Defaults to 'none'. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'  # noqa: E501

        :param agent_type: The agent_type of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._agent_type = agent_type

    @property
    def app_uuid(self):
        """Gets the app_uuid of this NimbleCreateVolumeInput.  # noqa: E501

        Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to the empty string.  # noqa: E501

        :return: The app_uuid of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid):
        """Sets the app_uuid of this NimbleCreateVolumeInput.

        Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to the empty string.  # noqa: E501

        :param app_uuid: The app_uuid of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._app_uuid = app_uuid

    @property
    def base_snap_id(self):
        """Gets the base_snap_id of this NimbleCreateVolumeInput.  # noqa: E501

        Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. A 42 digit hexadecimal int64. Defaults to the empty string.  # noqa: E501

        :return: The base_snap_id of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._base_snap_id

    @base_snap_id.setter
    def base_snap_id(self, base_snap_id):
        """Sets the base_snap_id of this NimbleCreateVolumeInput.

        Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. A 42 digit hexadecimal int64. Defaults to the empty string.  # noqa: E501

        :param base_snap_id: The base_snap_id of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._base_snap_id = base_snap_id

    @property
    def block_size(self):
        """Gets the block_size of this NimbleCreateVolumeInput.  # noqa: E501

        Size in bytes of blocks in the volume. Defaults to 4096.  # noqa: E501

        :return: The block_size of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this NimbleCreateVolumeInput.

        Size in bytes of blocks in the volume. Defaults to 4096.  # noqa: E501

        :param block_size: The block_size of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def cache_pinned(self):
        """Gets the cache_pinned of this NimbleCreateVolumeInput.  # noqa: E501

        If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume. Defaults to 'false'.  # noqa: E501

        :return: The cache_pinned of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._cache_pinned

    @cache_pinned.setter
    def cache_pinned(self, cache_pinned):
        """Sets the cache_pinned of this NimbleCreateVolumeInput.

        If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume. Defaults to 'false'.  # noqa: E501

        :param cache_pinned: The cache_pinned of this NimbleCreateVolumeInput.  # noqa: E501
        :type: bool
        """

        self._cache_pinned = cache_pinned

    @property
    def clone(self):
        """Gets the clone of this NimbleCreateVolumeInput.  # noqa: E501

        Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. Defaults to 'false'.  # noqa: E501

        :return: The clone of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._clone

    @clone.setter
    def clone(self, clone):
        """Sets the clone of this NimbleCreateVolumeInput.

        Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. Defaults to 'false'.  # noqa: E501

        :param clone: The clone of this NimbleCreateVolumeInput.  # noqa: E501
        :type: bool
        """

        self._clone = clone

    @property
    def dedupe_enabled(self):
        """Gets the dedupe_enabled of this NimbleCreateVolumeInput.  # noqa: E501

        Indicate whether dedupe is enabled. Defaults to 'false'.  # noqa: E501

        :return: The dedupe_enabled of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_enabled

    @dedupe_enabled.setter
    def dedupe_enabled(self, dedupe_enabled):
        """Sets the dedupe_enabled of this NimbleCreateVolumeInput.

        Indicate whether dedupe is enabled. Defaults to 'false'.  # noqa: E501

        :param dedupe_enabled: The dedupe_enabled of this NimbleCreateVolumeInput.  # noqa: E501
        :type: bool
        """

        self._dedupe_enabled = dedupe_enabled

    @property
    def description(self):
        """Gets the description of this NimbleCreateVolumeInput.  # noqa: E501

        Text description of volume. String of up to 255 printable ASCII characters. Defaults to the empty string.  # noqa: E501

        :return: The description of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleCreateVolumeInput.

        Text description of volume. String of up to 255 printable ASCII characters. Defaults to the empty string.  # noqa: E501

        :param description: The description of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dest_pool_id(self):
        """Gets the dest_pool_id of this NimbleCreateVolumeInput.  # noqa: E501

        ID of the destination pool where the volume is moving to. A 42 digit hexadecimal int64. Defaults to the empty string.  # noqa: E501

        :return: The dest_pool_id of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._dest_pool_id

    @dest_pool_id.setter
    def dest_pool_id(self, dest_pool_id):
        """Sets the dest_pool_id of this NimbleCreateVolumeInput.

        ID of the destination pool where the volume is moving to. A 42 digit hexadecimal int64. Defaults to the empty string.  # noqa: E501

        :param dest_pool_id: The dest_pool_id of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._dest_pool_id = dest_pool_id

    @property
    def encryption_cipher(self):
        """Gets the encryption_cipher of this NimbleCreateVolumeInput.  # noqa: E501

        The encryption cipher of the volume. Defaults to 'none'. Possible values: 'none', 'aes_256_xts'  # noqa: E501

        :return: The encryption_cipher of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._encryption_cipher

    @encryption_cipher.setter
    def encryption_cipher(self, encryption_cipher):
        """Sets the encryption_cipher of this NimbleCreateVolumeInput.

        The encryption cipher of the volume. Defaults to 'none'. Possible values: 'none', 'aes_256_xts'  # noqa: E501

        :param encryption_cipher: The encryption_cipher of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._encryption_cipher = encryption_cipher

    @property
    def folder_id(self):
        """Gets the folder_id of this NimbleCreateVolumeInput.  # noqa: E501

        ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal int64 or the empty string. Defaults to the empty string.  # noqa: E501

        :return: The folder_id of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this NimbleCreateVolumeInput.

        ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal int64 or the empty string. Defaults to the empty string.  # noqa: E501

        :param folder_id: The folder_id of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def limit(self):
        """Gets the limit of this NimbleCreateVolumeInput.  # noqa: E501

        Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume limit set on group, typically 100.  # noqa: E501

        :return: The limit of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this NimbleCreateVolumeInput.

        Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume limit set on group, typically 100.  # noqa: E501

        :param limit: The limit of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def limit_iops(self):
        """Gets the limit_iops of this NimbleCreateVolumeInput.  # noqa: E501

        IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default the volume is created with unlimited iops.  # noqa: E501

        :return: The limit_iops of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_iops

    @limit_iops.setter
    def limit_iops(self, limit_iops):
        """Sets the limit_iops of this NimbleCreateVolumeInput.

        IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default the volume is created with unlimited iops.  # noqa: E501

        :param limit_iops: The limit_iops of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._limit_iops = limit_iops

    @property
    def limit_mbps(self):
        """Gets the limit_mbps of this NimbleCreateVolumeInput.  # noqa: E501

        Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default, the volume is created with unlimited throughput.  # noqa: E501

        :return: The limit_mbps of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_mbps

    @limit_mbps.setter
    def limit_mbps(self, limit_mbps):
        """Sets the limit_mbps of this NimbleCreateVolumeInput.

        Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default, the volume is created with unlimited throughput.  # noqa: E501

        :param limit_mbps: The limit_mbps of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._limit_mbps = limit_mbps

    @property
    def metadata(self):
        """Gets the metadata of this NimbleCreateVolumeInput.  # noqa: E501

        Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.  # noqa: E501

        :return: The metadata of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: list[KeyValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NimbleCreateVolumeInput.

        Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.  # noqa: E501

        :param metadata: The metadata of this NimbleCreateVolumeInput.  # noqa: E501
        :type: list[KeyValue]
        """

        self._metadata = metadata

    @property
    def multi_initiator(self):
        """Gets the multi_initiator of this NimbleCreateVolumeInput.  # noqa: E501

        This indicates whether volume and its snapshots are multi-initiator accessible. This attribute applies only to volumes and snapshots available to iSCSI initiators. Defaults to 'false'.  # noqa: E501

        :return: The multi_initiator of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._multi_initiator

    @multi_initiator.setter
    def multi_initiator(self, multi_initiator):
        """Sets the multi_initiator of this NimbleCreateVolumeInput.

        This indicates whether volume and its snapshots are multi-initiator accessible. This attribute applies only to volumes and snapshots available to iSCSI initiators. Defaults to 'false'.  # noqa: E501

        :param multi_initiator: The multi_initiator of this NimbleCreateVolumeInput.  # noqa: E501
        :type: bool
        """

        self._multi_initiator = multi_initiator

    @property
    def name(self):
        """Gets the name of this NimbleCreateVolumeInput.  # noqa: E501

        Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :return: The name of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleCreateVolumeInput.

        Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :param name: The name of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def online(self):
        """Gets the online of this NimbleCreateVolumeInput.  # noqa: E501

        Online state of volume, available for host initiators to establish connections. Defaults to 'true'.  # noqa: E501

        :return: The online of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this NimbleCreateVolumeInput.

        Online state of volume, available for host initiators to establish connections. Defaults to 'true'.  # noqa: E501

        :param online: The online of this NimbleCreateVolumeInput.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def owned_by_group_id(self):
        """Gets the owned_by_group_id of this NimbleCreateVolumeInput.  # noqa: E501

        ID of group that currently owns the volume. A 42 digit hexadecimal int64. Defaults to the ID of the group that created the volume.  # noqa: E501

        :return: The owned_by_group_id of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._owned_by_group_id

    @owned_by_group_id.setter
    def owned_by_group_id(self, owned_by_group_id):
        """Sets the owned_by_group_id of this NimbleCreateVolumeInput.

        ID of group that currently owns the volume. A 42 digit hexadecimal int64. Defaults to the ID of the group that created the volume.  # noqa: E501

        :param owned_by_group_id: The owned_by_group_id of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._owned_by_group_id = owned_by_group_id

    @property
    def perfpolicy_id(self):
        """Gets the perfpolicy_id of this NimbleCreateVolumeInput.  # noqa: E501

        Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal int64. Defaults to ID of the 'default' performance policy.  # noqa: E501

        :return: The perfpolicy_id of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._perfpolicy_id

    @perfpolicy_id.setter
    def perfpolicy_id(self, perfpolicy_id):
        """Sets the perfpolicy_id of this NimbleCreateVolumeInput.

        Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal int64. Defaults to ID of the 'default' performance policy.  # noqa: E501

        :param perfpolicy_id: The perfpolicy_id of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._perfpolicy_id = perfpolicy_id

    @property
    def pool_id(self):
        """Gets the pool_id of this NimbleCreateVolumeInput.  # noqa: E501

        Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal int64. Defaults to the ID of the 'default' pool.  # noqa: E501

        :return: The pool_id of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this NimbleCreateVolumeInput.

        Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal int64. Defaults to the ID of the 'default' pool.  # noqa: E501

        :param pool_id: The pool_id of this NimbleCreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._pool_id = pool_id

    @property
    def read_only(self):
        """Gets the read_only of this NimbleCreateVolumeInput.  # noqa: E501

        Volume is read-only. Defaults to 'false'.  # noqa: E501

        :return: The read_only of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this NimbleCreateVolumeInput.

        Volume is read-only. Defaults to 'false'.  # noqa: E501

        :param read_only: The read_only of this NimbleCreateVolumeInput.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def reserve(self):
        """Gets the reserve of this NimbleCreateVolumeInput.  # noqa: E501

        Amount of space to reserve for this volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume reservation set on the group, typically 0.  # noqa: E501

        :return: The reserve of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._reserve

    @reserve.setter
    def reserve(self, reserve):
        """Sets the reserve of this NimbleCreateVolumeInput.

        Amount of space to reserve for this volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume reservation set on the group, typically 0.  # noqa: E501

        :param reserve: The reserve of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._reserve = reserve

    @property
    def size(self):
        """Gets the size of this NimbleCreateVolumeInput.  # noqa: E501

        Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.When creating a new volume, size is required. When cloning an existing volume, size defaults to that of the parent volume.  # noqa: E501

        :return: The size of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NimbleCreateVolumeInput.

        Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.When creating a new volume, size is required. When cloning an existing volume, size defaults to that of the parent volume.  # noqa: E501

        :param size: The size of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def snap_reserve(self):
        """Gets the snap_reserve of this NimbleCreateVolumeInput.  # noqa: E501

        Amount of space to reserve for snapshots of this volume as a percentage of volume size. Defaults to the default snapshot reserve set on the group, typically 0.  # noqa: E501

        :return: The snap_reserve of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._snap_reserve

    @snap_reserve.setter
    def snap_reserve(self, snap_reserve):
        """Sets the snap_reserve of this NimbleCreateVolumeInput.

        Amount of space to reserve for snapshots of this volume as a percentage of volume size. Defaults to the default snapshot reserve set on the group, typically 0.  # noqa: E501

        :param snap_reserve: The snap_reserve of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._snap_reserve = snap_reserve

    @property
    def snap_warn_level(self):
        """Gets the snap_warn_level of this NimbleCreateVolumeInput.  # noqa: E501

        Threshold for available space as a percentage of volume size below which an alert is raised. Defaults to the default snapshot warning level set on the group, typically 0.  # noqa: E501

        :return: The snap_warn_level of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._snap_warn_level

    @snap_warn_level.setter
    def snap_warn_level(self, snap_warn_level):
        """Sets the snap_warn_level of this NimbleCreateVolumeInput.

        Threshold for available space as a percentage of volume size below which an alert is raised. Defaults to the default snapshot warning level set on the group, typically 0.  # noqa: E501

        :param snap_warn_level: The snap_warn_level of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._snap_warn_level = snap_warn_level

    @property
    def suffix(self):
        """Gets the suffix of this NimbleCreateVolumeInput.  # noqa: E501

        suffix for customized volume name  # noqa: E501

        :return: The suffix of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this NimbleCreateVolumeInput.

        suffix for customized volume name  # noqa: E501

        :param suffix: The suffix of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._suffix = suffix

    @property
    def warn_level(self):
        """Gets the warn_level of this NimbleCreateVolumeInput.  # noqa: E501

        Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. Percentage as integer from 0 to 100. Defaults to the default volume warning level set on the group, typically 80.  # noqa: E501

        :return: The warn_level of this NimbleCreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._warn_level

    @warn_level.setter
    def warn_level(self, warn_level):
        """Sets the warn_level of this NimbleCreateVolumeInput.

        Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. Percentage as integer from 0 to 100. Defaults to the default volume warning level set on the group, typically 80.  # noqa: E501

        :param warn_level: The warn_level of this NimbleCreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._warn_level = warn_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleCreateVolumeInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
