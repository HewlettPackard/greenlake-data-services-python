# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TaskProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_details': 'TaskConsoleReference',
        'associated_resources': 'list[ResourceReference]',
        'child_tasks': 'list[ResourceReference]',
        'created_at': 'datetime',
        'display_name': 'str',
        'ended_at': 'datetime',
        'error': 'ErrorResponse',
        'estimated_running_duration_minutes': 'int',
        'health_status': 'str',
        'log_messages': 'list[TaskLogMessage]',
        'parent_task': 'ResourceReference',
        'progress_percent': 'int',
        'recommendations': 'list[TaskRecommendations]',
        'source_resource': 'ResourceReference',
        'started_at': 'datetime',
        'state': 'str',
        'suggested_polling_interval_seconds': 'int',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'additional_details': 'additionalDetails',
        'associated_resources': 'associatedResources',
        'child_tasks': 'childTasks',
        'created_at': 'createdAt',
        'display_name': 'displayName',
        'ended_at': 'endedAt',
        'error': 'error',
        'estimated_running_duration_minutes': 'estimatedRunningDurationMinutes',
        'health_status': 'healthStatus',
        'log_messages': 'logMessages',
        'parent_task': 'parentTask',
        'progress_percent': 'progressPercent',
        'recommendations': 'recommendations',
        'source_resource': 'sourceResource',
        'started_at': 'startedAt',
        'state': 'state',
        'suggested_polling_interval_seconds': 'suggestedPollingIntervalSeconds',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, additional_details=None, associated_resources=None, child_tasks=None, created_at=None, display_name=None, ended_at=None, error=None, estimated_running_duration_minutes=None, health_status=None, log_messages=None, parent_task=None, progress_percent=None, recommendations=None, source_resource=None, started_at=None, state=None, suggested_polling_interval_seconds=None, updated_at=None, user_id=None):  # noqa: E501
        """TaskProperties - a model defined in OpenAPI"""  # noqa: E501

        self._additional_details = None
        self._associated_resources = None
        self._child_tasks = None
        self._created_at = None
        self._display_name = None
        self._ended_at = None
        self._error = None
        self._estimated_running_duration_minutes = None
        self._health_status = None
        self._log_messages = None
        self._parent_task = None
        self._progress_percent = None
        self._recommendations = None
        self._source_resource = None
        self._started_at = None
        self._state = None
        self._suggested_polling_interval_seconds = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None

        if additional_details is not None:
            self.additional_details = additional_details
        if associated_resources is not None:
            self.associated_resources = associated_resources
        if child_tasks is not None:
            self.child_tasks = child_tasks
        if created_at is not None:
            self.created_at = created_at
        if display_name is not None:
            self.display_name = display_name
        if ended_at is not None:
            self.ended_at = ended_at
        if error is not None:
            self.error = error
        if estimated_running_duration_minutes is not None:
            self.estimated_running_duration_minutes = estimated_running_duration_minutes
        if health_status is not None:
            self.health_status = health_status
        if log_messages is not None:
            self.log_messages = log_messages
        if parent_task is not None:
            self.parent_task = parent_task
        if progress_percent is not None:
            self.progress_percent = progress_percent
        if recommendations is not None:
            self.recommendations = recommendations
        if source_resource is not None:
            self.source_resource = source_resource
        if started_at is not None:
            self.started_at = started_at
        if state is not None:
            self.state = state
        if suggested_polling_interval_seconds is not None:
            self.suggested_polling_interval_seconds = suggested_polling_interval_seconds
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def additional_details(self):
        """Gets the additional_details of this TaskProperties.  # noqa: E501

        A link to be displayed in the Tasks UI. This can be used when a task is paused to take the user to the console UI page with information on how to unpause the task, or for more general information when the task is in other states.  # noqa: E501

        :return: The additional_details of this TaskProperties.  # noqa: E501
        :rtype: TaskConsoleReference
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this TaskProperties.

        A link to be displayed in the Tasks UI. This can be used when a task is paused to take the user to the console UI page with information on how to unpause the task, or for more general information when the task is in other states.  # noqa: E501

        :param additional_details: The additional_details of this TaskProperties.  # noqa: E501
        :type: TaskConsoleReference
        """

        self._additional_details = additional_details

    @property
    def associated_resources(self):
        """Gets the associated_resources of this TaskProperties.  # noqa: E501

        Resources that are associated with the task. These may be created by the task or other resources that are involved in the task.  # noqa: E501

        :return: The associated_resources of this TaskProperties.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._associated_resources

    @associated_resources.setter
    def associated_resources(self, associated_resources):
        """Sets the associated_resources of this TaskProperties.

        Resources that are associated with the task. These may be created by the task or other resources that are involved in the task.  # noqa: E501

        :param associated_resources: The associated_resources of this TaskProperties.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._associated_resources = associated_resources

    @property
    def child_tasks(self):
        """Gets the child_tasks of this TaskProperties.  # noqa: E501

        A list of sub-tasks that were initiated by this task.  # noqa: E501

        :return: The child_tasks of this TaskProperties.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._child_tasks

    @child_tasks.setter
    def child_tasks(self, child_tasks):
        """Sets the child_tasks of this TaskProperties.

        A list of sub-tasks that were initiated by this task.  # noqa: E501

        :param child_tasks: The child_tasks of this TaskProperties.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._child_tasks = child_tasks

    @property
    def created_at(self):
        """Gets the created_at of this TaskProperties.  # noqa: E501

        The time this task was created.  # noqa: E501

        :return: The created_at of this TaskProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskProperties.

        The time this task was created.  # noqa: E501

        :param created_at: The created_at of this TaskProperties.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def display_name(self):
        """Gets the display_name of this TaskProperties.  # noqa: E501

        The displayed name for the task.  # noqa: E501

        :return: The display_name of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TaskProperties.

        The displayed name for the task.  # noqa: E501

        :param display_name: The display_name of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def ended_at(self):
        """Gets the ended_at of this TaskProperties.  # noqa: E501

        The time this task completed.  # noqa: E501

        :return: The ended_at of this TaskProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this TaskProperties.

        The time this task completed.  # noqa: E501

        :param ended_at: The ended_at of this TaskProperties.  # noqa: E501
        :type: datetime
        """

        self._ended_at = ended_at

    @property
    def error(self):
        """Gets the error of this TaskProperties.  # noqa: E501

        The error response status of the operation.  # noqa: E501

        :return: The error of this TaskProperties.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TaskProperties.

        The error response status of the operation.  # noqa: E501

        :param error: The error of this TaskProperties.  # noqa: E501
        :type: ErrorResponse
        """

        self._error = error

    @property
    def estimated_running_duration_minutes(self):
        """Gets the estimated_running_duration_minutes of this TaskProperties.  # noqa: E501

        An estimate of how long the task will run before completing.  # noqa: E501

        :return: The estimated_running_duration_minutes of this TaskProperties.  # noqa: E501
        :rtype: int
        """
        return self._estimated_running_duration_minutes

    @estimated_running_duration_minutes.setter
    def estimated_running_duration_minutes(self, estimated_running_duration_minutes):
        """Sets the estimated_running_duration_minutes of this TaskProperties.

        An estimate of how long the task will run before completing.  # noqa: E501

        :param estimated_running_duration_minutes: The estimated_running_duration_minutes of this TaskProperties.  # noqa: E501
        :type: int
        """

        self._estimated_running_duration_minutes = estimated_running_duration_minutes

    @property
    def health_status(self):
        """Gets the health_status of this TaskProperties.  # noqa: E501

        The health status indicates if any errors or problems have been encountered during the processing of the task.  Expected values are OK, ERROR, WARNING, UNKNOWN, and UNSPECIFIED.   # noqa: E501

        :return: The health_status of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this TaskProperties.

        The health status indicates if any errors or problems have been encountered during the processing of the task.  Expected values are OK, ERROR, WARNING, UNKNOWN, and UNSPECIFIED.   # noqa: E501

        :param health_status: The health_status of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._health_status = health_status

    @property
    def log_messages(self):
        """Gets the log_messages of this TaskProperties.  # noqa: E501

        Time stamped messages that record the progress of the task.  # noqa: E501

        :return: The log_messages of this TaskProperties.  # noqa: E501
        :rtype: list[TaskLogMessage]
        """
        return self._log_messages

    @log_messages.setter
    def log_messages(self, log_messages):
        """Sets the log_messages of this TaskProperties.

        Time stamped messages that record the progress of the task.  # noqa: E501

        :param log_messages: The log_messages of this TaskProperties.  # noqa: E501
        :type: list[TaskLogMessage]
        """

        self._log_messages = log_messages

    @property
    def parent_task(self):
        """Gets the parent_task of this TaskProperties.  # noqa: E501

        The parent is the task that initiated this sub-task. If this is not a sub-task this will be a self reference.  # noqa: E501

        :return: The parent_task of this TaskProperties.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._parent_task

    @parent_task.setter
    def parent_task(self, parent_task):
        """Sets the parent_task of this TaskProperties.

        The parent is the task that initiated this sub-task. If this is not a sub-task this will be a self reference.  # noqa: E501

        :param parent_task: The parent_task of this TaskProperties.  # noqa: E501
        :type: ResourceReference
        """

        self._parent_task = parent_task

    @property
    def progress_percent(self):
        """Gets the progress_percent of this TaskProperties.  # noqa: E501

        A percentage representation of progress to completion.  # noqa: E501

        :return: The progress_percent of this TaskProperties.  # noqa: E501
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this TaskProperties.

        A percentage representation of progress to completion.  # noqa: E501

        :param progress_percent: The progress_percent of this TaskProperties.  # noqa: E501
        :type: int
        """
        if progress_percent is not None and progress_percent > 100:  # noqa: E501
            raise ValueError("Invalid value for `progress_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if progress_percent is not None and progress_percent < 0:  # noqa: E501
            raise ValueError("Invalid value for `progress_percent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._progress_percent = progress_percent

    @property
    def recommendations(self):
        """Gets the recommendations of this TaskProperties.  # noqa: E501

        Recommendations on how to fix failing tasks.  # noqa: E501

        :return: The recommendations of this TaskProperties.  # noqa: E501
        :rtype: list[TaskRecommendations]
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this TaskProperties.

        Recommendations on how to fix failing tasks.  # noqa: E501

        :param recommendations: The recommendations of this TaskProperties.  # noqa: E501
        :type: list[TaskRecommendations]
        """

        self._recommendations = recommendations

    @property
    def source_resource(self):
        """Gets the source_resource of this TaskProperties.  # noqa: E501

        The resource that was used to initiate the task.  # noqa: E501

        :return: The source_resource of this TaskProperties.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._source_resource

    @source_resource.setter
    def source_resource(self, source_resource):
        """Sets the source_resource of this TaskProperties.

        The resource that was used to initiate the task.  # noqa: E501

        :param source_resource: The source_resource of this TaskProperties.  # noqa: E501
        :type: ResourceReference
        """

        self._source_resource = source_resource

    @property
    def started_at(self):
        """Gets the started_at of this TaskProperties.  # noqa: E501

        The time this task was started.  # noqa: E501

        :return: The started_at of this TaskProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this TaskProperties.

        The time this task was started.  # noqa: E501

        :param started_at: The started_at of this TaskProperties.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def state(self):
        """Gets the state of this TaskProperties.  # noqa: E501

        A message to indicate the current state of the task, for example the current step in a workflow. Expected values are INITIALIZED, RUNNING, FAILED, SUCCEEDED, TIMEDOUT, PAUSED, and UNSPECIFIED.   # noqa: E501

        :return: The state of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskProperties.

        A message to indicate the current state of the task, for example the current step in a workflow. Expected values are INITIALIZED, RUNNING, FAILED, SUCCEEDED, TIMEDOUT, PAUSED, and UNSPECIFIED.   # noqa: E501

        :param state: The state of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def suggested_polling_interval_seconds(self):
        """Gets the suggested_polling_interval_seconds of this TaskProperties.  # noqa: E501

        This attribute suggests a suitable interval to use when polling for progress. Where specified this will be based on the frequency with which the task is likely to be updated.  # noqa: E501

        :return: The suggested_polling_interval_seconds of this TaskProperties.  # noqa: E501
        :rtype: int
        """
        return self._suggested_polling_interval_seconds

    @suggested_polling_interval_seconds.setter
    def suggested_polling_interval_seconds(self, suggested_polling_interval_seconds):
        """Sets the suggested_polling_interval_seconds of this TaskProperties.

        This attribute suggests a suitable interval to use when polling for progress. Where specified this will be based on the frequency with which the task is likely to be updated.  # noqa: E501

        :param suggested_polling_interval_seconds: The suggested_polling_interval_seconds of this TaskProperties.  # noqa: E501
        :type: int
        """

        self._suggested_polling_interval_seconds = suggested_polling_interval_seconds

    @property
    def updated_at(self):
        """Gets the updated_at of this TaskProperties.  # noqa: E501

        The time this task was last updated.  # noqa: E501

        :return: The updated_at of this TaskProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TaskProperties.

        The time this task was last updated.  # noqa: E501

        :param updated_at: The updated_at of this TaskProperties.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this TaskProperties.  # noqa: E501

        The ID or email address of the user that initiated the task.  # noqa: E501

        :return: The user_id of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TaskProperties.

        The ID or email address of the user that initiated the task.  # noqa: E501

        :param user_id: The user_id of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
