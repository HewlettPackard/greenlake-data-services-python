# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditVCenterSettingsInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cert_chain_pem': 'str',
        'description': 'str',
        'inetaddress': 'str',
        'name': 'str',
        'password': 'str',
        'port': 'int',
        'username': 'str'
    }

    attribute_map = {
        'cert_chain_pem': 'certChainPem',
        'description': 'description',
        'inetaddress': 'inetaddress',
        'name': 'name',
        'password': 'password',
        'port': 'port',
        'username': 'username'
    }

    def __init__(self, cert_chain_pem=None, description=None, inetaddress=None, name=None, password=None, port=None, username=None):  # noqa: E501
        """EditVCenterSettingsInput - a model defined in OpenAPI"""  # noqa: E501

        self._cert_chain_pem = None
        self._description = None
        self._inetaddress = None
        self._name = None
        self._password = None
        self._port = None
        self._username = None
        self.discriminator = None

        if cert_chain_pem is not None:
            self.cert_chain_pem = cert_chain_pem
        if description is not None:
            self.description = description
        if inetaddress is not None:
            self.inetaddress = inetaddress
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if username is not None:
            self.username = username

    @property
    def cert_chain_pem(self):
        """Gets the cert_chain_pem of this EditVCenterSettingsInput.  # noqa: E501

        Certificate chain of the VCenter server as PEM data  # noqa: E501

        :return: The cert_chain_pem of this EditVCenterSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._cert_chain_pem

    @cert_chain_pem.setter
    def cert_chain_pem(self, cert_chain_pem):
        """Sets the cert_chain_pem of this EditVCenterSettingsInput.

        Certificate chain of the VCenter server as PEM data  # noqa: E501

        :param cert_chain_pem: The cert_chain_pem of this EditVCenterSettingsInput.  # noqa: E501
        :type: str
        """

        self._cert_chain_pem = cert_chain_pem

    @property
    def description(self):
        """Gets the description of this EditVCenterSettingsInput.  # noqa: E501

        Description of the vCenter setting  # noqa: E501

        :return: The description of this EditVCenterSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditVCenterSettingsInput.

        Description of the vCenter setting  # noqa: E501

        :param description: The description of this EditVCenterSettingsInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def inetaddress(self):
        """Gets the inetaddress of this EditVCenterSettingsInput.  # noqa: E501

        Host name or IP address of vCenter server  # noqa: E501

        :return: The inetaddress of this EditVCenterSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._inetaddress

    @inetaddress.setter
    def inetaddress(self, inetaddress):
        """Sets the inetaddress of this EditVCenterSettingsInput.

        Host name or IP address of vCenter server  # noqa: E501

        :param inetaddress: The inetaddress of this EditVCenterSettingsInput.  # noqa: E501
        :type: str
        """

        self._inetaddress = inetaddress

    @property
    def name(self):
        """Gets the name of this EditVCenterSettingsInput.  # noqa: E501

        Name of the vCenter setting  # noqa: E501

        :return: The name of this EditVCenterSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditVCenterSettingsInput.

        Name of the vCenter setting  # noqa: E501

        :param name: The name of this EditVCenterSettingsInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this EditVCenterSettingsInput.  # noqa: E501

        Password to login to the vCenter server  # noqa: E501

        :return: The password of this EditVCenterSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EditVCenterSettingsInput.

        Password to login to the vCenter server  # noqa: E501

        :param password: The password of this EditVCenterSettingsInput.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this EditVCenterSettingsInput.  # noqa: E501

        Port number of the vCenter server.  # noqa: E501

        :return: The port of this EditVCenterSettingsInput.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EditVCenterSettingsInput.

        Port number of the vCenter server.  # noqa: E501

        :param port: The port of this EditVCenterSettingsInput.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def username(self):
        """Gets the username of this EditVCenterSettingsInput.  # noqa: E501

        Username to login to the vCenter server  # noqa: E501

        :return: The username of this EditVCenterSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EditVCenterSettingsInput.

        Username to login to the vCenter server  # noqa: E501

        :param username: The username of this EditVCenterSettingsInput.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditVCenterSettingsInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
