# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleMergeGroupsInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'force': 'bool',
        'skip_secondary_mgmt_ip': 'bool',
        'src_group_ip': 'str',
        'src_group_name': 'str',
        'src_passphrase': 'str',
        'src_password': 'str',
        'src_username': 'str'
    }

    attribute_map = {
        'force': 'force',
        'skip_secondary_mgmt_ip': 'skip_secondary_mgmt_ip',
        'src_group_ip': 'src_group_ip',
        'src_group_name': 'src_group_name',
        'src_passphrase': 'src_passphrase',
        'src_password': 'src_password',
        'src_username': 'src_username'
    }

    def __init__(self, force=None, skip_secondary_mgmt_ip=None, src_group_ip=None, src_group_name=None, src_passphrase=None, src_password=None, src_username=None):  # noqa: E501
        """NimbleMergeGroupsInput - a model defined in OpenAPI"""  # noqa: E501

        self._force = None
        self._skip_secondary_mgmt_ip = None
        self._src_group_ip = None
        self._src_group_name = None
        self._src_passphrase = None
        self._src_password = None
        self._src_username = None
        self.discriminator = None

        if force is not None:
            self.force = force
        if skip_secondary_mgmt_ip is not None:
            self.skip_secondary_mgmt_ip = skip_secondary_mgmt_ip
        self.src_group_ip = src_group_ip
        self.src_group_name = src_group_name
        if src_passphrase is not None:
            self.src_passphrase = src_passphrase
        self.src_password = src_password
        self.src_username = src_username

    @property
    def force(self):
        """Gets the force of this NimbleMergeGroupsInput.  # noqa: E501

        Ignore warnings and forcibly merge specified group with this group. Possible values: 'true', 'false'.  # noqa: E501

        :return: The force of this NimbleMergeGroupsInput.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this NimbleMergeGroupsInput.

        Ignore warnings and forcibly merge specified group with this group. Possible values: 'true', 'false'.  # noqa: E501

        :param force: The force of this NimbleMergeGroupsInput.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def skip_secondary_mgmt_ip(self):
        """Gets the skip_secondary_mgmt_ip of this NimbleMergeGroupsInput.  # noqa: E501

        Skip check for secondary management IP address. Possible values: 'true', 'false'.  # noqa: E501

        :return: The skip_secondary_mgmt_ip of this NimbleMergeGroupsInput.  # noqa: E501
        :rtype: bool
        """
        return self._skip_secondary_mgmt_ip

    @skip_secondary_mgmt_ip.setter
    def skip_secondary_mgmt_ip(self, skip_secondary_mgmt_ip):
        """Sets the skip_secondary_mgmt_ip of this NimbleMergeGroupsInput.

        Skip check for secondary management IP address. Possible values: 'true', 'false'.  # noqa: E501

        :param skip_secondary_mgmt_ip: The skip_secondary_mgmt_ip of this NimbleMergeGroupsInput.  # noqa: E501
        :type: bool
        """

        self._skip_secondary_mgmt_ip = skip_secondary_mgmt_ip

    @property
    def src_group_ip(self):
        """Gets the src_group_ip of this NimbleMergeGroupsInput.  # noqa: E501

        IP address of the source group. Four numbers in the range [0,255] separated by periods. Example: '128.0.0.1'.  # noqa: E501

        :return: The src_group_ip of this NimbleMergeGroupsInput.  # noqa: E501
        :rtype: str
        """
        return self._src_group_ip

    @src_group_ip.setter
    def src_group_ip(self, src_group_ip):
        """Sets the src_group_ip of this NimbleMergeGroupsInput.

        IP address of the source group. Four numbers in the range [0,255] separated by periods. Example: '128.0.0.1'.  # noqa: E501

        :param src_group_ip: The src_group_ip of this NimbleMergeGroupsInput.  # noqa: E501
        :type: str
        """
        if src_group_ip is None:
            raise ValueError("Invalid value for `src_group_ip`, must not be `None`")  # noqa: E501

        self._src_group_ip = src_group_ip

    @property
    def src_group_name(self):
        """Gets the src_group_name of this NimbleMergeGroupsInput.  # noqa: E501

        Name of the source group. String of up to 64 alphanumeric characters, - is allowed after first character. Example: 'g1-exchange'.  # noqa: E501

        :return: The src_group_name of this NimbleMergeGroupsInput.  # noqa: E501
        :rtype: str
        """
        return self._src_group_name

    @src_group_name.setter
    def src_group_name(self, src_group_name):
        """Sets the src_group_name of this NimbleMergeGroupsInput.

        Name of the source group. String of up to 64 alphanumeric characters, - is allowed after first character. Example: 'g1-exchange'.  # noqa: E501

        :param src_group_name: The src_group_name of this NimbleMergeGroupsInput.  # noqa: E501
        :type: str
        """
        if src_group_name is None:
            raise ValueError("Invalid value for `src_group_name`, must not be `None`")  # noqa: E501

        self._src_group_name = src_group_name

    @property
    def src_passphrase(self):
        """Gets the src_passphrase of this NimbleMergeGroupsInput.  # noqa: E501

        Source group encryption passphrase. Encryption passphrase. String with size from 8 to 64 printable characters. Example: 'passphrase-91'.  # noqa: E501

        :return: The src_passphrase of this NimbleMergeGroupsInput.  # noqa: E501
        :rtype: str
        """
        return self._src_passphrase

    @src_passphrase.setter
    def src_passphrase(self, src_passphrase):
        """Sets the src_passphrase of this NimbleMergeGroupsInput.

        Source group encryption passphrase. Encryption passphrase. String with size from 8 to 64 printable characters. Example: 'passphrase-91'.  # noqa: E501

        :param src_passphrase: The src_passphrase of this NimbleMergeGroupsInput.  # noqa: E501
        :type: str
        """

        self._src_passphrase = src_passphrase

    @property
    def src_password(self):
        """Gets the src_password of this NimbleMergeGroupsInput.  # noqa: E501

        Password of the source group. String of 8 to 255 printable characters excluding ampersand and ;[]`. Example: 'password-91'.  # noqa: E501

        :return: The src_password of this NimbleMergeGroupsInput.  # noqa: E501
        :rtype: str
        """
        return self._src_password

    @src_password.setter
    def src_password(self, src_password):
        """Sets the src_password of this NimbleMergeGroupsInput.

        Password of the source group. String of 8 to 255 printable characters excluding ampersand and ;[]`. Example: 'password-91'.  # noqa: E501

        :param src_password: The src_password of this NimbleMergeGroupsInput.  # noqa: E501
        :type: str
        """
        if src_password is None:
            raise ValueError("Invalid value for `src_password`, must not be `None`")  # noqa: E501

        self._src_password = src_password

    @property
    def src_username(self):
        """Gets the src_username of this NimbleMergeGroupsInput.  # noqa: E501

        Username of the source group. String of up to 80 alphanumeric characters, beginning with a letter. For Active Directory users, it can include backslash (\\), dash (-), period (.), underscore (_) and space. Example: 'user1', 'companydomain\\user1'.  # noqa: E501

        :return: The src_username of this NimbleMergeGroupsInput.  # noqa: E501
        :rtype: str
        """
        return self._src_username

    @src_username.setter
    def src_username(self, src_username):
        """Sets the src_username of this NimbleMergeGroupsInput.

        Username of the source group. String of up to 80 alphanumeric characters, beginning with a letter. For Active Directory users, it can include backslash (\\), dash (-), period (.), underscore (_) and space. Example: 'user1', 'companydomain\\user1'.  # noqa: E501

        :param src_username: The src_username of this NimbleMergeGroupsInput.  # noqa: E501
        :type: str
        """
        if src_username is None:
            raise ValueError("Invalid value for `src_username`, must not be `None`")  # noqa: E501

        self._src_username = src_username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleMergeGroupsInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
