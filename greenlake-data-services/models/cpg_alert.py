# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CpgAlert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fail': 'str',
        'limit': 'str',
        'warn': 'str',
        'warn_percent': 'float'
    }

    attribute_map = {
        'fail': 'fail',
        'limit': 'limit',
        'warn': 'warn',
        'warn_percent': 'warnPercent'
    }

    def __init__(self, fail=None, limit=None, warn=None, warn_percent=None):  # noqa: E501
        """CpgAlert - a model defined in OpenAPI"""  # noqa: E501

        self._fail = None
        self._limit = None
        self._warn = None
        self._warn_percent = None
        self.discriminator = None

        if fail is not None:
            self.fail = fail
        if limit is not None:
            self.limit = limit
        if warn is not None:
            self.warn = warn
        if warn_percent is not None:
            self.warn_percent = warn_percent

    @property
    def fail(self):
        """Gets the fail of this CpgAlert.  # noqa: E501

        Alert when there is a growth failure for admin/data space  # noqa: E501

        :return: The fail of this CpgAlert.  # noqa: E501
        :rtype: str
        """
        return self._fail

    @fail.setter
    def fail(self, fail):
        """Sets the fail of this CpgAlert.

        Alert when there is a growth failure for admin/data space  # noqa: E501

        :param fail: The fail of this CpgAlert.  # noqa: E501
        :type: str
        """

        self._fail = fail

    @property
    def limit(self):
        """Gets the limit of this CpgAlert.  # noqa: E501

        Alert corresponding to limit for admin/data space  # noqa: E501

        :return: The limit of this CpgAlert.  # noqa: E501
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this CpgAlert.

        Alert corresponding to limit for admin/data space  # noqa: E501

        :param limit: The limit of this CpgAlert.  # noqa: E501
        :type: str
        """

        self._limit = limit

    @property
    def warn(self):
        """Gets the warn of this CpgAlert.  # noqa: E501

        Alert corresponding to warning for admin/data space  # noqa: E501

        :return: The warn of this CpgAlert.  # noqa: E501
        :rtype: str
        """
        return self._warn

    @warn.setter
    def warn(self, warn):
        """Sets the warn of this CpgAlert.

        Alert corresponding to warning for admin/data space  # noqa: E501

        :param warn: The warn of this CpgAlert.  # noqa: E501
        :type: str
        """

        self._warn = warn

    @property
    def warn_percent(self):
        """Gets the warn_percent of this CpgAlert.  # noqa: E501

        Alert corresponding to warning percentage for admin/data space  # noqa: E501

        :return: The warn_percent of this CpgAlert.  # noqa: E501
        :rtype: float
        """
        return self._warn_percent

    @warn_percent.setter
    def warn_percent(self, warn_percent):
        """Sets the warn_percent of this CpgAlert.

        Alert corresponding to warning percentage for admin/data space  # noqa: E501

        :param warn_percent: The warn_percent of this CpgAlert.  # noqa: E501
        :type: float
        """

        self._warn_percent = warn_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CpgAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
