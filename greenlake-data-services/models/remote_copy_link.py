# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RemoteCopyLink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ipc': 'str',
        'display_name': 'str',
        'domain': 'str',
        'id': 'str',
        'name': 'str',
        'partner_name': 'str',
        'port': 'str',
        'port_pos': 'RemoteCopyLinkPortPosition',
        'rc_link_id': 'int',
        'remote_address': 'str',
        'remote_id': 'str',
        'remote_port_pos': 'RemoteCopyLinkPortPosition',
        'remote_state': 'str',
        'remote_status': 'str',
        'source_address': 'str',
        'state': 'str',
        'status': 'str',
        'system_id': 'str',
        'system_wwn': 'str',
        'throughput_k_byte_sec': 'int',
        'type': 'int'
    }

    attribute_map = {
        'ipc': 'IPC',
        'display_name': 'displayName',
        'domain': 'domain',
        'id': 'id',
        'name': 'name',
        'partner_name': 'partnerName',
        'port': 'port',
        'port_pos': 'portPos',
        'rc_link_id': 'rcLinkId',
        'remote_address': 'remoteAddress',
        'remote_id': 'remoteId',
        'remote_port_pos': 'remotePortPos',
        'remote_state': 'remoteState',
        'remote_status': 'remoteStatus',
        'source_address': 'sourceAddress',
        'state': 'state',
        'status': 'status',
        'system_id': 'systemId',
        'system_wwn': 'systemWWN',
        'throughput_k_byte_sec': 'throughputKByteSec',
        'type': 'type'
    }

    def __init__(self, ipc=None, display_name=None, domain=None, id=None, name=None, partner_name=None, port=None, port_pos=None, rc_link_id=None, remote_address=None, remote_id=None, remote_port_pos=None, remote_state=None, remote_status=None, source_address=None, state=None, status=None, system_id=None, system_wwn=None, throughput_k_byte_sec=None, type=None):  # noqa: E501
        """RemoteCopyLink - a model defined in OpenAPI"""  # noqa: E501

        self._ipc = None
        self._display_name = None
        self._domain = None
        self._id = None
        self._name = None
        self._partner_name = None
        self._port = None
        self._port_pos = None
        self._rc_link_id = None
        self._remote_address = None
        self._remote_id = None
        self._remote_port_pos = None
        self._remote_state = None
        self._remote_status = None
        self._source_address = None
        self._state = None
        self._status = None
        self._system_id = None
        self._system_wwn = None
        self._throughput_k_byte_sec = None
        self._type = None
        self.discriminator = None

        if ipc is not None:
            self.ipc = ipc
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if partner_name is not None:
            self.partner_name = partner_name
        if port is not None:
            self.port = port
        if port_pos is not None:
            self.port_pos = port_pos
        if rc_link_id is not None:
            self.rc_link_id = rc_link_id
        if remote_address is not None:
            self.remote_address = remote_address
        if remote_id is not None:
            self.remote_id = remote_id
        if remote_port_pos is not None:
            self.remote_port_pos = remote_port_pos
        if remote_state is not None:
            self.remote_state = remote_state
        if remote_status is not None:
            self.remote_status = remote_status
        if source_address is not None:
            self.source_address = source_address
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if system_id is not None:
            self.system_id = system_id
        if system_wwn is not None:
            self.system_wwn = system_wwn
        if throughput_k_byte_sec is not None:
            self.throughput_k_byte_sec = throughput_k_byte_sec
        if type is not None:
            self.type = type

    @property
    def ipc(self):
        """Gets the ipc of this RemoteCopyLink.  # noqa: E501

        Name given to the link IPC.  # noqa: E501

        :return: The ipc of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._ipc

    @ipc.setter
    def ipc(self, ipc):
        """Sets the ipc of this RemoteCopyLink.

        Name given to the link IPC.  # noqa: E501

        :param ipc: The ipc of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._ipc = ipc

    @property
    def display_name(self):
        """Gets the display_name of this RemoteCopyLink.  # noqa: E501

        Replication partner link displayname.  # noqa: E501

        :return: The display_name of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RemoteCopyLink.

        Replication partner link displayname.  # noqa: E501

        :param display_name: The display_name of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self):
        """Gets the domain of this RemoteCopyLink.  # noqa: E501

        Domain that the resource belongs to.  # noqa: E501

        :return: The domain of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this RemoteCopyLink.

        Domain that the resource belongs to.  # noqa: E501

        :param domain: The domain of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this RemoteCopyLink.  # noqa: E501

        Unique Identifier of the link  # noqa: E501

        :return: The id of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteCopyLink.

        Unique Identifier of the link  # noqa: E501

        :param id: The id of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RemoteCopyLink.  # noqa: E501

        Replication partner link name.  # noqa: E501

        :return: The name of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteCopyLink.

        Replication partner link name.  # noqa: E501

        :param name: The name of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partner_name(self):
        """Gets the partner_name of this RemoteCopyLink.  # noqa: E501

        Partner name with which the link is affiliated.  # noqa: E501

        :return: The partner_name of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._partner_name

    @partner_name.setter
    def partner_name(self, partner_name):
        """Sets the partner_name of this RemoteCopyLink.

        Partner name with which the link is affiliated.  # noqa: E501

        :param partner_name: The partner_name of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._partner_name = partner_name

    @property
    def port(self):
        """Gets the port of this RemoteCopyLink.  # noqa: E501

        Port number.  # noqa: E501

        :return: The port of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RemoteCopyLink.

        Port number.  # noqa: E501

        :param port: The port of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def port_pos(self):
        """Gets the port_pos of this RemoteCopyLink.  # noqa: E501

        Port position of the link  # noqa: E501

        :return: The port_pos of this RemoteCopyLink.  # noqa: E501
        :rtype: RemoteCopyLinkPortPosition
        """
        return self._port_pos

    @port_pos.setter
    def port_pos(self, port_pos):
        """Sets the port_pos of this RemoteCopyLink.

        Port position of the link  # noqa: E501

        :param port_pos: The port_pos of this RemoteCopyLink.  # noqa: E501
        :type: RemoteCopyLinkPortPosition
        """

        self._port_pos = port_pos

    @property
    def rc_link_id(self):
        """Gets the rc_link_id of this RemoteCopyLink.  # noqa: E501

        Id of the replication partner link.  # noqa: E501

        :return: The rc_link_id of this RemoteCopyLink.  # noqa: E501
        :rtype: int
        """
        return self._rc_link_id

    @rc_link_id.setter
    def rc_link_id(self, rc_link_id):
        """Sets the rc_link_id of this RemoteCopyLink.

        Id of the replication partner link.  # noqa: E501

        :param rc_link_id: The rc_link_id of this RemoteCopyLink.  # noqa: E501
        :type: int
        """

        self._rc_link_id = rc_link_id

    @property
    def remote_address(self):
        """Gets the remote_address of this RemoteCopyLink.  # noqa: E501

        IP address or WWN of the remote link.  # noqa: E501

        :return: The remote_address of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this RemoteCopyLink.

        IP address or WWN of the remote link.  # noqa: E501

        :param remote_address: The remote_address of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._remote_address = remote_address

    @property
    def remote_id(self):
        """Gets the remote_id of this RemoteCopyLink.  # noqa: E501

        Unique Identifier of the remote partner link  # noqa: E501

        :return: The remote_id of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this RemoteCopyLink.

        Unique Identifier of the remote partner link  # noqa: E501

        :param remote_id: The remote_id of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def remote_port_pos(self):
        """Gets the remote_port_pos of this RemoteCopyLink.  # noqa: E501

        Port position of the remote link  # noqa: E501

        :return: The remote_port_pos of this RemoteCopyLink.  # noqa: E501
        :rtype: RemoteCopyLinkPortPosition
        """
        return self._remote_port_pos

    @remote_port_pos.setter
    def remote_port_pos(self, remote_port_pos):
        """Sets the remote_port_pos of this RemoteCopyLink.

        Port position of the remote link  # noqa: E501

        :param remote_port_pos: The remote_port_pos of this RemoteCopyLink.  # noqa: E501
        :type: RemoteCopyLinkPortPosition
        """

        self._remote_port_pos = remote_port_pos

    @property
    def remote_state(self):
        """Gets the remote_state of this RemoteCopyLink.  # noqa: E501

        state of the remote replicatoin partner link.  # noqa: E501

        :return: The remote_state of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._remote_state

    @remote_state.setter
    def remote_state(self, remote_state):
        """Sets the remote_state of this RemoteCopyLink.

        state of the remote replicatoin partner link.  # noqa: E501

        :param remote_state: The remote_state of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._remote_state = remote_state

    @property
    def remote_status(self):
        """Gets the remote_status of this RemoteCopyLink.  # noqa: E501

        status of the remote replication partner link.  # noqa: E501

        :return: The remote_status of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._remote_status

    @remote_status.setter
    def remote_status(self, remote_status):
        """Sets the remote_status of this RemoteCopyLink.

        status of the remote replication partner link.  # noqa: E501

        :param remote_status: The remote_status of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._remote_status = remote_status

    @property
    def source_address(self):
        """Gets the source_address of this RemoteCopyLink.  # noqa: E501

        IP address or WWN of the link.  # noqa: E501

        :return: The source_address of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this RemoteCopyLink.

        IP address or WWN of the link.  # noqa: E501

        :param source_address: The source_address of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def state(self):
        """Gets the state of this RemoteCopyLink.  # noqa: E501

        state of the replication partner link.  # noqa: E501

        :return: The state of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RemoteCopyLink.

        state of the replication partner link.  # noqa: E501

        :param state: The state of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this RemoteCopyLink.  # noqa: E501

        status of the replication partner link.  # noqa: E501

        :return: The status of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RemoteCopyLink.

        status of the replication partner link.  # noqa: E501

        :param status: The status of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def system_id(self):
        """Gets the system_id of this RemoteCopyLink.  # noqa: E501

        Unique ID or serial number of the system.  # noqa: E501

        :return: The system_id of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this RemoteCopyLink.

        Unique ID or serial number of the system.  # noqa: E501

        :param system_id: The system_id of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_wwn(self):
        """Gets the system_wwn of this RemoteCopyLink.  # noqa: E501

        WWN of the system.  # noqa: E501

        :return: The system_wwn of this RemoteCopyLink.  # noqa: E501
        :rtype: str
        """
        return self._system_wwn

    @system_wwn.setter
    def system_wwn(self, system_wwn):
        """Sets the system_wwn of this RemoteCopyLink.

        WWN of the system.  # noqa: E501

        :param system_wwn: The system_wwn of this RemoteCopyLink.  # noqa: E501
        :type: str
        """

        self._system_wwn = system_wwn

    @property
    def throughput_k_byte_sec(self):
        """Gets the throughput_k_byte_sec of this RemoteCopyLink.  # noqa: E501

        Link throughput in KBytes/sec.  # noqa: E501

        :return: The throughput_k_byte_sec of this RemoteCopyLink.  # noqa: E501
        :rtype: int
        """
        return self._throughput_k_byte_sec

    @throughput_k_byte_sec.setter
    def throughput_k_byte_sec(self, throughput_k_byte_sec):
        """Sets the throughput_k_byte_sec of this RemoteCopyLink.

        Link throughput in KBytes/sec.  # noqa: E501

        :param throughput_k_byte_sec: The throughput_k_byte_sec of this RemoteCopyLink.  # noqa: E501
        :type: int
        """

        self._throughput_k_byte_sec = throughput_k_byte_sec

    @property
    def type(self):
        """Gets the type of this RemoteCopyLink.  # noqa: E501

        Link type IP or FC.  # noqa: E501

        :return: The type of this RemoteCopyLink.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RemoteCopyLink.

        Link type IP or FC.  # noqa: E501

        :param type: The type of this RemoteCopyLink.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteCopyLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
