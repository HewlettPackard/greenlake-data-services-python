# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InitiatorDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'associated_links': 'ScAssociatedLinks',
        'customer_id': 'str',
        'driver_version': 'str',
        'firmware_version': 'str',
        'generation': 'int',
        'hba_model': 'str',
        'host_speed': 'int',
        'hosts': 'list[HostSummaryForInitiatorObject]',
        'id': 'str',
        'ip_address': 'str',
        'name': 'str',
        'protocol': 'str',
        'request_uri': 'str',
        'systems': 'list[str]',
        'type': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'address': 'address',
        'associated_links': 'associatedLinks',
        'customer_id': 'customerId',
        'driver_version': 'driverVersion',
        'firmware_version': 'firmwareVersion',
        'generation': 'generation',
        'hba_model': 'hbaModel',
        'host_speed': 'hostSpeed',
        'hosts': 'hosts',
        'id': 'id',
        'ip_address': 'ipAddress',
        'name': 'name',
        'protocol': 'protocol',
        'request_uri': 'requestUri',
        'systems': 'systems',
        'type': 'type',
        'vendor': 'vendor'
    }

    def __init__(self, address=None, associated_links=None, customer_id=None, driver_version=None, firmware_version=None, generation=None, hba_model=None, host_speed=None, hosts=None, id=None, ip_address=None, name=None, protocol=None, request_uri=None, systems=None, type=None, vendor=None):  # noqa: E501
        """InitiatorDetails - a model defined in OpenAPI"""  # noqa: E501

        self._address = None
        self._associated_links = None
        self._customer_id = None
        self._driver_version = None
        self._firmware_version = None
        self._generation = None
        self._hba_model = None
        self._host_speed = None
        self._hosts = None
        self._id = None
        self._ip_address = None
        self._name = None
        self._protocol = None
        self._request_uri = None
        self._systems = None
        self._type = None
        self._vendor = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if associated_links is not None:
            self.associated_links = associated_links
        if customer_id is not None:
            self.customer_id = customer_id
        if driver_version is not None:
            self.driver_version = driver_version
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if generation is not None:
            self.generation = generation
        if hba_model is not None:
            self.hba_model = hba_model
        if host_speed is not None:
            self.host_speed = host_speed
        if hosts is not None:
            self.hosts = hosts
        if id is not None:
            self.id = id
        if ip_address is not None:
            self.ip_address = ip_address
        if name is not None:
            self.name = name
        if protocol is not None:
            self.protocol = protocol
        if request_uri is not None:
            self.request_uri = request_uri
        if systems is not None:
            self.systems = systems
        if type is not None:
            self.type = type
        if vendor is not None:
            self.vendor = vendor

    @property
    def address(self):
        """Gets the address of this InitiatorDetails.  # noqa: E501

        Address of the initiator.   # noqa: E501

        :return: The address of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InitiatorDetails.

        Address of the initiator.   # noqa: E501

        :param address: The address of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def associated_links(self):
        """Gets the associated_links of this InitiatorDetails.  # noqa: E501


        :return: The associated_links of this InitiatorDetails.  # noqa: E501
        :rtype: ScAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this InitiatorDetails.


        :param associated_links: The associated_links of this InitiatorDetails.  # noqa: E501
        :type: ScAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def customer_id(self):
        """Gets the customer_id of this InitiatorDetails.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this InitiatorDetails.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def driver_version(self):
        """Gets the driver_version of this InitiatorDetails.  # noqa: E501

        Driver version of the host initiator.  # noqa: E501

        :return: The driver_version of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._driver_version

    @driver_version.setter
    def driver_version(self, driver_version):
        """Sets the driver_version of this InitiatorDetails.

        Driver version of the host initiator.  # noqa: E501

        :param driver_version: The driver_version of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._driver_version = driver_version

    @property
    def firmware_version(self):
        """Gets the firmware_version of this InitiatorDetails.  # noqa: E501

        Firmware version of the host initiator.  # noqa: E501

        :return: The firmware_version of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this InitiatorDetails.

        Firmware version of the host initiator.  # noqa: E501

        :param firmware_version: The firmware_version of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def generation(self):
        """Gets the generation of this InitiatorDetails.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :return: The generation of this InitiatorDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this InitiatorDetails.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :param generation: The generation of this InitiatorDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def hba_model(self):
        """Gets the hba_model of this InitiatorDetails.  # noqa: E501

        Host bus adaptor model of the host initiator  # noqa: E501

        :return: The hba_model of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._hba_model

    @hba_model.setter
    def hba_model(self, hba_model):
        """Sets the hba_model of this InitiatorDetails.

        Host bus adaptor model of the host initiator  # noqa: E501

        :param hba_model: The hba_model of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._hba_model = hba_model

    @property
    def host_speed(self):
        """Gets the host_speed of this InitiatorDetails.  # noqa: E501

        Host speed  # noqa: E501

        :return: The host_speed of this InitiatorDetails.  # noqa: E501
        :rtype: int
        """
        return self._host_speed

    @host_speed.setter
    def host_speed(self, host_speed):
        """Sets the host_speed of this InitiatorDetails.

        Host speed  # noqa: E501

        :param host_speed: The host_speed of this InitiatorDetails.  # noqa: E501
        :type: int
        """

        self._host_speed = host_speed

    @property
    def hosts(self):
        """Gets the hosts of this InitiatorDetails.  # noqa: E501

        List of hosts. `Filter` by hostId.  # noqa: E501

        :return: The hosts of this InitiatorDetails.  # noqa: E501
        :rtype: list[HostSummaryForInitiatorObject]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this InitiatorDetails.

        List of hosts. `Filter` by hostId.  # noqa: E501

        :param hosts: The hosts of this InitiatorDetails.  # noqa: E501
        :type: list[HostSummaryForInitiatorObject]
        """

        self._hosts = hosts

    @property
    def id(self):
        """Gets the id of this InitiatorDetails.  # noqa: E501

        Identifier for an initiator.  # noqa: E501

        :return: The id of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InitiatorDetails.

        Identifier for an initiator.  # noqa: E501

        :param id: The id of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this InitiatorDetails.  # noqa: E501

        IP address of the initiator.  # noqa: E501

        :return: The ip_address of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InitiatorDetails.

        IP address of the initiator.  # noqa: E501

        :param ip_address: The ip_address of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this InitiatorDetails.  # noqa: E501

        Name of the initiator.  # noqa: E501

        :return: The name of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InitiatorDetails.

        Name of the initiator.  # noqa: E501

        :param name: The name of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this InitiatorDetails.  # noqa: E501

        protocol supported are : FC ,iSCSI or NVMe  # noqa: E501

        :return: The protocol of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InitiatorDetails.

        protocol supported are : FC ,iSCSI or NVMe  # noqa: E501

        :param protocol: The protocol of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def request_uri(self):
        """Gets the request_uri of this InitiatorDetails.  # noqa: E501

        requestUri for initiators  # noqa: E501

        :return: The request_uri of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this InitiatorDetails.

        requestUri for initiators  # noqa: E501

        :param request_uri: The request_uri of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def systems(self):
        """Gets the systems of this InitiatorDetails.  # noqa: E501

        system IDs to which the host initiator is linked to  # noqa: E501

        :return: The systems of this InitiatorDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this InitiatorDetails.

        system IDs to which the host initiator is linked to  # noqa: E501

        :param systems: The systems of this InitiatorDetails.  # noqa: E501
        :type: list[str]
        """

        self._systems = systems

    @property
    def type(self):
        """Gets the type of this InitiatorDetails.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InitiatorDetails.

        The type of resource.  # noqa: E501

        :param type: The type of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vendor(self):
        """Gets the vendor of this InitiatorDetails.  # noqa: E501

        Vendor of the host initiator  # noqa: E501

        :return: The vendor of this InitiatorDetails.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this InitiatorDetails.

        Vendor of the host initiator  # noqa: E501

        :param vendor: The vendor of this InitiatorDetails.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiatorDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
