# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleEditVolumeInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_uuid': 'str',
        'caching_enabled': 'bool',
        'dedupe_enabled': 'bool',
        'description': 'str',
        'folder_id': 'str',
        'force': 'bool',
        'limit': 'int',
        'limit_iops': 'int',
        'limit_mbps': 'int',
        'name': 'str',
        'online': 'bool',
        'owned_by_group_id': 'str',
        'perfpolicy_id': 'str',
        'size': 'int'
    }

    attribute_map = {
        'app_uuid': 'app_uuid',
        'caching_enabled': 'caching_enabled',
        'dedupe_enabled': 'dedupe_enabled',
        'description': 'description',
        'folder_id': 'folder_id',
        'force': 'force',
        'limit': 'limit',
        'limit_iops': 'limit_iops',
        'limit_mbps': 'limit_mbps',
        'name': 'name',
        'online': 'online',
        'owned_by_group_id': 'owned_by_group_id',
        'perfpolicy_id': 'perfpolicy_id',
        'size': 'size'
    }

    def __init__(self, app_uuid=None, caching_enabled=None, dedupe_enabled=None, description=None, folder_id=None, force=None, limit=None, limit_iops=None, limit_mbps=None, name=None, online=None, owned_by_group_id=None, perfpolicy_id=None, size=None):  # noqa: E501
        """NimbleEditVolumeInput - a model defined in OpenAPI"""  # noqa: E501

        self._app_uuid = None
        self._caching_enabled = None
        self._dedupe_enabled = None
        self._description = None
        self._folder_id = None
        self._force = None
        self._limit = None
        self._limit_iops = None
        self._limit_mbps = None
        self._name = None
        self._online = None
        self._owned_by_group_id = None
        self._perfpolicy_id = None
        self._size = None
        self.discriminator = None

        if app_uuid is not None:
            self.app_uuid = app_uuid
        if caching_enabled is not None:
            self.caching_enabled = caching_enabled
        if dedupe_enabled is not None:
            self.dedupe_enabled = dedupe_enabled
        if description is not None:
            self.description = description
        if folder_id is not None:
            self.folder_id = folder_id
        if force is not None:
            self.force = force
        if limit is not None:
            self.limit = limit
        if limit_iops is not None:
            self.limit_iops = limit_iops
        if limit_mbps is not None:
            self.limit_mbps = limit_mbps
        if name is not None:
            self.name = name
        if online is not None:
            self.online = online
        if owned_by_group_id is not None:
            self.owned_by_group_id = owned_by_group_id
        if perfpolicy_id is not None:
            self.perfpolicy_id = perfpolicy_id
        if size is not None:
            self.size = size

    @property
    def app_uuid(self):
        """Gets the app_uuid of this NimbleEditVolumeInput.  # noqa: E501

        Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.  # noqa: E501

        :return: The app_uuid of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid):
        """Sets the app_uuid of this NimbleEditVolumeInput.

        Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.  # noqa: E501

        :param app_uuid: The app_uuid of this NimbleEditVolumeInput.  # noqa: E501
        :type: str
        """

        self._app_uuid = app_uuid

    @property
    def caching_enabled(self):
        """Gets the caching_enabled of this NimbleEditVolumeInput.  # noqa: E501

        Indicate caching the volume is enabled.  # noqa: E501

        :return: The caching_enabled of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._caching_enabled

    @caching_enabled.setter
    def caching_enabled(self, caching_enabled):
        """Sets the caching_enabled of this NimbleEditVolumeInput.

        Indicate caching the volume is enabled.  # noqa: E501

        :param caching_enabled: The caching_enabled of this NimbleEditVolumeInput.  # noqa: E501
        :type: bool
        """

        self._caching_enabled = caching_enabled

    @property
    def dedupe_enabled(self):
        """Gets the dedupe_enabled of this NimbleEditVolumeInput.  # noqa: E501

        Indicate whether dedupe is enabled.  # noqa: E501

        :return: The dedupe_enabled of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_enabled

    @dedupe_enabled.setter
    def dedupe_enabled(self, dedupe_enabled):
        """Sets the dedupe_enabled of this NimbleEditVolumeInput.

        Indicate whether dedupe is enabled.  # noqa: E501

        :param dedupe_enabled: The dedupe_enabled of this NimbleEditVolumeInput.  # noqa: E501
        :type: bool
        """

        self._dedupe_enabled = dedupe_enabled

    @property
    def description(self):
        """Gets the description of this NimbleEditVolumeInput.  # noqa: E501

        Text description of volume. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleEditVolumeInput.

        Text description of volume. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this NimbleEditVolumeInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def folder_id(self):
        """Gets the folder_id of this NimbleEditVolumeInput.  # noqa: E501

        ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal number or the empty string.  # noqa: E501

        :return: The folder_id of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this NimbleEditVolumeInput.

        ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal number or the empty string.  # noqa: E501

        :param folder_id: The folder_id of this NimbleEditVolumeInput.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def force(self):
        """Gets the force of this NimbleEditVolumeInput.  # noqa: E501

        Forcibly offline, reduce size or change read-only status a volume.  # noqa: E501

        :return: The force of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this NimbleEditVolumeInput.

        Forcibly offline, reduce size or change read-only status a volume.  # noqa: E501

        :param force: The force of this NimbleEditVolumeInput.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def limit(self):
        """Gets the limit of this NimbleEditVolumeInput.  # noqa: E501

        Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100.  # noqa: E501

        :return: The limit of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this NimbleEditVolumeInput.

        Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100.  # noqa: E501

        :param limit: The limit of this NimbleEditVolumeInput.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def limit_iops(self):
        """Gets the limit_iops of this NimbleEditVolumeInput.  # noqa: E501

        IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).  # noqa: E501

        :return: The limit_iops of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_iops

    @limit_iops.setter
    def limit_iops(self, limit_iops):
        """Sets the limit_iops of this NimbleEditVolumeInput.

        IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).  # noqa: E501

        :param limit_iops: The limit_iops of this NimbleEditVolumeInput.  # noqa: E501
        :type: int
        """

        self._limit_iops = limit_iops

    @property
    def limit_mbps(self):
        """Gets the limit_mbps of this NimbleEditVolumeInput.  # noqa: E501

        Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).  # noqa: E501

        :return: The limit_mbps of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_mbps

    @limit_mbps.setter
    def limit_mbps(self, limit_mbps):
        """Sets the limit_mbps of this NimbleEditVolumeInput.

        Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).  # noqa: E501

        :param limit_mbps: The limit_mbps of this NimbleEditVolumeInput.  # noqa: E501
        :type: int
        """

        self._limit_mbps = limit_mbps

    @property
    def name(self):
        """Gets the name of this NimbleEditVolumeInput.  # noqa: E501

        Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.  # noqa: E501

        :return: The name of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleEditVolumeInput.

        Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.  # noqa: E501

        :param name: The name of this NimbleEditVolumeInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def online(self):
        """Gets the online of this NimbleEditVolumeInput.  # noqa: E501

        Online state of volume, available for host initiators to establish connections.  # noqa: E501

        :return: The online of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this NimbleEditVolumeInput.

        Online state of volume, available for host initiators to establish connections.  # noqa: E501

        :param online: The online of this NimbleEditVolumeInput.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def owned_by_group_id(self):
        """Gets the owned_by_group_id of this NimbleEditVolumeInput.  # noqa: E501

        ID of group that currently owns the volume. A 42 digit hexadecimal number.  # noqa: E501

        :return: The owned_by_group_id of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._owned_by_group_id

    @owned_by_group_id.setter
    def owned_by_group_id(self, owned_by_group_id):
        """Sets the owned_by_group_id of this NimbleEditVolumeInput.

        ID of group that currently owns the volume. A 42 digit hexadecimal number.  # noqa: E501

        :param owned_by_group_id: The owned_by_group_id of this NimbleEditVolumeInput.  # noqa: E501
        :type: str
        """

        self._owned_by_group_id = owned_by_group_id

    @property
    def perfpolicy_id(self):
        """Gets the perfpolicy_id of this NimbleEditVolumeInput.  # noqa: E501

        Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The perfpolicy_id of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._perfpolicy_id

    @perfpolicy_id.setter
    def perfpolicy_id(self, perfpolicy_id):
        """Sets the perfpolicy_id of this NimbleEditVolumeInput.

        Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param perfpolicy_id: The perfpolicy_id of this NimbleEditVolumeInput.  # noqa: E501
        :type: str
        """

        self._perfpolicy_id = perfpolicy_id

    @property
    def size(self):
        """Gets the size of this NimbleEditVolumeInput.  # noqa: E501

        Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.  # noqa: E501

        :return: The size of this NimbleEditVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NimbleEditVolumeInput.

        Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.  # noqa: E501

        :param size: The size of this NimbleEditVolumeInput.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleEditVolumeInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
