# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleStorageSystemDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_protocol_list': 'list[str]',
        'alarms_enabled': 'bool',
        'alert_from_email_addr': 'str',
        'alert_min_level': 'str',
        'alert_to_email_addrs': 'str',
        'allow_support_tunnel': 'bool',
        'array_unassign_migration_status': 'list[ArrayUnassignMigStatus]',
        'arrays': 'NimbleArrayList',
        'associated_links': 'GroupAssociatedLinks',
        'auto_switchover_enabled': 'bool',
        'auto_switchover_messages': 'list[NimbleErrorWithArguments]',
        'autoclean_unmanaged_snapshots_enabled': 'bool',
        'autoclean_unmanaged_snapshots_ttl_unit': 'int',
        'autosupport_enabled': 'bool',
        'cc_mode_enabled': 'bool',
        'clone_ratio': 'float',
        'compressed_snap_usage_bytes': 'int',
        'compressed_vol_usage_bytes': 'int',
        'compression_ratio': 'float',
        'customer_id': 'str',
        'data_rebalance_status': 'list[PoolRebalanceMigStatus]',
        'data_reduction_ratio': 'float',
        'date': 'int',
        'dedupe_ratio': 'float',
        'default_iscsi_target_scope': 'str',
        'default_snap_limit_percent': 'int',
        'default_snap_reserve': 'int',
        'default_snap_warn_level': 'int',
        'default_volume_limit': 'int',
        'default_volume_reserve': 'int',
        'default_volume_warn_level': 'int',
        'dns_servers': 'list[IPAddressObject]',
        'domain_name': 'str',
        'encryption_config': 'EncryptionSettings',
        'failover_mode': 'str',
        'fc_enabled': 'bool',
        'free_space': 'int',
        'generation': 'int',
        'group_snapshot_ttl': 'int',
        'group_target_enabled': 'bool',
        'group_target_name': 'str',
        'iscsi_automatic_connection_method': 'bool',
        'iscsi_connection_rebalancing': 'bool',
        'iscsi_enabled': 'bool',
        'isns_enabled': 'bool',
        'isns_port': 'int',
        'isns_server': 'str',
        'last_login': 'str',
        'leader_array_name': 'str',
        'leader_array_serial': 'str',
        'management_service_backup_array_name': 'str',
        'management_service_backup_status': 'str',
        'member_list': 'list[str]',
        'merge_group_name': 'str',
        'merge_state': 'str',
        'ntp_server': 'str',
        'num_connections': 'int',
        'num_snapcolls': 'int',
        'num_snaps': 'int',
        'pending_deletes': 'int',
        'proxy_port': 'int',
        'proxy_server': 'str',
        'proxy_username': 'str',
        'raw_cache_capacity': 'int',
        'raw_capacity': 'int',
        'repl_throttle_list': 'list[Throttle]',
        'repl_throttled_bandwidth': 'int',
        'repl_throttled_bandwidth_kbps': 'int',
        'resource_uri': 'str',
        'savings': 'int',
        'savings_clone': 'int',
        'savings_compression': 'int',
        'savings_data_reduction': 'int',
        'savings_dedupe': 'int',
        'savings_ratio': 'float',
        'savings_vol_thin_provisioning': 'int',
        'scsi_vendor_id': 'str',
        'send_alert_to_support': 'bool',
        'smtp_port': 'int',
        'smtp_server': 'str',
        'snap_compression_ratio': 'float',
        'snap_retn_meter_high': 'int',
        'snap_retn_meter_very_high': 'int',
        'snap_usage_populated': 'int',
        'snmp_community': 'str',
        'snmp_get_enabled': 'bool',
        'snmp_get_port': 'int',
        'snmp_sys_contact': 'str',
        'snmp_sys_location': 'str',
        'snmp_trap_enabled': 'bool',
        'snmp_trap_host': 'str',
        'snmp_trap_port': 'int',
        'space_info_valid': 'bool',
        'syslogd_enabled': 'bool',
        'syslogd_port': 'int',
        'syslogd_server': 'str',
        'syslogd_servers': 'list[NimbleSyslogdServerInfo]',
        'system_headroom': 'SystemHeadroom',
        'tdz_enabled': 'bool',
        'tdz_prefix': 'str',
        'timezone': 'str',
        'tlsv1_enabled': 'bool',
        'uncompressed_snap_usage_bytes': 'int',
        'uncompressed_vol_usage_bytes': 'int',
        'unique_name_enabled': 'bool',
        'unused_reserve_bytes': 'int',
        'update_array_names': 'str',
        'update_download_end_time': 'int',
        'update_download_error_code': 'str',
        'update_download_start_time': 'int',
        'update_downloading': 'bool',
        'update_end_time': 'int',
        'update_error_code': 'str',
        'update_progress_msg': 'str',
        'update_start_time': 'int',
        'update_state': 'str',
        'usable_cache_capacity': 'int',
        'usable_capacity_bytes': 'int',
        'usage': 'int',
        'usage_valid': 'bool',
        'user_inactivity_timeout': 'int',
        'version_current': 'str',
        'version_rollback': 'str',
        'version_target': 'str',
        'vol_compression_ratio': 'float',
        'vol_thin_provisioning_ratio': 'float',
        'volume_migration_status': 'list[VolFamMigStatus]',
        'vss_validation_timeout': 'int',
        'vvol_enabled': 'bool',
        'witness_status': 'list[WitnessTestResponse]'
    }

    attribute_map = {
        'access_protocol_list': 'access_protocol_list',
        'alarms_enabled': 'alarms_enabled',
        'alert_from_email_addr': 'alert_from_email_addr',
        'alert_min_level': 'alert_min_level',
        'alert_to_email_addrs': 'alert_to_email_addrs',
        'allow_support_tunnel': 'allow_support_tunnel',
        'array_unassign_migration_status': 'array_unassign_migration_status',
        'arrays': 'arrays',
        'associated_links': 'associated_links',
        'auto_switchover_enabled': 'auto_switchover_enabled',
        'auto_switchover_messages': 'auto_switchover_messages',
        'autoclean_unmanaged_snapshots_enabled': 'autoclean_unmanaged_snapshots_enabled',
        'autoclean_unmanaged_snapshots_ttl_unit': 'autoclean_unmanaged_snapshots_ttl_unit',
        'autosupport_enabled': 'autosupport_enabled',
        'cc_mode_enabled': 'cc_mode_enabled',
        'clone_ratio': 'clone_ratio',
        'compressed_snap_usage_bytes': 'compressed_snap_usage_bytes',
        'compressed_vol_usage_bytes': 'compressed_vol_usage_bytes',
        'compression_ratio': 'compression_ratio',
        'customer_id': 'customerId',
        'data_rebalance_status': 'data_rebalance_status',
        'data_reduction_ratio': 'data_reduction_ratio',
        'date': 'date',
        'dedupe_ratio': 'dedupe_ratio',
        'default_iscsi_target_scope': 'default_iscsi_target_scope',
        'default_snap_limit_percent': 'default_snap_limit_percent',
        'default_snap_reserve': 'default_snap_reserve',
        'default_snap_warn_level': 'default_snap_warn_level',
        'default_volume_limit': 'default_volume_limit',
        'default_volume_reserve': 'default_volume_reserve',
        'default_volume_warn_level': 'default_volume_warn_level',
        'dns_servers': 'dns_servers',
        'domain_name': 'domain_name',
        'encryption_config': 'encryption_config',
        'failover_mode': 'failover_mode',
        'fc_enabled': 'fc_enabled',
        'free_space': 'free_space',
        'generation': 'generation',
        'group_snapshot_ttl': 'group_snapshot_ttl',
        'group_target_enabled': 'group_target_enabled',
        'group_target_name': 'group_target_name',
        'iscsi_automatic_connection_method': 'iscsi_automatic_connection_method',
        'iscsi_connection_rebalancing': 'iscsi_connection_rebalancing',
        'iscsi_enabled': 'iscsi_enabled',
        'isns_enabled': 'isns_enabled',
        'isns_port': 'isns_port',
        'isns_server': 'isns_server',
        'last_login': 'last_login',
        'leader_array_name': 'leader_array_name',
        'leader_array_serial': 'leader_array_serial',
        'management_service_backup_array_name': 'management_service_backup_array_name',
        'management_service_backup_status': 'management_service_backup_status',
        'member_list': 'member_list',
        'merge_group_name': 'merge_group_name',
        'merge_state': 'merge_state',
        'ntp_server': 'ntp_server',
        'num_connections': 'num_connections',
        'num_snapcolls': 'num_snapcolls',
        'num_snaps': 'num_snaps',
        'pending_deletes': 'pending_deletes',
        'proxy_port': 'proxy_port',
        'proxy_server': 'proxy_server',
        'proxy_username': 'proxy_username',
        'raw_cache_capacity': 'raw_cache_capacity',
        'raw_capacity': 'raw_capacity',
        'repl_throttle_list': 'repl_throttle_list',
        'repl_throttled_bandwidth': 'repl_throttled_bandwidth',
        'repl_throttled_bandwidth_kbps': 'repl_throttled_bandwidth_kbps',
        'resource_uri': 'resourceUri',
        'savings': 'savings',
        'savings_clone': 'savings_clone',
        'savings_compression': 'savings_compression',
        'savings_data_reduction': 'savings_data_reduction',
        'savings_dedupe': 'savings_dedupe',
        'savings_ratio': 'savings_ratio',
        'savings_vol_thin_provisioning': 'savings_vol_thin_provisioning',
        'scsi_vendor_id': 'scsi_vendor_id',
        'send_alert_to_support': 'send_alert_to_support',
        'smtp_port': 'smtp_port',
        'smtp_server': 'smtp_server',
        'snap_compression_ratio': 'snap_compression_ratio',
        'snap_retn_meter_high': 'snap_retn_meter_high',
        'snap_retn_meter_very_high': 'snap_retn_meter_very_high',
        'snap_usage_populated': 'snap_usage_populated',
        'snmp_community': 'snmp_community',
        'snmp_get_enabled': 'snmp_get_enabled',
        'snmp_get_port': 'snmp_get_port',
        'snmp_sys_contact': 'snmp_sys_contact',
        'snmp_sys_location': 'snmp_sys_location',
        'snmp_trap_enabled': 'snmp_trap_enabled',
        'snmp_trap_host': 'snmp_trap_host',
        'snmp_trap_port': 'snmp_trap_port',
        'space_info_valid': 'space_info_valid',
        'syslogd_enabled': 'syslogd_enabled',
        'syslogd_port': 'syslogd_port',
        'syslogd_server': 'syslogd_server',
        'syslogd_servers': 'syslogd_servers',
        'system_headroom': 'systemHeadroom',
        'tdz_enabled': 'tdz_enabled',
        'tdz_prefix': 'tdz_prefix',
        'timezone': 'timezone',
        'tlsv1_enabled': 'tlsv1_enabled',
        'uncompressed_snap_usage_bytes': 'uncompressed_snap_usage_bytes',
        'uncompressed_vol_usage_bytes': 'uncompressed_vol_usage_bytes',
        'unique_name_enabled': 'unique_name_enabled',
        'unused_reserve_bytes': 'unused_reserve_bytes',
        'update_array_names': 'update_array_names',
        'update_download_end_time': 'update_download_end_time',
        'update_download_error_code': 'update_download_error_code',
        'update_download_start_time': 'update_download_start_time',
        'update_downloading': 'update_downloading',
        'update_end_time': 'update_end_time',
        'update_error_code': 'update_error_code',
        'update_progress_msg': 'update_progress_msg',
        'update_start_time': 'update_start_time',
        'update_state': 'update_state',
        'usable_cache_capacity': 'usable_cache_capacity',
        'usable_capacity_bytes': 'usable_capacity_bytes',
        'usage': 'usage',
        'usage_valid': 'usage_valid',
        'user_inactivity_timeout': 'user_inactivity_timeout',
        'version_current': 'version_current',
        'version_rollback': 'version_rollback',
        'version_target': 'version_target',
        'vol_compression_ratio': 'vol_compression_ratio',
        'vol_thin_provisioning_ratio': 'vol_thin_provisioning_ratio',
        'volume_migration_status': 'volume_migration_status',
        'vss_validation_timeout': 'vss_validation_timeout',
        'vvol_enabled': 'vvol_enabled',
        'witness_status': 'witness_status'
    }

    def __init__(self, access_protocol_list=None, alarms_enabled=None, alert_from_email_addr=None, alert_min_level=None, alert_to_email_addrs=None, allow_support_tunnel=None, array_unassign_migration_status=None, arrays=None, associated_links=None, auto_switchover_enabled=None, auto_switchover_messages=None, autoclean_unmanaged_snapshots_enabled=None, autoclean_unmanaged_snapshots_ttl_unit=None, autosupport_enabled=None, cc_mode_enabled=None, clone_ratio=None, compressed_snap_usage_bytes=None, compressed_vol_usage_bytes=None, compression_ratio=None, customer_id=None, data_rebalance_status=None, data_reduction_ratio=None, date=None, dedupe_ratio=None, default_iscsi_target_scope=None, default_snap_limit_percent=None, default_snap_reserve=None, default_snap_warn_level=None, default_volume_limit=None, default_volume_reserve=None, default_volume_warn_level=None, dns_servers=None, domain_name=None, encryption_config=None, failover_mode=None, fc_enabled=None, free_space=None, generation=None, group_snapshot_ttl=None, group_target_enabled=None, group_target_name=None, iscsi_automatic_connection_method=None, iscsi_connection_rebalancing=None, iscsi_enabled=None, isns_enabled=None, isns_port=None, isns_server=None, last_login=None, leader_array_name=None, leader_array_serial=None, management_service_backup_array_name=None, management_service_backup_status=None, member_list=None, merge_group_name=None, merge_state=None, ntp_server=None, num_connections=None, num_snapcolls=None, num_snaps=None, pending_deletes=None, proxy_port=None, proxy_server=None, proxy_username=None, raw_cache_capacity=None, raw_capacity=None, repl_throttle_list=None, repl_throttled_bandwidth=None, repl_throttled_bandwidth_kbps=None, resource_uri=None, savings=None, savings_clone=None, savings_compression=None, savings_data_reduction=None, savings_dedupe=None, savings_ratio=None, savings_vol_thin_provisioning=None, scsi_vendor_id=None, send_alert_to_support=None, smtp_port=None, smtp_server=None, snap_compression_ratio=None, snap_retn_meter_high=None, snap_retn_meter_very_high=None, snap_usage_populated=None, snmp_community=None, snmp_get_enabled=None, snmp_get_port=None, snmp_sys_contact=None, snmp_sys_location=None, snmp_trap_enabled=None, snmp_trap_host=None, snmp_trap_port=None, space_info_valid=None, syslogd_enabled=None, syslogd_port=None, syslogd_server=None, syslogd_servers=None, system_headroom=None, tdz_enabled=None, tdz_prefix=None, timezone=None, tlsv1_enabled=None, uncompressed_snap_usage_bytes=None, uncompressed_vol_usage_bytes=None, unique_name_enabled=None, unused_reserve_bytes=None, update_array_names=None, update_download_end_time=None, update_download_error_code=None, update_download_start_time=None, update_downloading=None, update_end_time=None, update_error_code=None, update_progress_msg=None, update_start_time=None, update_state=None, usable_cache_capacity=None, usable_capacity_bytes=None, usage=None, usage_valid=None, user_inactivity_timeout=None, version_current=None, version_rollback=None, version_target=None, vol_compression_ratio=None, vol_thin_provisioning_ratio=None, volume_migration_status=None, vss_validation_timeout=None, vvol_enabled=None, witness_status=None):  # noqa: E501
        """NimbleStorageSystemDetail - a model defined in OpenAPI"""  # noqa: E501

        self._access_protocol_list = None
        self._alarms_enabled = None
        self._alert_from_email_addr = None
        self._alert_min_level = None
        self._alert_to_email_addrs = None
        self._allow_support_tunnel = None
        self._array_unassign_migration_status = None
        self._arrays = None
        self._associated_links = None
        self._auto_switchover_enabled = None
        self._auto_switchover_messages = None
        self._autoclean_unmanaged_snapshots_enabled = None
        self._autoclean_unmanaged_snapshots_ttl_unit = None
        self._autosupport_enabled = None
        self._cc_mode_enabled = None
        self._clone_ratio = None
        self._compressed_snap_usage_bytes = None
        self._compressed_vol_usage_bytes = None
        self._compression_ratio = None
        self._customer_id = None
        self._data_rebalance_status = None
        self._data_reduction_ratio = None
        self._date = None
        self._dedupe_ratio = None
        self._default_iscsi_target_scope = None
        self._default_snap_limit_percent = None
        self._default_snap_reserve = None
        self._default_snap_warn_level = None
        self._default_volume_limit = None
        self._default_volume_reserve = None
        self._default_volume_warn_level = None
        self._dns_servers = None
        self._domain_name = None
        self._encryption_config = None
        self._failover_mode = None
        self._fc_enabled = None
        self._free_space = None
        self._generation = None
        self._group_snapshot_ttl = None
        self._group_target_enabled = None
        self._group_target_name = None
        self._iscsi_automatic_connection_method = None
        self._iscsi_connection_rebalancing = None
        self._iscsi_enabled = None
        self._isns_enabled = None
        self._isns_port = None
        self._isns_server = None
        self._last_login = None
        self._leader_array_name = None
        self._leader_array_serial = None
        self._management_service_backup_array_name = None
        self._management_service_backup_status = None
        self._member_list = None
        self._merge_group_name = None
        self._merge_state = None
        self._ntp_server = None
        self._num_connections = None
        self._num_snapcolls = None
        self._num_snaps = None
        self._pending_deletes = None
        self._proxy_port = None
        self._proxy_server = None
        self._proxy_username = None
        self._raw_cache_capacity = None
        self._raw_capacity = None
        self._repl_throttle_list = None
        self._repl_throttled_bandwidth = None
        self._repl_throttled_bandwidth_kbps = None
        self._resource_uri = None
        self._savings = None
        self._savings_clone = None
        self._savings_compression = None
        self._savings_data_reduction = None
        self._savings_dedupe = None
        self._savings_ratio = None
        self._savings_vol_thin_provisioning = None
        self._scsi_vendor_id = None
        self._send_alert_to_support = None
        self._smtp_port = None
        self._smtp_server = None
        self._snap_compression_ratio = None
        self._snap_retn_meter_high = None
        self._snap_retn_meter_very_high = None
        self._snap_usage_populated = None
        self._snmp_community = None
        self._snmp_get_enabled = None
        self._snmp_get_port = None
        self._snmp_sys_contact = None
        self._snmp_sys_location = None
        self._snmp_trap_enabled = None
        self._snmp_trap_host = None
        self._snmp_trap_port = None
        self._space_info_valid = None
        self._syslogd_enabled = None
        self._syslogd_port = None
        self._syslogd_server = None
        self._syslogd_servers = None
        self._system_headroom = None
        self._tdz_enabled = None
        self._tdz_prefix = None
        self._timezone = None
        self._tlsv1_enabled = None
        self._uncompressed_snap_usage_bytes = None
        self._uncompressed_vol_usage_bytes = None
        self._unique_name_enabled = None
        self._unused_reserve_bytes = None
        self._update_array_names = None
        self._update_download_end_time = None
        self._update_download_error_code = None
        self._update_download_start_time = None
        self._update_downloading = None
        self._update_end_time = None
        self._update_error_code = None
        self._update_progress_msg = None
        self._update_start_time = None
        self._update_state = None
        self._usable_cache_capacity = None
        self._usable_capacity_bytes = None
        self._usage = None
        self._usage_valid = None
        self._user_inactivity_timeout = None
        self._version_current = None
        self._version_rollback = None
        self._version_target = None
        self._vol_compression_ratio = None
        self._vol_thin_provisioning_ratio = None
        self._volume_migration_status = None
        self._vss_validation_timeout = None
        self._vvol_enabled = None
        self._witness_status = None
        self.discriminator = None

        if access_protocol_list is not None:
            self.access_protocol_list = access_protocol_list
        if alarms_enabled is not None:
            self.alarms_enabled = alarms_enabled
        if alert_from_email_addr is not None:
            self.alert_from_email_addr = alert_from_email_addr
        if alert_min_level is not None:
            self.alert_min_level = alert_min_level
        if alert_to_email_addrs is not None:
            self.alert_to_email_addrs = alert_to_email_addrs
        if allow_support_tunnel is not None:
            self.allow_support_tunnel = allow_support_tunnel
        if array_unassign_migration_status is not None:
            self.array_unassign_migration_status = array_unassign_migration_status
        if arrays is not None:
            self.arrays = arrays
        if associated_links is not None:
            self.associated_links = associated_links
        if auto_switchover_enabled is not None:
            self.auto_switchover_enabled = auto_switchover_enabled
        if auto_switchover_messages is not None:
            self.auto_switchover_messages = auto_switchover_messages
        if autoclean_unmanaged_snapshots_enabled is not None:
            self.autoclean_unmanaged_snapshots_enabled = autoclean_unmanaged_snapshots_enabled
        if autoclean_unmanaged_snapshots_ttl_unit is not None:
            self.autoclean_unmanaged_snapshots_ttl_unit = autoclean_unmanaged_snapshots_ttl_unit
        if autosupport_enabled is not None:
            self.autosupport_enabled = autosupport_enabled
        if cc_mode_enabled is not None:
            self.cc_mode_enabled = cc_mode_enabled
        if clone_ratio is not None:
            self.clone_ratio = clone_ratio
        if compressed_snap_usage_bytes is not None:
            self.compressed_snap_usage_bytes = compressed_snap_usage_bytes
        if compressed_vol_usage_bytes is not None:
            self.compressed_vol_usage_bytes = compressed_vol_usage_bytes
        if compression_ratio is not None:
            self.compression_ratio = compression_ratio
        if customer_id is not None:
            self.customer_id = customer_id
        if data_rebalance_status is not None:
            self.data_rebalance_status = data_rebalance_status
        if data_reduction_ratio is not None:
            self.data_reduction_ratio = data_reduction_ratio
        if date is not None:
            self.date = date
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if default_iscsi_target_scope is not None:
            self.default_iscsi_target_scope = default_iscsi_target_scope
        if default_snap_limit_percent is not None:
            self.default_snap_limit_percent = default_snap_limit_percent
        if default_snap_reserve is not None:
            self.default_snap_reserve = default_snap_reserve
        if default_snap_warn_level is not None:
            self.default_snap_warn_level = default_snap_warn_level
        if default_volume_limit is not None:
            self.default_volume_limit = default_volume_limit
        if default_volume_reserve is not None:
            self.default_volume_reserve = default_volume_reserve
        if default_volume_warn_level is not None:
            self.default_volume_warn_level = default_volume_warn_level
        if dns_servers is not None:
            self.dns_servers = dns_servers
        if domain_name is not None:
            self.domain_name = domain_name
        if encryption_config is not None:
            self.encryption_config = encryption_config
        if failover_mode is not None:
            self.failover_mode = failover_mode
        if fc_enabled is not None:
            self.fc_enabled = fc_enabled
        if free_space is not None:
            self.free_space = free_space
        if generation is not None:
            self.generation = generation
        if group_snapshot_ttl is not None:
            self.group_snapshot_ttl = group_snapshot_ttl
        if group_target_enabled is not None:
            self.group_target_enabled = group_target_enabled
        if group_target_name is not None:
            self.group_target_name = group_target_name
        if iscsi_automatic_connection_method is not None:
            self.iscsi_automatic_connection_method = iscsi_automatic_connection_method
        if iscsi_connection_rebalancing is not None:
            self.iscsi_connection_rebalancing = iscsi_connection_rebalancing
        if iscsi_enabled is not None:
            self.iscsi_enabled = iscsi_enabled
        if isns_enabled is not None:
            self.isns_enabled = isns_enabled
        if isns_port is not None:
            self.isns_port = isns_port
        if isns_server is not None:
            self.isns_server = isns_server
        if last_login is not None:
            self.last_login = last_login
        if leader_array_name is not None:
            self.leader_array_name = leader_array_name
        if leader_array_serial is not None:
            self.leader_array_serial = leader_array_serial
        if management_service_backup_array_name is not None:
            self.management_service_backup_array_name = management_service_backup_array_name
        if management_service_backup_status is not None:
            self.management_service_backup_status = management_service_backup_status
        if member_list is not None:
            self.member_list = member_list
        if merge_group_name is not None:
            self.merge_group_name = merge_group_name
        if merge_state is not None:
            self.merge_state = merge_state
        if ntp_server is not None:
            self.ntp_server = ntp_server
        if num_connections is not None:
            self.num_connections = num_connections
        if num_snapcolls is not None:
            self.num_snapcolls = num_snapcolls
        if num_snaps is not None:
            self.num_snaps = num_snaps
        if pending_deletes is not None:
            self.pending_deletes = pending_deletes
        if proxy_port is not None:
            self.proxy_port = proxy_port
        if proxy_server is not None:
            self.proxy_server = proxy_server
        if proxy_username is not None:
            self.proxy_username = proxy_username
        if raw_cache_capacity is not None:
            self.raw_cache_capacity = raw_cache_capacity
        if raw_capacity is not None:
            self.raw_capacity = raw_capacity
        if repl_throttle_list is not None:
            self.repl_throttle_list = repl_throttle_list
        if repl_throttled_bandwidth is not None:
            self.repl_throttled_bandwidth = repl_throttled_bandwidth
        if repl_throttled_bandwidth_kbps is not None:
            self.repl_throttled_bandwidth_kbps = repl_throttled_bandwidth_kbps
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if savings is not None:
            self.savings = savings
        if savings_clone is not None:
            self.savings_clone = savings_clone
        if savings_compression is not None:
            self.savings_compression = savings_compression
        if savings_data_reduction is not None:
            self.savings_data_reduction = savings_data_reduction
        if savings_dedupe is not None:
            self.savings_dedupe = savings_dedupe
        if savings_ratio is not None:
            self.savings_ratio = savings_ratio
        if savings_vol_thin_provisioning is not None:
            self.savings_vol_thin_provisioning = savings_vol_thin_provisioning
        if scsi_vendor_id is not None:
            self.scsi_vendor_id = scsi_vendor_id
        if send_alert_to_support is not None:
            self.send_alert_to_support = send_alert_to_support
        if smtp_port is not None:
            self.smtp_port = smtp_port
        if smtp_server is not None:
            self.smtp_server = smtp_server
        if snap_compression_ratio is not None:
            self.snap_compression_ratio = snap_compression_ratio
        if snap_retn_meter_high is not None:
            self.snap_retn_meter_high = snap_retn_meter_high
        if snap_retn_meter_very_high is not None:
            self.snap_retn_meter_very_high = snap_retn_meter_very_high
        if snap_usage_populated is not None:
            self.snap_usage_populated = snap_usage_populated
        if snmp_community is not None:
            self.snmp_community = snmp_community
        if snmp_get_enabled is not None:
            self.snmp_get_enabled = snmp_get_enabled
        if snmp_get_port is not None:
            self.snmp_get_port = snmp_get_port
        if snmp_sys_contact is not None:
            self.snmp_sys_contact = snmp_sys_contact
        if snmp_sys_location is not None:
            self.snmp_sys_location = snmp_sys_location
        if snmp_trap_enabled is not None:
            self.snmp_trap_enabled = snmp_trap_enabled
        if snmp_trap_host is not None:
            self.snmp_trap_host = snmp_trap_host
        if snmp_trap_port is not None:
            self.snmp_trap_port = snmp_trap_port
        if space_info_valid is not None:
            self.space_info_valid = space_info_valid
        if syslogd_enabled is not None:
            self.syslogd_enabled = syslogd_enabled
        if syslogd_port is not None:
            self.syslogd_port = syslogd_port
        if syslogd_server is not None:
            self.syslogd_server = syslogd_server
        if syslogd_servers is not None:
            self.syslogd_servers = syslogd_servers
        if system_headroom is not None:
            self.system_headroom = system_headroom
        if tdz_enabled is not None:
            self.tdz_enabled = tdz_enabled
        if tdz_prefix is not None:
            self.tdz_prefix = tdz_prefix
        if timezone is not None:
            self.timezone = timezone
        if tlsv1_enabled is not None:
            self.tlsv1_enabled = tlsv1_enabled
        if uncompressed_snap_usage_bytes is not None:
            self.uncompressed_snap_usage_bytes = uncompressed_snap_usage_bytes
        if uncompressed_vol_usage_bytes is not None:
            self.uncompressed_vol_usage_bytes = uncompressed_vol_usage_bytes
        if unique_name_enabled is not None:
            self.unique_name_enabled = unique_name_enabled
        if unused_reserve_bytes is not None:
            self.unused_reserve_bytes = unused_reserve_bytes
        if update_array_names is not None:
            self.update_array_names = update_array_names
        if update_download_end_time is not None:
            self.update_download_end_time = update_download_end_time
        if update_download_error_code is not None:
            self.update_download_error_code = update_download_error_code
        if update_download_start_time is not None:
            self.update_download_start_time = update_download_start_time
        if update_downloading is not None:
            self.update_downloading = update_downloading
        if update_end_time is not None:
            self.update_end_time = update_end_time
        if update_error_code is not None:
            self.update_error_code = update_error_code
        if update_progress_msg is not None:
            self.update_progress_msg = update_progress_msg
        if update_start_time is not None:
            self.update_start_time = update_start_time
        if update_state is not None:
            self.update_state = update_state
        if usable_cache_capacity is not None:
            self.usable_cache_capacity = usable_cache_capacity
        if usable_capacity_bytes is not None:
            self.usable_capacity_bytes = usable_capacity_bytes
        if usage is not None:
            self.usage = usage
        if usage_valid is not None:
            self.usage_valid = usage_valid
        if user_inactivity_timeout is not None:
            self.user_inactivity_timeout = user_inactivity_timeout
        if version_current is not None:
            self.version_current = version_current
        if version_rollback is not None:
            self.version_rollback = version_rollback
        if version_target is not None:
            self.version_target = version_target
        if vol_compression_ratio is not None:
            self.vol_compression_ratio = vol_compression_ratio
        if vol_thin_provisioning_ratio is not None:
            self.vol_thin_provisioning_ratio = vol_thin_provisioning_ratio
        if volume_migration_status is not None:
            self.volume_migration_status = volume_migration_status
        if vss_validation_timeout is not None:
            self.vss_validation_timeout = vss_validation_timeout
        if vvol_enabled is not None:
            self.vvol_enabled = vvol_enabled
        if witness_status is not None:
            self.witness_status = witness_status

    @property
    def access_protocol_list(self):
        """Gets the access_protocol_list of this NimbleStorageSystemDetail.  # noqa: E501

        Protocol used to access this group. List of access protocols.  # noqa: E501

        :return: The access_protocol_list of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_protocol_list

    @access_protocol_list.setter
    def access_protocol_list(self, access_protocol_list):
        """Sets the access_protocol_list of this NimbleStorageSystemDetail.

        Protocol used to access this group. List of access protocols.  # noqa: E501

        :param access_protocol_list: The access_protocol_list of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._access_protocol_list = access_protocol_list

    @property
    def alarms_enabled(self):
        """Gets the alarms_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether alarm feature is enabled.  # noqa: E501

        :return: The alarms_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._alarms_enabled

    @alarms_enabled.setter
    def alarms_enabled(self, alarms_enabled):
        """Sets the alarms_enabled of this NimbleStorageSystemDetail.

        Whether alarm feature is enabled.  # noqa: E501

        :param alarms_enabled: The alarms_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._alarms_enabled = alarms_enabled

    @property
    def alert_from_email_addr(self):
        """Gets the alert_from_email_addr of this NimbleStorageSystemDetail.  # noqa: E501

        From email address to use while sending emails. Case insensitive email address.  # noqa: E501

        :return: The alert_from_email_addr of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._alert_from_email_addr

    @alert_from_email_addr.setter
    def alert_from_email_addr(self, alert_from_email_addr):
        """Sets the alert_from_email_addr of this NimbleStorageSystemDetail.

        From email address to use while sending emails. Case insensitive email address.  # noqa: E501

        :param alert_from_email_addr: The alert_from_email_addr of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._alert_from_email_addr = alert_from_email_addr

    @property
    def alert_min_level(self):
        """Gets the alert_min_level of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The alert_min_level of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._alert_min_level

    @alert_min_level.setter
    def alert_min_level(self, alert_min_level):
        """Sets the alert_min_level of this NimbleStorageSystemDetail.


        :param alert_min_level: The alert_min_level of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._alert_min_level = alert_min_level

    @property
    def alert_to_email_addrs(self):
        """Gets the alert_to_email_addrs of this NimbleStorageSystemDetail.  # noqa: E501

        Comma-separated list of email addresss to receive emails. Comma separated email list.  # noqa: E501

        :return: The alert_to_email_addrs of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._alert_to_email_addrs

    @alert_to_email_addrs.setter
    def alert_to_email_addrs(self, alert_to_email_addrs):
        """Sets the alert_to_email_addrs of this NimbleStorageSystemDetail.

        Comma-separated list of email addresss to receive emails. Comma separated email list.  # noqa: E501

        :param alert_to_email_addrs: The alert_to_email_addrs of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._alert_to_email_addrs = alert_to_email_addrs

    @property
    def allow_support_tunnel(self):
        """Gets the allow_support_tunnel of this NimbleStorageSystemDetail.  # noqa: E501

        Whether to allow support tunnel.  # noqa: E501

        :return: The allow_support_tunnel of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._allow_support_tunnel

    @allow_support_tunnel.setter
    def allow_support_tunnel(self, allow_support_tunnel):
        """Sets the allow_support_tunnel of this NimbleStorageSystemDetail.

        Whether to allow support tunnel.  # noqa: E501

        :param allow_support_tunnel: The allow_support_tunnel of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._allow_support_tunnel = allow_support_tunnel

    @property
    def array_unassign_migration_status(self):
        """Gets the array_unassign_migration_status of this NimbleStorageSystemDetail.  # noqa: E501

        Data migration status for arrays being removed from their pool. Data migration status information for arrays being unassigned from their pool.  # noqa: E501

        :return: The array_unassign_migration_status of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[ArrayUnassignMigStatus]
        """
        return self._array_unassign_migration_status

    @array_unassign_migration_status.setter
    def array_unassign_migration_status(self, array_unassign_migration_status):
        """Sets the array_unassign_migration_status of this NimbleStorageSystemDetail.

        Data migration status for arrays being removed from their pool. Data migration status information for arrays being unassigned from their pool.  # noqa: E501

        :param array_unassign_migration_status: The array_unassign_migration_status of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[ArrayUnassignMigStatus]
        """

        self._array_unassign_migration_status = array_unassign_migration_status

    @property
    def arrays(self):
        """Gets the arrays of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The arrays of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: NimbleArrayList
        """
        return self._arrays

    @arrays.setter
    def arrays(self, arrays):
        """Sets the arrays of this NimbleStorageSystemDetail.


        :param arrays: The arrays of this NimbleStorageSystemDetail.  # noqa: E501
        :type: NimbleArrayList
        """

        self._arrays = arrays

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The associated_links of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: GroupAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleStorageSystemDetail.


        :param associated_links: The associated_links of this NimbleStorageSystemDetail.  # noqa: E501
        :type: GroupAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def auto_switchover_enabled(self):
        """Gets the auto_switchover_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether automatic switchover of Group management services feature is enabled.  # noqa: E501

        :return: The auto_switchover_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._auto_switchover_enabled

    @auto_switchover_enabled.setter
    def auto_switchover_enabled(self, auto_switchover_enabled):
        """Sets the auto_switchover_enabled of this NimbleStorageSystemDetail.

        Whether automatic switchover of Group management services feature is enabled.  # noqa: E501

        :param auto_switchover_enabled: The auto_switchover_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._auto_switchover_enabled = auto_switchover_enabled

    @property
    def auto_switchover_messages(self):
        """Gets the auto_switchover_messages of this NimbleStorageSystemDetail.  # noqa: E501

        List of validation messages for automatic switchover of Group Management. This will be empty when there are no conflicts found.  # noqa: E501

        :return: The auto_switchover_messages of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[NimbleErrorWithArguments]
        """
        return self._auto_switchover_messages

    @auto_switchover_messages.setter
    def auto_switchover_messages(self, auto_switchover_messages):
        """Sets the auto_switchover_messages of this NimbleStorageSystemDetail.

        List of validation messages for automatic switchover of Group Management. This will be empty when there are no conflicts found.  # noqa: E501

        :param auto_switchover_messages: The auto_switchover_messages of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[NimbleErrorWithArguments]
        """

        self._auto_switchover_messages = auto_switchover_messages

    @property
    def autoclean_unmanaged_snapshots_enabled(self):
        """Gets the autoclean_unmanaged_snapshots_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether auto-clean unmanaged snapshots feature is enabled.  # noqa: E501

        :return: The autoclean_unmanaged_snapshots_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._autoclean_unmanaged_snapshots_enabled

    @autoclean_unmanaged_snapshots_enabled.setter
    def autoclean_unmanaged_snapshots_enabled(self, autoclean_unmanaged_snapshots_enabled):
        """Sets the autoclean_unmanaged_snapshots_enabled of this NimbleStorageSystemDetail.

        Whether auto-clean unmanaged snapshots feature is enabled.  # noqa: E501

        :param autoclean_unmanaged_snapshots_enabled: The autoclean_unmanaged_snapshots_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._autoclean_unmanaged_snapshots_enabled = autoclean_unmanaged_snapshots_enabled

    @property
    def autoclean_unmanaged_snapshots_ttl_unit(self):
        """Gets the autoclean_unmanaged_snapshots_ttl_unit of this NimbleStorageSystemDetail.  # noqa: E501

        Deprecated. Unit for unmanaged snapshot time to live.  # noqa: E501

        :return: The autoclean_unmanaged_snapshots_ttl_unit of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._autoclean_unmanaged_snapshots_ttl_unit

    @autoclean_unmanaged_snapshots_ttl_unit.setter
    def autoclean_unmanaged_snapshots_ttl_unit(self, autoclean_unmanaged_snapshots_ttl_unit):
        """Sets the autoclean_unmanaged_snapshots_ttl_unit of this NimbleStorageSystemDetail.

        Deprecated. Unit for unmanaged snapshot time to live.  # noqa: E501

        :param autoclean_unmanaged_snapshots_ttl_unit: The autoclean_unmanaged_snapshots_ttl_unit of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._autoclean_unmanaged_snapshots_ttl_unit = autoclean_unmanaged_snapshots_ttl_unit

    @property
    def autosupport_enabled(self):
        """Gets the autosupport_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether to send autosupport.  # noqa: E501

        :return: The autosupport_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._autosupport_enabled

    @autosupport_enabled.setter
    def autosupport_enabled(self, autosupport_enabled):
        """Sets the autosupport_enabled of this NimbleStorageSystemDetail.

        Whether to send autosupport.  # noqa: E501

        :param autosupport_enabled: The autosupport_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._autosupport_enabled = autosupport_enabled

    @property
    def cc_mode_enabled(self):
        """Gets the cc_mode_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Enable or disable Common Criteria mode.  # noqa: E501

        :return: The cc_mode_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._cc_mode_enabled

    @cc_mode_enabled.setter
    def cc_mode_enabled(self, cc_mode_enabled):
        """Sets the cc_mode_enabled of this NimbleStorageSystemDetail.

        Enable or disable Common Criteria mode.  # noqa: E501

        :param cc_mode_enabled: The cc_mode_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._cc_mode_enabled = cc_mode_enabled

    @property
    def clone_ratio(self):
        """Gets the clone_ratio of this NimbleStorageSystemDetail.  # noqa: E501

        Clone savings for the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The clone_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._clone_ratio

    @clone_ratio.setter
    def clone_ratio(self, clone_ratio):
        """Sets the clone_ratio of this NimbleStorageSystemDetail.

        Clone savings for the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param clone_ratio: The clone_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :type: float
        """

        self._clone_ratio = clone_ratio

    @property
    def compressed_snap_usage_bytes(self):
        """Gets the compressed_snap_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501

        Compressed usage of snapshots in the group.  # noqa: E501

        :return: The compressed_snap_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._compressed_snap_usage_bytes

    @compressed_snap_usage_bytes.setter
    def compressed_snap_usage_bytes(self, compressed_snap_usage_bytes):
        """Sets the compressed_snap_usage_bytes of this NimbleStorageSystemDetail.

        Compressed usage of snapshots in the group.  # noqa: E501

        :param compressed_snap_usage_bytes: The compressed_snap_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._compressed_snap_usage_bytes = compressed_snap_usage_bytes

    @property
    def compressed_vol_usage_bytes(self):
        """Gets the compressed_vol_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501

        Compressed usage of volumes in the group.  # noqa: E501

        :return: The compressed_vol_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._compressed_vol_usage_bytes

    @compressed_vol_usage_bytes.setter
    def compressed_vol_usage_bytes(self, compressed_vol_usage_bytes):
        """Sets the compressed_vol_usage_bytes of this NimbleStorageSystemDetail.

        Compressed usage of volumes in the group.  # noqa: E501

        :param compressed_vol_usage_bytes: The compressed_vol_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._compressed_vol_usage_bytes = compressed_vol_usage_bytes

    @property
    def compression_ratio(self):
        """Gets the compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501

        Compression savings for the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._compression_ratio

    @compression_ratio.setter
    def compression_ratio(self, compression_ratio):
        """Sets the compression_ratio of this NimbleStorageSystemDetail.

        Compression savings for the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param compression_ratio: The compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :type: float
        """

        self._compression_ratio = compression_ratio

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleStorageSystemDetail.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleStorageSystemDetail.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def data_rebalance_status(self):
        """Gets the data_rebalance_status of this NimbleStorageSystemDetail.  # noqa: E501

        Status of data rebalancing operations for pools in the group. Status of data re-balancing operations for a list of pools.  # noqa: E501

        :return: The data_rebalance_status of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[PoolRebalanceMigStatus]
        """
        return self._data_rebalance_status

    @data_rebalance_status.setter
    def data_rebalance_status(self, data_rebalance_status):
        """Sets the data_rebalance_status of this NimbleStorageSystemDetail.

        Status of data rebalancing operations for pools in the group. Status of data re-balancing operations for a list of pools.  # noqa: E501

        :param data_rebalance_status: The data_rebalance_status of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[PoolRebalanceMigStatus]
        """

        self._data_rebalance_status = data_rebalance_status

    @property
    def data_reduction_ratio(self):
        """Gets the data_reduction_ratio of this NimbleStorageSystemDetail.  # noqa: E501

        Space savings in the group that does not include thin-provisioning savings expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The data_reduction_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._data_reduction_ratio

    @data_reduction_ratio.setter
    def data_reduction_ratio(self, data_reduction_ratio):
        """Sets the data_reduction_ratio of this NimbleStorageSystemDetail.

        Space savings in the group that does not include thin-provisioning savings expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param data_reduction_ratio: The data_reduction_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :type: float
        """

        self._data_reduction_ratio = data_reduction_ratio

    @property
    def date(self):
        """Gets the date of this NimbleStorageSystemDetail.  # noqa: E501

        Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The date of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this NimbleStorageSystemDetail.

        Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param date: The date of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._date = date

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this NimbleStorageSystemDetail.  # noqa: E501

        Dedupe savings for the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The dedupe_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this NimbleStorageSystemDetail.

        Dedupe savings for the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def default_iscsi_target_scope(self):
        """Gets the default_iscsi_target_scope of this NimbleStorageSystemDetail.  # noqa: E501

        Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target.  # noqa: E501

        :return: The default_iscsi_target_scope of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._default_iscsi_target_scope

    @default_iscsi_target_scope.setter
    def default_iscsi_target_scope(self, default_iscsi_target_scope):
        """Sets the default_iscsi_target_scope of this NimbleStorageSystemDetail.

        Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target.  # noqa: E501

        :param default_iscsi_target_scope: The default_iscsi_target_scope of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._default_iscsi_target_scope = default_iscsi_target_scope

    @property
    def default_snap_limit_percent(self):
        """Gets the default_snap_limit_percent of this NimbleStorageSystemDetail.  # noqa: E501

        Default limit for a volumes snapshot space usage, expressed either as a percentage of the volumes size or as -1 to indicate that there is no limit. A volume will be taken offline or made non-writable upon exceeding its snapshot limit. Signed 64-bit integer.  # noqa: E501

        :return: The default_snap_limit_percent of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._default_snap_limit_percent

    @default_snap_limit_percent.setter
    def default_snap_limit_percent(self, default_snap_limit_percent):
        """Sets the default_snap_limit_percent of this NimbleStorageSystemDetail.

        Default limit for a volumes snapshot space usage, expressed either as a percentage of the volumes size or as -1 to indicate that there is no limit. A volume will be taken offline or made non-writable upon exceeding its snapshot limit. Signed 64-bit integer.  # noqa: E501

        :param default_snap_limit_percent: The default_snap_limit_percent of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._default_snap_limit_percent = default_snap_limit_percent

    @property
    def default_snap_reserve(self):
        """Gets the default_snap_reserve of this NimbleStorageSystemDetail.  # noqa: E501

        Amount of space to reserve for snapshots of a volume as a percentage of volume size.  # noqa: E501

        :return: The default_snap_reserve of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._default_snap_reserve

    @default_snap_reserve.setter
    def default_snap_reserve(self, default_snap_reserve):
        """Sets the default_snap_reserve of this NimbleStorageSystemDetail.

        Amount of space to reserve for snapshots of a volume as a percentage of volume size.  # noqa: E501

        :param default_snap_reserve: The default_snap_reserve of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._default_snap_reserve = default_snap_reserve

    @property
    def default_snap_warn_level(self):
        """Gets the default_snap_warn_level of this NimbleStorageSystemDetail.  # noqa: E501

        Default threshold for snapshot space usage of a volume as a percentage of volume size above which an alert is raised.  # noqa: E501

        :return: The default_snap_warn_level of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._default_snap_warn_level

    @default_snap_warn_level.setter
    def default_snap_warn_level(self, default_snap_warn_level):
        """Sets the default_snap_warn_level of this NimbleStorageSystemDetail.

        Default threshold for snapshot space usage of a volume as a percentage of volume size above which an alert is raised.  # noqa: E501

        :param default_snap_warn_level: The default_snap_warn_level of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._default_snap_warn_level = default_snap_warn_level

    @property
    def default_volume_limit(self):
        """Gets the default_volume_limit of this NimbleStorageSystemDetail.  # noqa: E501

        Default limit for a volume space usage as a percentage of volume size. Volume will be taken offline/made non-writable on exceeding its limit. Percentage as integer from 0 to 100.  # noqa: E501

        :return: The default_volume_limit of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._default_volume_limit

    @default_volume_limit.setter
    def default_volume_limit(self, default_volume_limit):
        """Sets the default_volume_limit of this NimbleStorageSystemDetail.

        Default limit for a volume space usage as a percentage of volume size. Volume will be taken offline/made non-writable on exceeding its limit. Percentage as integer from 0 to 100.  # noqa: E501

        :param default_volume_limit: The default_volume_limit of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._default_volume_limit = default_volume_limit

    @property
    def default_volume_reserve(self):
        """Gets the default_volume_reserve of this NimbleStorageSystemDetail.  # noqa: E501

        Amount of space to reserve for a volume as a percentage of volume size. Percentage as integer from 0 to 100.  # noqa: E501

        :return: The default_volume_reserve of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._default_volume_reserve

    @default_volume_reserve.setter
    def default_volume_reserve(self, default_volume_reserve):
        """Sets the default_volume_reserve of this NimbleStorageSystemDetail.

        Amount of space to reserve for a volume as a percentage of volume size. Percentage as integer from 0 to 100.  # noqa: E501

        :param default_volume_reserve: The default_volume_reserve of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._default_volume_reserve = default_volume_reserve

    @property
    def default_volume_warn_level(self):
        """Gets the default_volume_warn_level of this NimbleStorageSystemDetail.  # noqa: E501

        Default threshold for volume space usage as a percentage of volume size above which an alert is raised. Percentage as integer from 0 to 100.  # noqa: E501

        :return: The default_volume_warn_level of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._default_volume_warn_level

    @default_volume_warn_level.setter
    def default_volume_warn_level(self, default_volume_warn_level):
        """Sets the default_volume_warn_level of this NimbleStorageSystemDetail.

        Default threshold for volume space usage as a percentage of volume size above which an alert is raised. Percentage as integer from 0 to 100.  # noqa: E501

        :param default_volume_warn_level: The default_volume_warn_level of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._default_volume_warn_level = default_volume_warn_level

    @property
    def dns_servers(self):
        """Gets the dns_servers of this NimbleStorageSystemDetail.  # noqa: E501

        IP addresses for this groups dns servers. List of IP Addresses.  # noqa: E501

        :return: The dns_servers of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[IPAddressObject]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this NimbleStorageSystemDetail.

        IP addresses for this groups dns servers. List of IP Addresses.  # noqa: E501

        :param dns_servers: The dns_servers of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[IPAddressObject]
        """

        self._dns_servers = dns_servers

    @property
    def domain_name(self):
        """Gets the domain_name of this NimbleStorageSystemDetail.  # noqa: E501

        Domain name for this group. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The domain_name of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this NimbleStorageSystemDetail.

        Domain name for this group. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param domain_name: The domain_name of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def encryption_config(self):
        """Gets the encryption_config of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The encryption_config of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: EncryptionSettings
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this NimbleStorageSystemDetail.


        :param encryption_config: The encryption_config of this NimbleStorageSystemDetail.  # noqa: E501
        :type: EncryptionSettings
        """

        self._encryption_config = encryption_config

    @property
    def failover_mode(self):
        """Gets the failover_mode of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The failover_mode of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._failover_mode

    @failover_mode.setter
    def failover_mode(self, failover_mode):
        """Sets the failover_mode of this NimbleStorageSystemDetail.


        :param failover_mode: The failover_mode of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._failover_mode = failover_mode

    @property
    def fc_enabled(self):
        """Gets the fc_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether FC is enabled on this group.  # noqa: E501

        :return: The fc_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._fc_enabled

    @fc_enabled.setter
    def fc_enabled(self, fc_enabled):
        """Sets the fc_enabled of this NimbleStorageSystemDetail.

        Whether FC is enabled on this group.  # noqa: E501

        :param fc_enabled: The fc_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._fc_enabled = fc_enabled

    @property
    def free_space(self):
        """Gets the free_space of this NimbleStorageSystemDetail.  # noqa: E501

        Free space of the pool in bytes.  # noqa: E501

        :return: The free_space of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._free_space

    @free_space.setter
    def free_space(self, free_space):
        """Sets the free_space of this NimbleStorageSystemDetail.

        Free space of the pool in bytes.  # noqa: E501

        :param free_space: The free_space of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._free_space = free_space

    @property
    def generation(self):
        """Gets the generation of this NimbleStorageSystemDetail.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleStorageSystemDetail.

        generation  # noqa: E501

        :param generation: The generation of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def group_snapshot_ttl(self):
        """Gets the group_snapshot_ttl of this NimbleStorageSystemDetail.  # noqa: E501

        Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL.  # noqa: E501

        :return: The group_snapshot_ttl of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._group_snapshot_ttl

    @group_snapshot_ttl.setter
    def group_snapshot_ttl(self, group_snapshot_ttl):
        """Sets the group_snapshot_ttl of this NimbleStorageSystemDetail.

        Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL.  # noqa: E501

        :param group_snapshot_ttl: The group_snapshot_ttl of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._group_snapshot_ttl = group_snapshot_ttl

    @property
    def group_target_enabled(self):
        """Gets the group_target_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Is group_target enabled on this group.  # noqa: E501

        :return: The group_target_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._group_target_enabled

    @group_target_enabled.setter
    def group_target_enabled(self, group_target_enabled):
        """Sets the group_target_enabled of this NimbleStorageSystemDetail.

        Is group_target enabled on this group.  # noqa: E501

        :param group_target_enabled: The group_target_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._group_target_enabled = group_target_enabled

    @property
    def group_target_name(self):
        """Gets the group_target_name of this NimbleStorageSystemDetail.  # noqa: E501

        Iscsi target name for this group. Plain string.  # noqa: E501

        :return: The group_target_name of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._group_target_name

    @group_target_name.setter
    def group_target_name(self, group_target_name):
        """Sets the group_target_name of this NimbleStorageSystemDetail.

        Iscsi target name for this group. Plain string.  # noqa: E501

        :param group_target_name: The group_target_name of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._group_target_name = group_target_name

    @property
    def iscsi_automatic_connection_method(self):
        """Gets the iscsi_automatic_connection_method of this NimbleStorageSystemDetail.  # noqa: E501

        Is iscsi reconnection automatic.  # noqa: E501

        :return: The iscsi_automatic_connection_method of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_automatic_connection_method

    @iscsi_automatic_connection_method.setter
    def iscsi_automatic_connection_method(self, iscsi_automatic_connection_method):
        """Sets the iscsi_automatic_connection_method of this NimbleStorageSystemDetail.

        Is iscsi reconnection automatic.  # noqa: E501

        :param iscsi_automatic_connection_method: The iscsi_automatic_connection_method of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._iscsi_automatic_connection_method = iscsi_automatic_connection_method

    @property
    def iscsi_connection_rebalancing(self):
        """Gets the iscsi_connection_rebalancing of this NimbleStorageSystemDetail.  # noqa: E501

        Does ISCSI automatically rebalance connections.  # noqa: E501

        :return: The iscsi_connection_rebalancing of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_connection_rebalancing

    @iscsi_connection_rebalancing.setter
    def iscsi_connection_rebalancing(self, iscsi_connection_rebalancing):
        """Sets the iscsi_connection_rebalancing of this NimbleStorageSystemDetail.

        Does ISCSI automatically rebalance connections.  # noqa: E501

        :param iscsi_connection_rebalancing: The iscsi_connection_rebalancing of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._iscsi_connection_rebalancing = iscsi_connection_rebalancing

    @property
    def iscsi_enabled(self):
        """Gets the iscsi_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether iSCSI is enabled on this group.  # noqa: E501

        :return: The iscsi_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_enabled

    @iscsi_enabled.setter
    def iscsi_enabled(self, iscsi_enabled):
        """Sets the iscsi_enabled of this NimbleStorageSystemDetail.

        Whether iSCSI is enabled on this group.  # noqa: E501

        :param iscsi_enabled: The iscsi_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._iscsi_enabled = iscsi_enabled

    @property
    def isns_enabled(self):
        """Gets the isns_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether iSNS is enabled.  # noqa: E501

        :return: The isns_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._isns_enabled

    @isns_enabled.setter
    def isns_enabled(self, isns_enabled):
        """Sets the isns_enabled of this NimbleStorageSystemDetail.

        Whether iSNS is enabled.  # noqa: E501

        :param isns_enabled: The isns_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._isns_enabled = isns_enabled

    @property
    def isns_port(self):
        """Gets the isns_port of this NimbleStorageSystemDetail.  # noqa: E501

        Port number for iSNS Server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The isns_port of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._isns_port

    @isns_port.setter
    def isns_port(self, isns_port):
        """Sets the isns_port of this NimbleStorageSystemDetail.

        Port number for iSNS Server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param isns_port: The isns_port of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._isns_port = isns_port

    @property
    def isns_server(self):
        """Gets the isns_server of this NimbleStorageSystemDetail.  # noqa: E501

        Hostname or IP Address of iSNS Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The isns_server of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._isns_server

    @isns_server.setter
    def isns_server(self, isns_server):
        """Sets the isns_server of this NimbleStorageSystemDetail.

        Hostname or IP Address of iSNS Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param isns_server: The isns_server of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._isns_server = isns_server

    @property
    def last_login(self):
        """Gets the last_login of this NimbleStorageSystemDetail.  # noqa: E501

        Time and user of last login to this group. Plain string.  # noqa: E501

        :return: The last_login of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this NimbleStorageSystemDetail.

        Time and user of last login to this group. Plain string.  # noqa: E501

        :param last_login: The last_login of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._last_login = last_login

    @property
    def leader_array_name(self):
        """Gets the leader_array_name of this NimbleStorageSystemDetail.  # noqa: E501

        Name of the array where the group Management Service is running.  # noqa: E501

        :return: The leader_array_name of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._leader_array_name

    @leader_array_name.setter
    def leader_array_name(self, leader_array_name):
        """Sets the leader_array_name of this NimbleStorageSystemDetail.

        Name of the array where the group Management Service is running.  # noqa: E501

        :param leader_array_name: The leader_array_name of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._leader_array_name = leader_array_name

    @property
    def leader_array_serial(self):
        """Gets the leader_array_serial of this NimbleStorageSystemDetail.  # noqa: E501

        Serial number of the array where the group Management Service is running.  # noqa: E501

        :return: The leader_array_serial of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._leader_array_serial

    @leader_array_serial.setter
    def leader_array_serial(self, leader_array_serial):
        """Sets the leader_array_serial of this NimbleStorageSystemDetail.

        Serial number of the array where the group Management Service is running.  # noqa: E501

        :param leader_array_serial: The leader_array_serial of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._leader_array_serial = leader_array_serial

    @property
    def management_service_backup_array_name(self):
        """Gets the management_service_backup_array_name of this NimbleStorageSystemDetail.  # noqa: E501

        Name of the array where backup the group Management Service is running.  # noqa: E501

        :return: The management_service_backup_array_name of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._management_service_backup_array_name

    @management_service_backup_array_name.setter
    def management_service_backup_array_name(self, management_service_backup_array_name):
        """Sets the management_service_backup_array_name of this NimbleStorageSystemDetail.

        Name of the array where backup the group Management Service is running.  # noqa: E501

        :param management_service_backup_array_name: The management_service_backup_array_name of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._management_service_backup_array_name = management_service_backup_array_name

    @property
    def management_service_backup_status(self):
        """Gets the management_service_backup_status of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The management_service_backup_status of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._management_service_backup_status

    @management_service_backup_status.setter
    def management_service_backup_status(self, management_service_backup_status):
        """Sets the management_service_backup_status of this NimbleStorageSystemDetail.


        :param management_service_backup_status: The management_service_backup_status of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._management_service_backup_status = management_service_backup_status

    @property
    def member_list(self):
        """Gets the member_list of this NimbleStorageSystemDetail.  # noqa: E501

        Members of this group. A list of object names.  # noqa: E501

        :return: The member_list of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_list

    @member_list.setter
    def member_list(self, member_list):
        """Sets the member_list of this NimbleStorageSystemDetail.

        Members of this group. A list of object names.  # noqa: E501

        :param member_list: The member_list of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._member_list = member_list

    @property
    def merge_group_name(self):
        """Gets the merge_group_name of this NimbleStorageSystemDetail.  # noqa: E501

        Group that were being merged with. Plain string.  # noqa: E501

        :return: The merge_group_name of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._merge_group_name

    @merge_group_name.setter
    def merge_group_name(self, merge_group_name):
        """Sets the merge_group_name of this NimbleStorageSystemDetail.

        Group that were being merged with. Plain string.  # noqa: E501

        :param merge_group_name: The merge_group_name of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._merge_group_name = merge_group_name

    @property
    def merge_state(self):
        """Gets the merge_state of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The merge_state of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._merge_state

    @merge_state.setter
    def merge_state(self, merge_state):
        """Sets the merge_state of this NimbleStorageSystemDetail.


        :param merge_state: The merge_state of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._merge_state = merge_state

    @property
    def ntp_server(self):
        """Gets the ntp_server of this NimbleStorageSystemDetail.  # noqa: E501

        Either IP address or hostname of the NTP server for this group. Plain string.  # noqa: E501

        :return: The ntp_server of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._ntp_server

    @ntp_server.setter
    def ntp_server(self, ntp_server):
        """Sets the ntp_server of this NimbleStorageSystemDetail.

        Either IP address or hostname of the NTP server for this group. Plain string.  # noqa: E501

        :param ntp_server: The ntp_server of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._ntp_server = ntp_server

    @property
    def num_connections(self):
        """Gets the num_connections of this NimbleStorageSystemDetail.  # noqa: E501

        Number of connections to the group.  # noqa: E501

        :return: The num_connections of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._num_connections

    @num_connections.setter
    def num_connections(self, num_connections):
        """Sets the num_connections of this NimbleStorageSystemDetail.

        Number of connections to the group.  # noqa: E501

        :param num_connections: The num_connections of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._num_connections = num_connections

    @property
    def num_snapcolls(self):
        """Gets the num_snapcolls of this NimbleStorageSystemDetail.  # noqa: E501

        Number of snapshot collections in this group.  # noqa: E501

        :return: The num_snapcolls of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._num_snapcolls

    @num_snapcolls.setter
    def num_snapcolls(self, num_snapcolls):
        """Sets the num_snapcolls of this NimbleStorageSystemDetail.

        Number of snapshot collections in this group.  # noqa: E501

        :param num_snapcolls: The num_snapcolls of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._num_snapcolls = num_snapcolls

    @property
    def num_snaps(self):
        """Gets the num_snaps of this NimbleStorageSystemDetail.  # noqa: E501

        Number of snapshots in the group.  # noqa: E501

        :return: The num_snaps of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._num_snaps

    @num_snaps.setter
    def num_snaps(self, num_snaps):
        """Sets the num_snaps of this NimbleStorageSystemDetail.

        Number of snapshots in the group.  # noqa: E501

        :param num_snaps: The num_snaps of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._num_snaps = num_snaps

    @property
    def pending_deletes(self):
        """Gets the pending_deletes of this NimbleStorageSystemDetail.  # noqa: E501

        Usage for blocks that are not yet deleted.  # noqa: E501

        :return: The pending_deletes of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._pending_deletes

    @pending_deletes.setter
    def pending_deletes(self, pending_deletes):
        """Sets the pending_deletes of this NimbleStorageSystemDetail.

        Usage for blocks that are not yet deleted.  # noqa: E501

        :param pending_deletes: The pending_deletes of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._pending_deletes = pending_deletes

    @property
    def proxy_port(self):
        """Gets the proxy_port of this NimbleStorageSystemDetail.  # noqa: E501

        Proxy Port of HTTP Proxy Server. Integer value between 0-65535 representing TCP/IP port.  # noqa: E501

        :return: The proxy_port of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """Sets the proxy_port of this NimbleStorageSystemDetail.

        Proxy Port of HTTP Proxy Server. Integer value between 0-65535 representing TCP/IP port.  # noqa: E501

        :param proxy_port: The proxy_port of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._proxy_port = proxy_port

    @property
    def proxy_server(self):
        """Gets the proxy_server of this NimbleStorageSystemDetail.  # noqa: E501

        Hostname or IP Address of HTTP Proxy Server. Setting this attribute to an empty string will unset all proxy settings. String of alphanumeric characters, can be an empty string, or valid range must be from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The proxy_server of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server

    @proxy_server.setter
    def proxy_server(self, proxy_server):
        """Sets the proxy_server of this NimbleStorageSystemDetail.

        Hostname or IP Address of HTTP Proxy Server. Setting this attribute to an empty string will unset all proxy settings. String of alphanumeric characters, can be an empty string, or valid range must be from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param proxy_server: The proxy_server of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._proxy_server = proxy_server

    @property
    def proxy_username(self):
        """Gets the proxy_username of this NimbleStorageSystemDetail.  # noqa: E501

        Username to authenticate with HTTP Proxy Server. HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.  # noqa: E501

        :return: The proxy_username of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._proxy_username

    @proxy_username.setter
    def proxy_username(self, proxy_username):
        """Sets the proxy_username of this NimbleStorageSystemDetail.

        Username to authenticate with HTTP Proxy Server. HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.  # noqa: E501

        :param proxy_username: The proxy_username of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._proxy_username = proxy_username

    @property
    def raw_cache_capacity(self):
        """Gets the raw_cache_capacity of this NimbleStorageSystemDetail.  # noqa: E501

        Total cache capacity of the group.  # noqa: E501

        :return: The raw_cache_capacity of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._raw_cache_capacity

    @raw_cache_capacity.setter
    def raw_cache_capacity(self, raw_cache_capacity):
        """Sets the raw_cache_capacity of this NimbleStorageSystemDetail.

        Total cache capacity of the group.  # noqa: E501

        :param raw_cache_capacity: The raw_cache_capacity of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._raw_cache_capacity = raw_cache_capacity

    @property
    def raw_capacity(self):
        """Gets the raw_capacity of this NimbleStorageSystemDetail.  # noqa: E501

        Total capacity of the group.  # noqa: E501

        :return: The raw_capacity of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._raw_capacity

    @raw_capacity.setter
    def raw_capacity(self, raw_capacity):
        """Sets the raw_capacity of this NimbleStorageSystemDetail.

        Total capacity of the group.  # noqa: E501

        :param raw_capacity: The raw_capacity of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._raw_capacity = raw_capacity

    @property
    def repl_throttle_list(self):
        """Gets the repl_throttle_list of this NimbleStorageSystemDetail.  # noqa: E501

        All the replication bandwidth limits on the system. All the throttles for the partner.  # noqa: E501

        :return: The repl_throttle_list of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[Throttle]
        """
        return self._repl_throttle_list

    @repl_throttle_list.setter
    def repl_throttle_list(self, repl_throttle_list):
        """Sets the repl_throttle_list of this NimbleStorageSystemDetail.

        All the replication bandwidth limits on the system. All the throttles for the partner.  # noqa: E501

        :param repl_throttle_list: The repl_throttle_list of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[Throttle]
        """

        self._repl_throttle_list = repl_throttle_list

    @property
    def repl_throttled_bandwidth(self):
        """Gets the repl_throttled_bandwidth of this NimbleStorageSystemDetail.  # noqa: E501

        Current bandwidth throttle for replication, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.  # noqa: E501

        :return: The repl_throttled_bandwidth of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._repl_throttled_bandwidth

    @repl_throttled_bandwidth.setter
    def repl_throttled_bandwidth(self, repl_throttled_bandwidth):
        """Sets the repl_throttled_bandwidth of this NimbleStorageSystemDetail.

        Current bandwidth throttle for replication, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.  # noqa: E501

        :param repl_throttled_bandwidth: The repl_throttled_bandwidth of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._repl_throttled_bandwidth = repl_throttled_bandwidth

    @property
    def repl_throttled_bandwidth_kbps(self):
        """Gets the repl_throttled_bandwidth_kbps of this NimbleStorageSystemDetail.  # noqa: E501

        Current bandwidth throttle for replication, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.  # noqa: E501

        :return: The repl_throttled_bandwidth_kbps of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._repl_throttled_bandwidth_kbps

    @repl_throttled_bandwidth_kbps.setter
    def repl_throttled_bandwidth_kbps(self, repl_throttled_bandwidth_kbps):
        """Sets the repl_throttled_bandwidth_kbps of this NimbleStorageSystemDetail.

        Current bandwidth throttle for replication, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.  # noqa: E501

        :param repl_throttled_bandwidth_kbps: The repl_throttled_bandwidth_kbps of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._repl_throttled_bandwidth_kbps = repl_throttled_bandwidth_kbps

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The resource_uri of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleStorageSystemDetail.


        :param resource_uri: The resource_uri of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def savings(self):
        """Gets the savings of this NimbleStorageSystemDetail.  # noqa: E501

        Overall space usage savings in the group.  # noqa: E501

        :return: The savings of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this NimbleStorageSystemDetail.

        Overall space usage savings in the group.  # noqa: E501

        :param savings: The savings of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._savings = savings

    @property
    def savings_clone(self):
        """Gets the savings_clone of this NimbleStorageSystemDetail.  # noqa: E501

        Space usage savings in the group due to cloning of volumes.  # noqa: E501

        :return: The savings_clone of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._savings_clone

    @savings_clone.setter
    def savings_clone(self, savings_clone):
        """Sets the savings_clone of this NimbleStorageSystemDetail.

        Space usage savings in the group due to cloning of volumes.  # noqa: E501

        :param savings_clone: The savings_clone of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._savings_clone = savings_clone

    @property
    def savings_compression(self):
        """Gets the savings_compression of this NimbleStorageSystemDetail.  # noqa: E501

        Space usage savings in the group due to compression.  # noqa: E501

        :return: The savings_compression of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._savings_compression

    @savings_compression.setter
    def savings_compression(self, savings_compression):
        """Sets the savings_compression of this NimbleStorageSystemDetail.

        Space usage savings in the group due to compression.  # noqa: E501

        :param savings_compression: The savings_compression of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._savings_compression = savings_compression

    @property
    def savings_data_reduction(self):
        """Gets the savings_data_reduction of this NimbleStorageSystemDetail.  # noqa: E501

        Space usage savings in the group that does not include thin-provisioning savings.  # noqa: E501

        :return: The savings_data_reduction of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._savings_data_reduction

    @savings_data_reduction.setter
    def savings_data_reduction(self, savings_data_reduction):
        """Sets the savings_data_reduction of this NimbleStorageSystemDetail.

        Space usage savings in the group that does not include thin-provisioning savings.  # noqa: E501

        :param savings_data_reduction: The savings_data_reduction of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._savings_data_reduction = savings_data_reduction

    @property
    def savings_dedupe(self):
        """Gets the savings_dedupe of this NimbleStorageSystemDetail.  # noqa: E501

        Space usage savings in the group due to deduplication.  # noqa: E501

        :return: The savings_dedupe of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._savings_dedupe

    @savings_dedupe.setter
    def savings_dedupe(self, savings_dedupe):
        """Sets the savings_dedupe of this NimbleStorageSystemDetail.

        Space usage savings in the group due to deduplication.  # noqa: E501

        :param savings_dedupe: The savings_dedupe of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._savings_dedupe = savings_dedupe

    @property
    def savings_ratio(self):
        """Gets the savings_ratio of this NimbleStorageSystemDetail.  # noqa: E501

        Overall savings in the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The savings_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._savings_ratio

    @savings_ratio.setter
    def savings_ratio(self, savings_ratio):
        """Sets the savings_ratio of this NimbleStorageSystemDetail.

        Overall savings in the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param savings_ratio: The savings_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :type: float
        """

        self._savings_ratio = savings_ratio

    @property
    def savings_vol_thin_provisioning(self):
        """Gets the savings_vol_thin_provisioning of this NimbleStorageSystemDetail.  # noqa: E501

        Space usage savings in the group due to thin provisioning of volumes.  # noqa: E501

        :return: The savings_vol_thin_provisioning of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._savings_vol_thin_provisioning

    @savings_vol_thin_provisioning.setter
    def savings_vol_thin_provisioning(self, savings_vol_thin_provisioning):
        """Sets the savings_vol_thin_provisioning of this NimbleStorageSystemDetail.

        Space usage savings in the group due to thin provisioning of volumes.  # noqa: E501

        :param savings_vol_thin_provisioning: The savings_vol_thin_provisioning of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._savings_vol_thin_provisioning = savings_vol_thin_provisioning

    @property
    def scsi_vendor_id(self):
        """Gets the scsi_vendor_id of this NimbleStorageSystemDetail.  # noqa: E501

        SCSI vendor ID. Plain string.  # noqa: E501

        :return: The scsi_vendor_id of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._scsi_vendor_id

    @scsi_vendor_id.setter
    def scsi_vendor_id(self, scsi_vendor_id):
        """Sets the scsi_vendor_id of this NimbleStorageSystemDetail.

        SCSI vendor ID. Plain string.  # noqa: E501

        :param scsi_vendor_id: The scsi_vendor_id of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._scsi_vendor_id = scsi_vendor_id

    @property
    def send_alert_to_support(self):
        """Gets the send_alert_to_support of this NimbleStorageSystemDetail.  # noqa: E501

        Whether to send alert to Support.  # noqa: E501

        :return: The send_alert_to_support of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._send_alert_to_support

    @send_alert_to_support.setter
    def send_alert_to_support(self, send_alert_to_support):
        """Sets the send_alert_to_support of this NimbleStorageSystemDetail.

        Whether to send alert to Support.  # noqa: E501

        :param send_alert_to_support: The send_alert_to_support of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._send_alert_to_support = send_alert_to_support

    @property
    def smtp_port(self):
        """Gets the smtp_port of this NimbleStorageSystemDetail.  # noqa: E501

        Port number of SMTP Server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The smtp_port of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this NimbleStorageSystemDetail.

        Port number of SMTP Server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param smtp_port: The smtp_port of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._smtp_port = smtp_port

    @property
    def smtp_server(self):
        """Gets the smtp_server of this NimbleStorageSystemDetail.  # noqa: E501

        Hostname or IP Address of SMTP Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The smtp_server of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._smtp_server

    @smtp_server.setter
    def smtp_server(self, smtp_server):
        """Sets the smtp_server of this NimbleStorageSystemDetail.

        Hostname or IP Address of SMTP Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param smtp_server: The smtp_server of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._smtp_server = smtp_server

    @property
    def snap_compression_ratio(self):
        """Gets the snap_compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501

        Compression ratio of snapshots in the group. Fraction expressed as floating point number.  # noqa: E501

        :return: The snap_compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._snap_compression_ratio

    @snap_compression_ratio.setter
    def snap_compression_ratio(self, snap_compression_ratio):
        """Sets the snap_compression_ratio of this NimbleStorageSystemDetail.

        Compression ratio of snapshots in the group. Fraction expressed as floating point number.  # noqa: E501

        :param snap_compression_ratio: The snap_compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :type: float
        """

        self._snap_compression_ratio = snap_compression_ratio

    @property
    def snap_retn_meter_high(self):
        """Gets the snap_retn_meter_high of this NimbleStorageSystemDetail.  # noqa: E501

        Threshold for considering a volume as high retention.  # noqa: E501

        :return: The snap_retn_meter_high of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._snap_retn_meter_high

    @snap_retn_meter_high.setter
    def snap_retn_meter_high(self, snap_retn_meter_high):
        """Sets the snap_retn_meter_high of this NimbleStorageSystemDetail.

        Threshold for considering a volume as high retention.  # noqa: E501

        :param snap_retn_meter_high: The snap_retn_meter_high of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._snap_retn_meter_high = snap_retn_meter_high

    @property
    def snap_retn_meter_very_high(self):
        """Gets the snap_retn_meter_very_high of this NimbleStorageSystemDetail.  # noqa: E501

        Threshold for considering a volume as very high retention.  # noqa: E501

        :return: The snap_retn_meter_very_high of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._snap_retn_meter_very_high

    @snap_retn_meter_very_high.setter
    def snap_retn_meter_very_high(self, snap_retn_meter_very_high):
        """Sets the snap_retn_meter_very_high of this NimbleStorageSystemDetail.

        Threshold for considering a volume as very high retention.  # noqa: E501

        :param snap_retn_meter_very_high: The snap_retn_meter_very_high of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._snap_retn_meter_very_high = snap_retn_meter_very_high

    @property
    def snap_usage_populated(self):
        """Gets the snap_usage_populated of this NimbleStorageSystemDetail.  # noqa: E501

        Total snapshot usage as if each snapshot is deep copy of the volume.  # noqa: E501

        :return: The snap_usage_populated of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._snap_usage_populated

    @snap_usage_populated.setter
    def snap_usage_populated(self, snap_usage_populated):
        """Sets the snap_usage_populated of this NimbleStorageSystemDetail.

        Total snapshot usage as if each snapshot is deep copy of the volume.  # noqa: E501

        :param snap_usage_populated: The snap_usage_populated of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._snap_usage_populated = snap_usage_populated

    @property
    def snmp_community(self):
        """Gets the snmp_community of this NimbleStorageSystemDetail.  # noqa: E501

        Community string to be used with SNMP. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The snmp_community of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._snmp_community

    @snmp_community.setter
    def snmp_community(self, snmp_community):
        """Sets the snmp_community of this NimbleStorageSystemDetail.

        Community string to be used with SNMP. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param snmp_community: The snmp_community of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._snmp_community = snmp_community

    @property
    def snmp_get_enabled(self):
        """Gets the snmp_get_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether to accept SNMP get commands.  # noqa: E501

        :return: The snmp_get_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._snmp_get_enabled

    @snmp_get_enabled.setter
    def snmp_get_enabled(self, snmp_get_enabled):
        """Sets the snmp_get_enabled of this NimbleStorageSystemDetail.

        Whether to accept SNMP get commands.  # noqa: E501

        :param snmp_get_enabled: The snmp_get_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._snmp_get_enabled = snmp_get_enabled

    @property
    def snmp_get_port(self):
        """Gets the snmp_get_port of this NimbleStorageSystemDetail.  # noqa: E501

        Port number to which SNMP get requests should be sent. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The snmp_get_port of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._snmp_get_port

    @snmp_get_port.setter
    def snmp_get_port(self, snmp_get_port):
        """Sets the snmp_get_port of this NimbleStorageSystemDetail.

        Port number to which SNMP get requests should be sent. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param snmp_get_port: The snmp_get_port of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._snmp_get_port = snmp_get_port

    @property
    def snmp_sys_contact(self):
        """Gets the snmp_sys_contact of this NimbleStorageSystemDetail.  # noqa: E501

        Name of the SNMP administrator. Plain string.  # noqa: E501

        :return: The snmp_sys_contact of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._snmp_sys_contact

    @snmp_sys_contact.setter
    def snmp_sys_contact(self, snmp_sys_contact):
        """Sets the snmp_sys_contact of this NimbleStorageSystemDetail.

        Name of the SNMP administrator. Plain string.  # noqa: E501

        :param snmp_sys_contact: The snmp_sys_contact of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._snmp_sys_contact = snmp_sys_contact

    @property
    def snmp_sys_location(self):
        """Gets the snmp_sys_location of this NimbleStorageSystemDetail.  # noqa: E501

        Location of the group. Plain string.  # noqa: E501

        :return: The snmp_sys_location of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._snmp_sys_location

    @snmp_sys_location.setter
    def snmp_sys_location(self, snmp_sys_location):
        """Sets the snmp_sys_location of this NimbleStorageSystemDetail.

        Location of the group. Plain string.  # noqa: E501

        :param snmp_sys_location: The snmp_sys_location of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._snmp_sys_location = snmp_sys_location

    @property
    def snmp_trap_enabled(self):
        """Gets the snmp_trap_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Whether to enable SNMP traps.  # noqa: E501

        :return: The snmp_trap_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._snmp_trap_enabled

    @snmp_trap_enabled.setter
    def snmp_trap_enabled(self, snmp_trap_enabled):
        """Sets the snmp_trap_enabled of this NimbleStorageSystemDetail.

        Whether to enable SNMP traps.  # noqa: E501

        :param snmp_trap_enabled: The snmp_trap_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._snmp_trap_enabled = snmp_trap_enabled

    @property
    def snmp_trap_host(self):
        """Gets the snmp_trap_host of this NimbleStorageSystemDetail.  # noqa: E501

        Hostname or IP Address to send SNMP traps. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The snmp_trap_host of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._snmp_trap_host

    @snmp_trap_host.setter
    def snmp_trap_host(self, snmp_trap_host):
        """Sets the snmp_trap_host of this NimbleStorageSystemDetail.

        Hostname or IP Address to send SNMP traps. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param snmp_trap_host: The snmp_trap_host of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._snmp_trap_host = snmp_trap_host

    @property
    def snmp_trap_port(self):
        """Gets the snmp_trap_port of this NimbleStorageSystemDetail.  # noqa: E501

        Port number of SNMP trap host. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The snmp_trap_port of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._snmp_trap_port

    @snmp_trap_port.setter
    def snmp_trap_port(self, snmp_trap_port):
        """Sets the snmp_trap_port of this NimbleStorageSystemDetail.

        Port number of SNMP trap host. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param snmp_trap_port: The snmp_trap_port of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._snmp_trap_port = snmp_trap_port

    @property
    def space_info_valid(self):
        """Gets the space_info_valid of this NimbleStorageSystemDetail.  # noqa: E501

        Is space info for this group valid.  # noqa: E501

        :return: The space_info_valid of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._space_info_valid

    @space_info_valid.setter
    def space_info_valid(self, space_info_valid):
        """Sets the space_info_valid of this NimbleStorageSystemDetail.

        Is space info for this group valid.  # noqa: E501

        :param space_info_valid: The space_info_valid of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._space_info_valid = space_info_valid

    @property
    def syslogd_enabled(self):
        """Gets the syslogd_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Is syslogd enabled on this system.  # noqa: E501

        :return: The syslogd_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._syslogd_enabled

    @syslogd_enabled.setter
    def syslogd_enabled(self, syslogd_enabled):
        """Sets the syslogd_enabled of this NimbleStorageSystemDetail.

        Is syslogd enabled on this system.  # noqa: E501

        :param syslogd_enabled: The syslogd_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._syslogd_enabled = syslogd_enabled

    @property
    def syslogd_port(self):
        """Gets the syslogd_port of this NimbleStorageSystemDetail.  # noqa: E501

        Port number for syslogd server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The syslogd_port of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._syslogd_port

    @syslogd_port.setter
    def syslogd_port(self, syslogd_port):
        """Sets the syslogd_port of this NimbleStorageSystemDetail.

        Port number for syslogd server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param syslogd_port: The syslogd_port of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._syslogd_port = syslogd_port

    @property
    def syslogd_server(self):
        """Gets the syslogd_server of this NimbleStorageSystemDetail.  # noqa: E501

        Hostname of the syslogd server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The syslogd_server of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._syslogd_server

    @syslogd_server.setter
    def syslogd_server(self, syslogd_server):
        """Sets the syslogd_server of this NimbleStorageSystemDetail.

        Hostname of the syslogd server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param syslogd_server: The syslogd_server of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._syslogd_server = syslogd_server

    @property
    def syslogd_servers(self):
        """Gets the syslogd_servers of this NimbleStorageSystemDetail.  # noqa: E501

        syslogd server info.  # noqa: E501

        :return: The syslogd_servers of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[NimbleSyslogdServerInfo]
        """
        return self._syslogd_servers

    @syslogd_servers.setter
    def syslogd_servers(self, syslogd_servers):
        """Sets the syslogd_servers of this NimbleStorageSystemDetail.

        syslogd server info.  # noqa: E501

        :param syslogd_servers: The syslogd_servers of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[NimbleSyslogdServerInfo]
        """

        self._syslogd_servers = syslogd_servers

    @property
    def system_headroom(self):
        """Gets the system_headroom of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The system_headroom of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: SystemHeadroom
        """
        return self._system_headroom

    @system_headroom.setter
    def system_headroom(self, system_headroom):
        """Sets the system_headroom of this NimbleStorageSystemDetail.


        :param system_headroom: The system_headroom of this NimbleStorageSystemDetail.  # noqa: E501
        :type: SystemHeadroom
        """

        self._system_headroom = system_headroom

    @property
    def tdz_enabled(self):
        """Gets the tdz_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Is Target Driven Zoning (TDZ) enabled on this group.  # noqa: E501

        :return: The tdz_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._tdz_enabled

    @tdz_enabled.setter
    def tdz_enabled(self, tdz_enabled):
        """Sets the tdz_enabled of this NimbleStorageSystemDetail.

        Is Target Driven Zoning (TDZ) enabled on this group.  # noqa: E501

        :param tdz_enabled: The tdz_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._tdz_enabled = tdz_enabled

    @property
    def tdz_prefix(self):
        """Gets the tdz_prefix of this NimbleStorageSystemDetail.  # noqa: E501

        Target Driven Zoning (TDZ) prefix for peer zones created by TDZ.  # noqa: E501

        :return: The tdz_prefix of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._tdz_prefix

    @tdz_prefix.setter
    def tdz_prefix(self, tdz_prefix):
        """Sets the tdz_prefix of this NimbleStorageSystemDetail.

        Target Driven Zoning (TDZ) prefix for peer zones created by TDZ.  # noqa: E501

        :param tdz_prefix: The tdz_prefix of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._tdz_prefix = tdz_prefix

    @property
    def timezone(self):
        """Gets the timezone of this NimbleStorageSystemDetail.  # noqa: E501

        Timezone in which this group is located. Plain string.  # noqa: E501

        :return: The timezone of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this NimbleStorageSystemDetail.

        Timezone in which this group is located. Plain string.  # noqa: E501

        :param timezone: The timezone of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def tlsv1_enabled(self):
        """Gets the tlsv1_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Enable or disable TLSv1.0 and TLSv1.1.  # noqa: E501

        :return: The tlsv1_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._tlsv1_enabled

    @tlsv1_enabled.setter
    def tlsv1_enabled(self, tlsv1_enabled):
        """Sets the tlsv1_enabled of this NimbleStorageSystemDetail.

        Enable or disable TLSv1.0 and TLSv1.1.  # noqa: E501

        :param tlsv1_enabled: The tlsv1_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._tlsv1_enabled = tlsv1_enabled

    @property
    def uncompressed_snap_usage_bytes(self):
        """Gets the uncompressed_snap_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501

        Uncompressed usage of snapshots in the group.  # noqa: E501

        :return: The uncompressed_snap_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._uncompressed_snap_usage_bytes

    @uncompressed_snap_usage_bytes.setter
    def uncompressed_snap_usage_bytes(self, uncompressed_snap_usage_bytes):
        """Sets the uncompressed_snap_usage_bytes of this NimbleStorageSystemDetail.

        Uncompressed usage of snapshots in the group.  # noqa: E501

        :param uncompressed_snap_usage_bytes: The uncompressed_snap_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._uncompressed_snap_usage_bytes = uncompressed_snap_usage_bytes

    @property
    def uncompressed_vol_usage_bytes(self):
        """Gets the uncompressed_vol_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501

        Uncompressed usage of volumes in the group.  # noqa: E501

        :return: The uncompressed_vol_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._uncompressed_vol_usage_bytes

    @uncompressed_vol_usage_bytes.setter
    def uncompressed_vol_usage_bytes(self, uncompressed_vol_usage_bytes):
        """Sets the uncompressed_vol_usage_bytes of this NimbleStorageSystemDetail.

        Uncompressed usage of volumes in the group.  # noqa: E501

        :param uncompressed_vol_usage_bytes: The uncompressed_vol_usage_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._uncompressed_vol_usage_bytes = uncompressed_vol_usage_bytes

    @property
    def unique_name_enabled(self):
        """Gets the unique_name_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Are new volume and volume collection names transformed on this group.  # noqa: E501

        :return: The unique_name_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._unique_name_enabled

    @unique_name_enabled.setter
    def unique_name_enabled(self, unique_name_enabled):
        """Sets the unique_name_enabled of this NimbleStorageSystemDetail.

        Are new volume and volume collection names transformed on this group.  # noqa: E501

        :param unique_name_enabled: The unique_name_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._unique_name_enabled = unique_name_enabled

    @property
    def unused_reserve_bytes(self):
        """Gets the unused_reserve_bytes of this NimbleStorageSystemDetail.  # noqa: E501

        Reserved space that is not utilized.  # noqa: E501

        :return: The unused_reserve_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._unused_reserve_bytes

    @unused_reserve_bytes.setter
    def unused_reserve_bytes(self, unused_reserve_bytes):
        """Sets the unused_reserve_bytes of this NimbleStorageSystemDetail.

        Reserved space that is not utilized.  # noqa: E501

        :param unused_reserve_bytes: The unused_reserve_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._unused_reserve_bytes = unused_reserve_bytes

    @property
    def update_array_names(self):
        """Gets the update_array_names of this NimbleStorageSystemDetail.  # noqa: E501

        Arrays in the group undergoing update. Comma separated list of up to 64 non-empty lowercase alphanumeric strings without spaces.  # noqa: E501

        :return: The update_array_names of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._update_array_names

    @update_array_names.setter
    def update_array_names(self, update_array_names):
        """Sets the update_array_names of this NimbleStorageSystemDetail.

        Arrays in the group undergoing update. Comma separated list of up to 64 non-empty lowercase alphanumeric strings without spaces.  # noqa: E501

        :param update_array_names: The update_array_names of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._update_array_names = update_array_names

    @property
    def update_download_end_time(self):
        """Gets the update_download_end_time of this NimbleStorageSystemDetail.  # noqa: E501

        End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The update_download_end_time of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._update_download_end_time

    @update_download_end_time.setter
    def update_download_end_time(self, update_download_end_time):
        """Sets the update_download_end_time of this NimbleStorageSystemDetail.

        End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param update_download_end_time: The update_download_end_time of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._update_download_end_time = update_download_end_time

    @property
    def update_download_error_code(self):
        """Gets the update_download_error_code of this NimbleStorageSystemDetail.  # noqa: E501

        If the software download has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].  # noqa: E501

        :return: The update_download_error_code of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._update_download_error_code

    @update_download_error_code.setter
    def update_download_error_code(self, update_download_error_code):
        """Sets the update_download_error_code of this NimbleStorageSystemDetail.

        If the software download has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].  # noqa: E501

        :param update_download_error_code: The update_download_error_code of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._update_download_error_code = update_download_error_code

    @property
    def update_download_start_time(self):
        """Gets the update_download_start_time of this NimbleStorageSystemDetail.  # noqa: E501

        Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The update_download_start_time of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._update_download_start_time

    @update_download_start_time.setter
    def update_download_start_time(self, update_download_start_time):
        """Sets the update_download_start_time of this NimbleStorageSystemDetail.

        Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param update_download_start_time: The update_download_start_time of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._update_download_start_time = update_download_start_time

    @property
    def update_downloading(self):
        """Gets the update_downloading of this NimbleStorageSystemDetail.  # noqa: E501

        Is software update package currently downloading.  # noqa: E501

        :return: The update_downloading of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._update_downloading

    @update_downloading.setter
    def update_downloading(self, update_downloading):
        """Sets the update_downloading of this NimbleStorageSystemDetail.

        Is software update package currently downloading.  # noqa: E501

        :param update_downloading: The update_downloading of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._update_downloading = update_downloading

    @property
    def update_end_time(self):
        """Gets the update_end_time of this NimbleStorageSystemDetail.  # noqa: E501

        End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The update_end_time of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._update_end_time

    @update_end_time.setter
    def update_end_time(self, update_end_time):
        """Sets the update_end_time of this NimbleStorageSystemDetail.

        End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param update_end_time: The update_end_time of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._update_end_time = update_end_time

    @property
    def update_error_code(self):
        """Gets the update_error_code of this NimbleStorageSystemDetail.  # noqa: E501

        If the software update has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].  # noqa: E501

        :return: The update_error_code of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._update_error_code

    @update_error_code.setter
    def update_error_code(self, update_error_code):
        """Sets the update_error_code of this NimbleStorageSystemDetail.

        If the software update has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].  # noqa: E501

        :param update_error_code: The update_error_code of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._update_error_code = update_error_code

    @property
    def update_progress_msg(self):
        """Gets the update_progress_msg of this NimbleStorageSystemDetail.  # noqa: E501

        Group update detailed progress message. Plain string.  # noqa: E501

        :return: The update_progress_msg of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._update_progress_msg

    @update_progress_msg.setter
    def update_progress_msg(self, update_progress_msg):
        """Sets the update_progress_msg of this NimbleStorageSystemDetail.

        Group update detailed progress message. Plain string.  # noqa: E501

        :param update_progress_msg: The update_progress_msg of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._update_progress_msg = update_progress_msg

    @property
    def update_start_time(self):
        """Gets the update_start_time of this NimbleStorageSystemDetail.  # noqa: E501

        Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The update_start_time of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._update_start_time

    @update_start_time.setter
    def update_start_time(self, update_start_time):
        """Sets the update_start_time of this NimbleStorageSystemDetail.

        Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param update_start_time: The update_start_time of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._update_start_time = update_start_time

    @property
    def update_state(self):
        """Gets the update_state of this NimbleStorageSystemDetail.  # noqa: E501


        :return: The update_state of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._update_state

    @update_state.setter
    def update_state(self, update_state):
        """Sets the update_state of this NimbleStorageSystemDetail.


        :param update_state: The update_state of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._update_state = update_state

    @property
    def usable_cache_capacity(self):
        """Gets the usable_cache_capacity of this NimbleStorageSystemDetail.  # noqa: E501

        Usable cache capacity of the group.  # noqa: E501

        :return: The usable_cache_capacity of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._usable_cache_capacity

    @usable_cache_capacity.setter
    def usable_cache_capacity(self, usable_cache_capacity):
        """Sets the usable_cache_capacity of this NimbleStorageSystemDetail.

        Usable cache capacity of the group.  # noqa: E501

        :param usable_cache_capacity: The usable_cache_capacity of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._usable_cache_capacity = usable_cache_capacity

    @property
    def usable_capacity_bytes(self):
        """Gets the usable_capacity_bytes of this NimbleStorageSystemDetail.  # noqa: E501

        Usable capacity bytes of the group.  # noqa: E501

        :return: The usable_capacity_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._usable_capacity_bytes

    @usable_capacity_bytes.setter
    def usable_capacity_bytes(self, usable_capacity_bytes):
        """Sets the usable_capacity_bytes of this NimbleStorageSystemDetail.

        Usable capacity bytes of the group.  # noqa: E501

        :param usable_capacity_bytes: The usable_capacity_bytes of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._usable_capacity_bytes = usable_capacity_bytes

    @property
    def usage(self):
        """Gets the usage of this NimbleStorageSystemDetail.  # noqa: E501

        Used space of the group in bytes.  # noqa: E501

        :return: The usage of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this NimbleStorageSystemDetail.

        Used space of the group in bytes.  # noqa: E501

        :param usage: The usage of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._usage = usage

    @property
    def usage_valid(self):
        """Gets the usage_valid of this NimbleStorageSystemDetail.  # noqa: E501

        Indicates whether the usage of group is valid.  # noqa: E501

        :return: The usage_valid of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._usage_valid

    @usage_valid.setter
    def usage_valid(self, usage_valid):
        """Sets the usage_valid of this NimbleStorageSystemDetail.

        Indicates whether the usage of group is valid.  # noqa: E501

        :param usage_valid: The usage_valid of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._usage_valid = usage_valid

    @property
    def user_inactivity_timeout(self):
        """Gets the user_inactivity_timeout of this NimbleStorageSystemDetail.  # noqa: E501

        The amount of time in seconds that the user session is inactive before timing out. User inactivity timeout in second, valid range is from 1 to 43200 (720 minutes).  # noqa: E501

        :return: The user_inactivity_timeout of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._user_inactivity_timeout

    @user_inactivity_timeout.setter
    def user_inactivity_timeout(self, user_inactivity_timeout):
        """Sets the user_inactivity_timeout of this NimbleStorageSystemDetail.

        The amount of time in seconds that the user session is inactive before timing out. User inactivity timeout in second, valid range is from 1 to 43200 (720 minutes).  # noqa: E501

        :param user_inactivity_timeout: The user_inactivity_timeout of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._user_inactivity_timeout = user_inactivity_timeout

    @property
    def version_current(self):
        """Gets the version_current of this NimbleStorageSystemDetail.  # noqa: E501

        Version of software running on the group.  # noqa: E501

        :return: The version_current of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._version_current

    @version_current.setter
    def version_current(self, version_current):
        """Sets the version_current of this NimbleStorageSystemDetail.

        Version of software running on the group.  # noqa: E501

        :param version_current: The version_current of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._version_current = version_current

    @property
    def version_rollback(self):
        """Gets the version_rollback of this NimbleStorageSystemDetail.  # noqa: E501

        Rollback software version for the group.  # noqa: E501

        :return: The version_rollback of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._version_rollback

    @version_rollback.setter
    def version_rollback(self, version_rollback):
        """Sets the version_rollback of this NimbleStorageSystemDetail.

        Rollback software version for the group.  # noqa: E501

        :param version_rollback: The version_rollback of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._version_rollback = version_rollback

    @property
    def version_target(self):
        """Gets the version_target of this NimbleStorageSystemDetail.  # noqa: E501

        Desired software version for the group.  # noqa: E501

        :return: The version_target of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._version_target

    @version_target.setter
    def version_target(self, version_target):
        """Sets the version_target of this NimbleStorageSystemDetail.

        Desired software version for the group.  # noqa: E501

        :param version_target: The version_target of this NimbleStorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._version_target = version_target

    @property
    def vol_compression_ratio(self):
        """Gets the vol_compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501

        Compression ratio of volumes in the group. Fraction expressed as floating point number.  # noqa: E501

        :return: The vol_compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._vol_compression_ratio

    @vol_compression_ratio.setter
    def vol_compression_ratio(self, vol_compression_ratio):
        """Sets the vol_compression_ratio of this NimbleStorageSystemDetail.

        Compression ratio of volumes in the group. Fraction expressed as floating point number.  # noqa: E501

        :param vol_compression_ratio: The vol_compression_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :type: float
        """

        self._vol_compression_ratio = vol_compression_ratio

    @property
    def vol_thin_provisioning_ratio(self):
        """Gets the vol_thin_provisioning_ratio of this NimbleStorageSystemDetail.  # noqa: E501

        Thin provisioning savings for volumes in the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The vol_thin_provisioning_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._vol_thin_provisioning_ratio

    @vol_thin_provisioning_ratio.setter
    def vol_thin_provisioning_ratio(self, vol_thin_provisioning_ratio):
        """Sets the vol_thin_provisioning_ratio of this NimbleStorageSystemDetail.

        Thin provisioning savings for volumes in the group expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param vol_thin_provisioning_ratio: The vol_thin_provisioning_ratio of this NimbleStorageSystemDetail.  # noqa: E501
        :type: float
        """

        self._vol_thin_provisioning_ratio = vol_thin_provisioning_ratio

    @property
    def volume_migration_status(self):
        """Gets the volume_migration_status of this NimbleStorageSystemDetail.  # noqa: E501

        Status of data migration activity related to volumes being relocated to different pools. List of data migration status for a group of related volumes.  # noqa: E501

        :return: The volume_migration_status of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[VolFamMigStatus]
        """
        return self._volume_migration_status

    @volume_migration_status.setter
    def volume_migration_status(self, volume_migration_status):
        """Sets the volume_migration_status of this NimbleStorageSystemDetail.

        Status of data migration activity related to volumes being relocated to different pools. List of data migration status for a group of related volumes.  # noqa: E501

        :param volume_migration_status: The volume_migration_status of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[VolFamMigStatus]
        """

        self._volume_migration_status = volume_migration_status

    @property
    def vss_validation_timeout(self):
        """Gets the vss_validation_timeout of this NimbleStorageSystemDetail.  # noqa: E501

        The amount of time in seconds to validate Microsoft VSS application synchronization before timing out. VSS validation timeout in second, valid range is from 1 to 3600 (60 minutes).  # noqa: E501

        :return: The vss_validation_timeout of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._vss_validation_timeout

    @vss_validation_timeout.setter
    def vss_validation_timeout(self, vss_validation_timeout):
        """Sets the vss_validation_timeout of this NimbleStorageSystemDetail.

        The amount of time in seconds to validate Microsoft VSS application synchronization before timing out. VSS validation timeout in second, valid range is from 1 to 3600 (60 minutes).  # noqa: E501

        :param vss_validation_timeout: The vss_validation_timeout of this NimbleStorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._vss_validation_timeout = vss_validation_timeout

    @property
    def vvol_enabled(self):
        """Gets the vvol_enabled of this NimbleStorageSystemDetail.  # noqa: E501

        Are vvols enabled on this group.  # noqa: E501

        :return: The vvol_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._vvol_enabled

    @vvol_enabled.setter
    def vvol_enabled(self, vvol_enabled):
        """Sets the vvol_enabled of this NimbleStorageSystemDetail.

        Are vvols enabled on this group.  # noqa: E501

        :param vvol_enabled: The vvol_enabled of this NimbleStorageSystemDetail.  # noqa: E501
        :type: bool
        """

        self._vvol_enabled = vvol_enabled

    @property
    def witness_status(self):
        """Gets the witness_status of this NimbleStorageSystemDetail.  # noqa: E501

        Witness status from group Management Service array and group Management Service backup array.  # noqa: E501

        :return: The witness_status of this NimbleStorageSystemDetail.  # noqa: E501
        :rtype: list[WitnessTestResponse]
        """
        return self._witness_status

    @witness_status.setter
    def witness_status(self, witness_status):
        """Sets the witness_status of this NimbleStorageSystemDetail.

        Witness status from group Management Service array and group Management Service backup array.  # noqa: E501

        :param witness_status: The witness_status of this NimbleStorageSystemDetail.  # noqa: E501
        :type: list[WitnessTestResponse]
        """

        self._witness_status = witness_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleStorageSystemDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
