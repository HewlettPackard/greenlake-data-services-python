# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PortISCSI(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gateway_address': 'str',
        'i_sns_primary_address': 'str',
        'i_sns_tcp_port': 'int',
        'ip_address': 'str',
        'iscsi_name': 'str',
        'mac_address': 'str',
        'mtu': 'str',
        'send_target_group_tag': 'int',
        'subnet_mask': 'str',
        'supports_vlan': 'bool',
        'target_portal_group_tag': 'int'
    }

    attribute_map = {
        'gateway_address': 'gatewayAddress',
        'i_sns_primary_address': 'iSNSPrimaryAddress',
        'i_sns_tcp_port': 'iSNSTcpPort',
        'ip_address': 'ipAddress',
        'iscsi_name': 'iscsiName',
        'mac_address': 'macAddress',
        'mtu': 'mtu',
        'send_target_group_tag': 'sendTargetGroupTag',
        'subnet_mask': 'subnetMask',
        'supports_vlan': 'supportsVlan',
        'target_portal_group_tag': 'targetPortalGroupTag'
    }

    def __init__(self, gateway_address=None, i_sns_primary_address=None, i_sns_tcp_port=None, ip_address=None, iscsi_name=None, mac_address=None, mtu=None, send_target_group_tag=None, subnet_mask=None, supports_vlan=None, target_portal_group_tag=None):  # noqa: E501
        """PortISCSI - a model defined in OpenAPI"""  # noqa: E501

        self._gateway_address = None
        self._i_sns_primary_address = None
        self._i_sns_tcp_port = None
        self._ip_address = None
        self._iscsi_name = None
        self._mac_address = None
        self._mtu = None
        self._send_target_group_tag = None
        self._subnet_mask = None
        self._supports_vlan = None
        self._target_portal_group_tag = None
        self.discriminator = None

        if gateway_address is not None:
            self.gateway_address = gateway_address
        if i_sns_primary_address is not None:
            self.i_sns_primary_address = i_sns_primary_address
        if i_sns_tcp_port is not None:
            self.i_sns_tcp_port = i_sns_tcp_port
        if ip_address is not None:
            self.ip_address = ip_address
        if iscsi_name is not None:
            self.iscsi_name = iscsi_name
        if mac_address is not None:
            self.mac_address = mac_address
        if mtu is not None:
            self.mtu = mtu
        if send_target_group_tag is not None:
            self.send_target_group_tag = send_target_group_tag
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if supports_vlan is not None:
            self.supports_vlan = supports_vlan
        if target_portal_group_tag is not None:
            self.target_portal_group_tag = target_portal_group_tag

    @property
    def gateway_address(self):
        """Gets the gateway_address of this PortISCSI.  # noqa: E501

        Gateway Address of iSCSI port  # noqa: E501

        :return: The gateway_address of this PortISCSI.  # noqa: E501
        :rtype: str
        """
        return self._gateway_address

    @gateway_address.setter
    def gateway_address(self, gateway_address):
        """Sets the gateway_address of this PortISCSI.

        Gateway Address of iSCSI port  # noqa: E501

        :param gateway_address: The gateway_address of this PortISCSI.  # noqa: E501
        :type: str
        """

        self._gateway_address = gateway_address

    @property
    def i_sns_primary_address(self):
        """Gets the i_sns_primary_address of this PortISCSI.  # noqa: E501

        Primary iSNS address  # noqa: E501

        :return: The i_sns_primary_address of this PortISCSI.  # noqa: E501
        :rtype: str
        """
        return self._i_sns_primary_address

    @i_sns_primary_address.setter
    def i_sns_primary_address(self, i_sns_primary_address):
        """Sets the i_sns_primary_address of this PortISCSI.

        Primary iSNS address  # noqa: E501

        :param i_sns_primary_address: The i_sns_primary_address of this PortISCSI.  # noqa: E501
        :type: str
        """

        self._i_sns_primary_address = i_sns_primary_address

    @property
    def i_sns_tcp_port(self):
        """Gets the i_sns_tcp_port of this PortISCSI.  # noqa: E501

        iSNS TCP port  # noqa: E501

        :return: The i_sns_tcp_port of this PortISCSI.  # noqa: E501
        :rtype: int
        """
        return self._i_sns_tcp_port

    @i_sns_tcp_port.setter
    def i_sns_tcp_port(self, i_sns_tcp_port):
        """Sets the i_sns_tcp_port of this PortISCSI.

        iSNS TCP port  # noqa: E501

        :param i_sns_tcp_port: The i_sns_tcp_port of this PortISCSI.  # noqa: E501
        :type: int
        """

        self._i_sns_tcp_port = i_sns_tcp_port

    @property
    def ip_address(self):
        """Gets the ip_address of this PortISCSI.  # noqa: E501

        IP address of iSCSI port  # noqa: E501

        :return: The ip_address of this PortISCSI.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PortISCSI.

        IP address of iSCSI port  # noqa: E501

        :param ip_address: The ip_address of this PortISCSI.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def iscsi_name(self):
        """Gets the iscsi_name of this PortISCSI.  # noqa: E501

        iSCSI name of iSCSI port  # noqa: E501

        :return: The iscsi_name of this PortISCSI.  # noqa: E501
        :rtype: str
        """
        return self._iscsi_name

    @iscsi_name.setter
    def iscsi_name(self, iscsi_name):
        """Sets the iscsi_name of this PortISCSI.

        iSCSI name of iSCSI port  # noqa: E501

        :param iscsi_name: The iscsi_name of this PortISCSI.  # noqa: E501
        :type: str
        """

        self._iscsi_name = iscsi_name

    @property
    def mac_address(self):
        """Gets the mac_address of this PortISCSI.  # noqa: E501

        IP address of iSCSI port  # noqa: E501

        :return: The mac_address of this PortISCSI.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this PortISCSI.

        IP address of iSCSI port  # noqa: E501

        :param mac_address: The mac_address of this PortISCSI.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mtu(self):
        """Gets the mtu of this PortISCSI.  # noqa: E501

        Maximum transmission unit (MTU) size  # noqa: E501

        :return: The mtu of this PortISCSI.  # noqa: E501
        :rtype: str
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this PortISCSI.

        Maximum transmission unit (MTU) size  # noqa: E501

        :param mtu: The mtu of this PortISCSI.  # noqa: E501
        :type: str
        """

        self._mtu = mtu

    @property
    def send_target_group_tag(self):
        """Gets the send_target_group_tag of this PortISCSI.  # noqa: E501

        Send target group of the iSCSI port  # noqa: E501

        :return: The send_target_group_tag of this PortISCSI.  # noqa: E501
        :rtype: int
        """
        return self._send_target_group_tag

    @send_target_group_tag.setter
    def send_target_group_tag(self, send_target_group_tag):
        """Sets the send_target_group_tag of this PortISCSI.

        Send target group of the iSCSI port  # noqa: E501

        :param send_target_group_tag: The send_target_group_tag of this PortISCSI.  # noqa: E501
        :type: int
        """

        self._send_target_group_tag = send_target_group_tag

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this PortISCSI.  # noqa: E501

        NetMask of iSCSI port  # noqa: E501

        :return: The subnet_mask of this PortISCSI.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this PortISCSI.

        NetMask of iSCSI port  # noqa: E501

        :param subnet_mask: The subnet_mask of this PortISCSI.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def supports_vlan(self):
        """Gets the supports_vlan of this PortISCSI.  # noqa: E501

        Indicates if the port support VLAN  # noqa: E501

        :return: The supports_vlan of this PortISCSI.  # noqa: E501
        :rtype: bool
        """
        return self._supports_vlan

    @supports_vlan.setter
    def supports_vlan(self, supports_vlan):
        """Sets the supports_vlan of this PortISCSI.

        Indicates if the port support VLAN  # noqa: E501

        :param supports_vlan: The supports_vlan of this PortISCSI.  # noqa: E501
        :type: bool
        """

        self._supports_vlan = supports_vlan

    @property
    def target_portal_group_tag(self):
        """Gets the target_portal_group_tag of this PortISCSI.  # noqa: E501

        Target portal group of the iSCSI port  # noqa: E501

        :return: The target_portal_group_tag of this PortISCSI.  # noqa: E501
        :rtype: int
        """
        return self._target_portal_group_tag

    @target_portal_group_tag.setter
    def target_portal_group_tag(self, target_portal_group_tag):
        """Sets the target_portal_group_tag of this PortISCSI.

        Target portal group of the iSCSI port  # noqa: E501

        :param target_portal_group_tag: The target_portal_group_tag of this PortISCSI.  # noqa: E501
        :type: int
        """

        self._target_portal_group_tag = target_portal_group_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortISCSI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
