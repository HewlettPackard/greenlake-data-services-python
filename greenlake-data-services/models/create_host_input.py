# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateHostInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comment': 'str',
        'contact': 'str',
        'fqdn': 'str',
        'host_group_ids': 'list[str]',
        'initiator_ids': 'list[str]',
        'initiators_to_create': 'list[InitiatorInput]',
        'ip_address': 'str',
        'location': 'str',
        'model': 'str',
        'name': 'str',
        'operating_system': 'str',
        'persona': 'str',
        'protocol': 'str',
        'subnet': 'str',
        'user_created': 'bool'
    }

    attribute_map = {
        'comment': 'comment',
        'contact': 'contact',
        'fqdn': 'fqdn',
        'host_group_ids': 'hostGroupIds',
        'initiator_ids': 'initiatorIds',
        'initiators_to_create': 'initiatorsToCreate',
        'ip_address': 'ipAddress',
        'location': 'location',
        'model': 'model',
        'name': 'name',
        'operating_system': 'operatingSystem',
        'persona': 'persona',
        'protocol': 'protocol',
        'subnet': 'subnet',
        'user_created': 'userCreated'
    }

    def __init__(self, comment=None, contact=None, fqdn=None, host_group_ids=None, initiator_ids=None, initiators_to_create=None, ip_address=None, location=None, model=None, name=None, operating_system=None, persona=None, protocol=None, subnet=None, user_created=None):  # noqa: E501
        """CreateHostInput - a model defined in OpenAPI"""  # noqa: E501

        self._comment = None
        self._contact = None
        self._fqdn = None
        self._host_group_ids = None
        self._initiator_ids = None
        self._initiators_to_create = None
        self._ip_address = None
        self._location = None
        self._model = None
        self._name = None
        self._operating_system = None
        self._persona = None
        self._protocol = None
        self._subnet = None
        self._user_created = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if contact is not None:
            self.contact = contact
        if fqdn is not None:
            self.fqdn = fqdn
        if host_group_ids is not None:
            self.host_group_ids = host_group_ids
        if initiator_ids is not None:
            self.initiator_ids = initiator_ids
        if initiators_to_create is not None:
            self.initiators_to_create = initiators_to_create
        if ip_address is not None:
            self.ip_address = ip_address
        if location is not None:
            self.location = location
        if model is not None:
            self.model = model
        self.name = name
        self.operating_system = operating_system
        if persona is not None:
            self.persona = persona
        if protocol is not None:
            self.protocol = protocol
        if subnet is not None:
            self.subnet = subnet
        self.user_created = user_created

    @property
    def comment(self):
        """Gets the comment of this CreateHostInput.  # noqa: E501

        Comment  # noqa: E501

        :return: The comment of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreateHostInput.

        Comment  # noqa: E501

        :param comment: The comment of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def contact(self):
        """Gets the contact of this CreateHostInput.  # noqa: E501

        Contact information  # noqa: E501

        :return: The contact of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this CreateHostInput.

        Contact information  # noqa: E501

        :param contact: The contact of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def fqdn(self):
        """Gets the fqdn of this CreateHostInput.  # noqa: E501

        Fully qualified domain name of the host.  # noqa: E501

        :return: The fqdn of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this CreateHostInput.

        Fully qualified domain name of the host.  # noqa: E501

        :param fqdn: The fqdn of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def host_group_ids(self):
        """Gets the host_group_ids of this CreateHostInput.  # noqa: E501

        List of hostgroup IDs  # noqa: E501

        :return: The host_group_ids of this CreateHostInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_group_ids

    @host_group_ids.setter
    def host_group_ids(self, host_group_ids):
        """Sets the host_group_ids of this CreateHostInput.

        List of hostgroup IDs  # noqa: E501

        :param host_group_ids: The host_group_ids of this CreateHostInput.  # noqa: E501
        :type: list[str]
        """

        self._host_group_ids = host_group_ids

    @property
    def initiator_ids(self):
        """Gets the initiator_ids of this CreateHostInput.  # noqa: E501

        List of ids of existing initiators  # noqa: E501

        :return: The initiator_ids of this CreateHostInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._initiator_ids

    @initiator_ids.setter
    def initiator_ids(self, initiator_ids):
        """Sets the initiator_ids of this CreateHostInput.

        List of ids of existing initiators  # noqa: E501

        :param initiator_ids: The initiator_ids of this CreateHostInput.  # noqa: E501
        :type: list[str]
        """

        self._initiator_ids = initiator_ids

    @property
    def initiators_to_create(self):
        """Gets the initiators_to_create of this CreateHostInput.  # noqa: E501

        List of initiators to be created and added to this host  # noqa: E501

        :return: The initiators_to_create of this CreateHostInput.  # noqa: E501
        :rtype: list[InitiatorInput]
        """
        return self._initiators_to_create

    @initiators_to_create.setter
    def initiators_to_create(self, initiators_to_create):
        """Sets the initiators_to_create of this CreateHostInput.

        List of initiators to be created and added to this host  # noqa: E501

        :param initiators_to_create: The initiators_to_create of this CreateHostInput.  # noqa: E501
        :type: list[InitiatorInput]
        """

        self._initiators_to_create = initiators_to_create

    @property
    def ip_address(self):
        """Gets the ip_address of this CreateHostInput.  # noqa: E501

        IP address of the host.  # noqa: E501

        :return: The ip_address of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this CreateHostInput.

        IP address of the host.  # noqa: E501

        :param ip_address: The ip_address of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def location(self):
        """Gets the location of this CreateHostInput.  # noqa: E501

        location.  # noqa: E501

        :return: The location of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateHostInput.

        location.  # noqa: E501

        :param location: The location of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def model(self):
        """Gets the model of this CreateHostInput.  # noqa: E501

        Model  # noqa: E501

        :return: The model of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CreateHostInput.

        Model  # noqa: E501

        :param model: The model of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this CreateHostInput.  # noqa: E501

        Name of the host.  # noqa: E501

        :return: The name of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateHostInput.

        Name of the host.  # noqa: E501

        :param name: The name of this CreateHostInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def operating_system(self):
        """Gets the operating_system of this CreateHostInput.  # noqa: E501

        Host operating system. Possible Values are: - AIX - Apple - Citrix Hypervisor(XenServer) - HP-UX - IBM VIO Server - InForm - NetApp/ONTAP - OE Linux UEK - OpenVMS - Oracle VM x86 - RHE Linux - RHE Virtualization - Solaris - SuSE Linux - SuSE Virtualization - Ubuntu - VMware (ESXi) - Windows Server  # noqa: E501

        :return: The operating_system of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this CreateHostInput.

        Host operating system. Possible Values are: - AIX - Apple - Citrix Hypervisor(XenServer) - HP-UX - IBM VIO Server - InForm - NetApp/ONTAP - OE Linux UEK - OpenVMS - Oracle VM x86 - RHE Linux - RHE Virtualization - Solaris - SuSE Linux - SuSE Virtualization - Ubuntu - VMware (ESXi) - Windows Server  # noqa: E501

        :param operating_system: The operating_system of this CreateHostInput.  # noqa: E501
        :type: str
        """
        if operating_system is None:
            raise ValueError("Invalid value for `operating_system`, must not be `None`")  # noqa: E501

        self._operating_system = operating_system

    @property
    def persona(self):
        """Gets the persona of this CreateHostInput.  # noqa: E501

        Host persona details.  # noqa: E501

        :return: The persona of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._persona

    @persona.setter
    def persona(self, persona):
        """Sets the persona of this CreateHostInput.

        Host persona details.  # noqa: E501

        :param persona: The persona of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._persona = persona

    @property
    def protocol(self):
        """Gets the protocol of this CreateHostInput.  # noqa: E501

        protocol  # noqa: E501

        :return: The protocol of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CreateHostInput.

        protocol  # noqa: E501

        :param protocol: The protocol of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def subnet(self):
        """Gets the subnet of this CreateHostInput.  # noqa: E501

        subnet.  # noqa: E501

        :return: The subnet of this CreateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this CreateHostInput.

        subnet.  # noqa: E501

        :param subnet: The subnet of this CreateHostInput.  # noqa: E501
        :type: str
        """

        self._subnet = subnet

    @property
    def user_created(self):
        """Gets the user_created of this CreateHostInput.  # noqa: E501

        Indicates whether user created host or discovered host  # noqa: E501

        :return: The user_created of this CreateHostInput.  # noqa: E501
        :rtype: bool
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this CreateHostInput.

        Indicates whether user created host or discovered host  # noqa: E501

        :param user_created: The user_created of this CreateHostInput.  # noqa: E501
        :type: bool
        """
        if user_created is None:
            raise ValueError("Invalid value for `user_created`, must not be `None`")  # noqa: E501

        self._user_created = user_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateHostInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
