# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleHCFResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'element_name': 'str',
        'error_list': 'list[str]',
        'messages': 'list[NimbleErrorWithArguments]'
    }

    attribute_map = {
        'element_name': 'element_name',
        'error_list': 'error_list',
        'messages': 'messages'
    }

    def __init__(self, element_name=None, error_list=None, messages=None):  # noqa: E501
        """NimbleHCFResult - a model defined in OpenAPI"""  # noqa: E501

        self._element_name = None
        self._error_list = None
        self._messages = None
        self.discriminator = None

        if element_name is not None:
            self.element_name = element_name
        if error_list is not None:
            self.error_list = error_list
        if messages is not None:
            self.messages = messages

    @property
    def element_name(self):
        """Gets the element_name of this NimbleHCFResult.  # noqa: E501

        Name of the element  # noqa: E501

        :return: The element_name of this NimbleHCFResult.  # noqa: E501
        :rtype: str
        """
        return self._element_name

    @element_name.setter
    def element_name(self, element_name):
        """Sets the element_name of this NimbleHCFResult.

        Name of the element  # noqa: E501

        :param element_name: The element_name of this NimbleHCFResult.  # noqa: E501
        :type: str
        """

        self._element_name = element_name

    @property
    def error_list(self):
        """Gets the error_list of this NimbleHCFResult.  # noqa: E501

        List of health check errors for this element.  # noqa: E501

        :return: The error_list of this NimbleHCFResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_list

    @error_list.setter
    def error_list(self, error_list):
        """Sets the error_list of this NimbleHCFResult.

        List of health check errors for this element.  # noqa: E501

        :param error_list: The error_list of this NimbleHCFResult.  # noqa: E501
        :type: list[str]
        """

        self._error_list = error_list

    @property
    def messages(self):
        """Gets the messages of this NimbleHCFResult.  # noqa: E501

        List of error or info messages.  # noqa: E501

        :return: The messages of this NimbleHCFResult.  # noqa: E501
        :rtype: list[NimbleErrorWithArguments]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this NimbleHCFResult.

        List of error or info messages.  # noqa: E501

        :param messages: The messages of this NimbleHCFResult.  # noqa: E501
        :type: list[NimbleErrorWithArguments]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleHCFResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
