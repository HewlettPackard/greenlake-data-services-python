# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StorageSystemDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'array_list': 'list[NimbleArraySummary]',
        'associated_links': 'AssociatedLinks',
        'callhome_status': 'str',
        'collection_status': 'CollectionStatus',
        'connection_status': 'ConnectionStatus',
        'console_uri': 'str',
        'customer_id': 'str',
        'description': 'str',
        'fqdn': 'str',
        'generation': 'int',
        'id': 'str',
        'last_connected_time': 'int',
        'mgmt_ip': 'Ips',
        'model': 'str',
        'name': 'str',
        'product_family': 'str',
        'request_uri': 'str',
        'resource_uri': 'str',
        'software_version': 'str',
        'state': 'str',
        'system_wwn': 'str',
        'tier_type': 'str',
        'type': 'str',
        'up_since': 'int'
    }

    attribute_map = {
        'array_list': 'arrayList',
        'associated_links': 'associatedLinks',
        'callhome_status': 'callhomeStatus',
        'collection_status': 'collectionStatus',
        'connection_status': 'connectionStatus',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'description': 'description',
        'fqdn': 'fqdn',
        'generation': 'generation',
        'id': 'id',
        'last_connected_time': 'lastConnectedTime',
        'mgmt_ip': 'mgmtIp',
        'model': 'model',
        'name': 'name',
        'product_family': 'productFamily',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'software_version': 'softwareVersion',
        'state': 'state',
        'system_wwn': 'systemWWN',
        'tier_type': 'tierType',
        'type': 'type',
        'up_since': 'upSince'
    }

    def __init__(self, array_list=None, associated_links=None, callhome_status=None, collection_status=None, connection_status=None, console_uri=None, customer_id=None, description=None, fqdn=None, generation=None, id=None, last_connected_time=None, mgmt_ip=None, model=None, name=None, product_family=None, request_uri=None, resource_uri=None, software_version=None, state=None, system_wwn=None, tier_type=None, type=None, up_since=None):  # noqa: E501
        """StorageSystemDetail - a model defined in OpenAPI"""  # noqa: E501

        self._array_list = None
        self._associated_links = None
        self._callhome_status = None
        self._collection_status = None
        self._connection_status = None
        self._console_uri = None
        self._customer_id = None
        self._description = None
        self._fqdn = None
        self._generation = None
        self._id = None
        self._last_connected_time = None
        self._mgmt_ip = None
        self._model = None
        self._name = None
        self._product_family = None
        self._request_uri = None
        self._resource_uri = None
        self._software_version = None
        self._state = None
        self._system_wwn = None
        self._tier_type = None
        self._type = None
        self._up_since = None
        self.discriminator = None

        if array_list is not None:
            self.array_list = array_list
        if associated_links is not None:
            self.associated_links = associated_links
        if callhome_status is not None:
            self.callhome_status = callhome_status
        if collection_status is not None:
            self.collection_status = collection_status
        if connection_status is not None:
            self.connection_status = connection_status
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if description is not None:
            self.description = description
        if fqdn is not None:
            self.fqdn = fqdn
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if last_connected_time is not None:
            self.last_connected_time = last_connected_time
        if mgmt_ip is not None:
            self.mgmt_ip = mgmt_ip
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if product_family is not None:
            self.product_family = product_family
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if software_version is not None:
            self.software_version = software_version
        if state is not None:
            self.state = state
        if system_wwn is not None:
            self.system_wwn = system_wwn
        if tier_type is not None:
            self.tier_type = tier_type
        if type is not None:
            self.type = type
        if up_since is not None:
            self.up_since = up_since

    @property
    def array_list(self):
        """Gets the array_list of this StorageSystemDetail.  # noqa: E501

        The list of Nimble arrays part of this system.  # noqa: E501

        :return: The array_list of this StorageSystemDetail.  # noqa: E501
        :rtype: list[NimbleArraySummary]
        """
        return self._array_list

    @array_list.setter
    def array_list(self, array_list):
        """Sets the array_list of this StorageSystemDetail.

        The list of Nimble arrays part of this system.  # noqa: E501

        :param array_list: The array_list of this StorageSystemDetail.  # noqa: E501
        :type: list[NimbleArraySummary]
        """

        self._array_list = array_list

    @property
    def associated_links(self):
        """Gets the associated_links of this StorageSystemDetail.  # noqa: E501


        :return: The associated_links of this StorageSystemDetail.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this StorageSystemDetail.


        :param associated_links: The associated_links of this StorageSystemDetail.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def callhome_status(self):
        """Gets the callhome_status of this StorageSystemDetail.  # noqa: E501

        Device Call-home connectivity status  # noqa: E501

        :return: The callhome_status of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._callhome_status

    @callhome_status.setter
    def callhome_status(self, callhome_status):
        """Sets the callhome_status of this StorageSystemDetail.

        Device Call-home connectivity status  # noqa: E501

        :param callhome_status: The callhome_status of this StorageSystemDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED_NORMAL", "ENABLED_DEGRADED", "DISABLED", "UNKNOWN"]  # noqa: E501
        if callhome_status not in allowed_values:
            raise ValueError(
                "Invalid value for `callhome_status` ({0}), must be one of {1}"  # noqa: E501
                .format(callhome_status, allowed_values)
            )

        self._callhome_status = callhome_status

    @property
    def collection_status(self):
        """Gets the collection_status of this StorageSystemDetail.  # noqa: E501


        :return: The collection_status of this StorageSystemDetail.  # noqa: E501
        :rtype: CollectionStatus
        """
        return self._collection_status

    @collection_status.setter
    def collection_status(self, collection_status):
        """Sets the collection_status of this StorageSystemDetail.


        :param collection_status: The collection_status of this StorageSystemDetail.  # noqa: E501
        :type: CollectionStatus
        """

        self._collection_status = collection_status

    @property
    def connection_status(self):
        """Gets the connection_status of this StorageSystemDetail.  # noqa: E501


        :return: The connection_status of this StorageSystemDetail.  # noqa: E501
        :rtype: ConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this StorageSystemDetail.


        :param connection_status: The connection_status of this StorageSystemDetail.  # noqa: E501
        :type: ConnectionStatus
        """

        self._connection_status = connection_status

    @property
    def console_uri(self):
        """Gets the console_uri of this StorageSystemDetail.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this StorageSystemDetail.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this StorageSystemDetail.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this StorageSystemDetail.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this StorageSystemDetail.  # noqa: E501

        A brief description of the storage system.  # noqa: E501

        :return: The description of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorageSystemDetail.

        A brief description of the storage system.  # noqa: E501

        :param description: The description of this StorageSystemDetail.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def fqdn(self):
        """Gets the fqdn of this StorageSystemDetail.  # noqa: E501

        Fully qualified domain name of the system  # noqa: E501

        :return: The fqdn of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this StorageSystemDetail.

        Fully qualified domain name of the system  # noqa: E501

        :param fqdn: The fqdn of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def generation(self):
        """Gets the generation of this StorageSystemDetail.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this StorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this StorageSystemDetail.

        generation  # noqa: E501

        :param generation: The generation of this StorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this StorageSystemDetail.  # noqa: E501

        UUID string uniquely identifying the storage system object.  # noqa: E501

        :return: The id of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageSystemDetail.

        UUID string uniquely identifying the storage system object.  # noqa: E501

        :param id: The id of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_connected_time(self):
        """Gets the last_connected_time of this StorageSystemDetail.  # noqa: E501


        :return: The last_connected_time of this StorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._last_connected_time

    @last_connected_time.setter
    def last_connected_time(self, last_connected_time):
        """Sets the last_connected_time of this StorageSystemDetail.


        :param last_connected_time: The last_connected_time of this StorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._last_connected_time = last_connected_time

    @property
    def mgmt_ip(self):
        """Gets the mgmt_ip of this StorageSystemDetail.  # noqa: E501


        :return: The mgmt_ip of this StorageSystemDetail.  # noqa: E501
        :rtype: Ips
        """
        return self._mgmt_ip

    @mgmt_ip.setter
    def mgmt_ip(self, mgmt_ip):
        """Sets the mgmt_ip of this StorageSystemDetail.


        :param mgmt_ip: The mgmt_ip of this StorageSystemDetail.  # noqa: E501
        :type: Ips
        """

        self._mgmt_ip = mgmt_ip

    @property
    def model(self):
        """Gets the model of this StorageSystemDetail.  # noqa: E501

        Model of the storage system  # noqa: E501

        :return: The model of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this StorageSystemDetail.

        Model of the storage system  # noqa: E501

        :param model: The model of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this StorageSystemDetail.  # noqa: E501

        A name to identify the storage system.  # noqa: E501

        :return: The name of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageSystemDetail.

        A name to identify the storage system.  # noqa: E501

        :param name: The name of this StorageSystemDetail.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def product_family(self):
        """Gets the product_family of this StorageSystemDetail.  # noqa: E501

        Storage device type  # noqa: E501

        :return: The product_family of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._product_family

    @product_family.setter
    def product_family(self, product_family):
        """Sets the product_family of this StorageSystemDetail.

        Storage device type  # noqa: E501

        :param product_family: The product_family of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._product_family = product_family

    @property
    def request_uri(self):
        """Gets the request_uri of this StorageSystemDetail.  # noqa: E501

        requestUri for detailed storage object  # noqa: E501

        :return: The request_uri of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this StorageSystemDetail.

        requestUri for detailed storage object  # noqa: E501

        :param request_uri: The request_uri of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this StorageSystemDetail.  # noqa: E501

        resourceUri for detailed storage object  # noqa: E501

        :return: The resource_uri of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this StorageSystemDetail.

        resourceUri for detailed storage object  # noqa: E501

        :param resource_uri: The resource_uri of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def software_version(self):
        """Gets the software_version of this StorageSystemDetail.  # noqa: E501

        Software version of the storage system  # noqa: E501

        :return: The software_version of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this StorageSystemDetail.

        Software version of the storage system  # noqa: E501

        :param software_version: The software_version of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def state(self):
        """Gets the state of this StorageSystemDetail.  # noqa: E501

        For deviceType1 State derived from ports, enclosure, disk and node state for deviceType2 state is state reported by deviceType2 array  # noqa: E501

        :return: The state of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StorageSystemDetail.

        For deviceType1 State derived from ports, enclosure, disk and node state for deviceType2 state is state reported by deviceType2 array  # noqa: E501

        :param state: The state of this StorageSystemDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "DEGRADED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def system_wwn(self):
        """Gets the system_wwn of this StorageSystemDetail.  # noqa: E501

        WWN of the array  # noqa: E501

        :return: The system_wwn of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._system_wwn

    @system_wwn.setter
    def system_wwn(self, system_wwn):
        """Sets the system_wwn of this StorageSystemDetail.

        WWN of the array  # noqa: E501

        :param system_wwn: The system_wwn of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._system_wwn = system_wwn

    @property
    def tier_type(self):
        """Gets the tier_type of this StorageSystemDetail.  # noqa: E501

        StorageTier.  # noqa: E501

        :return: The tier_type of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._tier_type

    @tier_type.setter
    def tier_type(self, tier_type):
        """Sets the tier_type of this StorageSystemDetail.

        StorageTier.  # noqa: E501

        :param tier_type: The tier_type of this StorageSystemDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["STORAGE_TIER_9000_NVME", "STORAGE_TIER_6000_NVME", "STORAGE_TIER_NIMBLE_HYBRID", "STORAGE_TIER_NIMBLE_AFA", "STORAGE_TIER_600_AFA", "STORAGE_TIER_600_HYBRID", "STORAGE_TIER_NIMBLE_VSA", "STORAGE_TIER_MISSION_CRITICAL", "STORAGE_TIER_BUSINESS_CRITICAL", "STORAGE_TIER_GENERAL_PURPOSE", "STORAGE_TIER_5000", "STORAGE_TIER_UNKNOWN"]  # noqa: E501
        if tier_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tier_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tier_type, allowed_values)
            )

        self._tier_type = tier_type

    @property
    def type(self):
        """Gets the type of this StorageSystemDetail.  # noqa: E501

        type  # noqa: E501

        :return: The type of this StorageSystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageSystemDetail.

        type  # noqa: E501

        :param type: The type of this StorageSystemDetail.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def up_since(self):
        """Gets the up_since of this StorageSystemDetail.  # noqa: E501

        The time that the system has been up since  # noqa: E501

        :return: The up_since of this StorageSystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._up_since

    @up_since.setter
    def up_since(self, up_since):
        """Sets the up_since of this StorageSystemDetail.

        The time that the system has been up since  # noqa: E501

        :param up_since: The up_since of this StorageSystemDetail.  # noqa: E501
        :type: int
        """

        self._up_since = up_since

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageSystemDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
