# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Snmp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'console_uri': 'str',
        'customer_id': 'str',
        'generation': 'int',
        'id': 'str',
        'manager_ip': 'str',
        'notify': 'str',
        'port': 'int',
        'system_id': 'str',
        'system_wwn': 'str',
        'type': 'str',
        'user': 'str',
        'version': 'int'
    }

    attribute_map = {
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'generation': 'generation',
        'id': 'id',
        'manager_ip': 'managerIP',
        'notify': 'notify',
        'port': 'port',
        'system_id': 'systemId',
        'system_wwn': 'systemWWN',
        'type': 'type',
        'user': 'user',
        'version': 'version'
    }

    def __init__(self, console_uri=None, customer_id=None, generation=None, id=None, manager_ip=None, notify=None, port=None, system_id=None, system_wwn=None, type=None, user=None, version=None):  # noqa: E501
        """Snmp - a model defined in OpenAPI"""  # noqa: E501

        self._console_uri = None
        self._customer_id = None
        self._generation = None
        self._id = None
        self._manager_ip = None
        self._notify = None
        self._port = None
        self._system_id = None
        self._system_wwn = None
        self._type = None
        self._user = None
        self._version = None
        self.discriminator = None

        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if manager_ip is not None:
            self.manager_ip = manager_ip
        if notify is not None:
            self.notify = notify
        if port is not None:
            self.port = port
        if system_id is not None:
            self.system_id = system_id
        if system_wwn is not None:
            self.system_wwn = system_wwn
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user
        if version is not None:
            self.version = version

    @property
    def console_uri(self):
        """Gets the console_uri of this Snmp.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this Snmp.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this Snmp.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this Snmp.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Snmp.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this Snmp.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def generation(self):
        """Gets the generation of this Snmp.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :return: The generation of this Snmp.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this Snmp.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :param generation: The generation of this Snmp.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this Snmp.  # noqa: E501

        Unique Identifier of the resource  # noqa: E501

        :return: The id of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Snmp.

        Unique Identifier of the resource  # noqa: E501

        :param id: The id of this Snmp.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def manager_ip(self):
        """Gets the manager_ip of this Snmp.  # noqa: E501

        Specify the IP address of the host from which the manager runs  # noqa: E501

        :return: The manager_ip of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._manager_ip

    @manager_ip.setter
    def manager_ip(self, manager_ip):
        """Sets the manager_ip of this Snmp.

        Specify the IP address of the host from which the manager runs  # noqa: E501

        :param manager_ip: The manager_ip of this Snmp.  # noqa: E501
        :type: str
        """

        self._manager_ip = manager_ip

    @property
    def notify(self):
        """Gets the notify of this Snmp.  # noqa: E501

        Indicates the trap notification types defined by the HPE deviceType1 MIB  # noqa: E501

        :return: The notify of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this Snmp.

        Indicates the trap notification types defined by the HPE deviceType1 MIB  # noqa: E501

        :param notify: The notify of this Snmp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "NODUP", "STANDARD"]  # noqa: E501
        if notify not in allowed_values:
            raise ValueError(
                "Invalid value for `notify` ({0}), must be one of {1}"  # noqa: E501
                .format(notify, allowed_values)
            )

        self._notify = notify

    @property
    def port(self):
        """Gets the port of this Snmp.  # noqa: E501

        Specify the port number where the SNMP manager receives traps  # noqa: E501

        :return: The port of this Snmp.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Snmp.

        Specify the port number where the SNMP manager receives traps  # noqa: E501

        :param port: The port of this Snmp.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def system_id(self):
        """Gets the system_id of this Snmp.  # noqa: E501

        SystemId of the storage system  # noqa: E501

        :return: The system_id of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this Snmp.

        SystemId of the storage system  # noqa: E501

        :param system_id: The system_id of this Snmp.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_wwn(self):
        """Gets the system_wwn of this Snmp.  # noqa: E501

        WWN of the array  # noqa: E501

        :return: The system_wwn of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._system_wwn

    @system_wwn.setter
    def system_wwn(self, system_wwn):
        """Sets the system_wwn of this Snmp.

        WWN of the array  # noqa: E501

        :param system_wwn: The system_wwn of this Snmp.  # noqa: E501
        :type: str
        """

        self._system_wwn = system_wwn

    @property
    def type(self):
        """Gets the type of this Snmp.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Snmp.

        The type of resource.  # noqa: E501

        :param type: The type of this Snmp.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this Snmp.  # noqa: E501

        Specify the SNMPv3 user name  # noqa: E501

        :return: The user of this Snmp.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Snmp.

        Specify the SNMPv3 user name  # noqa: E501

        :param user: The user of this Snmp.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def version(self):
        """Gets the version of this Snmp.  # noqa: E501

        Specify the SNMP version supported  # noqa: E501

        :return: The version of this Snmp.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Snmp.

        Specify the SNMP version supported  # noqa: E501

        :param version: The version of this Snmp.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snmp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
