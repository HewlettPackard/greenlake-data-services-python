# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HostProximityInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host_name': 'str',
        'proximity': 'str'
    }

    attribute_map = {
        'host_name': 'hostName',
        'proximity': 'proximity'
    }

    def __init__(self, host_name=None, proximity=None):  # noqa: E501
        """HostProximityInput - a model defined in OpenAPI"""  # noqa: E501

        self._host_name = None
        self._proximity = None
        self.discriminator = None

        self.host_name = host_name
        self.proximity = proximity

    @property
    def host_name(self):
        """Gets the host_name of this HostProximityInput.  # noqa: E501

        Name of the host of which proximity setting is getting changed.  # noqa: E501

        :return: The host_name of this HostProximityInput.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this HostProximityInput.

        Name of the host of which proximity setting is getting changed.  # noqa: E501

        :param host_name: The host_name of this HostProximityInput.  # noqa: E501
        :type: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501

        self._host_name = host_name

    @property
    def proximity(self):
        """Gets the proximity of this HostProximityInput.  # noqa: E501

        Host proximity setting for Active Peer Persistence configuration. Supported values are - PRIMARY, SECONDARY and ALL  # noqa: E501

        :return: The proximity of this HostProximityInput.  # noqa: E501
        :rtype: str
        """
        return self._proximity

    @proximity.setter
    def proximity(self, proximity):
        """Sets the proximity of this HostProximityInput.

        Host proximity setting for Active Peer Persistence configuration. Supported values are - PRIMARY, SECONDARY and ALL  # noqa: E501

        :param proximity: The proximity of this HostProximityInput.  # noqa: E501
        :type: str
        """
        if proximity is None:
            raise ValueError("Invalid value for `proximity`, must not be `None`")  # noqa: E501
        allowed_values = ["PRIMARY", "SECONDARY", "ALL"]  # noqa: E501
        if proximity not in allowed_values:
            raise ValueError(
                "Invalid value for `proximity` ({0}), must be one of {1}"  # noqa: E501
                .format(proximity, allowed_values)
            )

        self._proximity = proximity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostProximityInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
