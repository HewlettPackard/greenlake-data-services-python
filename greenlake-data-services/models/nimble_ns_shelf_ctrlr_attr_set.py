# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNsShelfCtrlrAttrSet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cached_serial': 'str',
        'disk_serials': 'str',
        'disk_types': 'str',
        'hw_state': 'str',
        'session_serial': 'str',
        'sw_type': 'str'
    }

    attribute_map = {
        'cached_serial': 'cached_serial',
        'disk_serials': 'disk_serials',
        'disk_types': 'disk_types',
        'hw_state': 'hw_state',
        'session_serial': 'session_serial',
        'sw_type': 'sw_type'
    }

    def __init__(self, cached_serial=None, disk_serials=None, disk_types=None, hw_state=None, session_serial=None, sw_type=None):  # noqa: E501
        """NimbleNsShelfCtrlrAttrSet - a model defined in OpenAPI"""  # noqa: E501

        self._cached_serial = None
        self._disk_serials = None
        self._disk_types = None
        self._hw_state = None
        self._session_serial = None
        self._sw_type = None
        self.discriminator = None

        if cached_serial is not None:
            self.cached_serial = cached_serial
        if disk_serials is not None:
            self.disk_serials = disk_serials
        if disk_types is not None:
            self.disk_types = disk_types
        if hw_state is not None:
            self.hw_state = hw_state
        if session_serial is not None:
            self.session_serial = session_serial
        if sw_type is not None:
            self.sw_type = sw_type

    @property
    def cached_serial(self):
        """Gets the cached_serial of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501

        Cached serial.  # noqa: E501

        :return: The cached_serial of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :rtype: str
        """
        return self._cached_serial

    @cached_serial.setter
    def cached_serial(self, cached_serial):
        """Sets the cached_serial of this NimbleNsShelfCtrlrAttrSet.

        Cached serial.  # noqa: E501

        :param cached_serial: The cached_serial of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :type: str
        """

        self._cached_serial = cached_serial

    @property
    def disk_serials(self):
        """Gets the disk_serials of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501

        Comma separated list of disk serials connected to this logical controller.  # noqa: E501

        :return: The disk_serials of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :rtype: str
        """
        return self._disk_serials

    @disk_serials.setter
    def disk_serials(self, disk_serials):
        """Sets the disk_serials of this NimbleNsShelfCtrlrAttrSet.

        Comma separated list of disk serials connected to this logical controller.  # noqa: E501

        :param disk_serials: The disk_serials of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :type: str
        """

        self._disk_serials = disk_serials

    @property
    def disk_types(self):
        """Gets the disk_types of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501

        Comma separated list of disk types (H for HDD, S for SSD).  # noqa: E501

        :return: The disk_types of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :rtype: str
        """
        return self._disk_types

    @disk_types.setter
    def disk_types(self, disk_types):
        """Sets the disk_types of this NimbleNsShelfCtrlrAttrSet.

        Comma separated list of disk types (H for HDD, S for SSD).  # noqa: E501

        :param disk_types: The disk_types of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :type: str
        """

        self._disk_types = disk_types

    @property
    def hw_state(self):
        """Gets the hw_state of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501

        The hardware state for this logical controller. Possible values:'discovering', 'disconnected', 'void','ready','faulty'.  # noqa: E501

        :return: The hw_state of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :rtype: str
        """
        return self._hw_state

    @hw_state.setter
    def hw_state(self, hw_state):
        """Sets the hw_state of this NimbleNsShelfCtrlrAttrSet.

        The hardware state for this logical controller. Possible values:'discovering', 'disconnected', 'void','ready','faulty'.  # noqa: E501

        :param hw_state: The hw_state of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :type: str
        """

        self._hw_state = hw_state

    @property
    def session_serial(self):
        """Gets the session_serial of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501

        Session serial.  # noqa: E501

        :return: The session_serial of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :rtype: str
        """
        return self._session_serial

    @session_serial.setter
    def session_serial(self, session_serial):
        """Sets the session_serial of this NimbleNsShelfCtrlrAttrSet.

        Session serial.  # noqa: E501

        :param session_serial: The session_serial of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :type: str
        """

        self._session_serial = session_serial

    @property
    def sw_type(self):
        """Gets the sw_type of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501

        The software type of this logical controller. Possible values:'Disk Shelf', 'unknown shelf software type', 'All Flash Shelf','Head Shelf'.  # noqa: E501

        :return: The sw_type of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :rtype: str
        """
        return self._sw_type

    @sw_type.setter
    def sw_type(self, sw_type):
        """Sets the sw_type of this NimbleNsShelfCtrlrAttrSet.

        The software type of this logical controller. Possible values:'Disk Shelf', 'unknown shelf software type', 'All Flash Shelf','Head Shelf'.  # noqa: E501

        :param sw_type: The sw_type of this NimbleNsShelfCtrlrAttrSet.  # noqa: E501
        :type: str
        """

        self._sw_type = sw_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNsShelfCtrlrAttrSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
