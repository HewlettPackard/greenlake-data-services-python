# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EnclosureCardPortList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'EcpAssociatedLinks',
        'customer_id': 'str',
        'dc4data': 'EcpDc4data',
        'dcsdata': 'EcpDcsdata',
        'disabled': 'bool',
        'domain': 'str',
        'element_status_code': 'str',
        'enclosure_card_device_id': 'int',
        'enclosure_card_id': 'str',
        'enclosure_card_port_id': 'int',
        'enclosure_card_port_type': 'str',
        'enclosure_device_id': 'int',
        'enclosure_id': 'str',
        'enclosure_name': 'str',
        'enclosure_type': 'EnclosureTypeSingle',
        'generation': 'int',
        'id': 'str',
        'link_speed': 'str',
        'locate_enabled': 'bool',
        'loop_a': 'bool',
        'loop_index': 'int',
        'node_port': 'EncPortPosition',
        'os_display_name': 'str',
        'port_wwn': 'str',
        'resource_uri': 'str',
        'sfp': 'FcPortSfp',
        'system_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'customer_id': 'customerId',
        'dc4data': 'dc4data',
        'dcsdata': 'dcsdata',
        'disabled': 'disabled',
        'domain': 'domain',
        'element_status_code': 'elementStatusCode',
        'enclosure_card_device_id': 'enclosureCardDeviceId',
        'enclosure_card_id': 'enclosureCardId',
        'enclosure_card_port_id': 'enclosureCardPortId',
        'enclosure_card_port_type': 'enclosureCardPortType',
        'enclosure_device_id': 'enclosureDeviceId',
        'enclosure_id': 'enclosureId',
        'enclosure_name': 'enclosureName',
        'enclosure_type': 'enclosureType',
        'generation': 'generation',
        'id': 'id',
        'link_speed': 'linkSpeed',
        'locate_enabled': 'locateEnabled',
        'loop_a': 'loopA',
        'loop_index': 'loopIndex',
        'node_port': 'nodePort',
        'os_display_name': 'osDisplayName',
        'port_wwn': 'portWwn',
        'resource_uri': 'resourceUri',
        'sfp': 'sfp',
        'system_id': 'systemId',
        'type': 'type'
    }

    def __init__(self, associated_links=None, customer_id=None, dc4data=None, dcsdata=None, disabled=None, domain=None, element_status_code=None, enclosure_card_device_id=None, enclosure_card_id=None, enclosure_card_port_id=None, enclosure_card_port_type=None, enclosure_device_id=None, enclosure_id=None, enclosure_name=None, enclosure_type=None, generation=None, id=None, link_speed=None, locate_enabled=None, loop_a=None, loop_index=None, node_port=None, os_display_name=None, port_wwn=None, resource_uri=None, sfp=None, system_id=None, type=None):  # noqa: E501
        """EnclosureCardPortList - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._customer_id = None
        self._dc4data = None
        self._dcsdata = None
        self._disabled = None
        self._domain = None
        self._element_status_code = None
        self._enclosure_card_device_id = None
        self._enclosure_card_id = None
        self._enclosure_card_port_id = None
        self._enclosure_card_port_type = None
        self._enclosure_device_id = None
        self._enclosure_id = None
        self._enclosure_name = None
        self._enclosure_type = None
        self._generation = None
        self._id = None
        self._link_speed = None
        self._locate_enabled = None
        self._loop_a = None
        self._loop_index = None
        self._node_port = None
        self._os_display_name = None
        self._port_wwn = None
        self._resource_uri = None
        self._sfp = None
        self._system_id = None
        self._type = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if customer_id is not None:
            self.customer_id = customer_id
        if dc4data is not None:
            self.dc4data = dc4data
        if dcsdata is not None:
            self.dcsdata = dcsdata
        if disabled is not None:
            self.disabled = disabled
        if domain is not None:
            self.domain = domain
        if element_status_code is not None:
            self.element_status_code = element_status_code
        if enclosure_card_device_id is not None:
            self.enclosure_card_device_id = enclosure_card_device_id
        if enclosure_card_id is not None:
            self.enclosure_card_id = enclosure_card_id
        if enclosure_card_port_id is not None:
            self.enclosure_card_port_id = enclosure_card_port_id
        if enclosure_card_port_type is not None:
            self.enclosure_card_port_type = enclosure_card_port_type
        if enclosure_device_id is not None:
            self.enclosure_device_id = enclosure_device_id
        if enclosure_id is not None:
            self.enclosure_id = enclosure_id
        if enclosure_name is not None:
            self.enclosure_name = enclosure_name
        if enclosure_type is not None:
            self.enclosure_type = enclosure_type
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if link_speed is not None:
            self.link_speed = link_speed
        if locate_enabled is not None:
            self.locate_enabled = locate_enabled
        if loop_a is not None:
            self.loop_a = loop_a
        if loop_index is not None:
            self.loop_index = loop_index
        if node_port is not None:
            self.node_port = node_port
        if os_display_name is not None:
            self.os_display_name = os_display_name
        if port_wwn is not None:
            self.port_wwn = port_wwn
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if sfp is not None:
            self.sfp = sfp
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type

    @property
    def associated_links(self):
        """Gets the associated_links of this EnclosureCardPortList.  # noqa: E501


        :return: The associated_links of this EnclosureCardPortList.  # noqa: E501
        :rtype: EcpAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this EnclosureCardPortList.


        :param associated_links: The associated_links of this EnclosureCardPortList.  # noqa: E501
        :type: EcpAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def customer_id(self):
        """Gets the customer_id of this EnclosureCardPortList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this EnclosureCardPortList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def dc4data(self):
        """Gets the dc4data of this EnclosureCardPortList.  # noqa: E501


        :return: The dc4data of this EnclosureCardPortList.  # noqa: E501
        :rtype: EcpDc4data
        """
        return self._dc4data

    @dc4data.setter
    def dc4data(self, dc4data):
        """Sets the dc4data of this EnclosureCardPortList.


        :param dc4data: The dc4data of this EnclosureCardPortList.  # noqa: E501
        :type: EcpDc4data
        """

        self._dc4data = dc4data

    @property
    def dcsdata(self):
        """Gets the dcsdata of this EnclosureCardPortList.  # noqa: E501


        :return: The dcsdata of this EnclosureCardPortList.  # noqa: E501
        :rtype: EcpDcsdata
        """
        return self._dcsdata

    @dcsdata.setter
    def dcsdata(self, dcsdata):
        """Sets the dcsdata of this EnclosureCardPortList.


        :param dcsdata: The dcsdata of this EnclosureCardPortList.  # noqa: E501
        :type: EcpDcsdata
        """

        self._dcsdata = dcsdata

    @property
    def disabled(self):
        """Gets the disabled of this EnclosureCardPortList.  # noqa: E501


        :return: The disabled of this EnclosureCardPortList.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this EnclosureCardPortList.


        :param disabled: The disabled of this EnclosureCardPortList.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def domain(self):
        """Gets the domain of this EnclosureCardPortList.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EnclosureCardPortList.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def element_status_code(self):
        """Gets the element_status_code of this EnclosureCardPortList.  # noqa: E501

        Enclosure status code  # noqa: E501

        :return: The element_status_code of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._element_status_code

    @element_status_code.setter
    def element_status_code(self, element_status_code):
        """Sets the element_status_code of this EnclosureCardPortList.

        Enclosure status code  # noqa: E501

        :param element_status_code: The element_status_code of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._element_status_code = element_status_code

    @property
    def enclosure_card_device_id(self):
        """Gets the enclosure_card_device_id of this EnclosureCardPortList.  # noqa: E501


        :return: The enclosure_card_device_id of this EnclosureCardPortList.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_card_device_id

    @enclosure_card_device_id.setter
    def enclosure_card_device_id(self, enclosure_card_device_id):
        """Sets the enclosure_card_device_id of this EnclosureCardPortList.


        :param enclosure_card_device_id: The enclosure_card_device_id of this EnclosureCardPortList.  # noqa: E501
        :type: int
        """

        self._enclosure_card_device_id = enclosure_card_device_id

    @property
    def enclosure_card_id(self):
        """Gets the enclosure_card_id of this EnclosureCardPortList.  # noqa: E501

        UID for the resource  # noqa: E501

        :return: The enclosure_card_id of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_card_id

    @enclosure_card_id.setter
    def enclosure_card_id(self, enclosure_card_id):
        """Sets the enclosure_card_id of this EnclosureCardPortList.

        UID for the resource  # noqa: E501

        :param enclosure_card_id: The enclosure_card_id of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._enclosure_card_id = enclosure_card_id

    @property
    def enclosure_card_port_id(self):
        """Gets the enclosure_card_port_id of this EnclosureCardPortList.  # noqa: E501

        Numeric ID of the resource  # noqa: E501

        :return: The enclosure_card_port_id of this EnclosureCardPortList.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_card_port_id

    @enclosure_card_port_id.setter
    def enclosure_card_port_id(self, enclosure_card_port_id):
        """Sets the enclosure_card_port_id of this EnclosureCardPortList.

        Numeric ID of the resource  # noqa: E501

        :param enclosure_card_port_id: The enclosure_card_port_id of this EnclosureCardPortList.  # noqa: E501
        :type: int
        """

        self._enclosure_card_port_id = enclosure_card_port_id

    @property
    def enclosure_card_port_type(self):
        """Gets the enclosure_card_port_type of this EnclosureCardPortList.  # noqa: E501


        :return: The enclosure_card_port_type of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_card_port_type

    @enclosure_card_port_type.setter
    def enclosure_card_port_type(self, enclosure_card_port_type):
        """Sets the enclosure_card_port_type of this EnclosureCardPortList.


        :param enclosure_card_port_type: The enclosure_card_port_type of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._enclosure_card_port_type = enclosure_card_port_type

    @property
    def enclosure_device_id(self):
        """Gets the enclosure_device_id of this EnclosureCardPortList.  # noqa: E501


        :return: The enclosure_device_id of this EnclosureCardPortList.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_device_id

    @enclosure_device_id.setter
    def enclosure_device_id(self, enclosure_device_id):
        """Sets the enclosure_device_id of this EnclosureCardPortList.


        :param enclosure_device_id: The enclosure_device_id of this EnclosureCardPortList.  # noqa: E501
        :type: int
        """

        self._enclosure_device_id = enclosure_device_id

    @property
    def enclosure_id(self):
        """Gets the enclosure_id of this EnclosureCardPortList.  # noqa: E501

        Parent UID of the resource.`Filter`  # noqa: E501

        :return: The enclosure_id of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_id

    @enclosure_id.setter
    def enclosure_id(self, enclosure_id):
        """Sets the enclosure_id of this EnclosureCardPortList.

        Parent UID of the resource.`Filter`  # noqa: E501

        :param enclosure_id: The enclosure_id of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._enclosure_id = enclosure_id

    @property
    def enclosure_name(self):
        """Gets the enclosure_name of this EnclosureCardPortList.  # noqa: E501

        Name of the enclosure  # noqa: E501

        :return: The enclosure_name of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_name

    @enclosure_name.setter
    def enclosure_name(self, enclosure_name):
        """Sets the enclosure_name of this EnclosureCardPortList.

        Name of the enclosure  # noqa: E501

        :param enclosure_name: The enclosure_name of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._enclosure_name = enclosure_name

    @property
    def enclosure_type(self):
        """Gets the enclosure_type of this EnclosureCardPortList.  # noqa: E501


        :return: The enclosure_type of this EnclosureCardPortList.  # noqa: E501
        :rtype: EnclosureTypeSingle
        """
        return self._enclosure_type

    @enclosure_type.setter
    def enclosure_type(self, enclosure_type):
        """Sets the enclosure_type of this EnclosureCardPortList.


        :param enclosure_type: The enclosure_type of this EnclosureCardPortList.  # noqa: E501
        :type: EnclosureTypeSingle
        """

        self._enclosure_type = enclosure_type

    @property
    def generation(self):
        """Gets the generation of this EnclosureCardPortList.  # noqa: E501

        generation `Filter, Sort`  # noqa: E501

        :return: The generation of this EnclosureCardPortList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this EnclosureCardPortList.

        generation `Filter, Sort`  # noqa: E501

        :param generation: The generation of this EnclosureCardPortList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this EnclosureCardPortList.  # noqa: E501

        Unique Identifier of the resource `Filter`  # noqa: E501

        :return: The id of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnclosureCardPortList.

        Unique Identifier of the resource `Filter`  # noqa: E501

        :param id: The id of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def link_speed(self):
        """Gets the link_speed of this EnclosureCardPortList.  # noqa: E501

        Name of the enclosure  # noqa: E501

        :return: The link_speed of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this EnclosureCardPortList.

        Name of the enclosure  # noqa: E501

        :param link_speed: The link_speed of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._link_speed = link_speed

    @property
    def locate_enabled(self):
        """Gets the locate_enabled of this EnclosureCardPortList.  # noqa: E501

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :return: The locate_enabled of this EnclosureCardPortList.  # noqa: E501
        :rtype: bool
        """
        return self._locate_enabled

    @locate_enabled.setter
    def locate_enabled(self, locate_enabled):
        """Sets the locate_enabled of this EnclosureCardPortList.

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :param locate_enabled: The locate_enabled of this EnclosureCardPortList.  # noqa: E501
        :type: bool
        """

        self._locate_enabled = locate_enabled

    @property
    def loop_a(self):
        """Gets the loop_a of this EnclosureCardPortList.  # noqa: E501


        :return: The loop_a of this EnclosureCardPortList.  # noqa: E501
        :rtype: bool
        """
        return self._loop_a

    @loop_a.setter
    def loop_a(self, loop_a):
        """Sets the loop_a of this EnclosureCardPortList.


        :param loop_a: The loop_a of this EnclosureCardPortList.  # noqa: E501
        :type: bool
        """

        self._loop_a = loop_a

    @property
    def loop_index(self):
        """Gets the loop_index of this EnclosureCardPortList.  # noqa: E501


        :return: The loop_index of this EnclosureCardPortList.  # noqa: E501
        :rtype: int
        """
        return self._loop_index

    @loop_index.setter
    def loop_index(self, loop_index):
        """Sets the loop_index of this EnclosureCardPortList.


        :param loop_index: The loop_index of this EnclosureCardPortList.  # noqa: E501
        :type: int
        """

        self._loop_index = loop_index

    @property
    def node_port(self):
        """Gets the node_port of this EnclosureCardPortList.  # noqa: E501


        :return: The node_port of this EnclosureCardPortList.  # noqa: E501
        :rtype: EncPortPosition
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this EnclosureCardPortList.


        :param node_port: The node_port of this EnclosureCardPortList.  # noqa: E501
        :type: EncPortPosition
        """

        self._node_port = node_port

    @property
    def os_display_name(self):
        """Gets the os_display_name of this EnclosureCardPortList.  # noqa: E501


        :return: The os_display_name of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._os_display_name

    @os_display_name.setter
    def os_display_name(self, os_display_name):
        """Sets the os_display_name of this EnclosureCardPortList.


        :param os_display_name: The os_display_name of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._os_display_name = os_display_name

    @property
    def port_wwn(self):
        """Gets the port_wwn of this EnclosureCardPortList.  # noqa: E501


        :return: The port_wwn of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._port_wwn

    @port_wwn.setter
    def port_wwn(self, port_wwn):
        """Sets the port_wwn of this EnclosureCardPortList.


        :param port_wwn: The port_wwn of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._port_wwn = port_wwn

    @property
    def resource_uri(self):
        """Gets the resource_uri of this EnclosureCardPortList.  # noqa: E501

        resourceUri for detailed enclosure expander object  # noqa: E501

        :return: The resource_uri of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this EnclosureCardPortList.

        resourceUri for detailed enclosure expander object  # noqa: E501

        :param resource_uri: The resource_uri of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def sfp(self):
        """Gets the sfp of this EnclosureCardPortList.  # noqa: E501


        :return: The sfp of this EnclosureCardPortList.  # noqa: E501
        :rtype: FcPortSfp
        """
        return self._sfp

    @sfp.setter
    def sfp(self, sfp):
        """Sets the sfp of this EnclosureCardPortList.


        :param sfp: The sfp of this EnclosureCardPortList.  # noqa: E501
        :type: FcPortSfp
        """

        self._sfp = sfp

    @property
    def system_id(self):
        """Gets the system_id of this EnclosureCardPortList.  # noqa: E501

        SystemId/Serial Number  of the array.  # noqa: E501

        :return: The system_id of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this EnclosureCardPortList.

        SystemId/Serial Number  of the array.  # noqa: E501

        :param system_id: The system_id of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this EnclosureCardPortList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this EnclosureCardPortList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnclosureCardPortList.

        type  # noqa: E501

        :param type: The type of this EnclosureCardPortList.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnclosureCardPortList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
