# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleEditSnapshotInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_uuid': 'str',
        'description': 'str',
        'id': 'str',
        'metadata': 'list[KeyValue]',
        'online': 'bool'
    }

    attribute_map = {
        'app_uuid': 'app_uuid',
        'description': 'description',
        'id': 'id',
        'metadata': 'metadata',
        'online': 'online'
    }

    def __init__(self, app_uuid=None, description=None, id=None, metadata=None, online=None):  # noqa: E501
        """NimbleEditSnapshotInput - a model defined in OpenAPI"""  # noqa: E501

        self._app_uuid = None
        self._description = None
        self._id = None
        self._metadata = None
        self._online = None
        self.discriminator = None

        if app_uuid is not None:
            self.app_uuid = app_uuid
        if description is not None:
            self.description = description
        self.id = id
        if metadata is not None:
            self.metadata = metadata
        if online is not None:
            self.online = online

    @property
    def app_uuid(self):
        """Gets the app_uuid of this NimbleEditSnapshotInput.  # noqa: E501

        Application identifier of snapshots. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to empty string.  # noqa: E501

        :return: The app_uuid of this NimbleEditSnapshotInput.  # noqa: E501
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid):
        """Sets the app_uuid of this NimbleEditSnapshotInput.

        Application identifier of snapshots. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to empty string.  # noqa: E501

        :param app_uuid: The app_uuid of this NimbleEditSnapshotInput.  # noqa: E501
        :type: str
        """

        self._app_uuid = app_uuid

    @property
    def description(self):
        """Gets the description of this NimbleEditSnapshotInput.  # noqa: E501

        Text description of snapshot. String of up to 255 printable ASCII characters. Defaults to the empty string.  # noqa: E501

        :return: The description of this NimbleEditSnapshotInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleEditSnapshotInput.

        Text description of snapshot. String of up to 255 printable ASCII characters. Defaults to the empty string.  # noqa: E501

        :param description: The description of this NimbleEditSnapshotInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this NimbleEditSnapshotInput.  # noqa: E501

        Identifier for the snapshot. A 42 digit hexadecimal number.  # noqa: E501

        :return: The id of this NimbleEditSnapshotInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleEditSnapshotInput.

        Identifier for the snapshot. A 42 digit hexadecimal number.  # noqa: E501

        :param id: The id of this NimbleEditSnapshotInput.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this NimbleEditSnapshotInput.  # noqa: E501

        Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.  # noqa: E501

        :return: The metadata of this NimbleEditSnapshotInput.  # noqa: E501
        :rtype: list[KeyValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NimbleEditSnapshotInput.

        Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.  # noqa: E501

        :param metadata: The metadata of this NimbleEditSnapshotInput.  # noqa: E501
        :type: list[KeyValue]
        """

        self._metadata = metadata

    @property
    def online(self):
        """Gets the online of this NimbleEditSnapshotInput.  # noqa: E501

        Online state for a snapshot means it could be mounted for data restore. Defaults to 'false'.  # noqa: E501

        :return: The online of this NimbleEditSnapshotInput.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this NimbleEditSnapshotInput.

        Online state for a snapshot means it could be mounted for data restore. Defaults to 'false'.  # noqa: E501

        :param online: The online of this NimbleEditSnapshotInput.  # noqa: E501
        :type: bool
        """

        self._online = online

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleEditSnapshotInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
