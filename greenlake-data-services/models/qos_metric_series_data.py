# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class QosMetricSeriesData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bw_limit_kbps': 'float',
        'console_uri': 'str',
        'generation': 'int',
        'timestampms': 'int',
        'type': 'str',
        'wqlen': 'float'
    }

    attribute_map = {
        'bw_limit_kbps': 'bwLimitKbps',
        'console_uri': 'consoleUri',
        'generation': 'generation',
        'timestampms': 'timestampms',
        'type': 'type',
        'wqlen': 'wqlen'
    }

    def __init__(self, bw_limit_kbps=None, console_uri=None, generation=None, timestampms=None, type=None, wqlen=None):  # noqa: E501
        """QosMetricSeriesData - a model defined in OpenAPI"""  # noqa: E501

        self._bw_limit_kbps = None
        self._console_uri = None
        self._generation = None
        self._timestampms = None
        self._type = None
        self._wqlen = None
        self.discriminator = None

        if bw_limit_kbps is not None:
            self.bw_limit_kbps = bw_limit_kbps
        if console_uri is not None:
            self.console_uri = console_uri
        if generation is not None:
            self.generation = generation
        if timestampms is not None:
            self.timestampms = timestampms
        if type is not None:
            self.type = type
        if wqlen is not None:
            self.wqlen = wqlen

    @property
    def bw_limit_kbps(self):
        """Gets the bw_limit_kbps of this QosMetricSeriesData.  # noqa: E501

        throughput threshold at particular timestamp  # noqa: E501

        :return: The bw_limit_kbps of this QosMetricSeriesData.  # noqa: E501
        :rtype: float
        """
        return self._bw_limit_kbps

    @bw_limit_kbps.setter
    def bw_limit_kbps(self, bw_limit_kbps):
        """Sets the bw_limit_kbps of this QosMetricSeriesData.

        throughput threshold at particular timestamp  # noqa: E501

        :param bw_limit_kbps: The bw_limit_kbps of this QosMetricSeriesData.  # noqa: E501
        :type: float
        """

        self._bw_limit_kbps = bw_limit_kbps

    @property
    def console_uri(self):
        """Gets the console_uri of this QosMetricSeriesData.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this QosMetricSeriesData.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this QosMetricSeriesData.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this QosMetricSeriesData.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def generation(self):
        """Gets the generation of this QosMetricSeriesData.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this QosMetricSeriesData.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this QosMetricSeriesData.

        generation  # noqa: E501

        :param generation: The generation of this QosMetricSeriesData.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def timestampms(self):
        """Gets the timestampms of this QosMetricSeriesData.  # noqa: E501

        epoch timestamp  # noqa: E501

        :return: The timestampms of this QosMetricSeriesData.  # noqa: E501
        :rtype: int
        """
        return self._timestampms

    @timestampms.setter
    def timestampms(self, timestampms):
        """Sets the timestampms of this QosMetricSeriesData.

        epoch timestamp  # noqa: E501

        :param timestampms: The timestampms of this QosMetricSeriesData.  # noqa: E501
        :type: int
        """

        self._timestampms = timestampms

    @property
    def type(self):
        """Gets the type of this QosMetricSeriesData.  # noqa: E501

        type  # noqa: E501

        :return: The type of this QosMetricSeriesData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QosMetricSeriesData.

        type  # noqa: E501

        :param type: The type of this QosMetricSeriesData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def wqlen(self):
        """Gets the wqlen of this QosMetricSeriesData.  # noqa: E501

        wait qlen value at particular timestamp  # noqa: E501

        :return: The wqlen of this QosMetricSeriesData.  # noqa: E501
        :rtype: float
        """
        return self._wqlen

    @wqlen.setter
    def wqlen(self, wqlen):
        """Sets the wqlen of this QosMetricSeriesData.

        wait qlen value at particular timestamp  # noqa: E501

        :param wqlen: The wqlen of this QosMetricSeriesData.  # noqa: E501
        :type: float
        """

        self._wqlen = wqlen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QosMetricSeriesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
