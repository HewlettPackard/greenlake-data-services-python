# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Version(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base': 'str',
        'display': 'str',
        'full': 'str',
        'full_without_patches': 'str'
    }

    attribute_map = {
        'base': 'base',
        'display': 'display',
        'full': 'full',
        'full_without_patches': 'fullWithoutPatches'
    }

    def __init__(self, base=None, display=None, full=None, full_without_patches=None):  # noqa: E501
        """Version - a model defined in OpenAPI"""  # noqa: E501

        self._base = None
        self._display = None
        self._full = None
        self._full_without_patches = None
        self.discriminator = None

        if base is not None:
            self.base = base
        if display is not None:
            self.display = display
        if full is not None:
            self.full = full
        if full_without_patches is not None:
            self.full_without_patches = full_without_patches

    @property
    def base(self):
        """Gets the base of this Version.  # noqa: E501

        Base version  # noqa: E501

        :return: The base of this Version.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Version.

        Base version  # noqa: E501

        :param base: The base of this Version.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def display(self):
        """Gets the display of this Version.  # noqa: E501

        Display name  # noqa: E501

        :return: The display of this Version.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Version.

        Display name  # noqa: E501

        :param display: The display of this Version.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def full(self):
        """Gets the full of this Version.  # noqa: E501

        Full version  # noqa: E501

        :return: The full of this Version.  # noqa: E501
        :rtype: str
        """
        return self._full

    @full.setter
    def full(self, full):
        """Sets the full of this Version.

        Full version  # noqa: E501

        :param full: The full of this Version.  # noqa: E501
        :type: str
        """

        self._full = full

    @property
    def full_without_patches(self):
        """Gets the full_without_patches of this Version.  # noqa: E501

        Base version without patches  # noqa: E501

        :return: The full_without_patches of this Version.  # noqa: E501
        :rtype: str
        """
        return self._full_without_patches

    @full_without_patches.setter
    def full_without_patches(self, full_without_patches):
        """Sets the full_without_patches of this Version.

        Base version without patches  # noqa: E501

        :param full_without_patches: The full_without_patches of this Version.  # noqa: E501
        :type: str
        """

        self._full_without_patches = full_without_patches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
