# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Space(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'free_mi_b': 'float',
        'grown_mi_b': 'float',
        'raw_reserved_mi_b': 'float',
        'reclaimed_mi_b': 'float',
        'reserved_mi_b': 'float',
        'total_mi_b': 'float',
        'used_mi_b': 'float'
    }

    attribute_map = {
        'free_mi_b': 'freeMiB',
        'grown_mi_b': 'grownMiB',
        'raw_reserved_mi_b': 'rawReservedMiB',
        'reclaimed_mi_b': 'reclaimedMiB',
        'reserved_mi_b': 'reservedMiB',
        'total_mi_b': 'totalMiB',
        'used_mi_b': 'usedMiB'
    }

    def __init__(self, free_mi_b=None, grown_mi_b=None, raw_reserved_mi_b=None, reclaimed_mi_b=None, reserved_mi_b=None, total_mi_b=None, used_mi_b=None):  # noqa: E501
        """Space - a model defined in OpenAPI"""  # noqa: E501

        self._free_mi_b = None
        self._grown_mi_b = None
        self._raw_reserved_mi_b = None
        self._reclaimed_mi_b = None
        self._reserved_mi_b = None
        self._total_mi_b = None
        self._used_mi_b = None
        self.discriminator = None

        if free_mi_b is not None:
            self.free_mi_b = free_mi_b
        if grown_mi_b is not None:
            self.grown_mi_b = grown_mi_b
        if raw_reserved_mi_b is not None:
            self.raw_reserved_mi_b = raw_reserved_mi_b
        if reclaimed_mi_b is not None:
            self.reclaimed_mi_b = reclaimed_mi_b
        if reserved_mi_b is not None:
            self.reserved_mi_b = reserved_mi_b
        if total_mi_b is not None:
            self.total_mi_b = total_mi_b
        if used_mi_b is not None:
            self.used_mi_b = used_mi_b

    @property
    def free_mi_b(self):
        """Gets the free_mi_b of this Space.  # noqa: E501


        :return: The free_mi_b of this Space.  # noqa: E501
        :rtype: float
        """
        return self._free_mi_b

    @free_mi_b.setter
    def free_mi_b(self, free_mi_b):
        """Sets the free_mi_b of this Space.


        :param free_mi_b: The free_mi_b of this Space.  # noqa: E501
        :type: float
        """

        self._free_mi_b = free_mi_b

    @property
    def grown_mi_b(self):
        """Gets the grown_mi_b of this Space.  # noqa: E501


        :return: The grown_mi_b of this Space.  # noqa: E501
        :rtype: float
        """
        return self._grown_mi_b

    @grown_mi_b.setter
    def grown_mi_b(self, grown_mi_b):
        """Sets the grown_mi_b of this Space.


        :param grown_mi_b: The grown_mi_b of this Space.  # noqa: E501
        :type: float
        """

        self._grown_mi_b = grown_mi_b

    @property
    def raw_reserved_mi_b(self):
        """Gets the raw_reserved_mi_b of this Space.  # noqa: E501


        :return: The raw_reserved_mi_b of this Space.  # noqa: E501
        :rtype: float
        """
        return self._raw_reserved_mi_b

    @raw_reserved_mi_b.setter
    def raw_reserved_mi_b(self, raw_reserved_mi_b):
        """Sets the raw_reserved_mi_b of this Space.


        :param raw_reserved_mi_b: The raw_reserved_mi_b of this Space.  # noqa: E501
        :type: float
        """

        self._raw_reserved_mi_b = raw_reserved_mi_b

    @property
    def reclaimed_mi_b(self):
        """Gets the reclaimed_mi_b of this Space.  # noqa: E501


        :return: The reclaimed_mi_b of this Space.  # noqa: E501
        :rtype: float
        """
        return self._reclaimed_mi_b

    @reclaimed_mi_b.setter
    def reclaimed_mi_b(self, reclaimed_mi_b):
        """Sets the reclaimed_mi_b of this Space.


        :param reclaimed_mi_b: The reclaimed_mi_b of this Space.  # noqa: E501
        :type: float
        """

        self._reclaimed_mi_b = reclaimed_mi_b

    @property
    def reserved_mi_b(self):
        """Gets the reserved_mi_b of this Space.  # noqa: E501


        :return: The reserved_mi_b of this Space.  # noqa: E501
        :rtype: float
        """
        return self._reserved_mi_b

    @reserved_mi_b.setter
    def reserved_mi_b(self, reserved_mi_b):
        """Sets the reserved_mi_b of this Space.


        :param reserved_mi_b: The reserved_mi_b of this Space.  # noqa: E501
        :type: float
        """

        self._reserved_mi_b = reserved_mi_b

    @property
    def total_mi_b(self):
        """Gets the total_mi_b of this Space.  # noqa: E501


        :return: The total_mi_b of this Space.  # noqa: E501
        :rtype: float
        """
        return self._total_mi_b

    @total_mi_b.setter
    def total_mi_b(self, total_mi_b):
        """Sets the total_mi_b of this Space.


        :param total_mi_b: The total_mi_b of this Space.  # noqa: E501
        :type: float
        """

        self._total_mi_b = total_mi_b

    @property
    def used_mi_b(self):
        """Gets the used_mi_b of this Space.  # noqa: E501


        :return: The used_mi_b of this Space.  # noqa: E501
        :rtype: float
        """
        return self._used_mi_b

    @used_mi_b.setter
    def used_mi_b(self, used_mi_b):
        """Sets the used_mi_b of this Space.


        :param used_mi_b: The used_mi_b of this Space.  # noqa: E501
        :type: float
        """

        self._used_mi_b = used_mi_b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Space):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
