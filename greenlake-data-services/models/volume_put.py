# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VolumePut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conversion_type': 'str',
        'data_reduction': 'bool',
        'name': 'str',
        'size_mib': 'float',
        'snapshot_alloc_warning': 'int',
        'user_alloc_warning': 'int',
        'user_cpg_name': 'str'
    }

    attribute_map = {
        'conversion_type': 'conversionType',
        'data_reduction': 'dataReduction',
        'name': 'name',
        'size_mib': 'sizeMib',
        'snapshot_alloc_warning': 'snapshotAllocWarning',
        'user_alloc_warning': 'userAllocWarning',
        'user_cpg_name': 'userCpgName'
    }

    def __init__(self, conversion_type=None, data_reduction=None, name=None, size_mib=None, snapshot_alloc_warning=None, user_alloc_warning=None, user_cpg_name=None):  # noqa: E501
        """VolumePut - a model defined in OpenAPI"""  # noqa: E501

        self._conversion_type = None
        self._data_reduction = None
        self._name = None
        self._size_mib = None
        self._snapshot_alloc_warning = None
        self._user_alloc_warning = None
        self._user_cpg_name = None
        self.discriminator = None

        if conversion_type is not None:
            self.conversion_type = conversion_type
        if data_reduction is not None:
            self.data_reduction = data_reduction
        if name is not None:
            self.name = name
        if size_mib is not None:
            self.size_mib = size_mib
        if snapshot_alloc_warning is not None:
            self.snapshot_alloc_warning = snapshot_alloc_warning
        if user_alloc_warning is not None:
            self.user_alloc_warning = user_alloc_warning
        if user_cpg_name is not None:
            self.user_cpg_name = user_cpg_name

    @property
    def conversion_type(self):
        """Gets the conversion_type of this VolumePut.  # noqa: E501

        conversion type (this argument is depricated, use dataReduction instead)  # noqa: E501

        :return: The conversion_type of this VolumePut.  # noqa: E501
        :rtype: str
        """
        return self._conversion_type

    @conversion_type.setter
    def conversion_type(self, conversion_type):
        """Sets the conversion_type of this VolumePut.

        conversion type (this argument is depricated, use dataReduction instead)  # noqa: E501

        :param conversion_type: The conversion_type of this VolumePut.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONVERSIONTYPE_THIN", "CONVERSIONTYPE_DDS", "CONVERSIONTYPE_V1", "CONVERSIONTYPE_V2"]  # noqa: E501
        if conversion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `conversion_type` ({0}), must be one of {1}"  # noqa: E501
                .format(conversion_type, allowed_values)
            )

        self._conversion_type = conversion_type

    @property
    def data_reduction(self):
        """Gets the data_reduction of this VolumePut.  # noqa: E501

        Data Reduction on Volume  # noqa: E501

        :return: The data_reduction of this VolumePut.  # noqa: E501
        :rtype: bool
        """
        return self._data_reduction

    @data_reduction.setter
    def data_reduction(self, data_reduction):
        """Sets the data_reduction of this VolumePut.

        Data Reduction on Volume  # noqa: E501

        :param data_reduction: The data_reduction of this VolumePut.  # noqa: E501
        :type: bool
        """

        self._data_reduction = data_reduction

    @property
    def name(self):
        """Gets the name of this VolumePut.  # noqa: E501

        volume name  # noqa: E501

        :return: The name of this VolumePut.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumePut.

        volume name  # noqa: E501

        :param name: The name of this VolumePut.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size_mib(self):
        """Gets the size_mib of this VolumePut.  # noqa: E501

        Size in MiB  # noqa: E501

        :return: The size_mib of this VolumePut.  # noqa: E501
        :rtype: float
        """
        return self._size_mib

    @size_mib.setter
    def size_mib(self, size_mib):
        """Sets the size_mib of this VolumePut.

        Size in MiB  # noqa: E501

        :param size_mib: The size_mib of this VolumePut.  # noqa: E501
        :type: float
        """

        self._size_mib = size_mib

    @property
    def snapshot_alloc_warning(self):
        """Gets the snapshot_alloc_warning of this VolumePut.  # noqa: E501

        snapshot alloc space allocation warning  # noqa: E501

        :return: The snapshot_alloc_warning of this VolumePut.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_alloc_warning

    @snapshot_alloc_warning.setter
    def snapshot_alloc_warning(self, snapshot_alloc_warning):
        """Sets the snapshot_alloc_warning of this VolumePut.

        snapshot alloc space allocation warning  # noqa: E501

        :param snapshot_alloc_warning: The snapshot_alloc_warning of this VolumePut.  # noqa: E501
        :type: int
        """

        self._snapshot_alloc_warning = snapshot_alloc_warning

    @property
    def user_alloc_warning(self):
        """Gets the user_alloc_warning of this VolumePut.  # noqa: E501

        User alloc space limit warning  # noqa: E501

        :return: The user_alloc_warning of this VolumePut.  # noqa: E501
        :rtype: int
        """
        return self._user_alloc_warning

    @user_alloc_warning.setter
    def user_alloc_warning(self, user_alloc_warning):
        """Sets the user_alloc_warning of this VolumePut.

        User alloc space limit warning  # noqa: E501

        :param user_alloc_warning: The user_alloc_warning of this VolumePut.  # noqa: E501
        :type: int
        """

        self._user_alloc_warning = user_alloc_warning

    @property
    def user_cpg_name(self):
        """Gets the user_cpg_name of this VolumePut.  # noqa: E501

        user cpg name  # noqa: E501

        :return: The user_cpg_name of this VolumePut.  # noqa: E501
        :rtype: str
        """
        return self._user_cpg_name

    @user_cpg_name.setter
    def user_cpg_name(self, user_cpg_name):
        """Sets the user_cpg_name of this VolumePut.

        user cpg name  # noqa: E501

        :param user_cpg_name: The user_cpg_name of this VolumePut.  # noqa: E501
        :type: str
        """

        self._user_cpg_name = user_cpg_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumePut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
