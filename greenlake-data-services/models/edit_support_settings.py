# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditSupportSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_analytics_gui': 'bool',
        'allow_support_tunnel': 'bool',
        'autosupport_enabled': 'bool'
    }

    attribute_map = {
        'allow_analytics_gui': 'allow_analytics_gui',
        'allow_support_tunnel': 'allow_support_tunnel',
        'autosupport_enabled': 'autosupport_enabled'
    }

    def __init__(self, allow_analytics_gui=None, allow_support_tunnel=None, autosupport_enabled=None):  # noqa: E501
        """EditSupportSettings - a model defined in OpenAPI"""  # noqa: E501

        self._allow_analytics_gui = None
        self._allow_support_tunnel = None
        self._autosupport_enabled = None
        self.discriminator = None

        if allow_analytics_gui is not None:
            self.allow_analytics_gui = allow_analytics_gui
        if allow_support_tunnel is not None:
            self.allow_support_tunnel = allow_support_tunnel
        if autosupport_enabled is not None:
            self.autosupport_enabled = autosupport_enabled

    @property
    def allow_analytics_gui(self):
        """Gets the allow_analytics_gui of this EditSupportSettings.  # noqa: E501

        Enable or disable Analytics in Nimble GUI. The data gathered is used to evaluate and improve the product.  # noqa: E501

        :return: The allow_analytics_gui of this EditSupportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_analytics_gui

    @allow_analytics_gui.setter
    def allow_analytics_gui(self, allow_analytics_gui):
        """Sets the allow_analytics_gui of this EditSupportSettings.

        Enable or disable Analytics in Nimble GUI. The data gathered is used to evaluate and improve the product.  # noqa: E501

        :param allow_analytics_gui: The allow_analytics_gui of this EditSupportSettings.  # noqa: E501
        :type: bool
        """

        self._allow_analytics_gui = allow_analytics_gui

    @property
    def allow_support_tunnel(self):
        """Gets the allow_support_tunnel of this EditSupportSettings.  # noqa: E501

        Enable or disable support tunnel.  # noqa: E501

        :return: The allow_support_tunnel of this EditSupportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_support_tunnel

    @allow_support_tunnel.setter
    def allow_support_tunnel(self, allow_support_tunnel):
        """Sets the allow_support_tunnel of this EditSupportSettings.

        Enable or disable support tunnel.  # noqa: E501

        :param allow_support_tunnel: The allow_support_tunnel of this EditSupportSettings.  # noqa: E501
        :type: bool
        """

        self._allow_support_tunnel = allow_support_tunnel

    @property
    def autosupport_enabled(self):
        """Gets the autosupport_enabled of this EditSupportSettings.  # noqa: E501

        Enable or disable autosupport.  # noqa: E501

        :return: The autosupport_enabled of this EditSupportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._autosupport_enabled

    @autosupport_enabled.setter
    def autosupport_enabled(self, autosupport_enabled):
        """Sets the autosupport_enabled of this EditSupportSettings.

        Enable or disable autosupport.  # noqa: E501

        :param autosupport_enabled: The autosupport_enabled of this EditSupportSettings.  # noqa: E501
        :type: bool
        """

        self._autosupport_enabled = autosupport_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditSupportSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
