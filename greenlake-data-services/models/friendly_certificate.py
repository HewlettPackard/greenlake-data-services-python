# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FriendlyCertificate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'valid_from': 'FriendlyCertificateValidFrom',
        'valid_until': 'FriendlyCertificateValidUntil',
        'issued_to': 'str',
        'issuer': 'str'
    }

    attribute_map = {
        'valid_from': 'ValidFrom',
        'valid_until': 'ValidUntil',
        'issued_to': 'issuedTo',
        'issuer': 'issuer'
    }

    def __init__(self, valid_from=None, valid_until=None, issued_to=None, issuer=None):  # noqa: E501
        """FriendlyCertificate - a model defined in OpenAPI"""  # noqa: E501

        self._valid_from = None
        self._valid_until = None
        self._issued_to = None
        self._issuer = None
        self.discriminator = None

        if valid_from is not None:
            self.valid_from = valid_from
        if valid_until is not None:
            self.valid_until = valid_until
        if issued_to is not None:
            self.issued_to = issued_to
        if issuer is not None:
            self.issuer = issuer

    @property
    def valid_from(self):
        """Gets the valid_from of this FriendlyCertificate.  # noqa: E501


        :return: The valid_from of this FriendlyCertificate.  # noqa: E501
        :rtype: FriendlyCertificateValidFrom
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this FriendlyCertificate.


        :param valid_from: The valid_from of this FriendlyCertificate.  # noqa: E501
        :type: FriendlyCertificateValidFrom
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this FriendlyCertificate.  # noqa: E501


        :return: The valid_until of this FriendlyCertificate.  # noqa: E501
        :rtype: FriendlyCertificateValidUntil
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this FriendlyCertificate.


        :param valid_until: The valid_until of this FriendlyCertificate.  # noqa: E501
        :type: FriendlyCertificateValidUntil
        """

        self._valid_until = valid_until

    @property
    def issued_to(self):
        """Gets the issued_to of this FriendlyCertificate.  # noqa: E501

        Certificate issued to  # noqa: E501

        :return: The issued_to of this FriendlyCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issued_to

    @issued_to.setter
    def issued_to(self, issued_to):
        """Sets the issued_to of this FriendlyCertificate.

        Certificate issued to  # noqa: E501

        :param issued_to: The issued_to of this FriendlyCertificate.  # noqa: E501
        :type: str
        """

        self._issued_to = issued_to

    @property
    def issuer(self):
        """Gets the issuer of this FriendlyCertificate.  # noqa: E501

        Certificate issuer  # noqa: E501

        :return: The issuer of this FriendlyCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this FriendlyCertificate.

        Certificate issuer  # noqa: E501

        :param issuer: The issuer of this FriendlyCertificate.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FriendlyCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
