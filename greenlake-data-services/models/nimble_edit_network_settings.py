# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleEditNetworkSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'array_list': 'list[NimbleEditArrayNet]',
        'iscsi_automatic_connection_method': 'bool',
        'iscsi_connection_rebalancing': 'bool',
        'mgmt_ip': 'str',
        'name': 'str',
        'route_list': 'list[NimbleRoute]',
        'secondary_mgmt_ip': 'str',
        'subnet_list': 'list[NimbleSubnet]'
    }

    attribute_map = {
        'array_list': 'array_list',
        'iscsi_automatic_connection_method': 'iscsi_automatic_connection_method',
        'iscsi_connection_rebalancing': 'iscsi_connection_rebalancing',
        'mgmt_ip': 'mgmt_ip',
        'name': 'name',
        'route_list': 'route_list',
        'secondary_mgmt_ip': 'secondary_mgmt_ip',
        'subnet_list': 'subnet_list'
    }

    def __init__(self, array_list=None, iscsi_automatic_connection_method=None, iscsi_connection_rebalancing=None, mgmt_ip=None, name=None, route_list=None, secondary_mgmt_ip=None, subnet_list=None):  # noqa: E501
        """NimbleEditNetworkSettings - a model defined in OpenAPI"""  # noqa: E501

        self._array_list = None
        self._iscsi_automatic_connection_method = None
        self._iscsi_connection_rebalancing = None
        self._mgmt_ip = None
        self._name = None
        self._route_list = None
        self._secondary_mgmt_ip = None
        self._subnet_list = None
        self.discriminator = None

        if array_list is not None:
            self.array_list = array_list
        if iscsi_automatic_connection_method is not None:
            self.iscsi_automatic_connection_method = iscsi_automatic_connection_method
        if iscsi_connection_rebalancing is not None:
            self.iscsi_connection_rebalancing = iscsi_connection_rebalancing
        if mgmt_ip is not None:
            self.mgmt_ip = mgmt_ip
        if name is not None:
            self.name = name
        if route_list is not None:
            self.route_list = route_list
        if secondary_mgmt_ip is not None:
            self.secondary_mgmt_ip = secondary_mgmt_ip
        if subnet_list is not None:
            self.subnet_list = subnet_list

    @property
    def array_list(self):
        """Gets the array_list of this NimbleEditNetworkSettings.  # noqa: E501

        List of array network configs.  # noqa: E501

        :return: The array_list of this NimbleEditNetworkSettings.  # noqa: E501
        :rtype: list[NimbleEditArrayNet]
        """
        return self._array_list

    @array_list.setter
    def array_list(self, array_list):
        """Sets the array_list of this NimbleEditNetworkSettings.

        List of array network configs.  # noqa: E501

        :param array_list: The array_list of this NimbleEditNetworkSettings.  # noqa: E501
        :type: list[NimbleEditArrayNet]
        """

        self._array_list = array_list

    @property
    def iscsi_automatic_connection_method(self):
        """Gets the iscsi_automatic_connection_method of this NimbleEditNetworkSettings.  # noqa: E501

        Enable automatic connection method. Enabling this means means redirecting connections from the specified iSCSI discovery IP to the best data IP based on connection counts.  # noqa: E501

        :return: The iscsi_automatic_connection_method of this NimbleEditNetworkSettings.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_automatic_connection_method

    @iscsi_automatic_connection_method.setter
    def iscsi_automatic_connection_method(self, iscsi_automatic_connection_method):
        """Sets the iscsi_automatic_connection_method of this NimbleEditNetworkSettings.

        Enable automatic connection method. Enabling this means means redirecting connections from the specified iSCSI discovery IP to the best data IP based on connection counts.  # noqa: E501

        :param iscsi_automatic_connection_method: The iscsi_automatic_connection_method of this NimbleEditNetworkSettings.  # noqa: E501
        :type: bool
        """

        self._iscsi_automatic_connection_method = iscsi_automatic_connection_method

    @property
    def iscsi_connection_rebalancing(self):
        """Gets the iscsi_connection_rebalancing of this NimbleEditNetworkSettings.  # noqa: E501

        Enable connection rebalancing. Enabling this means rebalancing iSCSI connections by periodically breaking existing connections that are out-of-balance, allowing the host to reconnect to a more appropriate data IP.  # noqa: E501

        :return: The iscsi_connection_rebalancing of this NimbleEditNetworkSettings.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_connection_rebalancing

    @iscsi_connection_rebalancing.setter
    def iscsi_connection_rebalancing(self, iscsi_connection_rebalancing):
        """Sets the iscsi_connection_rebalancing of this NimbleEditNetworkSettings.

        Enable connection rebalancing. Enabling this means rebalancing iSCSI connections by periodically breaking existing connections that are out-of-balance, allowing the host to reconnect to a more appropriate data IP.  # noqa: E501

        :param iscsi_connection_rebalancing: The iscsi_connection_rebalancing of this NimbleEditNetworkSettings.  # noqa: E501
        :type: bool
        """

        self._iscsi_connection_rebalancing = iscsi_connection_rebalancing

    @property
    def mgmt_ip(self):
        """Gets the mgmt_ip of this NimbleEditNetworkSettings.  # noqa: E501

        Management IP for the Group. Four numbers in the range [0,255] separated by periods.  # noqa: E501

        :return: The mgmt_ip of this NimbleEditNetworkSettings.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ip

    @mgmt_ip.setter
    def mgmt_ip(self, mgmt_ip):
        """Sets the mgmt_ip of this NimbleEditNetworkSettings.

        Management IP for the Group. Four numbers in the range [0,255] separated by periods.  # noqa: E501

        :param mgmt_ip: The mgmt_ip of this NimbleEditNetworkSettings.  # noqa: E501
        :type: str
        """

        self._mgmt_ip = mgmt_ip

    @property
    def name(self):
        """Gets the name of this NimbleEditNetworkSettings.  # noqa: E501

        Name of the network configuration. Use the name 'draft' when creating a draft configuration. Possible values are 'active', 'backup' and 'draft'.  # noqa: E501

        :return: The name of this NimbleEditNetworkSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleEditNetworkSettings.

        Name of the network configuration. Use the name 'draft' when creating a draft configuration. Possible values are 'active', 'backup' and 'draft'.  # noqa: E501

        :param name: The name of this NimbleEditNetworkSettings.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def route_list(self):
        """Gets the route_list of this NimbleEditNetworkSettings.  # noqa: E501

        List of static routes.  # noqa: E501

        :return: The route_list of this NimbleEditNetworkSettings.  # noqa: E501
        :rtype: list[NimbleRoute]
        """
        return self._route_list

    @route_list.setter
    def route_list(self, route_list):
        """Sets the route_list of this NimbleEditNetworkSettings.

        List of static routes.  # noqa: E501

        :param route_list: The route_list of this NimbleEditNetworkSettings.  # noqa: E501
        :type: list[NimbleRoute]
        """

        self._route_list = route_list

    @property
    def secondary_mgmt_ip(self):
        """Gets the secondary_mgmt_ip of this NimbleEditNetworkSettings.  # noqa: E501

        Secondary management IP address for the Group. Four numbers in the range [0,255] separated by periods.  # noqa: E501

        :return: The secondary_mgmt_ip of this NimbleEditNetworkSettings.  # noqa: E501
        :rtype: str
        """
        return self._secondary_mgmt_ip

    @secondary_mgmt_ip.setter
    def secondary_mgmt_ip(self, secondary_mgmt_ip):
        """Sets the secondary_mgmt_ip of this NimbleEditNetworkSettings.

        Secondary management IP address for the Group. Four numbers in the range [0,255] separated by periods.  # noqa: E501

        :param secondary_mgmt_ip: The secondary_mgmt_ip of this NimbleEditNetworkSettings.  # noqa: E501
        :type: str
        """

        self._secondary_mgmt_ip = secondary_mgmt_ip

    @property
    def subnet_list(self):
        """Gets the subnet_list of this NimbleEditNetworkSettings.  # noqa: E501

        List of subnet configs.  # noqa: E501

        :return: The subnet_list of this NimbleEditNetworkSettings.  # noqa: E501
        :rtype: list[NimbleSubnet]
        """
        return self._subnet_list

    @subnet_list.setter
    def subnet_list(self, subnet_list):
        """Sets the subnet_list of this NimbleEditNetworkSettings.

        List of subnet configs.  # noqa: E501

        :param subnet_list: The subnet_list of this NimbleEditNetworkSettings.  # noqa: E501
        :type: list[NimbleSubnet]
        """

        self._subnet_list = subnet_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleEditNetworkSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
