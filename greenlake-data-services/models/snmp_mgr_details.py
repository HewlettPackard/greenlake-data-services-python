# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SnmpMgrDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'NwAssociatedLinks',
        'snmp': 'SnmpDetails',
        'system_id': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'snmp': 'snmp',
        'system_id': 'systemId'
    }

    def __init__(self, associated_links=None, snmp=None, system_id=None):  # noqa: E501
        """SnmpMgrDetails - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._snmp = None
        self._system_id = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if snmp is not None:
            self.snmp = snmp
        if system_id is not None:
            self.system_id = system_id

    @property
    def associated_links(self):
        """Gets the associated_links of this SnmpMgrDetails.  # noqa: E501


        :return: The associated_links of this SnmpMgrDetails.  # noqa: E501
        :rtype: NwAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this SnmpMgrDetails.


        :param associated_links: The associated_links of this SnmpMgrDetails.  # noqa: E501
        :type: NwAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def snmp(self):
        """Gets the snmp of this SnmpMgrDetails.  # noqa: E501


        :return: The snmp of this SnmpMgrDetails.  # noqa: E501
        :rtype: SnmpDetails
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """Sets the snmp of this SnmpMgrDetails.


        :param snmp: The snmp of this SnmpMgrDetails.  # noqa: E501
        :type: SnmpDetails
        """

        self._snmp = snmp

    @property
    def system_id(self):
        """Gets the system_id of this SnmpMgrDetails.  # noqa: E501

        SystemId of the storage system  # noqa: E501

        :return: The system_id of this SnmpMgrDetails.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SnmpMgrDetails.

        SystemId of the storage system  # noqa: E501

        :param system_id: The system_id of this SnmpMgrDetails.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpMgrDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
