# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateCloneVolumeInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'destination_volume': 'str',
        'offline_clone': 'list[OfflineClone]',
        'online': 'bool',
        'online_clone': 'list[OnlineClone]',
        'priority': 'str'
    }

    attribute_map = {
        'destination_volume': 'destinationVolume',
        'offline_clone': 'offlineClone',
        'online': 'online',
        'online_clone': 'onlineClone',
        'priority': 'priority'
    }

    def __init__(self, destination_volume=None, offline_clone=None, online=None, online_clone=None, priority=None):  # noqa: E501
        """CreateCloneVolumeInput - a model defined in OpenAPI"""  # noqa: E501

        self._destination_volume = None
        self._offline_clone = None
        self._online = None
        self._online_clone = None
        self._priority = None
        self.discriminator = None

        self.destination_volume = destination_volume
        if offline_clone is not None:
            self.offline_clone = offline_clone
        if online is not None:
            self.online = online
        if online_clone is not None:
            self.online_clone = online_clone
        if priority is not None:
            self.priority = priority

    @property
    def destination_volume(self):
        """Gets the destination_volume of this CreateCloneVolumeInput.  # noqa: E501

        Name of the destination volume.  # noqa: E501

        :return: The destination_volume of this CreateCloneVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._destination_volume

    @destination_volume.setter
    def destination_volume(self, destination_volume):
        """Sets the destination_volume of this CreateCloneVolumeInput.

        Name of the destination volume.  # noqa: E501

        :param destination_volume: The destination_volume of this CreateCloneVolumeInput.  # noqa: E501
        :type: str
        """
        if destination_volume is None:
            raise ValueError("Invalid value for `destination_volume`, must not be `None`")  # noqa: E501

        self._destination_volume = destination_volume

    @property
    def offline_clone(self):
        """Gets the offline_clone of this CreateCloneVolumeInput.  # noqa: E501

        Offline clone of a volume.  # noqa: E501

        :return: The offline_clone of this CreateCloneVolumeInput.  # noqa: E501
        :rtype: list[OfflineClone]
        """
        return self._offline_clone

    @offline_clone.setter
    def offline_clone(self, offline_clone):
        """Sets the offline_clone of this CreateCloneVolumeInput.

        Offline clone of a volume.  # noqa: E501

        :param offline_clone: The offline_clone of this CreateCloneVolumeInput.  # noqa: E501
        :type: list[OfflineClone]
        """

        self._offline_clone = offline_clone

    @property
    def online(self):
        """Gets the online of this CreateCloneVolumeInput.  # noqa: E501

        Create an online or offline clone of a volume.  # noqa: E501

        :return: The online of this CreateCloneVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this CreateCloneVolumeInput.

        Create an online or offline clone of a volume.  # noqa: E501

        :param online: The online of this CreateCloneVolumeInput.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def online_clone(self):
        """Gets the online_clone of this CreateCloneVolumeInput.  # noqa: E501

        Online clone of a volume.  # noqa: E501

        :return: The online_clone of this CreateCloneVolumeInput.  # noqa: E501
        :rtype: list[OnlineClone]
        """
        return self._online_clone

    @online_clone.setter
    def online_clone(self, online_clone):
        """Sets the online_clone of this CreateCloneVolumeInput.

        Online clone of a volume.  # noqa: E501

        :param online_clone: The online_clone of this CreateCloneVolumeInput.  # noqa: E501
        :type: list[OnlineClone]
        """

        self._online_clone = online_clone

    @property
    def priority(self):
        """Gets the priority of this CreateCloneVolumeInput.  # noqa: E501

        Priority of the task for clone volume. Defualts to MEDIUM.  # noqa: E501

        :return: The priority of this CreateCloneVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateCloneVolumeInput.

        Priority of the task for clone volume. Defualts to MEDIUM.  # noqa: E501

        :param priority: The priority of this CreateCloneVolumeInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRIORITYTYPE_HIGH", "PRIORITYTYPE_MED", "PRIORITYTYPE_LOW"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCloneVolumeInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
