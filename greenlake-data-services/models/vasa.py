# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Vasa(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cert_mgmt': 'CertMgmt',
        'cert_subject': 'str',
        'cert_thumbprint': 'str',
        'console_uri': 'str',
        'customer_id': 'str',
        'enabled': 'bool',
        'generation': 'int',
        'https_enabled': 'bool',
        'https_port': 'int',
        'id': 'str',
        'mem_usage_mi_b': 'int',
        'more_uris': 'list[VasaUriInfo]',
        'server_name': 'str',
        'system_id': 'str',
        'system_wwn': 'str',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'cert_mgmt': 'certMgmt',
        'cert_subject': 'certSubject',
        'cert_thumbprint': 'certThumbprint',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'enabled': 'enabled',
        'generation': 'generation',
        'https_enabled': 'httpsEnabled',
        'https_port': 'httpsPort',
        'id': 'id',
        'mem_usage_mi_b': 'memUsageMiB',
        'more_uris': 'moreUris',
        'server_name': 'serverName',
        'system_id': 'systemId',
        'system_wwn': 'systemWWN',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, cert_mgmt=None, cert_subject=None, cert_thumbprint=None, console_uri=None, customer_id=None, enabled=None, generation=None, https_enabled=None, https_port=None, id=None, mem_usage_mi_b=None, more_uris=None, server_name=None, system_id=None, system_wwn=None, type=None, version=None):  # noqa: E501
        """Vasa - a model defined in OpenAPI"""  # noqa: E501

        self._cert_mgmt = None
        self._cert_subject = None
        self._cert_thumbprint = None
        self._console_uri = None
        self._customer_id = None
        self._enabled = None
        self._generation = None
        self._https_enabled = None
        self._https_port = None
        self._id = None
        self._mem_usage_mi_b = None
        self._more_uris = None
        self._server_name = None
        self._system_id = None
        self._system_wwn = None
        self._type = None
        self._version = None
        self.discriminator = None

        if cert_mgmt is not None:
            self.cert_mgmt = cert_mgmt
        if cert_subject is not None:
            self.cert_subject = cert_subject
        if cert_thumbprint is not None:
            self.cert_thumbprint = cert_thumbprint
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if enabled is not None:
            self.enabled = enabled
        if generation is not None:
            self.generation = generation
        if https_enabled is not None:
            self.https_enabled = https_enabled
        if https_port is not None:
            self.https_port = https_port
        if id is not None:
            self.id = id
        if mem_usage_mi_b is not None:
            self.mem_usage_mi_b = mem_usage_mi_b
        if more_uris is not None:
            self.more_uris = more_uris
        if server_name is not None:
            self.server_name = server_name
        if system_id is not None:
            self.system_id = system_id
        if system_wwn is not None:
            self.system_wwn = system_wwn
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def cert_mgmt(self):
        """Gets the cert_mgmt of this Vasa.  # noqa: E501


        :return: The cert_mgmt of this Vasa.  # noqa: E501
        :rtype: CertMgmt
        """
        return self._cert_mgmt

    @cert_mgmt.setter
    def cert_mgmt(self, cert_mgmt):
        """Sets the cert_mgmt of this Vasa.


        :param cert_mgmt: The cert_mgmt of this Vasa.  # noqa: E501
        :type: CertMgmt
        """

        self._cert_mgmt = cert_mgmt

    @property
    def cert_subject(self):
        """Gets the cert_subject of this Vasa.  # noqa: E501

        Certificate subject of the VASA Provider  # noqa: E501

        :return: The cert_subject of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._cert_subject

    @cert_subject.setter
    def cert_subject(self, cert_subject):
        """Sets the cert_subject of this Vasa.

        Certificate subject of the VASA Provider  # noqa: E501

        :param cert_subject: The cert_subject of this Vasa.  # noqa: E501
        :type: str
        """

        self._cert_subject = cert_subject

    @property
    def cert_thumbprint(self):
        """Gets the cert_thumbprint of this Vasa.  # noqa: E501

        Certificate thumbprint of the VASA Provider  # noqa: E501

        :return: The cert_thumbprint of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._cert_thumbprint

    @cert_thumbprint.setter
    def cert_thumbprint(self, cert_thumbprint):
        """Sets the cert_thumbprint of this Vasa.

        Certificate thumbprint of the VASA Provider  # noqa: E501

        :param cert_thumbprint: The cert_thumbprint of this Vasa.  # noqa: E501
        :type: str
        """

        self._cert_thumbprint = cert_thumbprint

    @property
    def console_uri(self):
        """Gets the console_uri of this Vasa.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this Vasa.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this Vasa.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this Vasa.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Vasa.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this Vasa.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def enabled(self):
        """Gets the enabled of this Vasa.  # noqa: E501

        Indicates if the service status is enabled or not  # noqa: E501

        :return: The enabled of this Vasa.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Vasa.

        Indicates if the service status is enabled or not  # noqa: E501

        :param enabled: The enabled of this Vasa.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def generation(self):
        """Gets the generation of this Vasa.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :return: The generation of this Vasa.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this Vasa.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :param generation: The generation of this Vasa.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def https_enabled(self):
        """Gets the https_enabled of this Vasa.  # noqa: E501

        Indicates if the vasa https state is enabled or not  # noqa: E501

        :return: The https_enabled of this Vasa.  # noqa: E501
        :rtype: bool
        """
        return self._https_enabled

    @https_enabled.setter
    def https_enabled(self, https_enabled):
        """Sets the https_enabled of this Vasa.

        Indicates if the vasa https state is enabled or not  # noqa: E501

        :param https_enabled: The https_enabled of this Vasa.  # noqa: E501
        :type: bool
        """

        self._https_enabled = https_enabled

    @property
    def https_port(self):
        """Gets the https_port of this Vasa.  # noqa: E501

        Vasa https port number  # noqa: E501

        :return: The https_port of this Vasa.  # noqa: E501
        :rtype: int
        """
        return self._https_port

    @https_port.setter
    def https_port(self, https_port):
        """Sets the https_port of this Vasa.

        Vasa https port number  # noqa: E501

        :param https_port: The https_port of this Vasa.  # noqa: E501
        :type: int
        """

        self._https_port = https_port

    @property
    def id(self):
        """Gets the id of this Vasa.  # noqa: E501

        Unique Identifier of the resource  # noqa: E501

        :return: The id of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vasa.

        Unique Identifier of the resource  # noqa: E501

        :param id: The id of this Vasa.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mem_usage_mi_b(self):
        """Gets the mem_usage_mi_b of this Vasa.  # noqa: E501

        Memory usage of the VASA provider  # noqa: E501

        :return: The mem_usage_mi_b of this Vasa.  # noqa: E501
        :rtype: int
        """
        return self._mem_usage_mi_b

    @mem_usage_mi_b.setter
    def mem_usage_mi_b(self, mem_usage_mi_b):
        """Sets the mem_usage_mi_b of this Vasa.

        Memory usage of the VASA provider  # noqa: E501

        :param mem_usage_mi_b: The mem_usage_mi_b of this Vasa.  # noqa: E501
        :type: int
        """

        self._mem_usage_mi_b = mem_usage_mi_b

    @property
    def more_uris(self):
        """Gets the more_uris of this Vasa.  # noqa: E501

        List of VASA Service URLs   # noqa: E501

        :return: The more_uris of this Vasa.  # noqa: E501
        :rtype: list[VasaUriInfo]
        """
        return self._more_uris

    @more_uris.setter
    def more_uris(self, more_uris):
        """Sets the more_uris of this Vasa.

        List of VASA Service URLs   # noqa: E501

        :param more_uris: The more_uris of this Vasa.  # noqa: E501
        :type: list[VasaUriInfo]
        """

        self._more_uris = more_uris

    @property
    def server_name(self):
        """Gets the server_name of this Vasa.  # noqa: E501

        Name of the vasa server  # noqa: E501

        :return: The server_name of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this Vasa.

        Name of the vasa server  # noqa: E501

        :param server_name: The server_name of this Vasa.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def system_id(self):
        """Gets the system_id of this Vasa.  # noqa: E501

        SystemId of the storage system  # noqa: E501

        :return: The system_id of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this Vasa.

        SystemId of the storage system  # noqa: E501

        :param system_id: The system_id of this Vasa.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_wwn(self):
        """Gets the system_wwn of this Vasa.  # noqa: E501

        WWN of the array  # noqa: E501

        :return: The system_wwn of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._system_wwn

    @system_wwn.setter
    def system_wwn(self, system_wwn):
        """Sets the system_wwn of this Vasa.

        WWN of the array  # noqa: E501

        :param system_wwn: The system_wwn of this Vasa.  # noqa: E501
        :type: str
        """

        self._system_wwn = system_wwn

    @property
    def type(self):
        """Gets the type of this Vasa.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Vasa.

        The type of resource.  # noqa: E501

        :param type: The type of this Vasa.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this Vasa.  # noqa: E501

        Version of the VASA provider  # noqa: E501

        :return: The version of this Vasa.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Vasa.

        Version of the VASA provider  # noqa: E501

        :param version: The version of this Vasa.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vasa):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
