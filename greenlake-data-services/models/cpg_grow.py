# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CpgGrow(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'args': 'str',
        'limit_mi_b': 'float',
        'size_mi_b': 'float',
        'warn_mi_b': 'float'
    }

    attribute_map = {
        'args': 'args',
        'limit_mi_b': 'limitMiB',
        'size_mi_b': 'sizeMiB',
        'warn_mi_b': 'warnMiB'
    }

    def __init__(self, args=None, limit_mi_b=None, size_mi_b=None, warn_mi_b=None):  # noqa: E501
        """CpgGrow - a model defined in OpenAPI"""  # noqa: E501

        self._args = None
        self._limit_mi_b = None
        self._size_mi_b = None
        self._warn_mi_b = None
        self.discriminator = None

        if args is not None:
            self.args = args
        if limit_mi_b is not None:
            self.limit_mi_b = limit_mi_b
        if size_mi_b is not None:
            self.size_mi_b = size_mi_b
        if warn_mi_b is not None:
            self.warn_mi_b = warn_mi_b

    @property
    def args(self):
        """Gets the args of this CpgGrow.  # noqa: E501

        The admin/data LD creation arguments used by the CPG when growing new LDs  # noqa: E501

        :return: The args of this CpgGrow.  # noqa: E501
        :rtype: str
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this CpgGrow.

        The admin/data LD creation arguments used by the CPG when growing new LDs  # noqa: E501

        :param args: The args of this CpgGrow.  # noqa: E501
        :type: str
        """

        self._args = args

    @property
    def limit_mi_b(self):
        """Gets the limit_mi_b of this CpgGrow.  # noqa: E501

        Limit size in MiB beyond which the admin/data space will not grow  # noqa: E501

        :return: The limit_mi_b of this CpgGrow.  # noqa: E501
        :rtype: float
        """
        return self._limit_mi_b

    @limit_mi_b.setter
    def limit_mi_b(self, limit_mi_b):
        """Sets the limit_mi_b of this CpgGrow.

        Limit size in MiB beyond which the admin/data space will not grow  # noqa: E501

        :param limit_mi_b: The limit_mi_b of this CpgGrow.  # noqa: E501
        :type: float
        """

        self._limit_mi_b = limit_mi_b

    @property
    def size_mi_b(self):
        """Gets the size_mi_b of this CpgGrow.  # noqa: E501

        Amount of admin/data LD storage in MiB created on each auto-grow  # noqa: E501

        :return: The size_mi_b of this CpgGrow.  # noqa: E501
        :rtype: float
        """
        return self._size_mi_b

    @size_mi_b.setter
    def size_mi_b(self, size_mi_b):
        """Sets the size_mi_b of this CpgGrow.

        Amount of admin/data LD storage in MiB created on each auto-grow  # noqa: E501

        :param size_mi_b: The size_mi_b of this CpgGrow.  # noqa: E501
        :type: float
        """

        self._size_mi_b = size_mi_b

    @property
    def warn_mi_b(self):
        """Gets the warn_mi_b of this CpgGrow.  # noqa: E501

        Size in MiB of the admin/data space at which a warning alert is generated  # noqa: E501

        :return: The warn_mi_b of this CpgGrow.  # noqa: E501
        :rtype: float
        """
        return self._warn_mi_b

    @warn_mi_b.setter
    def warn_mi_b(self, warn_mi_b):
        """Sets the warn_mi_b of this CpgGrow.

        Size in MiB of the admin/data space at which a warning alert is generated  # noqa: E501

        :param warn_mi_b: The warn_mi_b of this CpgGrow.  # noqa: E501
        :type: float
        """

        self._warn_mi_b = warn_mi_b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CpgGrow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
