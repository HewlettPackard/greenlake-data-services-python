# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleAccessControlRecordFieldsWithoutSortKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_protocol': 'str',
        'chap_user_id': 'str',
        'chap_user_name': 'str',
        'creation_time': 'int',
        'id': 'str',
        'initiator_group_id': 'str',
        'initiator_group_name': 'str',
        'last_modified': 'int',
        'lun': 'int',
        'pe_id': 'str',
        'pe_lun': 'int',
        'pe_name': 'str',
        'snap_id': 'str',
        'snap_name': 'str',
        'vol_id': 'str',
        'vol_name': 'str'
    }

    attribute_map = {
        'access_protocol': 'access_protocol',
        'chap_user_id': 'chap_user_id',
        'chap_user_name': 'chap_user_name',
        'creation_time': 'creation_time',
        'id': 'id',
        'initiator_group_id': 'initiator_group_id',
        'initiator_group_name': 'initiator_group_name',
        'last_modified': 'last_modified',
        'lun': 'lun',
        'pe_id': 'pe_id',
        'pe_lun': 'pe_lun',
        'pe_name': 'pe_name',
        'snap_id': 'snap_id',
        'snap_name': 'snap_name',
        'vol_id': 'vol_id',
        'vol_name': 'vol_name'
    }

    def __init__(self, access_protocol=None, chap_user_id=None, chap_user_name=None, creation_time=None, id=None, initiator_group_id=None, initiator_group_name=None, last_modified=None, lun=None, pe_id=None, pe_lun=None, pe_name=None, snap_id=None, snap_name=None, vol_id=None, vol_name=None):  # noqa: E501
        """NimbleAccessControlRecordFieldsWithoutSortKey - a model defined in OpenAPI"""  # noqa: E501

        self._access_protocol = None
        self._chap_user_id = None
        self._chap_user_name = None
        self._creation_time = None
        self._id = None
        self._initiator_group_id = None
        self._initiator_group_name = None
        self._last_modified = None
        self._lun = None
        self._pe_id = None
        self._pe_lun = None
        self._pe_name = None
        self._snap_id = None
        self._snap_name = None
        self._vol_id = None
        self._vol_name = None
        self.discriminator = None

        if access_protocol is not None:
            self.access_protocol = access_protocol
        if chap_user_id is not None:
            self.chap_user_id = chap_user_id
        if chap_user_name is not None:
            self.chap_user_name = chap_user_name
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if initiator_group_id is not None:
            self.initiator_group_id = initiator_group_id
        if initiator_group_name is not None:
            self.initiator_group_name = initiator_group_name
        if last_modified is not None:
            self.last_modified = last_modified
        if lun is not None:
            self.lun = lun
        if pe_id is not None:
            self.pe_id = pe_id
        if pe_lun is not None:
            self.pe_lun = pe_lun
        if pe_name is not None:
            self.pe_name = pe_name
        if snap_id is not None:
            self.snap_id = snap_id
        if snap_name is not None:
            self.snap_name = snap_name
        if vol_id is not None:
            self.vol_id = vol_id
        if vol_name is not None:
            self.vol_name = vol_name

    @property
    def access_protocol(self):
        """Gets the access_protocol of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Access protocol of the volume. Possible values:'iscsi', 'fc'.  # noqa: E501

        :return: The access_protocol of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._access_protocol

    @access_protocol.setter
    def access_protocol(self, access_protocol):
        """Sets the access_protocol of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Access protocol of the volume. Possible values:'iscsi', 'fc'.  # noqa: E501

        :param access_protocol: The access_protocol of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._access_protocol = access_protocol

    @property
    def chap_user_id(self):
        """Gets the chap_user_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Identifier for the CHAP user.  # noqa: E501

        :return: The chap_user_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._chap_user_id

    @chap_user_id.setter
    def chap_user_id(self, chap_user_id):
        """Sets the chap_user_id of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Identifier for the CHAP user.  # noqa: E501

        :param chap_user_id: The chap_user_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._chap_user_id = chap_user_id

    @property
    def chap_user_name(self):
        """Gets the chap_user_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Flag denoting if data in the associated volume should be compressed.  # noqa: E501

        :return: The chap_user_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._chap_user_name

    @chap_user_name.setter
    def chap_user_name(self, chap_user_name):
        """Sets the chap_user_name of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Flag denoting if data in the associated volume should be compressed.  # noqa: E501

        :param chap_user_name: The chap_user_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._chap_user_name = chap_user_name

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Time when this access control record was created.  # noqa: E501

        :return: The creation_time of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Time when this access control record was created.  # noqa: E501

        :param creation_time: The creation_time of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Identifier for the access control record.  # noqa: E501

        :return: The id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Identifier for the access control record.  # noqa: E501

        :param id: The id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initiator_group_id(self):
        """Gets the initiator_group_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Identifier for the initiator group.  # noqa: E501

        :return: The initiator_group_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._initiator_group_id

    @initiator_group_id.setter
    def initiator_group_id(self, initiator_group_id):
        """Sets the initiator_group_id of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Identifier for the initiator group.  # noqa: E501

        :param initiator_group_id: The initiator_group_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._initiator_group_id = initiator_group_id

    @property
    def initiator_group_name(self):
        """Gets the initiator_group_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Name of the initiator group.  # noqa: E501

        :return: The initiator_group_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._initiator_group_name

    @initiator_group_name.setter
    def initiator_group_name(self, initiator_group_name):
        """Sets the initiator_group_name of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Name of the initiator group.  # noqa: E501

        :param initiator_group_name: The initiator_group_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._initiator_group_name = initiator_group_name

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Time when this access control record was last modified.  # noqa: E501

        :return: The last_modified of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Time when this access control record was last modified.  # noqa: E501

        :param last_modified: The last_modified of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def lun(self):
        """Gets the lun of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.  # noqa: E501

        :return: The lun of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this NimbleAccessControlRecordFieldsWithoutSortKey.

        If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.  # noqa: E501

        :param lun: The lun of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._lun = lun

    @property
    def pe_id(self):
        """Gets the pe_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Identifier for the protocol endpoint this access control record applies to.  # noqa: E501

        :return: The pe_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._pe_id

    @pe_id.setter
    def pe_id(self, pe_id):
        """Sets the pe_id of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Identifier for the protocol endpoint this access control record applies to.  # noqa: E501

        :param pe_id: The pe_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._pe_id = pe_id

    @property
    def pe_lun(self):
        """Gets the pe_lun of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        LUN (Logical Unit Number) to associate with this protocol endpoint. Valid LUNs are in the 0-2047 range.  # noqa: E501

        :return: The pe_lun of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._pe_lun

    @pe_lun.setter
    def pe_lun(self, pe_lun):
        """Sets the pe_lun of this NimbleAccessControlRecordFieldsWithoutSortKey.

        LUN (Logical Unit Number) to associate with this protocol endpoint. Valid LUNs are in the 0-2047 range.  # noqa: E501

        :param pe_lun: The pe_lun of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._pe_lun = pe_lun

    @property
    def pe_name(self):
        """Gets the pe_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Name of the protocol endpoint this access control record applies to.  # noqa: E501

        :return: The pe_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._pe_name

    @pe_name.setter
    def pe_name(self, pe_name):
        """Sets the pe_name of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Name of the protocol endpoint this access control record applies to.  # noqa: E501

        :param pe_name: The pe_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._pe_name = pe_name

    @property
    def snap_id(self):
        """Gets the snap_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Identifier for the snapshot this access control record applies to.  # noqa: E501

        :return: The snap_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._snap_id

    @snap_id.setter
    def snap_id(self, snap_id):
        """Sets the snap_id of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Identifier for the snapshot this access control record applies to.  # noqa: E501

        :param snap_id: The snap_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._snap_id = snap_id

    @property
    def snap_name(self):
        """Gets the snap_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Name of the snapshot this access control record applies to.  # noqa: E501

        :return: The snap_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._snap_name

    @snap_name.setter
    def snap_name(self, snap_name):
        """Sets the snap_name of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Name of the snapshot this access control record applies to.  # noqa: E501

        :param snap_name: The snap_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._snap_name = snap_name

    @property
    def vol_id(self):
        """Gets the vol_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Identifier for the volume this access control record applies to.  # noqa: E501

        :return: The vol_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._vol_id

    @vol_id.setter
    def vol_id(self, vol_id):
        """Sets the vol_id of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Identifier for the volume this access control record applies to.  # noqa: E501

        :param vol_id: The vol_id of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._vol_id = vol_id

    @property
    def vol_name(self):
        """Gets the vol_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501

        Name of the volume this access control record applies to.  # noqa: E501

        :return: The vol_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._vol_name

    @vol_name.setter
    def vol_name(self, vol_name):
        """Sets the vol_name of this NimbleAccessControlRecordFieldsWithoutSortKey.

        Name of the volume this access control record applies to.  # noqa: E501

        :param vol_name: The vol_name of this NimbleAccessControlRecordFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._vol_name = vol_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleAccessControlRecordFieldsWithoutSortKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
