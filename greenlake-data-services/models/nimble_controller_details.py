# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleControllerDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'AssociatedLinks',
        'asup_time': 'int',
        'console_uri': 'str',
        'ctrlr_side': 'str',
        'customer_id': 'str',
        'fan_status': 'str',
        'fans': 'list[NimbleNsCtrlrHwSensorInfo]',
        'generation': 'int',
        'hostname': 'str',
        'nvme_cards': 'list[NimbleNsCtrlrNvmeCard]',
        'nvme_cards_enabled': 'int',
        'partial_response_ok': 'bool',
        'partition_status': 'list[NimbleNsCtrlrRaidInfo]',
        'power_status': 'str',
        'power_supplies': 'list[NimbleNsCtrlrHwSensorInfo]',
        'resource_uri': 'str',
        'state': 'str',
        'support_address': 'str',
        'support_netmask': 'str',
        'support_nic': 'str',
        'temperature_sensors': 'list[NimbleNsCtrlrHwSensorInfo]',
        'temperature_status': 'str',
        'type': 'str',
        'update_end_time': 'int',
        'update_error_code': 'str',
        'update_progress_msg': 'str',
        'update_start_time': 'int',
        'update_state': 'str',
        'version_current': 'str',
        'version_rollback': 'str',
        'version_target': 'str'
    }

    attribute_map = {
        'associated_links': 'associated_links',
        'asup_time': 'asup_time',
        'console_uri': 'consoleUri',
        'ctrlr_side': 'ctrlr_side',
        'customer_id': 'customerId',
        'fan_status': 'fan_status',
        'fans': 'fans',
        'generation': 'generation',
        'hostname': 'hostname',
        'nvme_cards': 'nvme_cards',
        'nvme_cards_enabled': 'nvme_cards_enabled',
        'partial_response_ok': 'partial_response_ok',
        'partition_status': 'partition_status',
        'power_status': 'power_status',
        'power_supplies': 'power_supplies',
        'resource_uri': 'resourceUri',
        'state': 'state',
        'support_address': 'support_address',
        'support_netmask': 'support_netmask',
        'support_nic': 'support_nic',
        'temperature_sensors': 'temperature_sensors',
        'temperature_status': 'temperature_status',
        'type': 'type',
        'update_end_time': 'update_end_time',
        'update_error_code': 'update_error_code',
        'update_progress_msg': 'update_progress_msg',
        'update_start_time': 'update_start_time',
        'update_state': 'update_state',
        'version_current': 'version_current',
        'version_rollback': 'version_rollback',
        'version_target': 'version_target'
    }

    def __init__(self, associated_links=None, asup_time=None, console_uri=None, ctrlr_side=None, customer_id=None, fan_status=None, fans=None, generation=None, hostname=None, nvme_cards=None, nvme_cards_enabled=None, partial_response_ok=None, partition_status=None, power_status=None, power_supplies=None, resource_uri=None, state=None, support_address=None, support_netmask=None, support_nic=None, temperature_sensors=None, temperature_status=None, type=None, update_end_time=None, update_error_code=None, update_progress_msg=None, update_start_time=None, update_state=None, version_current=None, version_rollback=None, version_target=None):  # noqa: E501
        """NimbleControllerDetails - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._asup_time = None
        self._console_uri = None
        self._ctrlr_side = None
        self._customer_id = None
        self._fan_status = None
        self._fans = None
        self._generation = None
        self._hostname = None
        self._nvme_cards = None
        self._nvme_cards_enabled = None
        self._partial_response_ok = None
        self._partition_status = None
        self._power_status = None
        self._power_supplies = None
        self._resource_uri = None
        self._state = None
        self._support_address = None
        self._support_netmask = None
        self._support_nic = None
        self._temperature_sensors = None
        self._temperature_status = None
        self._type = None
        self._update_end_time = None
        self._update_error_code = None
        self._update_progress_msg = None
        self._update_start_time = None
        self._update_state = None
        self._version_current = None
        self._version_rollback = None
        self._version_target = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if asup_time is not None:
            self.asup_time = asup_time
        if console_uri is not None:
            self.console_uri = console_uri
        if ctrlr_side is not None:
            self.ctrlr_side = ctrlr_side
        if customer_id is not None:
            self.customer_id = customer_id
        if fan_status is not None:
            self.fan_status = fan_status
        if fans is not None:
            self.fans = fans
        if generation is not None:
            self.generation = generation
        if hostname is not None:
            self.hostname = hostname
        if nvme_cards is not None:
            self.nvme_cards = nvme_cards
        if nvme_cards_enabled is not None:
            self.nvme_cards_enabled = nvme_cards_enabled
        if partial_response_ok is not None:
            self.partial_response_ok = partial_response_ok
        if partition_status is not None:
            self.partition_status = partition_status
        if power_status is not None:
            self.power_status = power_status
        if power_supplies is not None:
            self.power_supplies = power_supplies
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if state is not None:
            self.state = state
        if support_address is not None:
            self.support_address = support_address
        if support_netmask is not None:
            self.support_netmask = support_netmask
        if support_nic is not None:
            self.support_nic = support_nic
        if temperature_sensors is not None:
            self.temperature_sensors = temperature_sensors
        if temperature_status is not None:
            self.temperature_status = temperature_status
        if type is not None:
            self.type = type
        if update_end_time is not None:
            self.update_end_time = update_end_time
        if update_error_code is not None:
            self.update_error_code = update_error_code
        if update_progress_msg is not None:
            self.update_progress_msg = update_progress_msg
        if update_start_time is not None:
            self.update_start_time = update_start_time
        if update_state is not None:
            self.update_state = update_state
        if version_current is not None:
            self.version_current = version_current
        if version_rollback is not None:
            self.version_rollback = version_rollback
        if version_target is not None:
            self.version_target = version_target

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleControllerDetails.  # noqa: E501


        :return: The associated_links of this NimbleControllerDetails.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleControllerDetails.


        :param associated_links: The associated_links of this NimbleControllerDetails.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def asup_time(self):
        """Gets the asup_time of this NimbleControllerDetails.  # noqa: E501

        Time of the last autosupport by the controller.  # noqa: E501

        :return: The asup_time of this NimbleControllerDetails.  # noqa: E501
        :rtype: int
        """
        return self._asup_time

    @asup_time.setter
    def asup_time(self, asup_time):
        """Sets the asup_time of this NimbleControllerDetails.

        Time of the last autosupport by the controller.  # noqa: E501

        :param asup_time: The asup_time of this NimbleControllerDetails.  # noqa: E501
        :type: int
        """

        self._asup_time = asup_time

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleControllerDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleControllerDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def ctrlr_side(self):
        """Gets the ctrlr_side of this NimbleControllerDetails.  # noqa: E501

        Identifies which controller this is on its array. Possible values: 'A', 'B'.  # noqa: E501

        :return: The ctrlr_side of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ctrlr_side

    @ctrlr_side.setter
    def ctrlr_side(self, ctrlr_side):
        """Sets the ctrlr_side of this NimbleControllerDetails.

        Identifies which controller this is on its array. Possible values: 'A', 'B'.  # noqa: E501

        :param ctrlr_side: The ctrlr_side of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._ctrlr_side = ctrlr_side

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleControllerDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleControllerDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def fan_status(self):
        """Gets the fan_status of this NimbleControllerDetails.  # noqa: E501

        Overall fan status for the controller. Possible values: 'fan_failed', 'fan_okay', 'fan_alerted', 'fan_unknown'.  # noqa: E501

        :return: The fan_status of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._fan_status

    @fan_status.setter
    def fan_status(self, fan_status):
        """Sets the fan_status of this NimbleControllerDetails.

        Overall fan status for the controller. Possible values: 'fan_failed', 'fan_okay', 'fan_alerted', 'fan_unknown'.  # noqa: E501

        :param fan_status: The fan_status of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._fan_status = fan_status

    @property
    def fans(self):
        """Gets the fans of this NimbleControllerDetails.  # noqa: E501

        Status for each fan in the controller.  # noqa: E501

        :return: The fans of this NimbleControllerDetails.  # noqa: E501
        :rtype: list[NimbleNsCtrlrHwSensorInfo]
        """
        return self._fans

    @fans.setter
    def fans(self, fans):
        """Sets the fans of this NimbleControllerDetails.

        Status for each fan in the controller.  # noqa: E501

        :param fans: The fans of this NimbleControllerDetails.  # noqa: E501
        :type: list[NimbleNsCtrlrHwSensorInfo]
        """

        self._fans = fans

    @property
    def generation(self):
        """Gets the generation of this NimbleControllerDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleControllerDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleControllerDetails.

        generation  # noqa: E501

        :param generation: The generation of this NimbleControllerDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def hostname(self):
        """Gets the hostname of this NimbleControllerDetails.  # noqa: E501

        Host name for the controller.  # noqa: E501

        :return: The hostname of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this NimbleControllerDetails.

        Host name for the controller.  # noqa: E501

        :param hostname: The hostname of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def nvme_cards(self):
        """Gets the nvme_cards of this NimbleControllerDetails.  # noqa: E501

        List of NVMe accelerator cards.  # noqa: E501

        :return: The nvme_cards of this NimbleControllerDetails.  # noqa: E501
        :rtype: list[NimbleNsCtrlrNvmeCard]
        """
        return self._nvme_cards

    @nvme_cards.setter
    def nvme_cards(self, nvme_cards):
        """Sets the nvme_cards of this NimbleControllerDetails.

        List of NVMe accelerator cards.  # noqa: E501

        :param nvme_cards: The nvme_cards of this NimbleControllerDetails.  # noqa: E501
        :type: list[NimbleNsCtrlrNvmeCard]
        """

        self._nvme_cards = nvme_cards

    @property
    def nvme_cards_enabled(self):
        """Gets the nvme_cards_enabled of this NimbleControllerDetails.  # noqa: E501

        Indicates if the NVMe accelerator card is enabled.  # noqa: E501

        :return: The nvme_cards_enabled of this NimbleControllerDetails.  # noqa: E501
        :rtype: int
        """
        return self._nvme_cards_enabled

    @nvme_cards_enabled.setter
    def nvme_cards_enabled(self, nvme_cards_enabled):
        """Sets the nvme_cards_enabled of this NimbleControllerDetails.

        Indicates if the NVMe accelerator card is enabled.  # noqa: E501

        :param nvme_cards_enabled: The nvme_cards_enabled of this NimbleControllerDetails.  # noqa: E501
        :type: int
        """

        self._nvme_cards_enabled = nvme_cards_enabled

    @property
    def partial_response_ok(self):
        """Gets the partial_response_ok of this NimbleControllerDetails.  # noqa: E501

        Indicate that it is ok to provide partially available response.  # noqa: E501

        :return: The partial_response_ok of this NimbleControllerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._partial_response_ok

    @partial_response_ok.setter
    def partial_response_ok(self, partial_response_ok):
        """Sets the partial_response_ok of this NimbleControllerDetails.

        Indicate that it is ok to provide partially available response.  # noqa: E501

        :param partial_response_ok: The partial_response_ok of this NimbleControllerDetails.  # noqa: E501
        :type: bool
        """

        self._partial_response_ok = partial_response_ok

    @property
    def partition_status(self):
        """Gets the partition_status of this NimbleControllerDetails.  # noqa: E501

        Status of the system's raid partitions.  # noqa: E501

        :return: The partition_status of this NimbleControllerDetails.  # noqa: E501
        :rtype: list[NimbleNsCtrlrRaidInfo]
        """
        return self._partition_status

    @partition_status.setter
    def partition_status(self, partition_status):
        """Sets the partition_status of this NimbleControllerDetails.

        Status of the system's raid partitions.  # noqa: E501

        :param partition_status: The partition_status of this NimbleControllerDetails.  # noqa: E501
        :type: list[NimbleNsCtrlrRaidInfo]
        """

        self._partition_status = partition_status

    @property
    def power_status(self):
        """Gets the power_status of this NimbleControllerDetails.  # noqa: E501

        Overall power supply status for the controller. Possible values: 'ps_alerted', 'ps_okay', 'ps_failed', 'ps_unknown'.  # noqa: E501

        :return: The power_status of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._power_status

    @power_status.setter
    def power_status(self, power_status):
        """Sets the power_status of this NimbleControllerDetails.

        Overall power supply status for the controller. Possible values: 'ps_alerted', 'ps_okay', 'ps_failed', 'ps_unknown'.  # noqa: E501

        :param power_status: The power_status of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._power_status = power_status

    @property
    def power_supplies(self):
        """Gets the power_supplies of this NimbleControllerDetails.  # noqa: E501

        Status for each power supply in the controller.  # noqa: E501

        :return: The power_supplies of this NimbleControllerDetails.  # noqa: E501
        :rtype: list[NimbleNsCtrlrHwSensorInfo]
        """
        return self._power_supplies

    @power_supplies.setter
    def power_supplies(self, power_supplies):
        """Sets the power_supplies of this NimbleControllerDetails.

        Status for each power supply in the controller.  # noqa: E501

        :param power_supplies: The power_supplies of this NimbleControllerDetails.  # noqa: E501
        :type: list[NimbleNsCtrlrHwSensorInfo]
        """

        self._power_supplies = power_supplies

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleControllerDetails.  # noqa: E501


        :return: The resource_uri of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleControllerDetails.


        :param resource_uri: The resource_uri of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def state(self):
        """Gets the state of this NimbleControllerDetails.  # noqa: E501

        Indicates whether this controller is active or not. Possible values: 'start_active', 'start_standby', 'stale', 'standby', 'active', 'solo', 'none'.  # noqa: E501

        :return: The state of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NimbleControllerDetails.

        Indicates whether this controller is active or not. Possible values: 'start_active', 'start_standby', 'stale', 'standby', 'active', 'solo', 'none'.  # noqa: E501

        :param state: The state of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def support_address(self):
        """Gets the support_address of this NimbleControllerDetails.  # noqa: E501

        IP address used for support.  # noqa: E501

        :return: The support_address of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._support_address

    @support_address.setter
    def support_address(self, support_address):
        """Sets the support_address of this NimbleControllerDetails.

        IP address used for support.  # noqa: E501

        :param support_address: The support_address of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._support_address = support_address

    @property
    def support_netmask(self):
        """Gets the support_netmask of this NimbleControllerDetails.  # noqa: E501

        IP netmask used for support.  # noqa: E501

        :return: The support_netmask of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._support_netmask

    @support_netmask.setter
    def support_netmask(self, support_netmask):
        """Sets the support_netmask of this NimbleControllerDetails.

        IP netmask used for support.  # noqa: E501

        :param support_netmask: The support_netmask of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._support_netmask = support_netmask

    @property
    def support_nic(self):
        """Gets the support_nic of this NimbleControllerDetails.  # noqa: E501

        Network card used for support.  # noqa: E501

        :return: The support_nic of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._support_nic

    @support_nic.setter
    def support_nic(self, support_nic):
        """Sets the support_nic of this NimbleControllerDetails.

        Network card used for support.  # noqa: E501

        :param support_nic: The support_nic of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._support_nic = support_nic

    @property
    def temperature_sensors(self):
        """Gets the temperature_sensors of this NimbleControllerDetails.  # noqa: E501

        Status for temperature sensor in the controller.  # noqa: E501

        :return: The temperature_sensors of this NimbleControllerDetails.  # noqa: E501
        :rtype: list[NimbleNsCtrlrHwSensorInfo]
        """
        return self._temperature_sensors

    @temperature_sensors.setter
    def temperature_sensors(self, temperature_sensors):
        """Sets the temperature_sensors of this NimbleControllerDetails.

        Status for temperature sensor in the controller.  # noqa: E501

        :param temperature_sensors: The temperature_sensors of this NimbleControllerDetails.  # noqa: E501
        :type: list[NimbleNsCtrlrHwSensorInfo]
        """

        self._temperature_sensors = temperature_sensors

    @property
    def temperature_status(self):
        """Gets the temperature_status of this NimbleControllerDetails.  # noqa: E501

        Overall temperature status for the controller. Possible values: 'temperature_unknown', 'temperature_alerted', 'temperature_okay', 'temperature_fail'.  # noqa: E501

        :return: The temperature_status of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._temperature_status

    @temperature_status.setter
    def temperature_status(self, temperature_status):
        """Sets the temperature_status of this NimbleControllerDetails.

        Overall temperature status for the controller. Possible values: 'temperature_unknown', 'temperature_alerted', 'temperature_okay', 'temperature_fail'.  # noqa: E501

        :param temperature_status: The temperature_status of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._temperature_status = temperature_status

    @property
    def type(self):
        """Gets the type of this NimbleControllerDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleControllerDetails.

        type  # noqa: E501

        :param type: The type of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def update_end_time(self):
        """Gets the update_end_time of this NimbleControllerDetails.  # noqa: E501

        End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The update_end_time of this NimbleControllerDetails.  # noqa: E501
        :rtype: int
        """
        return self._update_end_time

    @update_end_time.setter
    def update_end_time(self, update_end_time):
        """Sets the update_end_time of this NimbleControllerDetails.

        End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param update_end_time: The update_end_time of this NimbleControllerDetails.  # noqa: E501
        :type: int
        """

        self._update_end_time = update_end_time

    @property
    def update_error_code(self):
        """Gets the update_error_code of this NimbleControllerDetails.  # noqa: E501

        If the software update has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].  # noqa: E501

        :return: The update_error_code of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._update_error_code

    @update_error_code.setter
    def update_error_code(self, update_error_code):
        """Sets the update_error_code of this NimbleControllerDetails.

        If the software update has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].  # noqa: E501

        :param update_error_code: The update_error_code of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._update_error_code = update_error_code

    @property
    def update_progress_msg(self):
        """Gets the update_progress_msg of this NimbleControllerDetails.  # noqa: E501

        Group update detailed progress message. Plain string.  # noqa: E501

        :return: The update_progress_msg of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._update_progress_msg

    @update_progress_msg.setter
    def update_progress_msg(self, update_progress_msg):
        """Sets the update_progress_msg of this NimbleControllerDetails.

        Group update detailed progress message. Plain string.  # noqa: E501

        :param update_progress_msg: The update_progress_msg of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._update_progress_msg = update_progress_msg

    @property
    def update_start_time(self):
        """Gets the update_start_time of this NimbleControllerDetails.  # noqa: E501

        Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The update_start_time of this NimbleControllerDetails.  # noqa: E501
        :rtype: int
        """
        return self._update_start_time

    @update_start_time.setter
    def update_start_time(self, update_start_time):
        """Sets the update_start_time of this NimbleControllerDetails.

        Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param update_start_time: The update_start_time of this NimbleControllerDetails.  # noqa: E501
        :type: int
        """

        self._update_start_time = update_start_time

    @property
    def update_state(self):
        """Gets the update_state of this NimbleControllerDetails.  # noqa: E501


        :return: The update_state of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._update_state

    @update_state.setter
    def update_state(self, update_state):
        """Sets the update_state of this NimbleControllerDetails.


        :param update_state: The update_state of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._update_state = update_state

    @property
    def version_current(self):
        """Gets the version_current of this NimbleControllerDetails.  # noqa: E501

        Version of software running on the group.  # noqa: E501

        :return: The version_current of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._version_current

    @version_current.setter
    def version_current(self, version_current):
        """Sets the version_current of this NimbleControllerDetails.

        Version of software running on the group.  # noqa: E501

        :param version_current: The version_current of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._version_current = version_current

    @property
    def version_rollback(self):
        """Gets the version_rollback of this NimbleControllerDetails.  # noqa: E501

        Rollback software version for the group.  # noqa: E501

        :return: The version_rollback of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._version_rollback

    @version_rollback.setter
    def version_rollback(self, version_rollback):
        """Sets the version_rollback of this NimbleControllerDetails.

        Rollback software version for the group.  # noqa: E501

        :param version_rollback: The version_rollback of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._version_rollback = version_rollback

    @property
    def version_target(self):
        """Gets the version_target of this NimbleControllerDetails.  # noqa: E501

        Desired software version for the group.  # noqa: E501

        :return: The version_target of this NimbleControllerDetails.  # noqa: E501
        :rtype: str
        """
        return self._version_target

    @version_target.setter
    def version_target(self, version_target):
        """Sets the version_target of this NimbleControllerDetails.

        Desired software version for the group.  # noqa: E501

        :param version_target: The version_target of this NimbleControllerDetails.  # noqa: E501
        :type: str
        """

        self._version_target = version_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleControllerDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
