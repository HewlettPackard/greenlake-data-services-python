# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VolumeCapacitySeriesData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actual_usage_mi_b': 'float',
        'host_written_capacity_mi_b': 'float',
        'timestamp_ms': 'int'
    }

    attribute_map = {
        'actual_usage_mi_b': 'actualUsageMiB',
        'host_written_capacity_mi_b': 'hostWrittenCapacityMiB',
        'timestamp_ms': 'timestampMs'
    }

    def __init__(self, actual_usage_mi_b=None, host_written_capacity_mi_b=None, timestamp_ms=None):  # noqa: E501
        """VolumeCapacitySeriesData - a model defined in OpenAPI"""  # noqa: E501

        self._actual_usage_mi_b = None
        self._host_written_capacity_mi_b = None
        self._timestamp_ms = None
        self.discriminator = None

        if actual_usage_mi_b is not None:
            self.actual_usage_mi_b = actual_usage_mi_b
        if host_written_capacity_mi_b is not None:
            self.host_written_capacity_mi_b = host_written_capacity_mi_b
        if timestamp_ms is not None:
            self.timestamp_ms = timestamp_ms

    @property
    def actual_usage_mi_b(self):
        """Gets the actual_usage_mi_b of this VolumeCapacitySeriesData.  # noqa: E501

        Actual usage value in MiB  # noqa: E501

        :return: The actual_usage_mi_b of this VolumeCapacitySeriesData.  # noqa: E501
        :rtype: float
        """
        return self._actual_usage_mi_b

    @actual_usage_mi_b.setter
    def actual_usage_mi_b(self, actual_usage_mi_b):
        """Sets the actual_usage_mi_b of this VolumeCapacitySeriesData.

        Actual usage value in MiB  # noqa: E501

        :param actual_usage_mi_b: The actual_usage_mi_b of this VolumeCapacitySeriesData.  # noqa: E501
        :type: float
        """

        self._actual_usage_mi_b = actual_usage_mi_b

    @property
    def host_written_capacity_mi_b(self):
        """Gets the host_written_capacity_mi_b of this VolumeCapacitySeriesData.  # noqa: E501

        Host written capacity in MiB  # noqa: E501

        :return: The host_written_capacity_mi_b of this VolumeCapacitySeriesData.  # noqa: E501
        :rtype: float
        """
        return self._host_written_capacity_mi_b

    @host_written_capacity_mi_b.setter
    def host_written_capacity_mi_b(self, host_written_capacity_mi_b):
        """Sets the host_written_capacity_mi_b of this VolumeCapacitySeriesData.

        Host written capacity in MiB  # noqa: E501

        :param host_written_capacity_mi_b: The host_written_capacity_mi_b of this VolumeCapacitySeriesData.  # noqa: E501
        :type: float
        """

        self._host_written_capacity_mi_b = host_written_capacity_mi_b

    @property
    def timestamp_ms(self):
        """Gets the timestamp_ms of this VolumeCapacitySeriesData.  # noqa: E501

        epoch timestamp  # noqa: E501

        :return: The timestamp_ms of this VolumeCapacitySeriesData.  # noqa: E501
        :rtype: int
        """
        return self._timestamp_ms

    @timestamp_ms.setter
    def timestamp_ms(self, timestamp_ms):
        """Sets the timestamp_ms of this VolumeCapacitySeriesData.

        epoch timestamp  # noqa: E501

        :param timestamp_ms: The timestamp_ms of this VolumeCapacitySeriesData.  # noqa: E501
        :type: int
        """

        self._timestamp_ms = timestamp_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeCapacitySeriesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
