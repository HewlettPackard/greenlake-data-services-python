# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ServicePorts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer_id': 'str',
        'domain': 'str',
        'generation': 'int',
        'id': 'str',
        'ipv4address': 'str',
        'ipv4netmask': 'str',
        'ipv6address': 'str',
        'ipv6vnetmask': 'str',
        'mode': 'str',
        'name': 'str',
        'node': 'str',
        'resource_uri': 'str',
        'system_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'domain': 'domain',
        'generation': 'generation',
        'id': 'id',
        'ipv4address': 'ipv4address',
        'ipv4netmask': 'ipv4netmask',
        'ipv6address': 'ipv6address',
        'ipv6vnetmask': 'ipv6vnetmask',
        'mode': 'mode',
        'name': 'name',
        'node': 'node',
        'resource_uri': 'resourceUri',
        'system_id': 'systemId',
        'type': 'type'
    }

    def __init__(self, customer_id=None, domain=None, generation=None, id=None, ipv4address=None, ipv4netmask=None, ipv6address=None, ipv6vnetmask=None, mode=None, name=None, node=None, resource_uri=None, system_id=None, type=None):  # noqa: E501
        """ServicePorts - a model defined in OpenAPI"""  # noqa: E501

        self._customer_id = None
        self._domain = None
        self._generation = None
        self._id = None
        self._ipv4address = None
        self._ipv4netmask = None
        self._ipv6address = None
        self._ipv6vnetmask = None
        self._mode = None
        self._name = None
        self._node = None
        self._resource_uri = None
        self._system_id = None
        self._type = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if domain is not None:
            self.domain = domain
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if ipv4address is not None:
            self.ipv4address = ipv4address
        if ipv4netmask is not None:
            self.ipv4netmask = ipv4netmask
        if ipv6address is not None:
            self.ipv6address = ipv6address
        if ipv6vnetmask is not None:
            self.ipv6vnetmask = ipv6vnetmask
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if node is not None:
            self.node = node
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type

    @property
    def customer_id(self):
        """Gets the customer_id of this ServicePorts.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ServicePorts.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def domain(self):
        """Gets the domain of this ServicePorts.  # noqa: E501

        domain of the service port object  # noqa: E501

        :return: The domain of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ServicePorts.

        domain of the service port object  # noqa: E501

        :param domain: The domain of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def generation(self):
        """Gets the generation of this ServicePorts.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this ServicePorts.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this ServicePorts.

        generation  # noqa: E501

        :param generation: The generation of this ServicePorts.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this ServicePorts.  # noqa: E501

        uid (Unique identifier) for the service port object  # noqa: E501

        :return: The id of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServicePorts.

        uid (Unique identifier) for the service port object  # noqa: E501

        :param id: The id of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ipv4address(self):
        """Gets the ipv4address of this ServicePorts.  # noqa: E501

        ipv4address of the service port object `Filter`  # noqa: E501

        :return: The ipv4address of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._ipv4address

    @ipv4address.setter
    def ipv4address(self, ipv4address):
        """Sets the ipv4address of this ServicePorts.

        ipv4address of the service port object `Filter`  # noqa: E501

        :param ipv4address: The ipv4address of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._ipv4address = ipv4address

    @property
    def ipv4netmask(self):
        """Gets the ipv4netmask of this ServicePorts.  # noqa: E501

        ipv4 net mask of the service port object  # noqa: E501

        :return: The ipv4netmask of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._ipv4netmask

    @ipv4netmask.setter
    def ipv4netmask(self, ipv4netmask):
        """Sets the ipv4netmask of this ServicePorts.

        ipv4 net mask of the service port object  # noqa: E501

        :param ipv4netmask: The ipv4netmask of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._ipv4netmask = ipv4netmask

    @property
    def ipv6address(self):
        """Gets the ipv6address of this ServicePorts.  # noqa: E501

        ipv6address of the service port object `Filter`  # noqa: E501

        :return: The ipv6address of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._ipv6address

    @ipv6address.setter
    def ipv6address(self, ipv6address):
        """Sets the ipv6address of this ServicePorts.

        ipv6address of the service port object `Filter`  # noqa: E501

        :param ipv6address: The ipv6address of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._ipv6address = ipv6address

    @property
    def ipv6vnetmask(self):
        """Gets the ipv6vnetmask of this ServicePorts.  # noqa: E501

        ipv6 net mask for the service port objectt  # noqa: E501

        :return: The ipv6vnetmask of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._ipv6vnetmask

    @ipv6vnetmask.setter
    def ipv6vnetmask(self, ipv6vnetmask):
        """Sets the ipv6vnetmask of this ServicePorts.

        ipv6 net mask for the service port objectt  # noqa: E501

        :param ipv6vnetmask: The ipv6vnetmask of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._ipv6vnetmask = ipv6vnetmask

    @property
    def mode(self):
        """Gets the mode of this ServicePorts.  # noqa: E501

        mode for the service port object  # noqa: E501

        :return: The mode of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ServicePorts.

        mode for the service port object  # noqa: E501

        :param mode: The mode of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this ServicePorts.  # noqa: E501

        display name of the service port object  # noqa: E501

        :return: The name of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicePorts.

        display name of the service port object  # noqa: E501

        :param name: The name of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node(self):
        """Gets the node of this ServicePorts.  # noqa: E501

        node for the service port object  # noqa: E501

        :return: The node of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this ServicePorts.

        node for the service port object  # noqa: E501

        :param node: The node of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def resource_uri(self):
        """Gets the resource_uri of this ServicePorts.  # noqa: E501

        resourceUri for detailed service ports object  # noqa: E501

        :return: The resource_uri of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this ServicePorts.

        resourceUri for detailed service ports object  # noqa: E501

        :param resource_uri: The resource_uri of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def system_id(self):
        """Gets the system_id of this ServicePorts.  # noqa: E501

        SystemUid/serialNumber of the array.  # noqa: E501

        :return: The system_id of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this ServicePorts.

        SystemUid/serialNumber of the array.  # noqa: E501

        :param system_id: The system_id of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this ServicePorts.  # noqa: E501

        type  # noqa: E501

        :return: The type of this ServicePorts.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServicePorts.

        type  # noqa: E501

        :param type: The type of this ServicePorts.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePorts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
