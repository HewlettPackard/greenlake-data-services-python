# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EnclosureExpanderList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'associated_links': 'EeAssociatedLinks',
        'customer_id': 'str',
        'domain': 'str',
        'element_status_code': 'str',
        'enclosure_device_id': 'int',
        'enclosure_expander_id': 'int',
        'enclosure_id': 'str',
        'enclosure_name': 'str',
        'generation': 'int',
        'id': 'str',
        'name': 'str',
        'resource_uri': 'str',
        'system_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'address': 'address',
        'associated_links': 'associatedLinks',
        'customer_id': 'customerId',
        'domain': 'domain',
        'element_status_code': 'elementStatusCode',
        'enclosure_device_id': 'enclosureDeviceId',
        'enclosure_expander_id': 'enclosureExpanderId',
        'enclosure_id': 'enclosureId',
        'enclosure_name': 'enclosureName',
        'generation': 'generation',
        'id': 'id',
        'name': 'name',
        'resource_uri': 'resourceUri',
        'system_id': 'systemId',
        'type': 'type'
    }

    def __init__(self, address=None, associated_links=None, customer_id=None, domain=None, element_status_code=None, enclosure_device_id=None, enclosure_expander_id=None, enclosure_id=None, enclosure_name=None, generation=None, id=None, name=None, resource_uri=None, system_id=None, type=None):  # noqa: E501
        """EnclosureExpanderList - a model defined in OpenAPI"""  # noqa: E501

        self._address = None
        self._associated_links = None
        self._customer_id = None
        self._domain = None
        self._element_status_code = None
        self._enclosure_device_id = None
        self._enclosure_expander_id = None
        self._enclosure_id = None
        self._enclosure_name = None
        self._generation = None
        self._id = None
        self._name = None
        self._resource_uri = None
        self._system_id = None
        self._type = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if associated_links is not None:
            self.associated_links = associated_links
        if customer_id is not None:
            self.customer_id = customer_id
        if domain is not None:
            self.domain = domain
        if element_status_code is not None:
            self.element_status_code = element_status_code
        if enclosure_device_id is not None:
            self.enclosure_device_id = enclosure_device_id
        if enclosure_expander_id is not None:
            self.enclosure_expander_id = enclosure_expander_id
        if enclosure_id is not None:
            self.enclosure_id = enclosure_id
        if enclosure_name is not None:
            self.enclosure_name = enclosure_name
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type

    @property
    def address(self):
        """Gets the address of this EnclosureExpanderList.  # noqa: E501

        Name of the enclosure  # noqa: E501

        :return: The address of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EnclosureExpanderList.

        Name of the enclosure  # noqa: E501

        :param address: The address of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def associated_links(self):
        """Gets the associated_links of this EnclosureExpanderList.  # noqa: E501


        :return: The associated_links of this EnclosureExpanderList.  # noqa: E501
        :rtype: EeAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this EnclosureExpanderList.


        :param associated_links: The associated_links of this EnclosureExpanderList.  # noqa: E501
        :type: EeAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def customer_id(self):
        """Gets the customer_id of this EnclosureExpanderList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this EnclosureExpanderList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def domain(self):
        """Gets the domain of this EnclosureExpanderList.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EnclosureExpanderList.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def element_status_code(self):
        """Gets the element_status_code of this EnclosureExpanderList.  # noqa: E501

        Enclosure status code  # noqa: E501

        :return: The element_status_code of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._element_status_code

    @element_status_code.setter
    def element_status_code(self, element_status_code):
        """Sets the element_status_code of this EnclosureExpanderList.

        Enclosure status code  # noqa: E501

        :param element_status_code: The element_status_code of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._element_status_code = element_status_code

    @property
    def enclosure_device_id(self):
        """Gets the enclosure_device_id of this EnclosureExpanderList.  # noqa: E501


        :return: The enclosure_device_id of this EnclosureExpanderList.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_device_id

    @enclosure_device_id.setter
    def enclosure_device_id(self, enclosure_device_id):
        """Sets the enclosure_device_id of this EnclosureExpanderList.


        :param enclosure_device_id: The enclosure_device_id of this EnclosureExpanderList.  # noqa: E501
        :type: int
        """

        self._enclosure_device_id = enclosure_device_id

    @property
    def enclosure_expander_id(self):
        """Gets the enclosure_expander_id of this EnclosureExpanderList.  # noqa: E501

        Numeric ID of the resource  # noqa: E501

        :return: The enclosure_expander_id of this EnclosureExpanderList.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_expander_id

    @enclosure_expander_id.setter
    def enclosure_expander_id(self, enclosure_expander_id):
        """Sets the enclosure_expander_id of this EnclosureExpanderList.

        Numeric ID of the resource  # noqa: E501

        :param enclosure_expander_id: The enclosure_expander_id of this EnclosureExpanderList.  # noqa: E501
        :type: int
        """

        self._enclosure_expander_id = enclosure_expander_id

    @property
    def enclosure_id(self):
        """Gets the enclosure_id of this EnclosureExpanderList.  # noqa: E501

        Parent UID of the resource. `Filter`  # noqa: E501

        :return: The enclosure_id of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_id

    @enclosure_id.setter
    def enclosure_id(self, enclosure_id):
        """Sets the enclosure_id of this EnclosureExpanderList.

        Parent UID of the resource. `Filter`  # noqa: E501

        :param enclosure_id: The enclosure_id of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._enclosure_id = enclosure_id

    @property
    def enclosure_name(self):
        """Gets the enclosure_name of this EnclosureExpanderList.  # noqa: E501

        Name of the enclosure  # noqa: E501

        :return: The enclosure_name of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_name

    @enclosure_name.setter
    def enclosure_name(self, enclosure_name):
        """Sets the enclosure_name of this EnclosureExpanderList.

        Name of the enclosure  # noqa: E501

        :param enclosure_name: The enclosure_name of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._enclosure_name = enclosure_name

    @property
    def generation(self):
        """Gets the generation of this EnclosureExpanderList.  # noqa: E501

        generation `Filter, Sort`  # noqa: E501

        :return: The generation of this EnclosureExpanderList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this EnclosureExpanderList.

        generation `Filter, Sort`  # noqa: E501

        :param generation: The generation of this EnclosureExpanderList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this EnclosureExpanderList.  # noqa: E501

        Unique Identifier of the resource. `Filter`  # noqa: E501

        :return: The id of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnclosureExpanderList.

        Unique Identifier of the resource. `Filter`  # noqa: E501

        :param id: The id of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EnclosureExpanderList.  # noqa: E501

        Enclosure Display name  # noqa: E501

        :return: The name of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnclosureExpanderList.

        Enclosure Display name  # noqa: E501

        :param name: The name of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resource_uri(self):
        """Gets the resource_uri of this EnclosureExpanderList.  # noqa: E501

        resourceUri for detailed enclosure expander object  # noqa: E501

        :return: The resource_uri of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this EnclosureExpanderList.

        resourceUri for detailed enclosure expander object  # noqa: E501

        :param resource_uri: The resource_uri of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def system_id(self):
        """Gets the system_id of this EnclosureExpanderList.  # noqa: E501

        systemId/Serial Number  of the array.  # noqa: E501

        :return: The system_id of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this EnclosureExpanderList.

        systemId/Serial Number  of the array.  # noqa: E501

        :param system_id: The system_id of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this EnclosureExpanderList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this EnclosureExpanderList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnclosureExpanderList.

        type  # noqa: E501

        :param type: The type of this EnclosureExpanderList.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnclosureExpanderList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
