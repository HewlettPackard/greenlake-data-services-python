# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleDriveSetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accept_dedupe_impact': 'bool',
        'accept_foreign': 'bool',
        'driveset': 'int'
    }

    attribute_map = {
        'accept_dedupe_impact': 'accept_dedupe_impact',
        'accept_foreign': 'accept_foreign',
        'driveset': 'driveset'
    }

    def __init__(self, accept_dedupe_impact=None, accept_foreign=None, driveset=None):  # noqa: E501
        """NimbleDriveSetDetails - a model defined in OpenAPI"""  # noqa: E501

        self._accept_dedupe_impact = None
        self._accept_foreign = None
        self._driveset = None
        self.discriminator = None

        self.accept_dedupe_impact = accept_dedupe_impact
        self.accept_foreign = accept_foreign
        self.driveset = driveset

    @property
    def accept_dedupe_impact(self):
        """Gets the accept_dedupe_impact of this NimbleDriveSetDetails.  # noqa: E501

        Accept the reduction or elimination of deduplication capability on the system as a result of activating a shelf that does not meet the necessary deduplication requirements. Possible values: 'true', 'false'.  # noqa: E501

        :return: The accept_dedupe_impact of this NimbleDriveSetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._accept_dedupe_impact

    @accept_dedupe_impact.setter
    def accept_dedupe_impact(self, accept_dedupe_impact):
        """Sets the accept_dedupe_impact of this NimbleDriveSetDetails.

        Accept the reduction or elimination of deduplication capability on the system as a result of activating a shelf that does not meet the necessary deduplication requirements. Possible values: 'true', 'false'.  # noqa: E501

        :param accept_dedupe_impact: The accept_dedupe_impact of this NimbleDriveSetDetails.  # noqa: E501
        :type: bool
        """
        if accept_dedupe_impact is None:
            raise ValueError("Invalid value for `accept_dedupe_impact`, must not be `None`")  # noqa: E501

        self._accept_dedupe_impact = accept_dedupe_impact

    @property
    def accept_foreign(self):
        """Gets the accept_foreign of this NimbleDriveSetDetails.  # noqa: E501

        Accept the removal of data on the shelf disks and activate foreign shelf. Possible values: 'true', 'false'.  # noqa: E501

        :return: The accept_foreign of this NimbleDriveSetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._accept_foreign

    @accept_foreign.setter
    def accept_foreign(self, accept_foreign):
        """Sets the accept_foreign of this NimbleDriveSetDetails.

        Accept the removal of data on the shelf disks and activate foreign shelf. Possible values: 'true', 'false'.  # noqa: E501

        :param accept_foreign: The accept_foreign of this NimbleDriveSetDetails.  # noqa: E501
        :type: bool
        """
        if accept_foreign is None:
            raise ValueError("Invalid value for `accept_foreign`, must not be `None`")  # noqa: E501

        self._accept_foreign = accept_foreign

    @property
    def driveset(self):
        """Gets the driveset of this NimbleDriveSetDetails.  # noqa: E501

        Driveset to activate.  # noqa: E501

        :return: The driveset of this NimbleDriveSetDetails.  # noqa: E501
        :rtype: int
        """
        return self._driveset

    @driveset.setter
    def driveset(self, driveset):
        """Sets the driveset of this NimbleDriveSetDetails.

        Driveset to activate.  # noqa: E501

        :param driveset: The driveset of this NimbleDriveSetDetails.  # noqa: E501
        :type: int
        """
        if driveset is None:
            raise ValueError("Invalid value for `driveset`, must not be `None`")  # noqa: E501

        self._driveset = driveset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleDriveSetDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
