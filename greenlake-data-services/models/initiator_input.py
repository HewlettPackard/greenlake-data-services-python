# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InitiatorInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'driver_version': 'str',
        'firmware_version': 'str',
        'hba_model': 'str',
        'host_speed': 'int',
        'ip_address': 'str',
        'name': 'str',
        'protocol': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'address': 'address',
        'driver_version': 'driverVersion',
        'firmware_version': 'firmwareVersion',
        'hba_model': 'hbaModel',
        'host_speed': 'hostSpeed',
        'ip_address': 'ipAddress',
        'name': 'name',
        'protocol': 'protocol',
        'vendor': 'vendor'
    }

    def __init__(self, address=None, driver_version=None, firmware_version=None, hba_model=None, host_speed=None, ip_address=None, name=None, protocol=None, vendor=None):  # noqa: E501
        """InitiatorInput - a model defined in OpenAPI"""  # noqa: E501

        self._address = None
        self._driver_version = None
        self._firmware_version = None
        self._hba_model = None
        self._host_speed = None
        self._ip_address = None
        self._name = None
        self._protocol = None
        self._vendor = None
        self.discriminator = None

        self.address = address
        if driver_version is not None:
            self.driver_version = driver_version
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if hba_model is not None:
            self.hba_model = hba_model
        if host_speed is not None:
            self.host_speed = host_speed
        if ip_address is not None:
            self.ip_address = ip_address
        if name is not None:
            self.name = name
        self.protocol = protocol
        if vendor is not None:
            self.vendor = vendor

    @property
    def address(self):
        """Gets the address of this InitiatorInput.  # noqa: E501

        Address of the initiator.  # noqa: E501

        :return: The address of this InitiatorInput.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InitiatorInput.

        Address of the initiator.  # noqa: E501

        :param address: The address of this InitiatorInput.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def driver_version(self):
        """Gets the driver_version of this InitiatorInput.  # noqa: E501

        Driver version of the host initiator.  # noqa: E501

        :return: The driver_version of this InitiatorInput.  # noqa: E501
        :rtype: str
        """
        return self._driver_version

    @driver_version.setter
    def driver_version(self, driver_version):
        """Sets the driver_version of this InitiatorInput.

        Driver version of the host initiator.  # noqa: E501

        :param driver_version: The driver_version of this InitiatorInput.  # noqa: E501
        :type: str
        """

        self._driver_version = driver_version

    @property
    def firmware_version(self):
        """Gets the firmware_version of this InitiatorInput.  # noqa: E501

        Firmware version of the host initiator.  # noqa: E501

        :return: The firmware_version of this InitiatorInput.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this InitiatorInput.

        Firmware version of the host initiator.  # noqa: E501

        :param firmware_version: The firmware_version of this InitiatorInput.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def hba_model(self):
        """Gets the hba_model of this InitiatorInput.  # noqa: E501

        Host bus adaptor model of the host initiator  # noqa: E501

        :return: The hba_model of this InitiatorInput.  # noqa: E501
        :rtype: str
        """
        return self._hba_model

    @hba_model.setter
    def hba_model(self, hba_model):
        """Sets the hba_model of this InitiatorInput.

        Host bus adaptor model of the host initiator  # noqa: E501

        :param hba_model: The hba_model of this InitiatorInput.  # noqa: E501
        :type: str
        """

        self._hba_model = hba_model

    @property
    def host_speed(self):
        """Gets the host_speed of this InitiatorInput.  # noqa: E501

        Host speed  # noqa: E501

        :return: The host_speed of this InitiatorInput.  # noqa: E501
        :rtype: int
        """
        return self._host_speed

    @host_speed.setter
    def host_speed(self, host_speed):
        """Sets the host_speed of this InitiatorInput.

        Host speed  # noqa: E501

        :param host_speed: The host_speed of this InitiatorInput.  # noqa: E501
        :type: int
        """

        self._host_speed = host_speed

    @property
    def ip_address(self):
        """Gets the ip_address of this InitiatorInput.  # noqa: E501

        IP address of the initiator.  # noqa: E501

        :return: The ip_address of this InitiatorInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InitiatorInput.

        IP address of the initiator.  # noqa: E501

        :param ip_address: The ip_address of this InitiatorInput.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this InitiatorInput.  # noqa: E501

        Name of the initiator.  # noqa: E501

        :return: The name of this InitiatorInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InitiatorInput.

        Name of the initiator.  # noqa: E501

        :param name: The name of this InitiatorInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this InitiatorInput.  # noqa: E501

        protocol supported are : iSCSI or NVMe  # noqa: E501

        :return: The protocol of this InitiatorInput.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InitiatorInput.

        protocol supported are : iSCSI or NVMe  # noqa: E501

        :param protocol: The protocol of this InitiatorInput.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def vendor(self):
        """Gets the vendor of this InitiatorInput.  # noqa: E501

        Vendor of the host initiator  # noqa: E501

        :return: The vendor of this InitiatorInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this InitiatorInput.

        Vendor of the host initiator  # noqa: E501

        :param vendor: The vendor of this InitiatorInput.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiatorInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
