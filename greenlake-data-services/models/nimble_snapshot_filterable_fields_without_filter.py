# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleSnapshotFilterableFieldsWithoutFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'online': 'bool',
        'pool_name': 'str',
        'replication_status': 'str',
        'schedule_id': 'str',
        'schedule_name': 'str',
        'serial_number': 'str',
        'size': 'int',
        'snap_collection_id': 'str',
        'snap_collection_name': 'str',
        'target_name': 'str',
        'writable': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'online': 'online',
        'pool_name': 'pool_name',
        'replication_status': 'replication_status',
        'schedule_id': 'schedule_id',
        'schedule_name': 'schedule_name',
        'serial_number': 'serial_number',
        'size': 'size',
        'snap_collection_id': 'snap_collection_id',
        'snap_collection_name': 'snap_collection_name',
        'target_name': 'target_name',
        'writable': 'writable'
    }

    def __init__(self, id=None, name=None, online=None, pool_name=None, replication_status=None, schedule_id=None, schedule_name=None, serial_number=None, size=None, snap_collection_id=None, snap_collection_name=None, target_name=None, writable=None):  # noqa: E501
        """NimbleSnapshotFilterableFieldsWithoutFilter - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._online = None
        self._pool_name = None
        self._replication_status = None
        self._schedule_id = None
        self._schedule_name = None
        self._serial_number = None
        self._size = None
        self._snap_collection_id = None
        self._snap_collection_name = None
        self._target_name = None
        self._writable = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if online is not None:
            self.online = online
        if pool_name is not None:
            self.pool_name = pool_name
        if replication_status is not None:
            self.replication_status = replication_status
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if schedule_name is not None:
            self.schedule_name = schedule_name
        if serial_number is not None:
            self.serial_number = serial_number
        if size is not None:
            self.size = size
        if snap_collection_id is not None:
            self.snap_collection_id = snap_collection_id
        if snap_collection_name is not None:
            self.snap_collection_name = snap_collection_name
        if target_name is not None:
            self.target_name = target_name
        if writable is not None:
            self.writable = writable

    @property
    def id(self):
        """Gets the id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Identifier for the snapshot. A 42 digit hexadecimal number.  # noqa: E501

        :return: The id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Identifier for the snapshot. A 42 digit hexadecimal number.  # noqa: E501

        :param id: The id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.  # noqa: E501

        :return: The name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.  # noqa: E501

        :param name: The name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def online(self):
        """Gets the online of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Online state for a snapshot means it could be mounted for data restore.  # noqa: E501

        :return: The online of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Online state for a snapshot means it could be mounted for data restore.  # noqa: E501

        :param online: The online of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def pool_name(self):
        """Gets the pool_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Name of the pool in which the parent volume belongs to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The pool_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Name of the pool in which the parent volume belongs to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param pool_name: The pool_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def replication_status(self):
        """Gets the replication_status of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Replication status. Possible values: 'complete', 'in_progress', 'pending', 'fail'.  # noqa: E501

        :return: The replication_status of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._replication_status

    @replication_status.setter
    def replication_status(self, replication_status):
        """Sets the replication_status of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Replication status. Possible values: 'complete', 'in_progress', 'pending', 'fail'.  # noqa: E501

        :param replication_status: The replication_status of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._replication_status = replication_status

    @property
    def schedule_id(self):
        """Gets the schedule_id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Identifier of protection schedule. A 42 digit hexadecimal number.  # noqa: E501

        :return: The schedule_id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Identifier of protection schedule. A 42 digit hexadecimal number.  # noqa: E501

        :param schedule_id: The schedule_id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._schedule_id = schedule_id

    @property
    def schedule_name(self):
        """Gets the schedule_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Name of protection schedule. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The schedule_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._schedule_name

    @schedule_name.setter
    def schedule_name(self, schedule_name):
        """Sets the schedule_name of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Name of protection schedule. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param schedule_name: The schedule_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._schedule_name = schedule_name

    @property
    def serial_number(self):
        """Gets the serial_number of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Identifier for the SCSI protocol. A 32 digit hexadecimal number.  # noqa: E501

        :return: The serial_number of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Identifier for the SCSI protocol. A 32 digit hexadecimal number.  # noqa: E501

        :param serial_number: The serial_number of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def size(self):
        """Gets the size of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Size of volume at time of snapshot (in bytes).  # noqa: E501

        :return: The size of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Size of volume at time of snapshot (in bytes).  # noqa: E501

        :param size: The size of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def snap_collection_id(self):
        """Gets the snap_collection_id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Identifier of snapshot collection. A 42 digit hexadecimal number.  # noqa: E501

        :return: The snap_collection_id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._snap_collection_id

    @snap_collection_id.setter
    def snap_collection_id(self, snap_collection_id):
        """Sets the snap_collection_id of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Identifier of snapshot collection. A 42 digit hexadecimal number.  # noqa: E501

        :param snap_collection_id: The snap_collection_id of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._snap_collection_id = snap_collection_id

    @property
    def snap_collection_name(self):
        """Gets the snap_collection_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :return: The snap_collection_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._snap_collection_name

    @snap_collection_name.setter
    def snap_collection_name(self, snap_collection_name):
        """Sets the snap_collection_name of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :param snap_collection_name: The snap_collection_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._snap_collection_name = snap_collection_name

    @property
    def target_name(self):
        """Gets the target_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target snapshot. The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target.  # noqa: E501

        :return: The target_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this NimbleSnapshotFilterableFieldsWithoutFilter.

        The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target snapshot. The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target.  # noqa: E501

        :param target_name: The target_name of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def writable(self):
        """Gets the writable of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501

        Whether snapshot is writable or not. Mandatory and must be set to 'true' for VSS application synchronized snapshots.  # noqa: E501

        :return: The writable of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: bool
        """
        return self._writable

    @writable.setter
    def writable(self, writable):
        """Sets the writable of this NimbleSnapshotFilterableFieldsWithoutFilter.

        Whether snapshot is writable or not. Mandatory and must be set to 'true' for VSS application synchronized snapshots.  # noqa: E501

        :param writable: The writable of this NimbleSnapshotFilterableFieldsWithoutFilter.  # noqa: E501
        :type: bool
        """

        self._writable = writable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleSnapshotFilterableFieldsWithoutFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
