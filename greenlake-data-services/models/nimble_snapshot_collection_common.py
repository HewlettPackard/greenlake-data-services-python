# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleSnapshotCollectionCommon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_writes': 'bool',
        'associated_links': 'AssociatedLinks',
        'console_uri': 'str',
        'creation_time': 'int',
        'customer_id': 'str',
        'description': 'str',
        'generation': 'int',
        'is_complete': 'bool',
        'is_external_trigger': 'bool',
        'is_manual': 'bool',
        'is_manually_managed': 'bool',
        'is_replica': 'bool',
        'is_unmanaged': 'bool',
        'last_modified': 'int',
        'metadata': 'list[KeyValue]',
        'origin_name': 'str',
        'peer_snapcoll_id': 'str',
        'replicate_to': 'str',
        'resource_uri': 'str',
        'snapshots_list': 'list[NimbleSnapCollSnapshot]',
        'type': 'str'
    }

    attribute_map = {
        'allow_writes': 'allow_writes',
        'associated_links': 'associated_links',
        'console_uri': 'consoleUri',
        'creation_time': 'creation_time',
        'customer_id': 'customerId',
        'description': 'description',
        'generation': 'generation',
        'is_complete': 'is_complete',
        'is_external_trigger': 'is_external_trigger',
        'is_manual': 'is_manual',
        'is_manually_managed': 'is_manually_managed',
        'is_replica': 'is_replica',
        'is_unmanaged': 'is_unmanaged',
        'last_modified': 'last_modified',
        'metadata': 'metadata',
        'origin_name': 'origin_name',
        'peer_snapcoll_id': 'peer_snapcoll_id',
        'replicate_to': 'replicate_to',
        'resource_uri': 'resourceUri',
        'snapshots_list': 'snapshots_list',
        'type': 'type'
    }

    def __init__(self, allow_writes=None, associated_links=None, console_uri=None, creation_time=None, customer_id=None, description=None, generation=None, is_complete=None, is_external_trigger=None, is_manual=None, is_manually_managed=None, is_replica=None, is_unmanaged=None, last_modified=None, metadata=None, origin_name=None, peer_snapcoll_id=None, replicate_to=None, resource_uri=None, snapshots_list=None, type=None):  # noqa: E501
        """NimbleSnapshotCollectionCommon - a model defined in OpenAPI"""  # noqa: E501

        self._allow_writes = None
        self._associated_links = None
        self._console_uri = None
        self._creation_time = None
        self._customer_id = None
        self._description = None
        self._generation = None
        self._is_complete = None
        self._is_external_trigger = None
        self._is_manual = None
        self._is_manually_managed = None
        self._is_replica = None
        self._is_unmanaged = None
        self._last_modified = None
        self._metadata = None
        self._origin_name = None
        self._peer_snapcoll_id = None
        self._replicate_to = None
        self._resource_uri = None
        self._snapshots_list = None
        self._type = None
        self.discriminator = None

        if allow_writes is not None:
            self.allow_writes = allow_writes
        if associated_links is not None:
            self.associated_links = associated_links
        if console_uri is not None:
            self.console_uri = console_uri
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if description is not None:
            self.description = description
        if generation is not None:
            self.generation = generation
        if is_complete is not None:
            self.is_complete = is_complete
        if is_external_trigger is not None:
            self.is_external_trigger = is_external_trigger
        if is_manual is not None:
            self.is_manual = is_manual
        if is_manually_managed is not None:
            self.is_manually_managed = is_manually_managed
        if is_replica is not None:
            self.is_replica = is_replica
        if is_unmanaged is not None:
            self.is_unmanaged = is_unmanaged
        if last_modified is not None:
            self.last_modified = last_modified
        if metadata is not None:
            self.metadata = metadata
        if origin_name is not None:
            self.origin_name = origin_name
        if peer_snapcoll_id is not None:
            self.peer_snapcoll_id = peer_snapcoll_id
        if replicate_to is not None:
            self.replicate_to = replicate_to
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if snapshots_list is not None:
            self.snapshots_list = snapshots_list
        if type is not None:
            self.type = type

    @property
    def allow_writes(self):
        """Gets the allow_writes of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Allow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots.  # noqa: E501

        :return: The allow_writes of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: bool
        """
        return self._allow_writes

    @allow_writes.setter
    def allow_writes(self, allow_writes):
        """Sets the allow_writes of this NimbleSnapshotCollectionCommon.

        Allow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots.  # noqa: E501

        :param allow_writes: The allow_writes of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: bool
        """

        self._allow_writes = allow_writes

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleSnapshotCollectionCommon.  # noqa: E501


        :return: The associated_links of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleSnapshotCollectionCommon.


        :param associated_links: The associated_links of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleSnapshotCollectionCommon.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleSnapshotCollectionCommon.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Time when this snapshot collection was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The creation_time of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleSnapshotCollectionCommon.

        Time when this snapshot collection was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param creation_time: The creation_time of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleSnapshotCollectionCommon.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleSnapshotCollectionCommon.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Text description of snapshot collection. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleSnapshotCollectionCommon.

        Text description of snapshot collection. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def generation(self):
        """Gets the generation of this NimbleSnapshotCollectionCommon.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleSnapshotCollectionCommon.

        generation  # noqa: E501

        :param generation: The generation of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def is_complete(self):
        """Gets the is_complete of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Is complete.  # noqa: E501

        :return: The is_complete of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_complete

    @is_complete.setter
    def is_complete(self, is_complete):
        """Sets the is_complete of this NimbleSnapshotCollectionCommon.

        Is complete.  # noqa: E501

        :param is_complete: The is_complete of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: bool
        """

        self._is_complete = is_complete

    @property
    def is_external_trigger(self):
        """Gets the is_external_trigger of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Is externally triggered.  # noqa: E501

        :return: The is_external_trigger of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_external_trigger

    @is_external_trigger.setter
    def is_external_trigger(self, is_external_trigger):
        """Sets the is_external_trigger of this NimbleSnapshotCollectionCommon.

        Is externally triggered.  # noqa: E501

        :param is_external_trigger: The is_external_trigger of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: bool
        """

        self._is_external_trigger = is_external_trigger

    @property
    def is_manual(self):
        """Gets the is_manual of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Is manual.  # noqa: E501

        :return: The is_manual of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this NimbleSnapshotCollectionCommon.

        Is manual.  # noqa: E501

        :param is_manual: The is_manual of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: bool
        """

        self._is_manual = is_manual

    @property
    def is_manually_managed(self):
        """Gets the is_manually_managed of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Is snapshot collection manually managed, i.e., snapshot collection is manually or third party created or created by system at the time of volume restore or resize.  # noqa: E501

        :return: The is_manually_managed of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_manually_managed

    @is_manually_managed.setter
    def is_manually_managed(self, is_manually_managed):
        """Sets the is_manually_managed of this NimbleSnapshotCollectionCommon.

        Is snapshot collection manually managed, i.e., snapshot collection is manually or third party created or created by system at the time of volume restore or resize.  # noqa: E501

        :param is_manually_managed: The is_manually_managed of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: bool
        """

        self._is_manually_managed = is_manually_managed

    @property
    def is_replica(self):
        """Gets the is_replica of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Snapshot collection is a replica from upstream replication partner.  # noqa: E501

        :return: The is_replica of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_replica

    @is_replica.setter
    def is_replica(self, is_replica):
        """Sets the is_replica of this NimbleSnapshotCollectionCommon.

        Snapshot collection is a replica from upstream replication partner.  # noqa: E501

        :param is_replica: The is_replica of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: bool
        """

        self._is_replica = is_replica

    @property
    def is_unmanaged(self):
        """Gets the is_unmanaged of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Indicates whether a snapshot collection is unmanaged. This is based on the state of individual snapshots.  # noqa: E501

        :return: The is_unmanaged of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_unmanaged

    @is_unmanaged.setter
    def is_unmanaged(self, is_unmanaged):
        """Sets the is_unmanaged of this NimbleSnapshotCollectionCommon.

        Indicates whether a snapshot collection is unmanaged. This is based on the state of individual snapshots.  # noqa: E501

        :param is_unmanaged: The is_unmanaged of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: bool
        """

        self._is_unmanaged = is_unmanaged

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Time when this snapshot collection was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The last_modified of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleSnapshotCollectionCommon.

        Time when this snapshot collection was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param last_modified: The last_modified of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def metadata(self):
        """Gets the metadata of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Key-value pairs that augment a snapshot collection's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.  # noqa: E501

        :return: The metadata of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: list[KeyValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NimbleSnapshotCollectionCommon.

        Key-value pairs that augment a snapshot collection's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.  # noqa: E501

        :param metadata: The metadata of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: list[KeyValue]
        """

        self._metadata = metadata

    @property
    def origin_name(self):
        """Gets the origin_name of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Origination group name/ID. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The origin_name of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: str
        """
        return self._origin_name

    @origin_name.setter
    def origin_name(self, origin_name):
        """Sets the origin_name of this NimbleSnapshotCollectionCommon.

        Origination group name/ID. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param origin_name: The origin_name of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: str
        """

        self._origin_name = origin_name

    @property
    def peer_snapcoll_id(self):
        """Gets the peer_snapcoll_id of this NimbleSnapshotCollectionCommon.  # noqa: E501

        ID of the peer snapshot collection created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. A 42 digit hexadecimal number.  # noqa: E501

        :return: The peer_snapcoll_id of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: str
        """
        return self._peer_snapcoll_id

    @peer_snapcoll_id.setter
    def peer_snapcoll_id(self, peer_snapcoll_id):
        """Sets the peer_snapcoll_id of this NimbleSnapshotCollectionCommon.

        ID of the peer snapshot collection created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. A 42 digit hexadecimal number.  # noqa: E501

        :param peer_snapcoll_id: The peer_snapcoll_id of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: str
        """

        self._peer_snapcoll_id = peer_snapcoll_id

    @property
    def replicate_to(self):
        """Gets the replicate_to of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Specifies the partner name that the snapshots in this snapshot collection are replicated to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The replicate_to of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: str
        """
        return self._replicate_to

    @replicate_to.setter
    def replicate_to(self, replicate_to):
        """Sets the replicate_to of this NimbleSnapshotCollectionCommon.

        Specifies the partner name that the snapshots in this snapshot collection are replicated to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param replicate_to: The replicate_to of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: str
        """

        self._replicate_to = replicate_to

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleSnapshotCollectionCommon.  # noqa: E501


        :return: The resource_uri of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleSnapshotCollectionCommon.


        :param resource_uri: The resource_uri of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def snapshots_list(self):
        """Gets the snapshots_list of this NimbleSnapshotCollectionCommon.  # noqa: E501

        Snapshot list for a SnapshotCollection  # noqa: E501

        :return: The snapshots_list of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: list[NimbleSnapCollSnapshot]
        """
        return self._snapshots_list

    @snapshots_list.setter
    def snapshots_list(self, snapshots_list):
        """Sets the snapshots_list of this NimbleSnapshotCollectionCommon.

        Snapshot list for a SnapshotCollection  # noqa: E501

        :param snapshots_list: The snapshots_list of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: list[NimbleSnapCollSnapshot]
        """

        self._snapshots_list = snapshots_list

    @property
    def type(self):
        """Gets the type of this NimbleSnapshotCollectionCommon.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleSnapshotCollectionCommon.

        type  # noqa: E501

        :param type: The type of this NimbleSnapshotCollectionCommon.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleSnapshotCollectionCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
