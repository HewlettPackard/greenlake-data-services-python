# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProtectionScheduleInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'at_time': 'int',
        'days': 'str',
        'description': 'str',
        'disable_appsync': 'bool',
        'downstream_partner': 'str',
        'downstream_partner_id': 'str',
        'name': 'str',
        'num_retain': 'int',
        'num_retain_replica': 'int',
        'period': 'int',
        'period_unit': 'str',
        'repl_alert_thres': 'int',
        'replicate_every': 'int',
        'schedule_type': 'str',
        'skip_db_consistency_check': 'bool',
        'snap_verify': 'bool',
        'until_time': 'int'
    }

    attribute_map = {
        'at_time': 'at_time',
        'days': 'days',
        'description': 'description',
        'disable_appsync': 'disable_appsync',
        'downstream_partner': 'downstream_partner',
        'downstream_partner_id': 'downstream_partner_id',
        'name': 'name',
        'num_retain': 'num_retain',
        'num_retain_replica': 'num_retain_replica',
        'period': 'period',
        'period_unit': 'period_unit',
        'repl_alert_thres': 'repl_alert_thres',
        'replicate_every': 'replicate_every',
        'schedule_type': 'schedule_type',
        'skip_db_consistency_check': 'skip_db_consistency_check',
        'snap_verify': 'snap_verify',
        'until_time': 'until_time'
    }

    def __init__(self, at_time=None, days=None, description=None, disable_appsync=None, downstream_partner=None, downstream_partner_id=None, name=None, num_retain=None, num_retain_replica=None, period=None, period_unit=None, repl_alert_thres=None, replicate_every=None, schedule_type=None, skip_db_consistency_check=None, snap_verify=None, until_time=None):  # noqa: E501
        """ProtectionScheduleInput - a model defined in OpenAPI"""  # noqa: E501

        self._at_time = None
        self._days = None
        self._description = None
        self._disable_appsync = None
        self._downstream_partner = None
        self._downstream_partner_id = None
        self._name = None
        self._num_retain = None
        self._num_retain_replica = None
        self._period = None
        self._period_unit = None
        self._repl_alert_thres = None
        self._replicate_every = None
        self._schedule_type = None
        self._skip_db_consistency_check = None
        self._snap_verify = None
        self._until_time = None
        self.discriminator = None

        if at_time is not None:
            self.at_time = at_time
        if days is not None:
            self.days = days
        if description is not None:
            self.description = description
        if disable_appsync is not None:
            self.disable_appsync = disable_appsync
        if downstream_partner is not None:
            self.downstream_partner = downstream_partner
        if downstream_partner_id is not None:
            self.downstream_partner_id = downstream_partner_id
        self.name = name
        self.num_retain = num_retain
        if num_retain_replica is not None:
            self.num_retain_replica = num_retain_replica
        if period is not None:
            self.period = period
        if period_unit is not None:
            self.period_unit = period_unit
        if repl_alert_thres is not None:
            self.repl_alert_thres = repl_alert_thres
        if replicate_every is not None:
            self.replicate_every = replicate_every
        if schedule_type is not None:
            self.schedule_type = schedule_type
        if skip_db_consistency_check is not None:
            self.skip_db_consistency_check = skip_db_consistency_check
        if snap_verify is not None:
            self.snap_verify = snap_verify
        if until_time is not None:
            self.until_time = until_time

    @property
    def at_time(self):
        """Gets the at_time of this ProtectionScheduleInput.  # noqa: E501

        Time of day when snapshot should be taken. In case repeat frequency specifies more than one snapshot in a day then the until_time option specifies until what time of day to take snapshots. Non-negative integer in range [0,86399] which is equivalent to [0:00:00 AM, 23:59:59 PM].  # noqa: E501

        :return: The at_time of this ProtectionScheduleInput.  # noqa: E501
        :rtype: int
        """
        return self._at_time

    @at_time.setter
    def at_time(self, at_time):
        """Sets the at_time of this ProtectionScheduleInput.

        Time of day when snapshot should be taken. In case repeat frequency specifies more than one snapshot in a day then the until_time option specifies until what time of day to take snapshots. Non-negative integer in range [0,86399] which is equivalent to [0:00:00 AM, 23:59:59 PM].  # noqa: E501

        :param at_time: The at_time of this ProtectionScheduleInput.  # noqa: E501
        :type: int
        """

        self._at_time = at_time

    @property
    def days(self):
        """Gets the days of this ProtectionScheduleInput.  # noqa: E501

        Specifies which days snapshots should be taken. Comma separated list of days of the week or 'all'.  # noqa: E501

        :return: The days of this ProtectionScheduleInput.  # noqa: E501
        :rtype: str
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this ProtectionScheduleInput.

        Specifies which days snapshots should be taken. Comma separated list of days of the week or 'all'.  # noqa: E501

        :param days: The days of this ProtectionScheduleInput.  # noqa: E501
        :type: str
        """

        self._days = days

    @property
    def description(self):
        """Gets the description of this ProtectionScheduleInput.  # noqa: E501

        Description of the schedule. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this ProtectionScheduleInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProtectionScheduleInput.

        Description of the schedule. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this ProtectionScheduleInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disable_appsync(self):
        """Gets the disable_appsync of this ProtectionScheduleInput.  # noqa: E501

        Disables application synchronized snapshots and creates crash consistent snapshots instead. Possible values: 'true', 'false'.  # noqa: E501

        :return: The disable_appsync of this ProtectionScheduleInput.  # noqa: E501
        :rtype: bool
        """
        return self._disable_appsync

    @disable_appsync.setter
    def disable_appsync(self, disable_appsync):
        """Sets the disable_appsync of this ProtectionScheduleInput.

        Disables application synchronized snapshots and creates crash consistent snapshots instead. Possible values: 'true', 'false'.  # noqa: E501

        :param disable_appsync: The disable_appsync of this ProtectionScheduleInput.  # noqa: E501
        :type: bool
        """

        self._disable_appsync = disable_appsync

    @property
    def downstream_partner(self):
        """Gets the downstream_partner of this ProtectionScheduleInput.  # noqa: E501

        Specifies the partner name if snapshots created by this schedule should be replicated. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.   # noqa: E501

        :return: The downstream_partner of this ProtectionScheduleInput.  # noqa: E501
        :rtype: str
        """
        return self._downstream_partner

    @downstream_partner.setter
    def downstream_partner(self, downstream_partner):
        """Sets the downstream_partner of this ProtectionScheduleInput.

        Specifies the partner name if snapshots created by this schedule should be replicated. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.   # noqa: E501

        :param downstream_partner: The downstream_partner of this ProtectionScheduleInput.  # noqa: E501
        :type: str
        """

        self._downstream_partner = downstream_partner

    @property
    def downstream_partner_id(self):
        """Gets the downstream_partner_id of this ProtectionScheduleInput.  # noqa: E501

        Specifies the partner ID if snapshots created by this schedule should be replicated. In an update operation, if snapshots should be replicated, set this attribute to the ID of the replication partner. If snapshots should not be replicated, set this attribute to the empty string. An optional NsObjectID. A 42 digit hexadecimal number or the empty string.  # noqa: E501

        :return: The downstream_partner_id of this ProtectionScheduleInput.  # noqa: E501
        :rtype: str
        """
        return self._downstream_partner_id

    @downstream_partner_id.setter
    def downstream_partner_id(self, downstream_partner_id):
        """Sets the downstream_partner_id of this ProtectionScheduleInput.

        Specifies the partner ID if snapshots created by this schedule should be replicated. In an update operation, if snapshots should be replicated, set this attribute to the ID of the replication partner. If snapshots should not be replicated, set this attribute to the empty string. An optional NsObjectID. A 42 digit hexadecimal number or the empty string.  # noqa: E501

        :param downstream_partner_id: The downstream_partner_id of this ProtectionScheduleInput.  # noqa: E501
        :type: str
        """

        self._downstream_partner_id = downstream_partner_id

    @property
    def name(self):
        """Gets the name of this ProtectionScheduleInput.  # noqa: E501

        Name of snapshot schedule to create. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The name of this ProtectionScheduleInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProtectionScheduleInput.

        Name of snapshot schedule to create. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param name: The name of this ProtectionScheduleInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def num_retain(self):
        """Gets the num_retain of this ProtectionScheduleInput.  # noqa: E501

        Number of snapshots to retain. If replication is enabled on this schedule the array will always retain the latest replicated snapshot, which may exceed the specified retention value. This is necessary to ensure efficient replication performance. Unsigned 64-bit integer.  # noqa: E501

        :return: The num_retain of this ProtectionScheduleInput.  # noqa: E501
        :rtype: int
        """
        return self._num_retain

    @num_retain.setter
    def num_retain(self, num_retain):
        """Sets the num_retain of this ProtectionScheduleInput.

        Number of snapshots to retain. If replication is enabled on this schedule the array will always retain the latest replicated snapshot, which may exceed the specified retention value. This is necessary to ensure efficient replication performance. Unsigned 64-bit integer.  # noqa: E501

        :param num_retain: The num_retain of this ProtectionScheduleInput.  # noqa: E501
        :type: int
        """
        if num_retain is None:
            raise ValueError("Invalid value for `num_retain`, must not be `None`")  # noqa: E501

        self._num_retain = num_retain

    @property
    def num_retain_replica(self):
        """Gets the num_retain_replica of this ProtectionScheduleInput.  # noqa: E501

        Number of snapshots to retain on the replica. Unsigned 64-bit integer.  # noqa: E501

        :return: The num_retain_replica of this ProtectionScheduleInput.  # noqa: E501
        :rtype: int
        """
        return self._num_retain_replica

    @num_retain_replica.setter
    def num_retain_replica(self, num_retain_replica):
        """Sets the num_retain_replica of this ProtectionScheduleInput.

        Number of snapshots to retain on the replica. Unsigned 64-bit integer.  # noqa: E501

        :param num_retain_replica: The num_retain_replica of this ProtectionScheduleInput.  # noqa: E501
        :type: int
        """

        self._num_retain_replica = num_retain_replica

    @property
    def period(self):
        """Gets the period of this ProtectionScheduleInput.  # noqa: E501

        Repeat interval for snapshots with respect to the period_unit. For example, a value of 2 with the 'period_unit' of 'hours' results in one snapshot every 2 hours. Unsigned 64-bit integer.  # noqa: E501

        :return: The period of this ProtectionScheduleInput.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ProtectionScheduleInput.

        Repeat interval for snapshots with respect to the period_unit. For example, a value of 2 with the 'period_unit' of 'hours' results in one snapshot every 2 hours. Unsigned 64-bit integer.  # noqa: E501

        :param period: The period of this ProtectionScheduleInput.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def period_unit(self):
        """Gets the period_unit of this ProtectionScheduleInput.  # noqa: E501

        Time unit over which to take the number of snapshots specified in 'period'. For example, a value of 'days' with a 'period' of '1' results in one snapshot every day. Possible values: 'minutes', 'hours', 'days', 'weeks'.  # noqa: E501

        :return: The period_unit of this ProtectionScheduleInput.  # noqa: E501
        :rtype: str
        """
        return self._period_unit

    @period_unit.setter
    def period_unit(self, period_unit):
        """Sets the period_unit of this ProtectionScheduleInput.

        Time unit over which to take the number of snapshots specified in 'period'. For example, a value of 'days' with a 'period' of '1' results in one snapshot every day. Possible values: 'minutes', 'hours', 'days', 'weeks'.  # noqa: E501

        :param period_unit: The period_unit of this ProtectionScheduleInput.  # noqa: E501
        :type: str
        """

        self._period_unit = period_unit

    @property
    def repl_alert_thres(self):
        """Gets the repl_alert_thres of this ProtectionScheduleInput.  # noqa: E501

        Replication alert threshold in seconds. If the replication of a snapshot takes more than this amount of time to complete an alert will be generated. Enter 0 to disable this alert. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The repl_alert_thres of this ProtectionScheduleInput.  # noqa: E501
        :rtype: int
        """
        return self._repl_alert_thres

    @repl_alert_thres.setter
    def repl_alert_thres(self, repl_alert_thres):
        """Sets the repl_alert_thres of this ProtectionScheduleInput.

        Replication alert threshold in seconds. If the replication of a snapshot takes more than this amount of time to complete an alert will be generated. Enter 0 to disable this alert. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param repl_alert_thres: The repl_alert_thres of this ProtectionScheduleInput.  # noqa: E501
        :type: int
        """

        self._repl_alert_thres = repl_alert_thres

    @property
    def replicate_every(self):
        """Gets the replicate_every of this ProtectionScheduleInput.  # noqa: E501

        Specifies which snapshots should be replicated. If snapshots are replicated and this option is not specified, every snapshot is replicated. Unsigned 64-bit integer.   # noqa: E501

        :return: The replicate_every of this ProtectionScheduleInput.  # noqa: E501
        :rtype: int
        """
        return self._replicate_every

    @replicate_every.setter
    def replicate_every(self, replicate_every):
        """Sets the replicate_every of this ProtectionScheduleInput.

        Specifies which snapshots should be replicated. If snapshots are replicated and this option is not specified, every snapshot is replicated. Unsigned 64-bit integer.   # noqa: E501

        :param replicate_every: The replicate_every of this ProtectionScheduleInput.  # noqa: E501
        :type: int
        """

        self._replicate_every = replicate_every

    @property
    def schedule_type(self):
        """Gets the schedule_type of this ProtectionScheduleInput.  # noqa: E501

        Normal schedules have internal timers which drive snapshot creation. An externally driven schedule has no internal timers. All snapshot activity is driven by an external trigger. In other words, these schedules are used only for externally driven manual snapshots. Possible values: 'regular', 'external_trigger'  # noqa: E501

        :return: The schedule_type of this ProtectionScheduleInput.  # noqa: E501
        :rtype: str
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this ProtectionScheduleInput.

        Normal schedules have internal timers which drive snapshot creation. An externally driven schedule has no internal timers. All snapshot activity is driven by an external trigger. In other words, these schedules are used only for externally driven manual snapshots. Possible values: 'regular', 'external_trigger'  # noqa: E501

        :param schedule_type: The schedule_type of this ProtectionScheduleInput.  # noqa: E501
        :type: str
        """

        self._schedule_type = schedule_type

    @property
    def skip_db_consistency_check(self):
        """Gets the skip_db_consistency_check of this ProtectionScheduleInput.  # noqa: E501

        Skip consistency check for database files on snapshots created by this schedule. This option only applies to snapshot schedules of a protection template with application synchronization set to VSS, application ID set to MS Exchange 2010 or later w/DAG, this schedule's snap_verify option set to yes, and its disable_appsync option set to false. Skipping consistency checks is only recommended if each database in a DAG has multiple copies. Possible values: 'true', 'false'.   # noqa: E501

        :return: The skip_db_consistency_check of this ProtectionScheduleInput.  # noqa: E501
        :rtype: bool
        """
        return self._skip_db_consistency_check

    @skip_db_consistency_check.setter
    def skip_db_consistency_check(self, skip_db_consistency_check):
        """Sets the skip_db_consistency_check of this ProtectionScheduleInput.

        Skip consistency check for database files on snapshots created by this schedule. This option only applies to snapshot schedules of a protection template with application synchronization set to VSS, application ID set to MS Exchange 2010 or later w/DAG, this schedule's snap_verify option set to yes, and its disable_appsync option set to false. Skipping consistency checks is only recommended if each database in a DAG has multiple copies. Possible values: 'true', 'false'.   # noqa: E501

        :param skip_db_consistency_check: The skip_db_consistency_check of this ProtectionScheduleInput.  # noqa: E501
        :type: bool
        """

        self._skip_db_consistency_check = skip_db_consistency_check

    @property
    def snap_verify(self):
        """Gets the snap_verify of this ProtectionScheduleInput.  # noqa: E501

        Run verification tool on snapshot created by this schedule. This option can only be used with snapshot schedules of a protection template that has application synchronization. The tool used to verify snapshot depends on the type of application. For example, if application synchronization is VSS and the application ID is Exchange, eseutil tool is run on the snapshots. If verification fails, the logs are not truncated. Possible values: 'true', 'false'.  # noqa: E501

        :return: The snap_verify of this ProtectionScheduleInput.  # noqa: E501
        :rtype: bool
        """
        return self._snap_verify

    @snap_verify.setter
    def snap_verify(self, snap_verify):
        """Sets the snap_verify of this ProtectionScheduleInput.

        Run verification tool on snapshot created by this schedule. This option can only be used with snapshot schedules of a protection template that has application synchronization. The tool used to verify snapshot depends on the type of application. For example, if application synchronization is VSS and the application ID is Exchange, eseutil tool is run on the snapshots. If verification fails, the logs are not truncated. Possible values: 'true', 'false'.  # noqa: E501

        :param snap_verify: The snap_verify of this ProtectionScheduleInput.  # noqa: E501
        :type: bool
        """

        self._snap_verify = snap_verify

    @property
    def until_time(self):
        """Gets the until_time of this ProtectionScheduleInput.  # noqa: E501

        Time of day to stop taking snapshots. Applicable only when repeat frequency specifies more than one snapshot in a day. Non-negative integer in range [0,86399] which is equivalent to [0:00:00 AM, 23:59:59 PM].  # noqa: E501

        :return: The until_time of this ProtectionScheduleInput.  # noqa: E501
        :rtype: int
        """
        return self._until_time

    @until_time.setter
    def until_time(self, until_time):
        """Sets the until_time of this ProtectionScheduleInput.

        Time of day to stop taking snapshots. Applicable only when repeat frequency specifies more than one snapshot in a day. Non-negative integer in range [0,86399] which is equivalent to [0:00:00 AM, 23:59:59 PM].  # noqa: E501

        :param until_time: The until_time of this ProtectionScheduleInput.  # noqa: E501
        :type: int
        """

        self._until_time = until_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectionScheduleInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
