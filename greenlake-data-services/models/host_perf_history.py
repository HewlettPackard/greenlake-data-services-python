# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HostPerfHistory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'historical_data': 'HostHistoricalMetricData',
        'id': 'str',
        'system_id': 'str',
        'volume_name': 'str'
    }

    attribute_map = {
        'historical_data': 'historicalData',
        'id': 'id',
        'system_id': 'systemId',
        'volume_name': 'volumeName'
    }

    def __init__(self, historical_data=None, id=None, system_id=None, volume_name=None):  # noqa: E501
        """HostPerfHistory - a model defined in OpenAPI"""  # noqa: E501

        self._historical_data = None
        self._id = None
        self._system_id = None
        self._volume_name = None
        self.discriminator = None

        if historical_data is not None:
            self.historical_data = historical_data
        if id is not None:
            self.id = id
        if system_id is not None:
            self.system_id = system_id
        if volume_name is not None:
            self.volume_name = volume_name

    @property
    def historical_data(self):
        """Gets the historical_data of this HostPerfHistory.  # noqa: E501


        :return: The historical_data of this HostPerfHistory.  # noqa: E501
        :rtype: HostHistoricalMetricData
        """
        return self._historical_data

    @historical_data.setter
    def historical_data(self, historical_data):
        """Sets the historical_data of this HostPerfHistory.


        :param historical_data: The historical_data of this HostPerfHistory.  # noqa: E501
        :type: HostHistoricalMetricData
        """

        self._historical_data = historical_data

    @property
    def id(self):
        """Gets the id of this HostPerfHistory.  # noqa: E501

        The id of the volume  # noqa: E501

        :return: The id of this HostPerfHistory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostPerfHistory.

        The id of the volume  # noqa: E501

        :param id: The id of this HostPerfHistory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def system_id(self):
        """Gets the system_id of this HostPerfHistory.  # noqa: E501

        The id of the system  # noqa: E501

        :return: The system_id of this HostPerfHistory.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this HostPerfHistory.

        The id of the system  # noqa: E501

        :param system_id: The system_id of this HostPerfHistory.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def volume_name(self):
        """Gets the volume_name of this HostPerfHistory.  # noqa: E501

        The name of the volume  # noqa: E501

        :return: The volume_name of this HostPerfHistory.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this HostPerfHistory.

        The name of the volume  # noqa: E501

        :param volume_name: The volume_name of this HostPerfHistory.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostPerfHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
