# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleperfData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avg_1day': 'float',
        'avg_1hour': 'float',
        'avg_8hours': 'float',
        'avg_latest': 'float'
    }

    attribute_map = {
        'avg_1day': 'avg_1day',
        'avg_1hour': 'avg_1hour',
        'avg_8hours': 'avg_8hours',
        'avg_latest': 'avg_latest'
    }

    def __init__(self, avg_1day=None, avg_1hour=None, avg_8hours=None, avg_latest=None):  # noqa: E501
        """NimbleperfData - a model defined in OpenAPI"""  # noqa: E501

        self._avg_1day = None
        self._avg_1hour = None
        self._avg_8hours = None
        self._avg_latest = None
        self.discriminator = None

        if avg_1day is not None:
            self.avg_1day = avg_1day
        if avg_1hour is not None:
            self.avg_1hour = avg_1hour
        if avg_8hours is not None:
            self.avg_8hours = avg_8hours
        if avg_latest is not None:
            self.avg_latest = avg_latest

    @property
    def avg_1day(self):
        """Gets the avg_1day of this NimbleperfData.  # noqa: E501

        last one day avg data  # noqa: E501

        :return: The avg_1day of this NimbleperfData.  # noqa: E501
        :rtype: float
        """
        return self._avg_1day

    @avg_1day.setter
    def avg_1day(self, avg_1day):
        """Sets the avg_1day of this NimbleperfData.

        last one day avg data  # noqa: E501

        :param avg_1day: The avg_1day of this NimbleperfData.  # noqa: E501
        :type: float
        """

        self._avg_1day = avg_1day

    @property
    def avg_1hour(self):
        """Gets the avg_1hour of this NimbleperfData.  # noqa: E501

        last one hour avg data  # noqa: E501

        :return: The avg_1hour of this NimbleperfData.  # noqa: E501
        :rtype: float
        """
        return self._avg_1hour

    @avg_1hour.setter
    def avg_1hour(self, avg_1hour):
        """Sets the avg_1hour of this NimbleperfData.

        last one hour avg data  # noqa: E501

        :param avg_1hour: The avg_1hour of this NimbleperfData.  # noqa: E501
        :type: float
        """

        self._avg_1hour = avg_1hour

    @property
    def avg_8hours(self):
        """Gets the avg_8hours of this NimbleperfData.  # noqa: E501

        last 8 hours avg data  # noqa: E501

        :return: The avg_8hours of this NimbleperfData.  # noqa: E501
        :rtype: float
        """
        return self._avg_8hours

    @avg_8hours.setter
    def avg_8hours(self, avg_8hours):
        """Sets the avg_8hours of this NimbleperfData.

        last 8 hours avg data  # noqa: E501

        :param avg_8hours: The avg_8hours of this NimbleperfData.  # noqa: E501
        :type: float
        """

        self._avg_8hours = avg_8hours

    @property
    def avg_latest(self):
        """Gets the avg_latest of this NimbleperfData.  # noqa: E501

        latest perf data  # noqa: E501

        :return: The avg_latest of this NimbleperfData.  # noqa: E501
        :rtype: float
        """
        return self._avg_latest

    @avg_latest.setter
    def avg_latest(self, avg_latest):
        """Sets the avg_latest of this NimbleperfData.

        latest perf data  # noqa: E501

        :param avg_latest: The avg_latest of this NimbleperfData.  # noqa: E501
        :type: float
        """

        self._avg_latest = avg_latest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleperfData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
