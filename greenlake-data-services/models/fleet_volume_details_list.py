# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FleetVolumeDetailsList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'list[PrimeraVolumeDetailsAssociatedLinks]',
        'console_uri': 'str',
        'customer_id': 'str',
        'generation': 'int',
        'health_state': 'str',
        'host_written_capacity_mi_b': 'float',
        'id': 'str',
        'initiators': 'list[PrimeraApplicationSetDetailsInitiators]',
        'is_internal': 'bool',
        'is_system_volume': 'bool',
        'name': 'str',
        'product_family': 'str',
        'resource_uri': 'str',
        'size_mi_b': 'float',
        'space_warning': 'float',
        'sub_type': 'str',
        'system_id': 'str',
        'thin_savings': 'str',
        'type': 'str',
        'used_capacity_percent': 'float',
        'used_size_mi_b': 'float',
        'volume_set_id': 'str',
        'volume_type': 'str',
        'wwn': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'generation': 'generation',
        'health_state': 'healthState',
        'host_written_capacity_mi_b': 'hostWrittenCapacityMiB',
        'id': 'id',
        'initiators': 'initiators',
        'is_internal': 'isInternal',
        'is_system_volume': 'isSystemVolume',
        'name': 'name',
        'product_family': 'productFamily',
        'resource_uri': 'resourceUri',
        'size_mi_b': 'sizeMiB',
        'space_warning': 'spaceWarning',
        'sub_type': 'subType',
        'system_id': 'systemId',
        'thin_savings': 'thinSavings',
        'type': 'type',
        'used_capacity_percent': 'usedCapacityPercent',
        'used_size_mi_b': 'usedSizeMiB',
        'volume_set_id': 'volumeSetId',
        'volume_type': 'volumeType',
        'wwn': 'wwn'
    }

    def __init__(self, associated_links=None, console_uri=None, customer_id=None, generation=None, health_state=None, host_written_capacity_mi_b=None, id=None, initiators=None, is_internal=None, is_system_volume=None, name=None, product_family=None, resource_uri=None, size_mi_b=None, space_warning=None, sub_type=None, system_id=None, thin_savings=None, type=None, used_capacity_percent=None, used_size_mi_b=None, volume_set_id=None, volume_type=None, wwn=None):  # noqa: E501
        """FleetVolumeDetailsList - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._console_uri = None
        self._customer_id = None
        self._generation = None
        self._health_state = None
        self._host_written_capacity_mi_b = None
        self._id = None
        self._initiators = None
        self._is_internal = None
        self._is_system_volume = None
        self._name = None
        self._product_family = None
        self._resource_uri = None
        self._size_mi_b = None
        self._space_warning = None
        self._sub_type = None
        self._system_id = None
        self._thin_savings = None
        self._type = None
        self._used_capacity_percent = None
        self._used_size_mi_b = None
        self._volume_set_id = None
        self._volume_type = None
        self._wwn = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if generation is not None:
            self.generation = generation
        if health_state is not None:
            self.health_state = health_state
        if host_written_capacity_mi_b is not None:
            self.host_written_capacity_mi_b = host_written_capacity_mi_b
        if id is not None:
            self.id = id
        if initiators is not None:
            self.initiators = initiators
        if is_internal is not None:
            self.is_internal = is_internal
        if is_system_volume is not None:
            self.is_system_volume = is_system_volume
        if name is not None:
            self.name = name
        if product_family is not None:
            self.product_family = product_family
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if size_mi_b is not None:
            self.size_mi_b = size_mi_b
        if space_warning is not None:
            self.space_warning = space_warning
        if sub_type is not None:
            self.sub_type = sub_type
        if system_id is not None:
            self.system_id = system_id
        if thin_savings is not None:
            self.thin_savings = thin_savings
        if type is not None:
            self.type = type
        if used_capacity_percent is not None:
            self.used_capacity_percent = used_capacity_percent
        if used_size_mi_b is not None:
            self.used_size_mi_b = used_size_mi_b
        if volume_set_id is not None:
            self.volume_set_id = volume_set_id
        if volume_type is not None:
            self.volume_type = volume_type
        if wwn is not None:
            self.wwn = wwn

    @property
    def associated_links(self):
        """Gets the associated_links of this FleetVolumeDetailsList.  # noqa: E501

        Associated Links  # noqa: E501

        :return: The associated_links of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: list[PrimeraVolumeDetailsAssociatedLinks]
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this FleetVolumeDetailsList.

        Associated Links  # noqa: E501

        :param associated_links: The associated_links of this FleetVolumeDetailsList.  # noqa: E501
        :type: list[PrimeraVolumeDetailsAssociatedLinks]
        """

        self._associated_links = associated_links

    @property
    def console_uri(self):
        """Gets the console_uri of this FleetVolumeDetailsList.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this FleetVolumeDetailsList.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this FleetVolumeDetailsList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this FleetVolumeDetailsList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def generation(self):
        """Gets the generation of this FleetVolumeDetailsList.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this FleetVolumeDetailsList.

        generation  # noqa: E501

        :param generation: The generation of this FleetVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def health_state(self):
        """Gets the health_state of this FleetVolumeDetailsList.  # noqa: E501

        Health State of volume. `Filter, Sort`  # noqa: E501

        :return: The health_state of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this FleetVolumeDetailsList.

        Health State of volume. `Filter, Sort`  # noqa: E501

        :param health_state: The health_state of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def host_written_capacity_mi_b(self):
        """Gets the host_written_capacity_mi_b of this FleetVolumeDetailsList.  # noqa: E501

        Host written data size in MiB. `Filter, Sort`  # noqa: E501

        :return: The host_written_capacity_mi_b of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._host_written_capacity_mi_b

    @host_written_capacity_mi_b.setter
    def host_written_capacity_mi_b(self, host_written_capacity_mi_b):
        """Sets the host_written_capacity_mi_b of this FleetVolumeDetailsList.

        Host written data size in MiB. `Filter, Sort`  # noqa: E501

        :param host_written_capacity_mi_b: The host_written_capacity_mi_b of this FleetVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._host_written_capacity_mi_b = host_written_capacity_mi_b

    @property
    def id(self):
        """Gets the id of this FleetVolumeDetailsList.  # noqa: E501

        UUID string uniquely identifying the storage system object. `Filter`  # noqa: E501

        :return: The id of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FleetVolumeDetailsList.

        UUID string uniquely identifying the storage system object. `Filter`  # noqa: E501

        :param id: The id of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initiators(self):
        """Gets the initiators of this FleetVolumeDetailsList.  # noqa: E501

        Initiator details  # noqa: E501

        :return: The initiators of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: list[PrimeraApplicationSetDetailsInitiators]
        """
        return self._initiators

    @initiators.setter
    def initiators(self, initiators):
        """Sets the initiators of this FleetVolumeDetailsList.

        Initiator details  # noqa: E501

        :param initiators: The initiators of this FleetVolumeDetailsList.  # noqa: E501
        :type: list[PrimeraApplicationSetDetailsInitiators]
        """

        self._initiators = initiators

    @property
    def is_internal(self):
        """Gets the is_internal of this FleetVolumeDetailsList.  # noqa: E501

        boolean value which specifies if it is a systemVolume or not `Filter`  # noqa: E501

        :return: The is_internal of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this FleetVolumeDetailsList.

        boolean value which specifies if it is a systemVolume or not `Filter`  # noqa: E501

        :param is_internal: The is_internal of this FleetVolumeDetailsList.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    @property
    def is_system_volume(self):
        """Gets the is_system_volume of this FleetVolumeDetailsList.  # noqa: E501

        boolean value which specifies if it is a systemVolume or not `Filter`  # noqa: E501

        :return: The is_system_volume of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: bool
        """
        return self._is_system_volume

    @is_system_volume.setter
    def is_system_volume(self, is_system_volume):
        """Sets the is_system_volume of this FleetVolumeDetailsList.

        boolean value which specifies if it is a systemVolume or not `Filter`  # noqa: E501

        :param is_system_volume: The is_system_volume of this FleetVolumeDetailsList.  # noqa: E501
        :type: bool
        """

        self._is_system_volume = is_system_volume

    @property
    def name(self):
        """Gets the name of this FleetVolumeDetailsList.  # noqa: E501

        A user friendly name to identify the storage system volume (resourceName). `Filter, Sort`  # noqa: E501

        :return: The name of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FleetVolumeDetailsList.

        A user friendly name to identify the storage system volume (resourceName). `Filter, Sort`  # noqa: E501

        :param name: The name of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_family(self):
        """Gets the product_family of this FleetVolumeDetailsList.  # noqa: E501

        Product Family  # noqa: E501

        :return: The product_family of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._product_family

    @product_family.setter
    def product_family(self, product_family):
        """Sets the product_family of this FleetVolumeDetailsList.

        Product Family  # noqa: E501

        :param product_family: The product_family of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._product_family = product_family

    @property
    def resource_uri(self):
        """Gets the resource_uri of this FleetVolumeDetailsList.  # noqa: E501

        resourceUri for detailed volume object  # noqa: E501

        :return: The resource_uri of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this FleetVolumeDetailsList.

        resourceUri for detailed volume object  # noqa: E501

        :param resource_uri: The resource_uri of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def size_mi_b(self):
        """Gets the size_mi_b of this FleetVolumeDetailsList.  # noqa: E501

        Size in MiB `Filter, Sort`  # noqa: E501

        :return: The size_mi_b of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._size_mi_b

    @size_mi_b.setter
    def size_mi_b(self, size_mi_b):
        """Sets the size_mi_b of this FleetVolumeDetailsList.

        Size in MiB `Filter, Sort`  # noqa: E501

        :param size_mi_b: The size_mi_b of this FleetVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._size_mi_b = size_mi_b

    @property
    def space_warning(self):
        """Gets the space_warning of this FleetVolumeDetailsList.  # noqa: E501


        :return: The space_warning of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._space_warning

    @space_warning.setter
    def space_warning(self, space_warning):
        """Sets the space_warning of this FleetVolumeDetailsList.


        :param space_warning: The space_warning of this FleetVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._space_warning = space_warning

    @property
    def sub_type(self):
        """Gets the sub_type of this FleetVolumeDetailsList.  # noqa: E501

        subType of the volume  # noqa: E501

        :return: The sub_type of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this FleetVolumeDetailsList.

        subType of the volume  # noqa: E501

        :param sub_type: The sub_type of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def system_id(self):
        """Gets the system_id of this FleetVolumeDetailsList.  # noqa: E501

        SystemUid/Serial Number  of the array. `Filter, Sort`  # noqa: E501

        :return: The system_id of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this FleetVolumeDetailsList.

        SystemUid/Serial Number  of the array. `Filter, Sort`  # noqa: E501

        :param system_id: The system_id of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def thin_savings(self):
        """Gets the thin_savings of this FleetVolumeDetailsList.  # noqa: E501

        Thin savings  # noqa: E501

        :return: The thin_savings of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._thin_savings

    @thin_savings.setter
    def thin_savings(self, thin_savings):
        """Sets the thin_savings of this FleetVolumeDetailsList.

        Thin savings  # noqa: E501

        :param thin_savings: The thin_savings of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._thin_savings = thin_savings

    @property
    def type(self):
        """Gets the type of this FleetVolumeDetailsList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FleetVolumeDetailsList.

        type  # noqa: E501

        :param type: The type of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def used_capacity_percent(self):
        """Gets the used_capacity_percent of this FleetVolumeDetailsList.  # noqa: E501

        Used capacity percentage of volume. `Filter, Sort`  # noqa: E501

        :return: The used_capacity_percent of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._used_capacity_percent

    @used_capacity_percent.setter
    def used_capacity_percent(self, used_capacity_percent):
        """Sets the used_capacity_percent of this FleetVolumeDetailsList.

        Used capacity percentage of volume. `Filter, Sort`  # noqa: E501

        :param used_capacity_percent: The used_capacity_percent of this FleetVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._used_capacity_percent = used_capacity_percent

    @property
    def used_size_mi_b(self):
        """Gets the used_size_mi_b of this FleetVolumeDetailsList.  # noqa: E501

        Size in MiB  # noqa: E501

        :return: The used_size_mi_b of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._used_size_mi_b

    @used_size_mi_b.setter
    def used_size_mi_b(self, used_size_mi_b):
        """Sets the used_size_mi_b of this FleetVolumeDetailsList.

        Size in MiB  # noqa: E501

        :param used_size_mi_b: The used_size_mi_b of this FleetVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._used_size_mi_b = used_size_mi_b

    @property
    def volume_set_id(self):
        """Gets the volume_set_id of this FleetVolumeDetailsList.  # noqa: E501

        SystemUid/serialNumber of the volumeSet.  # noqa: E501

        :return: The volume_set_id of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._volume_set_id

    @volume_set_id.setter
    def volume_set_id(self, volume_set_id):
        """Sets the volume_set_id of this FleetVolumeDetailsList.

        SystemUid/serialNumber of the volumeSet.  # noqa: E501

        :param volume_set_id: The volume_set_id of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._volume_set_id = volume_set_id

    @property
    def volume_type(self):
        """Gets the volume_type of this FleetVolumeDetailsList.  # noqa: E501

        VV Type  # noqa: E501

        :return: The volume_type of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this FleetVolumeDetailsList.

        VV Type  # noqa: E501

        :param volume_type: The volume_type of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._volume_type = volume_type

    @property
    def wwn(self):
        """Gets the wwn of this FleetVolumeDetailsList.  # noqa: E501

        Volume wwn.  # noqa: E501

        :return: The wwn of this FleetVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this FleetVolumeDetailsList.

        Volume wwn.  # noqa: E501

        :param wwn: The wwn of this FleetVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FleetVolumeDetailsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
