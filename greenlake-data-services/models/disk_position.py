# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DiskPosition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cage': 'int',
        'disk': 'int',
        'side': 'str',
        'sled': 'int'
    }

    attribute_map = {
        'cage': 'cage',
        'disk': 'disk',
        'side': 'side',
        'sled': 'sled'
    }

    def __init__(self, cage=None, disk=None, side=None, sled=None):  # noqa: E501
        """DiskPosition - a model defined in OpenAPI"""  # noqa: E501

        self._cage = None
        self._disk = None
        self._side = None
        self._sled = None
        self.discriminator = None

        if cage is not None:
            self.cage = cage
        if disk is not None:
            self.disk = disk
        if side is not None:
            self.side = side
        if sled is not None:
            self.sled = sled

    @property
    def cage(self):
        """Gets the cage of this DiskPosition.  # noqa: E501


        :return: The cage of this DiskPosition.  # noqa: E501
        :rtype: int
        """
        return self._cage

    @cage.setter
    def cage(self, cage):
        """Sets the cage of this DiskPosition.


        :param cage: The cage of this DiskPosition.  # noqa: E501
        :type: int
        """

        self._cage = cage

    @property
    def disk(self):
        """Gets the disk of this DiskPosition.  # noqa: E501


        :return: The disk of this DiskPosition.  # noqa: E501
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this DiskPosition.


        :param disk: The disk of this DiskPosition.  # noqa: E501
        :type: int
        """

        self._disk = disk

    @property
    def side(self):
        """Gets the side of this DiskPosition.  # noqa: E501


        :return: The side of this DiskPosition.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this DiskPosition.


        :param side: The side of this DiskPosition.  # noqa: E501
        :type: str
        """
        allowed_values = ["SIDE_NONE", "SIDE_LEFT", "SIDE_RIGHT", "null"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def sled(self):
        """Gets the sled of this DiskPosition.  # noqa: E501


        :return: The sled of this DiskPosition.  # noqa: E501
        :rtype: int
        """
        return self._sled

    @sled.setter
    def sled(self, sled):
        """Sets the sled of this DiskPosition.


        :param sled: The sled of this DiskPosition.  # noqa: E501
        :type: int
        """

        self._sled = sled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskPosition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
