# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditNetworkSettingsInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dns_addresses': 'list[str]',
        'ipv4_address': 'str',
        'ipv4_gateway': 'str',
        'ipv4_subnet_mask': 'str',
        'ipv6_address': 'str',
        'ipv6_gateway': 'str',
        'ipv6_prefix_len': 'str',
        'proxy_params': 'EditNetworkSettingsInputProxyParams'
    }

    attribute_map = {
        'dns_addresses': 'dnsAddresses',
        'ipv4_address': 'ipv4Address',
        'ipv4_gateway': 'ipv4Gateway',
        'ipv4_subnet_mask': 'ipv4SubnetMask',
        'ipv6_address': 'ipv6Address',
        'ipv6_gateway': 'ipv6Gateway',
        'ipv6_prefix_len': 'ipv6PrefixLen',
        'proxy_params': 'proxyParams'
    }

    def __init__(self, dns_addresses=None, ipv4_address=None, ipv4_gateway=None, ipv4_subnet_mask=None, ipv6_address=None, ipv6_gateway=None, ipv6_prefix_len=None, proxy_params=None):  # noqa: E501
        """EditNetworkSettingsInput - a model defined in OpenAPI"""  # noqa: E501

        self._dns_addresses = None
        self._ipv4_address = None
        self._ipv4_gateway = None
        self._ipv4_subnet_mask = None
        self._ipv6_address = None
        self._ipv6_gateway = None
        self._ipv6_prefix_len = None
        self._proxy_params = None
        self.discriminator = None

        if dns_addresses is not None:
            self.dns_addresses = dns_addresses
        if ipv4_address is not None:
            self.ipv4_address = ipv4_address
        if ipv4_gateway is not None:
            self.ipv4_gateway = ipv4_gateway
        if ipv4_subnet_mask is not None:
            self.ipv4_subnet_mask = ipv4_subnet_mask
        if ipv6_address is not None:
            self.ipv6_address = ipv6_address
        if ipv6_gateway is not None:
            self.ipv6_gateway = ipv6_gateway
        if ipv6_prefix_len is not None:
            self.ipv6_prefix_len = ipv6_prefix_len
        if proxy_params is not None:
            self.proxy_params = proxy_params

    @property
    def dns_addresses(self):
        """Gets the dns_addresses of this EditNetworkSettingsInput.  # noqa: E501

        Dns address of the system  # noqa: E501

        :return: The dns_addresses of this EditNetworkSettingsInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_addresses

    @dns_addresses.setter
    def dns_addresses(self, dns_addresses):
        """Sets the dns_addresses of this EditNetworkSettingsInput.

        Dns address of the system  # noqa: E501

        :param dns_addresses: The dns_addresses of this EditNetworkSettingsInput.  # noqa: E501
        :type: list[str]
        """

        self._dns_addresses = dns_addresses

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this EditNetworkSettingsInput.  # noqa: E501

        ipv4 address of the system  # noqa: E501

        :return: The ipv4_address of this EditNetworkSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this EditNetworkSettingsInput.

        ipv4 address of the system  # noqa: E501

        :param ipv4_address: The ipv4_address of this EditNetworkSettingsInput.  # noqa: E501
        :type: str
        """

        self._ipv4_address = ipv4_address

    @property
    def ipv4_gateway(self):
        """Gets the ipv4_gateway of this EditNetworkSettingsInput.  # noqa: E501

        ipv4 gateway of the system  # noqa: E501

        :return: The ipv4_gateway of this EditNetworkSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_gateway

    @ipv4_gateway.setter
    def ipv4_gateway(self, ipv4_gateway):
        """Sets the ipv4_gateway of this EditNetworkSettingsInput.

        ipv4 gateway of the system  # noqa: E501

        :param ipv4_gateway: The ipv4_gateway of this EditNetworkSettingsInput.  # noqa: E501
        :type: str
        """

        self._ipv4_gateway = ipv4_gateway

    @property
    def ipv4_subnet_mask(self):
        """Gets the ipv4_subnet_mask of this EditNetworkSettingsInput.  # noqa: E501

        NetMask for IPV4 address  # noqa: E501

        :return: The ipv4_subnet_mask of this EditNetworkSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_subnet_mask

    @ipv4_subnet_mask.setter
    def ipv4_subnet_mask(self, ipv4_subnet_mask):
        """Sets the ipv4_subnet_mask of this EditNetworkSettingsInput.

        NetMask for IPV4 address  # noqa: E501

        :param ipv4_subnet_mask: The ipv4_subnet_mask of this EditNetworkSettingsInput.  # noqa: E501
        :type: str
        """

        self._ipv4_subnet_mask = ipv4_subnet_mask

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this EditNetworkSettingsInput.  # noqa: E501

        IPV6 address of the system  # noqa: E501

        :return: The ipv6_address of this EditNetworkSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this EditNetworkSettingsInput.

        IPV6 address of the system  # noqa: E501

        :param ipv6_address: The ipv6_address of this EditNetworkSettingsInput.  # noqa: E501
        :type: str
        """

        self._ipv6_address = ipv6_address

    @property
    def ipv6_gateway(self):
        """Gets the ipv6_gateway of this EditNetworkSettingsInput.  # noqa: E501

        IPV6 address of the system  # noqa: E501

        :return: The ipv6_gateway of this EditNetworkSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_gateway

    @ipv6_gateway.setter
    def ipv6_gateway(self, ipv6_gateway):
        """Sets the ipv6_gateway of this EditNetworkSettingsInput.

        IPV6 address of the system  # noqa: E501

        :param ipv6_gateway: The ipv6_gateway of this EditNetworkSettingsInput.  # noqa: E501
        :type: str
        """

        self._ipv6_gateway = ipv6_gateway

    @property
    def ipv6_prefix_len(self):
        """Gets the ipv6_prefix_len of this EditNetworkSettingsInput.  # noqa: E501

        IPV6 Prefix length  # noqa: E501

        :return: The ipv6_prefix_len of this EditNetworkSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_prefix_len

    @ipv6_prefix_len.setter
    def ipv6_prefix_len(self, ipv6_prefix_len):
        """Sets the ipv6_prefix_len of this EditNetworkSettingsInput.

        IPV6 Prefix length  # noqa: E501

        :param ipv6_prefix_len: The ipv6_prefix_len of this EditNetworkSettingsInput.  # noqa: E501
        :type: str
        """

        self._ipv6_prefix_len = ipv6_prefix_len

    @property
    def proxy_params(self):
        """Gets the proxy_params of this EditNetworkSettingsInput.  # noqa: E501


        :return: The proxy_params of this EditNetworkSettingsInput.  # noqa: E501
        :rtype: EditNetworkSettingsInputProxyParams
        """
        return self._proxy_params

    @proxy_params.setter
    def proxy_params(self, proxy_params):
        """Sets the proxy_params of this EditNetworkSettingsInput.


        :param proxy_params: The proxy_params of this EditNetworkSettingsInput.  # noqa: E501
        :type: EditNetworkSettingsInputProxyParams
        """

        self._proxy_params = proxy_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditNetworkSettingsInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
