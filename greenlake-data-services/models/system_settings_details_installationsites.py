# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SystemSettingsDetailsInstallationsites(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'city': 'str',
        'company': 'str',
        'country': 'str',
        'hpe_passport_id': 'str',
        'hpe_password': 'str',
        'id': 'str',
        'postal_code': 'str',
        'set_system_location': 'bool',
        'state': 'str',
        'street_address': 'str',
        'support_provider': 'str',
        'system_id': 'str'
    }

    attribute_map = {
        'city': 'city',
        'company': 'company',
        'country': 'country',
        'hpe_passport_id': 'hpePassportId',
        'hpe_password': 'hpePassword',
        'id': 'id',
        'postal_code': 'postalCode',
        'set_system_location': 'setSystemLocation',
        'state': 'state',
        'street_address': 'streetAddress',
        'support_provider': 'supportProvider',
        'system_id': 'systemId'
    }

    def __init__(self, city=None, company=None, country=None, hpe_passport_id=None, hpe_password=None, id=None, postal_code=None, set_system_location=None, state=None, street_address=None, support_provider=None, system_id=None):  # noqa: E501
        """SystemSettingsDetailsInstallationsites - a model defined in OpenAPI"""  # noqa: E501

        self._city = None
        self._company = None
        self._country = None
        self._hpe_passport_id = None
        self._hpe_password = None
        self._id = None
        self._postal_code = None
        self._set_system_location = None
        self._state = None
        self._street_address = None
        self._support_provider = None
        self._system_id = None
        self.discriminator = None

        if city is not None:
            self.city = city
        if company is not None:
            self.company = company
        if country is not None:
            self.country = country
        if hpe_passport_id is not None:
            self.hpe_passport_id = hpe_passport_id
        if hpe_password is not None:
            self.hpe_password = hpe_password
        if id is not None:
            self.id = id
        if postal_code is not None:
            self.postal_code = postal_code
        if set_system_location is not None:
            self.set_system_location = set_system_location
        if state is not None:
            self.state = state
        if street_address is not None:
            self.street_address = street_address
        if support_provider is not None:
            self.support_provider = support_provider
        if system_id is not None:
            self.system_id = system_id

    @property
    def city(self):
        """Gets the city of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        City of the installation site  # noqa: E501

        :return: The city of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SystemSettingsDetailsInstallationsites.

        City of the installation site  # noqa: E501

        :param city: The city of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company(self):
        """Gets the company of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        Company name of the installation site  # noqa: E501

        :return: The company of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this SystemSettingsDetailsInstallationsites.

        Company name of the installation site  # noqa: E501

        :param company: The company of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def country(self):
        """Gets the country of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        Country of the installation site  # noqa: E501

        :return: The country of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SystemSettingsDetailsInstallationsites.

        Country of the installation site  # noqa: E501

        :param country: The country of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def hpe_passport_id(self):
        """Gets the hpe_passport_id of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        HPE passport ID  # noqa: E501

        :return: The hpe_passport_id of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._hpe_passport_id

    @hpe_passport_id.setter
    def hpe_passport_id(self, hpe_passport_id):
        """Sets the hpe_passport_id of this SystemSettingsDetailsInstallationsites.

        HPE passport ID  # noqa: E501

        :param hpe_passport_id: The hpe_passport_id of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._hpe_passport_id = hpe_passport_id

    @property
    def hpe_password(self):
        """Gets the hpe_password of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        Password of an HPE passport ID  # noqa: E501

        :return: The hpe_password of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._hpe_password

    @hpe_password.setter
    def hpe_password(self, hpe_password):
        """Sets the hpe_password of this SystemSettingsDetailsInstallationsites.

        Password of an HPE passport ID  # noqa: E501

        :param hpe_password: The hpe_password of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._hpe_password = hpe_password

    @property
    def id(self):
        """Gets the id of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        Unique identifier of the installation site  # noqa: E501

        :return: The id of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemSettingsDetailsInstallationsites.

        Unique identifier of the installation site  # noqa: E501

        :param id: The id of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def postal_code(self):
        """Gets the postal_code of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        Postal code of the installation site  # noqa: E501

        :return: The postal_code of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this SystemSettingsDetailsInstallationsites.

        Postal code of the installation site  # noqa: E501

        :param postal_code: The postal_code of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def set_system_location(self):
        """Gets the set_system_location of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        Apply system location to the system descriptor property  # noqa: E501

        :return: The set_system_location of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: bool
        """
        return self._set_system_location

    @set_system_location.setter
    def set_system_location(self, set_system_location):
        """Sets the set_system_location of this SystemSettingsDetailsInstallationsites.

        Apply system location to the system descriptor property  # noqa: E501

        :param set_system_location: The set_system_location of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: bool
        """

        self._set_system_location = set_system_location

    @property
    def state(self):
        """Gets the state of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        State of the installation site  # noqa: E501

        :return: The state of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SystemSettingsDetailsInstallationsites.

        State of the installation site  # noqa: E501

        :param state: The state of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street_address(self):
        """Gets the street_address of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        Street address of the installation site  # noqa: E501

        :return: The street_address of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this SystemSettingsDetailsInstallationsites.

        Street address of the installation site  # noqa: E501

        :param street_address: The street_address of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def support_provider(self):
        """Gets the support_provider of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        Support provider of the installation site  # noqa: E501

        :return: The support_provider of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._support_provider

    @support_provider.setter
    def support_provider(self, support_provider):
        """Sets the support_provider of this SystemSettingsDetailsInstallationsites.

        Support provider of the installation site  # noqa: E501

        :param support_provider: The support_provider of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._support_provider = support_provider

    @property
    def system_id(self):
        """Gets the system_id of this SystemSettingsDetailsInstallationsites.  # noqa: E501

        SystemId/serialNumber of the array.  # noqa: E501

        :return: The system_id of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemSettingsDetailsInstallationsites.

        SystemId/serialNumber of the array.  # noqa: E501

        :param system_id: The system_id of this SystemSettingsDetailsInstallationsites.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemSettingsDetailsInstallationsites):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
