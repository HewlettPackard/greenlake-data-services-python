# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TelemetryStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'SysAssociatedLinks',
        'collection_server': 'str',
        'connectivity_status': 'str',
        'connectivity_test_time': 'TelemetryStatusConnectivityTestTime',
        'details': 'Details',
        'id': 'str',
        'last_file_sent': 'str',
        'last_file_transfer_time': 'TelemetryStatusLastFileTransferTime',
        'last_successful_connectivity_test_time': 'TelemetryStatusLastSuccessfulConnectivityTestTime',
        'proxy_connectivity': 'str',
        'r_da_configured': 'str',
        'r_da_status': 'str',
        'r_sv_s_status': 'str',
        'r_ts_status': 'str',
        'request_uri': 'str',
        'resource_uri': 'str',
        'rolled_up_status': 'str',
        'shared_volume_status': 'str',
        'transfer_status': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'collection_server': 'collectionServer',
        'connectivity_status': 'connectivityStatus',
        'connectivity_test_time': 'connectivityTestTime',
        'details': 'details',
        'id': 'id',
        'last_file_sent': 'lastFileSent',
        'last_file_transfer_time': 'lastFileTransferTime',
        'last_successful_connectivity_test_time': 'lastSuccessfulConnectivityTestTime',
        'proxy_connectivity': 'proxyConnectivity',
        'r_da_configured': 'rDAConfigured',
        'r_da_status': 'rDAStatus',
        'r_sv_s_status': 'rSvSStatus',
        'r_ts_status': 'rTSStatus',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'rolled_up_status': 'rolledUpStatus',
        'shared_volume_status': 'sharedVolumeStatus',
        'transfer_status': 'transferStatus'
    }

    def __init__(self, associated_links=None, collection_server=None, connectivity_status=None, connectivity_test_time=None, details=None, id=None, last_file_sent=None, last_file_transfer_time=None, last_successful_connectivity_test_time=None, proxy_connectivity=None, r_da_configured=None, r_da_status=None, r_sv_s_status=None, r_ts_status=None, request_uri=None, resource_uri=None, rolled_up_status=None, shared_volume_status=None, transfer_status=None):  # noqa: E501
        """TelemetryStatus - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._collection_server = None
        self._connectivity_status = None
        self._connectivity_test_time = None
        self._details = None
        self._id = None
        self._last_file_sent = None
        self._last_file_transfer_time = None
        self._last_successful_connectivity_test_time = None
        self._proxy_connectivity = None
        self._r_da_configured = None
        self._r_da_status = None
        self._r_sv_s_status = None
        self._r_ts_status = None
        self._request_uri = None
        self._resource_uri = None
        self._rolled_up_status = None
        self._shared_volume_status = None
        self._transfer_status = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if collection_server is not None:
            self.collection_server = collection_server
        if connectivity_status is not None:
            self.connectivity_status = connectivity_status
        if connectivity_test_time is not None:
            self.connectivity_test_time = connectivity_test_time
        if details is not None:
            self.details = details
        if id is not None:
            self.id = id
        if last_file_sent is not None:
            self.last_file_sent = last_file_sent
        if last_file_transfer_time is not None:
            self.last_file_transfer_time = last_file_transfer_time
        if last_successful_connectivity_test_time is not None:
            self.last_successful_connectivity_test_time = last_successful_connectivity_test_time
        if proxy_connectivity is not None:
            self.proxy_connectivity = proxy_connectivity
        if r_da_configured is not None:
            self.r_da_configured = r_da_configured
        if r_da_status is not None:
            self.r_da_status = r_da_status
        if r_sv_s_status is not None:
            self.r_sv_s_status = r_sv_s_status
        if r_ts_status is not None:
            self.r_ts_status = r_ts_status
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if rolled_up_status is not None:
            self.rolled_up_status = rolled_up_status
        if shared_volume_status is not None:
            self.shared_volume_status = shared_volume_status
        if transfer_status is not None:
            self.transfer_status = transfer_status

    @property
    def associated_links(self):
        """Gets the associated_links of this TelemetryStatus.  # noqa: E501


        :return: The associated_links of this TelemetryStatus.  # noqa: E501
        :rtype: SysAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this TelemetryStatus.


        :param associated_links: The associated_links of this TelemetryStatus.  # noqa: E501
        :type: SysAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def collection_server(self):
        """Gets the collection_server of this TelemetryStatus.  # noqa: E501

        Callhome Collection server URL  # noqa: E501

        :return: The collection_server of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._collection_server

    @collection_server.setter
    def collection_server(self, collection_server):
        """Sets the collection_server of this TelemetryStatus.

        Callhome Collection server URL  # noqa: E501

        :param collection_server: The collection_server of this TelemetryStatus.  # noqa: E501
        :type: str
        """

        self._collection_server = collection_server

    @property
    def connectivity_status(self):
        """Gets the connectivity_status of this TelemetryStatus.  # noqa: E501

        Callhome connectivity status.  # noqa: E501

        :return: The connectivity_status of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._connectivity_status

    @connectivity_status.setter
    def connectivity_status(self, connectivity_status):
        """Sets the connectivity_status of this TelemetryStatus.

        Callhome connectivity status.  # noqa: E501

        :param connectivity_status: The connectivity_status of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if connectivity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `connectivity_status` ({0}), must be one of {1}"  # noqa: E501
                .format(connectivity_status, allowed_values)
            )

        self._connectivity_status = connectivity_status

    @property
    def connectivity_test_time(self):
        """Gets the connectivity_test_time of this TelemetryStatus.  # noqa: E501


        :return: The connectivity_test_time of this TelemetryStatus.  # noqa: E501
        :rtype: TelemetryStatusConnectivityTestTime
        """
        return self._connectivity_test_time

    @connectivity_test_time.setter
    def connectivity_test_time(self, connectivity_test_time):
        """Sets the connectivity_test_time of this TelemetryStatus.


        :param connectivity_test_time: The connectivity_test_time of this TelemetryStatus.  # noqa: E501
        :type: TelemetryStatusConnectivityTestTime
        """

        self._connectivity_test_time = connectivity_test_time

    @property
    def details(self):
        """Gets the details of this TelemetryStatus.  # noqa: E501


        :return: The details of this TelemetryStatus.  # noqa: E501
        :rtype: Details
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this TelemetryStatus.


        :param details: The details of this TelemetryStatus.  # noqa: E501
        :type: Details
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this TelemetryStatus.  # noqa: E501

        Unique identifier of the callhome status.  # noqa: E501

        :return: The id of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TelemetryStatus.

        Unique identifier of the callhome status.  # noqa: E501

        :param id: The id of this TelemetryStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_file_sent(self):
        """Gets the last_file_sent of this TelemetryStatus.  # noqa: E501

        Last sent file name via callhome.  # noqa: E501

        :return: The last_file_sent of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._last_file_sent

    @last_file_sent.setter
    def last_file_sent(self, last_file_sent):
        """Sets the last_file_sent of this TelemetryStatus.

        Last sent file name via callhome.  # noqa: E501

        :param last_file_sent: The last_file_sent of this TelemetryStatus.  # noqa: E501
        :type: str
        """

        self._last_file_sent = last_file_sent

    @property
    def last_file_transfer_time(self):
        """Gets the last_file_transfer_time of this TelemetryStatus.  # noqa: E501


        :return: The last_file_transfer_time of this TelemetryStatus.  # noqa: E501
        :rtype: TelemetryStatusLastFileTransferTime
        """
        return self._last_file_transfer_time

    @last_file_transfer_time.setter
    def last_file_transfer_time(self, last_file_transfer_time):
        """Sets the last_file_transfer_time of this TelemetryStatus.


        :param last_file_transfer_time: The last_file_transfer_time of this TelemetryStatus.  # noqa: E501
        :type: TelemetryStatusLastFileTransferTime
        """

        self._last_file_transfer_time = last_file_transfer_time

    @property
    def last_successful_connectivity_test_time(self):
        """Gets the last_successful_connectivity_test_time of this TelemetryStatus.  # noqa: E501


        :return: The last_successful_connectivity_test_time of this TelemetryStatus.  # noqa: E501
        :rtype: TelemetryStatusLastSuccessfulConnectivityTestTime
        """
        return self._last_successful_connectivity_test_time

    @last_successful_connectivity_test_time.setter
    def last_successful_connectivity_test_time(self, last_successful_connectivity_test_time):
        """Sets the last_successful_connectivity_test_time of this TelemetryStatus.


        :param last_successful_connectivity_test_time: The last_successful_connectivity_test_time of this TelemetryStatus.  # noqa: E501
        :type: TelemetryStatusLastSuccessfulConnectivityTestTime
        """

        self._last_successful_connectivity_test_time = last_successful_connectivity_test_time

    @property
    def proxy_connectivity(self):
        """Gets the proxy_connectivity of this TelemetryStatus.  # noqa: E501

        Proxy connectivity status.  # noqa: E501

        :return: The proxy_connectivity of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._proxy_connectivity

    @proxy_connectivity.setter
    def proxy_connectivity(self, proxy_connectivity):
        """Sets the proxy_connectivity of this TelemetryStatus.

        Proxy connectivity status.  # noqa: E501

        :param proxy_connectivity: The proxy_connectivity of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if proxy_connectivity not in allowed_values:
            raise ValueError(
                "Invalid value for `proxy_connectivity` ({0}), must be one of {1}"  # noqa: E501
                .format(proxy_connectivity, allowed_values)
            )

        self._proxy_connectivity = proxy_connectivity

    @property
    def r_da_configured(self):
        """Gets the r_da_configured of this TelemetryStatus.  # noqa: E501

        Callhome transport agent configuration details.  # noqa: E501

        :return: The r_da_configured of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._r_da_configured

    @r_da_configured.setter
    def r_da_configured(self, r_da_configured):
        """Sets the r_da_configured of this TelemetryStatus.

        Callhome transport agent configuration details.  # noqa: E501

        :param r_da_configured: The r_da_configured of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if r_da_configured not in allowed_values:
            raise ValueError(
                "Invalid value for `r_da_configured` ({0}), must be one of {1}"  # noqa: E501
                .format(r_da_configured, allowed_values)
            )

        self._r_da_configured = r_da_configured

    @property
    def r_da_status(self):
        """Gets the r_da_status of this TelemetryStatus.  # noqa: E501

        Status of Callhome Transport Agent.  # noqa: E501

        :return: The r_da_status of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._r_da_status

    @r_da_status.setter
    def r_da_status(self, r_da_status):
        """Sets the r_da_status of this TelemetryStatus.

        Status of Callhome Transport Agent.  # noqa: E501

        :param r_da_status: The r_da_status of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if r_da_status not in allowed_values:
            raise ValueError(
                "Invalid value for `r_da_status` ({0}), must be one of {1}"  # noqa: E501
                .format(r_da_status, allowed_values)
            )

        self._r_da_status = r_da_status

    @property
    def r_sv_s_status(self):
        """Gets the r_sv_s_status of this TelemetryStatus.  # noqa: E501

        Status of callhome agent.  # noqa: E501

        :return: The r_sv_s_status of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._r_sv_s_status

    @r_sv_s_status.setter
    def r_sv_s_status(self, r_sv_s_status):
        """Sets the r_sv_s_status of this TelemetryStatus.

        Status of callhome agent.  # noqa: E501

        :param r_sv_s_status: The r_sv_s_status of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if r_sv_s_status not in allowed_values:
            raise ValueError(
                "Invalid value for `r_sv_s_status` ({0}), must be one of {1}"  # noqa: E501
                .format(r_sv_s_status, allowed_values)
            )

        self._r_sv_s_status = r_sv_s_status

    @property
    def r_ts_status(self):
        """Gets the r_ts_status of this TelemetryStatus.  # noqa: E501

        Status of Real time scrubber.  # noqa: E501

        :return: The r_ts_status of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._r_ts_status

    @r_ts_status.setter
    def r_ts_status(self, r_ts_status):
        """Sets the r_ts_status of this TelemetryStatus.

        Status of Real time scrubber.  # noqa: E501

        :param r_ts_status: The r_ts_status of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if r_ts_status not in allowed_values:
            raise ValueError(
                "Invalid value for `r_ts_status` ({0}), must be one of {1}"  # noqa: E501
                .format(r_ts_status, allowed_values)
            )

        self._r_ts_status = r_ts_status

    @property
    def request_uri(self):
        """Gets the request_uri of this TelemetryStatus.  # noqa: E501

        resourceUri for detailed storage object  # noqa: E501

        :return: The request_uri of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this TelemetryStatus.

        resourceUri for detailed storage object  # noqa: E501

        :param request_uri: The request_uri of this TelemetryStatus.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this TelemetryStatus.  # noqa: E501

        resourceUri for detailed storage object  # noqa: E501

        :return: The resource_uri of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this TelemetryStatus.

        resourceUri for detailed storage object  # noqa: E501

        :param resource_uri: The resource_uri of this TelemetryStatus.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def rolled_up_status(self):
        """Gets the rolled_up_status of this TelemetryStatus.  # noqa: E501

        Callhome Rolled up status.  # noqa: E501

        :return: The rolled_up_status of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._rolled_up_status

    @rolled_up_status.setter
    def rolled_up_status(self, rolled_up_status):
        """Sets the rolled_up_status of this TelemetryStatus.

        Callhome Rolled up status.  # noqa: E501

        :param rolled_up_status: The rolled_up_status of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if rolled_up_status not in allowed_values:
            raise ValueError(
                "Invalid value for `rolled_up_status` ({0}), must be one of {1}"  # noqa: E501
                .format(rolled_up_status, allowed_values)
            )

        self._rolled_up_status = rolled_up_status

    @property
    def shared_volume_status(self):
        """Gets the shared_volume_status of this TelemetryStatus.  # noqa: E501

        Shared Volume status  # noqa: E501

        :return: The shared_volume_status of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._shared_volume_status

    @shared_volume_status.setter
    def shared_volume_status(self, shared_volume_status):
        """Sets the shared_volume_status of this TelemetryStatus.

        Shared Volume status  # noqa: E501

        :param shared_volume_status: The shared_volume_status of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if shared_volume_status not in allowed_values:
            raise ValueError(
                "Invalid value for `shared_volume_status` ({0}), must be one of {1}"  # noqa: E501
                .format(shared_volume_status, allowed_values)
            )

        self._shared_volume_status = shared_volume_status

    @property
    def transfer_status(self):
        """Gets the transfer_status of this TelemetryStatus.  # noqa: E501

        Callhome File Transfer transfer.  # noqa: E501

        :return: The transfer_status of this TelemetryStatus.  # noqa: E501
        :rtype: str
        """
        return self._transfer_status

    @transfer_status.setter
    def transfer_status(self, transfer_status):
        """Sets the transfer_status of this TelemetryStatus.

        Callhome File Transfer transfer.  # noqa: E501

        :param transfer_status: The transfer_status of this TelemetryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILED", "NOT_APPLICABLE", "DISABLED", "null"]  # noqa: E501
        if transfer_status not in allowed_values:
            raise ValueError(
                "Invalid value for `transfer_status` ({0}), must be one of {1}"  # noqa: E501
                .format(transfer_status, allowed_values)
            )

        self._transfer_status = transfer_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TelemetryStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
