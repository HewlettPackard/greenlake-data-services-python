# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReplicationPartnerVolumeListRemoteVolume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'async_outstanding': 'int',
        'remote_volume_id': 'int',
        'remote_volume_name': 'str',
        'resync_iteration': 'str',
        'resync_snapshot_name': 'str',
        'sync_iteration': 'str',
        'sync_percentage': 'int',
        'sync_snapshot_name': 'str',
        'sync_status': 'str',
        'target_name': 'str',
        'volume_iteration': 'str',
        'volume_last_sync_time': 'SyncTime',
        'volume_sync_length': 'int',
        'volume_sync_offset': 'int'
    }

    attribute_map = {
        'async_outstanding': 'asyncOutstanding',
        'remote_volume_id': 'remoteVolumeID',
        'remote_volume_name': 'remoteVolumeName',
        'resync_iteration': 'resyncIteration',
        'resync_snapshot_name': 'resyncSnapshotName',
        'sync_iteration': 'syncIteration',
        'sync_percentage': 'syncPercentage',
        'sync_snapshot_name': 'syncSnapshotName',
        'sync_status': 'syncStatus',
        'target_name': 'targetName',
        'volume_iteration': 'volumeIteration',
        'volume_last_sync_time': 'volumeLastSyncTime',
        'volume_sync_length': 'volumeSyncLength',
        'volume_sync_offset': 'volumeSyncOffset'
    }

    def __init__(self, async_outstanding=None, remote_volume_id=None, remote_volume_name=None, resync_iteration=None, resync_snapshot_name=None, sync_iteration=None, sync_percentage=None, sync_snapshot_name=None, sync_status=None, target_name=None, volume_iteration=None, volume_last_sync_time=None, volume_sync_length=None, volume_sync_offset=None):  # noqa: E501
        """ReplicationPartnerVolumeListRemoteVolume - a model defined in OpenAPI"""  # noqa: E501

        self._async_outstanding = None
        self._remote_volume_id = None
        self._remote_volume_name = None
        self._resync_iteration = None
        self._resync_snapshot_name = None
        self._sync_iteration = None
        self._sync_percentage = None
        self._sync_snapshot_name = None
        self._sync_status = None
        self._target_name = None
        self._volume_iteration = None
        self._volume_last_sync_time = None
        self._volume_sync_length = None
        self._volume_sync_offset = None
        self.discriminator = None

        if async_outstanding is not None:
            self.async_outstanding = async_outstanding
        if remote_volume_id is not None:
            self.remote_volume_id = remote_volume_id
        if remote_volume_name is not None:
            self.remote_volume_name = remote_volume_name
        if resync_iteration is not None:
            self.resync_iteration = resync_iteration
        if resync_snapshot_name is not None:
            self.resync_snapshot_name = resync_snapshot_name
        if sync_iteration is not None:
            self.sync_iteration = sync_iteration
        if sync_percentage is not None:
            self.sync_percentage = sync_percentage
        if sync_snapshot_name is not None:
            self.sync_snapshot_name = sync_snapshot_name
        if sync_status is not None:
            self.sync_status = sync_status
        if target_name is not None:
            self.target_name = target_name
        if volume_iteration is not None:
            self.volume_iteration = volume_iteration
        if volume_last_sync_time is not None:
            self.volume_last_sync_time = volume_last_sync_time
        if volume_sync_length is not None:
            self.volume_sync_length = volume_sync_length
        if volume_sync_offset is not None:
            self.volume_sync_offset = volume_sync_offset

    @property
    def async_outstanding(self):
        """Gets the async_outstanding of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Total outstanding data to be synchronized in MB. You can calculate backlog data for the Remote Copy Async group by summing up the asyncOutsstanding value for all the volumes in the group. Defaults to -1.  # noqa: E501

        :return: The async_outstanding of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: int
        """
        return self._async_outstanding

    @async_outstanding.setter
    def async_outstanding(self, async_outstanding):
        """Sets the async_outstanding of this ReplicationPartnerVolumeListRemoteVolume.

        Total outstanding data to be synchronized in MB. You can calculate backlog data for the Remote Copy Async group by summing up the asyncOutsstanding value for all the volumes in the group. Defaults to -1.  # noqa: E501

        :param async_outstanding: The async_outstanding of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: int
        """

        self._async_outstanding = async_outstanding

    @property
    def remote_volume_id(self):
        """Gets the remote_volume_id of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Volume ID on the target system.  # noqa: E501

        :return: The remote_volume_id of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: int
        """
        return self._remote_volume_id

    @remote_volume_id.setter
    def remote_volume_id(self, remote_volume_id):
        """Sets the remote_volume_id of this ReplicationPartnerVolumeListRemoteVolume.

        Volume ID on the target system.  # noqa: E501

        :param remote_volume_id: The remote_volume_id of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: int
        """

        self._remote_volume_id = remote_volume_id

    @property
    def remote_volume_name(self):
        """Gets the remote_volume_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Volume name on the target system.  # noqa: E501

        :return: The remote_volume_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: str
        """
        return self._remote_volume_name

    @remote_volume_name.setter
    def remote_volume_name(self, remote_volume_name):
        """Sets the remote_volume_name of this ReplicationPartnerVolumeListRemoteVolume.

        Volume name on the target system.  # noqa: E501

        :param remote_volume_name: The remote_volume_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: str
        """

        self._remote_volume_name = remote_volume_name

    @property
    def resync_iteration(self):
        """Gets the resync_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        A correlator used to determine the data consistency point of the resynchroniztion snapshot relative to the remote volume and/or snapshots. Returns 'NA' if not set.  # noqa: E501

        :return: The resync_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: str
        """
        return self._resync_iteration

    @resync_iteration.setter
    def resync_iteration(self, resync_iteration):
        """Sets the resync_iteration of this ReplicationPartnerVolumeListRemoteVolume.

        A correlator used to determine the data consistency point of the resynchroniztion snapshot relative to the remote volume and/or snapshots. Returns 'NA' if not set.  # noqa: E501

        :param resync_iteration: The resync_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: str
        """

        self._resync_iteration = resync_iteration

    @property
    def resync_snapshot_name(self):
        """Gets the resync_snapshot_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Snapshot indicating the starting point of the remote volume. The primary array uses this snapshot to determine which changes to synchronize to the secondary volume. The target array uses this snapshot as a recovery point if there is a resynchronization failure.  # noqa: E501

        :return: The resync_snapshot_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: str
        """
        return self._resync_snapshot_name

    @resync_snapshot_name.setter
    def resync_snapshot_name(self, resync_snapshot_name):
        """Sets the resync_snapshot_name of this ReplicationPartnerVolumeListRemoteVolume.

        Snapshot indicating the starting point of the remote volume. The primary array uses this snapshot to determine which changes to synchronize to the secondary volume. The target array uses this snapshot as a recovery point if there is a resynchronization failure.  # noqa: E501

        :param resync_snapshot_name: The resync_snapshot_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: str
        """

        self._resync_snapshot_name = resync_snapshot_name

    @property
    def sync_iteration(self):
        """Gets the sync_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        A correlator used to determine the data consistency point of the synchronization snapshot relative to the remote volume and/or snapshots. Returns 'NA' if not set.  # noqa: E501

        :return: The sync_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: str
        """
        return self._sync_iteration

    @sync_iteration.setter
    def sync_iteration(self, sync_iteration):
        """Sets the sync_iteration of this ReplicationPartnerVolumeListRemoteVolume.

        A correlator used to determine the data consistency point of the synchronization snapshot relative to the remote volume and/or snapshots. Returns 'NA' if not set.  # noqa: E501

        :param sync_iteration: The sync_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: str
        """

        self._sync_iteration = sync_iteration

    @property
    def sync_percentage(self):
        """Gets the sync_percentage of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Synchronization percentage of the volume.  # noqa: E501

        :return: The sync_percentage of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: int
        """
        return self._sync_percentage

    @sync_percentage.setter
    def sync_percentage(self, sync_percentage):
        """Sets the sync_percentage of this ReplicationPartnerVolumeListRemoteVolume.

        Synchronization percentage of the volume.  # noqa: E501

        :param sync_percentage: The sync_percentage of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: int
        """

        self._sync_percentage = sync_percentage

    @property
    def sync_snapshot_name(self):
        """Gets the sync_snapshot_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Snapshot indicating the destination point of the Remote Copy volume on successful completion of resynchronization. Upon completion of a resynchronization, the remote base volume mirrors this synchronization snapshot. This snapshot becomes the resync snapshot when resynchronization completes.  # noqa: E501

        :return: The sync_snapshot_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: str
        """
        return self._sync_snapshot_name

    @sync_snapshot_name.setter
    def sync_snapshot_name(self, sync_snapshot_name):
        """Sets the sync_snapshot_name of this ReplicationPartnerVolumeListRemoteVolume.

        Snapshot indicating the destination point of the Remote Copy volume on successful completion of resynchronization. Upon completion of a resynchronization, the remote base volume mirrors this synchronization snapshot. This snapshot becomes the resync snapshot when resynchronization completes.  # noqa: E501

        :param sync_snapshot_name: The sync_snapshot_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: str
        """

        self._sync_snapshot_name = sync_snapshot_name

    @property
    def sync_status(self):
        """Gets the sync_status of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Synchronization status of the volume. Can be New, Syncing, Synced, Not Synced, Stale, New Pre Synced, New Sync from Snap, Failsafe, Logging, New Pending, Pending Dismiss or Remote Pending Dismiss. Null if unset.  # noqa: E501

        :return: The sync_status of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: str
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this ReplicationPartnerVolumeListRemoteVolume.

        Synchronization status of the volume. Can be New, Syncing, Synced, Not Synced, Stale, New Pre Synced, New Sync from Snap, Failsafe, Logging, New Pending, Pending Dismiss or Remote Pending Dismiss. Null if unset.  # noqa: E501

        :param sync_status: The sync_status of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: str
        """

        self._sync_status = sync_status

    @property
    def target_name(self):
        """Gets the target_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Target to which the volume group is mirrored.  # noqa: E501

        :return: The target_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this ReplicationPartnerVolumeListRemoteVolume.

        Target to which the volume group is mirrored.  # noqa: E501

        :param target_name: The target_name of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def volume_iteration(self):
        """Gets the volume_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        A correlator used to determine the data consistency point of the volume relative to the remote volume and/or snapshots. Returns 'NA' if not set.  # noqa: E501

        :return: The volume_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: str
        """
        return self._volume_iteration

    @volume_iteration.setter
    def volume_iteration(self, volume_iteration):
        """Sets the volume_iteration of this ReplicationPartnerVolumeListRemoteVolume.

        A correlator used to determine the data consistency point of the volume relative to the remote volume and/or snapshots. Returns 'NA' if not set.  # noqa: E501

        :param volume_iteration: The volume_iteration of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: str
        """

        self._volume_iteration = volume_iteration

    @property
    def volume_last_sync_time(self):
        """Gets the volume_last_sync_time of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501


        :return: The volume_last_sync_time of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: SyncTime
        """
        return self._volume_last_sync_time

    @volume_last_sync_time.setter
    def volume_last_sync_time(self, volume_last_sync_time):
        """Sets the volume_last_sync_time of this ReplicationPartnerVolumeListRemoteVolume.


        :param volume_last_sync_time: The volume_last_sync_time of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: SyncTime
        """

        self._volume_last_sync_time = volume_last_sync_time

    @property
    def volume_sync_length(self):
        """Gets the volume_sync_length of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Volume synchronization total length. Returns -1 if unset  # noqa: E501

        :return: The volume_sync_length of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: int
        """
        return self._volume_sync_length

    @volume_sync_length.setter
    def volume_sync_length(self, volume_sync_length):
        """Sets the volume_sync_length of this ReplicationPartnerVolumeListRemoteVolume.

        Volume synchronization total length. Returns -1 if unset  # noqa: E501

        :param volume_sync_length: The volume_sync_length of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: int
        """

        self._volume_sync_length = volume_sync_length

    @property
    def volume_sync_offset(self):
        """Gets the volume_sync_offset of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501

        Volume synchronization offset. Returns -1 if unset.  # noqa: E501

        :return: The volume_sync_offset of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :rtype: int
        """
        return self._volume_sync_offset

    @volume_sync_offset.setter
    def volume_sync_offset(self, volume_sync_offset):
        """Sets the volume_sync_offset of this ReplicationPartnerVolumeListRemoteVolume.

        Volume synchronization offset. Returns -1 if unset.  # noqa: E501

        :param volume_sync_offset: The volume_sync_offset of this ReplicationPartnerVolumeListRemoteVolume.  # noqa: E501
        :type: int
        """

        self._volume_sync_offset = volume_sync_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationPartnerVolumeListRemoteVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
