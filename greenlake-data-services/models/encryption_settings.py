# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EncryptionSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cipher': 'str',
        'encryption_active': 'bool',
        'encryption_key_manager': 'str',
        'master_key_set': 'bool',
        'mode': 'str',
        'scope': 'str'
    }

    attribute_map = {
        'cipher': 'cipher',
        'encryption_active': 'encryption_active',
        'encryption_key_manager': 'encryption_key_manager',
        'master_key_set': 'master_key_set',
        'mode': 'mode',
        'scope': 'scope'
    }

    def __init__(self, cipher=None, encryption_active=None, encryption_key_manager=None, master_key_set=None, mode=None, scope=None):  # noqa: E501
        """EncryptionSettings - a model defined in OpenAPI"""  # noqa: E501

        self._cipher = None
        self._encryption_active = None
        self._encryption_key_manager = None
        self._master_key_set = None
        self._mode = None
        self._scope = None
        self.discriminator = None

        if cipher is not None:
            self.cipher = cipher
        if encryption_active is not None:
            self.encryption_active = encryption_active
        if encryption_key_manager is not None:
            self.encryption_key_manager = encryption_key_manager
        if master_key_set is not None:
            self.master_key_set = master_key_set
        if mode is not None:
            self.mode = mode
        if scope is not None:
            self.scope = scope

    @property
    def cipher(self):
        """Gets the cipher of this EncryptionSettings.  # noqa: E501


        :return: The cipher of this EncryptionSettings.  # noqa: E501
        :rtype: str
        """
        return self._cipher

    @cipher.setter
    def cipher(self, cipher):
        """Sets the cipher of this EncryptionSettings.


        :param cipher: The cipher of this EncryptionSettings.  # noqa: E501
        :type: str
        """

        self._cipher = cipher

    @property
    def encryption_active(self):
        """Gets the encryption_active of this EncryptionSettings.  # noqa: E501

        Is encryption active (output only).  # noqa: E501

        :return: The encryption_active of this EncryptionSettings.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_active

    @encryption_active.setter
    def encryption_active(self, encryption_active):
        """Sets the encryption_active of this EncryptionSettings.

        Is encryption active (output only).  # noqa: E501

        :param encryption_active: The encryption_active of this EncryptionSettings.  # noqa: E501
        :type: bool
        """

        self._encryption_active = encryption_active

    @property
    def encryption_key_manager(self):
        """Gets the encryption_key_manager of this EncryptionSettings.  # noqa: E501


        :return: The encryption_key_manager of this EncryptionSettings.  # noqa: E501
        :rtype: str
        """
        return self._encryption_key_manager

    @encryption_key_manager.setter
    def encryption_key_manager(self, encryption_key_manager):
        """Sets the encryption_key_manager of this EncryptionSettings.


        :param encryption_key_manager: The encryption_key_manager of this EncryptionSettings.  # noqa: E501
        :type: str
        """

        self._encryption_key_manager = encryption_key_manager

    @property
    def master_key_set(self):
        """Gets the master_key_set of this EncryptionSettings.  # noqa: E501

        Is the master key set (output only).  # noqa: E501

        :return: The master_key_set of this EncryptionSettings.  # noqa: E501
        :rtype: bool
        """
        return self._master_key_set

    @master_key_set.setter
    def master_key_set(self, master_key_set):
        """Sets the master_key_set of this EncryptionSettings.

        Is the master key set (output only).  # noqa: E501

        :param master_key_set: The master_key_set of this EncryptionSettings.  # noqa: E501
        :type: bool
        """

        self._master_key_set = master_key_set

    @property
    def mode(self):
        """Gets the mode of this EncryptionSettings.  # noqa: E501


        :return: The mode of this EncryptionSettings.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this EncryptionSettings.


        :param mode: The mode of this EncryptionSettings.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def scope(self):
        """Gets the scope of this EncryptionSettings.  # noqa: E501


        :return: The scope of this EncryptionSettings.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this EncryptionSettings.


        :param scope: The scope of this EncryptionSettings.  # noqa: E501
        :type: str
        """

        self._scope = scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EncryptionSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
