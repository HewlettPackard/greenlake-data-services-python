# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNetworkSettingDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_since': 'int',
        'array_list': 'list[NimbleArrayNet]',
        'associated_links': 'AssociatedLinks',
        'console_uri': 'str',
        'creation_time': 'int',
        'customer_id': 'str',
        'generation': 'int',
        'group_leader_array': 'str',
        'iscsi_automatic_connection_method': 'bool',
        'iscsi_connection_rebalancing': 'bool',
        'last_active': 'int',
        'last_modified': 'int',
        'mgmt_ip': 'str',
        'resource_uri': 'str',
        'route_list': 'list[NimbleRoute]',
        'secondary_mgmt_ip': 'str',
        'subnet_list': 'list[NimbleSubnet]',
        'type': 'str'
    }

    attribute_map = {
        'active_since': 'active_since',
        'array_list': 'array_list',
        'associated_links': 'associatedLinks',
        'console_uri': 'consoleUri',
        'creation_time': 'creation_time',
        'customer_id': 'customerId',
        'generation': 'generation',
        'group_leader_array': 'group_leader_array',
        'iscsi_automatic_connection_method': 'iscsi_automatic_connection_method',
        'iscsi_connection_rebalancing': 'iscsi_connection_rebalancing',
        'last_active': 'last_active',
        'last_modified': 'last_modified',
        'mgmt_ip': 'mgmt_ip',
        'resource_uri': 'resourceUri',
        'route_list': 'route_list',
        'secondary_mgmt_ip': 'secondary_mgmt_ip',
        'subnet_list': 'subnet_list',
        'type': 'type'
    }

    def __init__(self, active_since=None, array_list=None, associated_links=None, console_uri=None, creation_time=None, customer_id=None, generation=None, group_leader_array=None, iscsi_automatic_connection_method=None, iscsi_connection_rebalancing=None, last_active=None, last_modified=None, mgmt_ip=None, resource_uri=None, route_list=None, secondary_mgmt_ip=None, subnet_list=None, type=None):  # noqa: E501
        """NimbleNetworkSettingDetails - a model defined in OpenAPI"""  # noqa: E501

        self._active_since = None
        self._array_list = None
        self._associated_links = None
        self._console_uri = None
        self._creation_time = None
        self._customer_id = None
        self._generation = None
        self._group_leader_array = None
        self._iscsi_automatic_connection_method = None
        self._iscsi_connection_rebalancing = None
        self._last_active = None
        self._last_modified = None
        self._mgmt_ip = None
        self._resource_uri = None
        self._route_list = None
        self._secondary_mgmt_ip = None
        self._subnet_list = None
        self._type = None
        self.discriminator = None

        if active_since is not None:
            self.active_since = active_since
        if array_list is not None:
            self.array_list = array_list
        if associated_links is not None:
            self.associated_links = associated_links
        if console_uri is not None:
            self.console_uri = console_uri
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if generation is not None:
            self.generation = generation
        if group_leader_array is not None:
            self.group_leader_array = group_leader_array
        if iscsi_automatic_connection_method is not None:
            self.iscsi_automatic_connection_method = iscsi_automatic_connection_method
        if iscsi_connection_rebalancing is not None:
            self.iscsi_connection_rebalancing = iscsi_connection_rebalancing
        if last_active is not None:
            self.last_active = last_active
        if last_modified is not None:
            self.last_modified = last_modified
        if mgmt_ip is not None:
            self.mgmt_ip = mgmt_ip
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if route_list is not None:
            self.route_list = route_list
        if secondary_mgmt_ip is not None:
            self.secondary_mgmt_ip = secondary_mgmt_ip
        if subnet_list is not None:
            self.subnet_list = subnet_list
        if type is not None:
            self.type = type

    @property
    def active_since(self):
        """Gets the active_since of this NimbleNetworkSettingDetails.  # noqa: E501

        Start time of activity.  # noqa: E501

        :return: The active_since of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: int
        """
        return self._active_since

    @active_since.setter
    def active_since(self, active_since):
        """Sets the active_since of this NimbleNetworkSettingDetails.

        Start time of activity.  # noqa: E501

        :param active_since: The active_since of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: int
        """

        self._active_since = active_since

    @property
    def array_list(self):
        """Gets the array_list of this NimbleNetworkSettingDetails.  # noqa: E501

        List of array network configs.  # noqa: E501

        :return: The array_list of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: list[NimbleArrayNet]
        """
        return self._array_list

    @array_list.setter
    def array_list(self, array_list):
        """Sets the array_list of this NimbleNetworkSettingDetails.

        List of array network configs.  # noqa: E501

        :param array_list: The array_list of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: list[NimbleArrayNet]
        """

        self._array_list = array_list

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleNetworkSettingDetails.  # noqa: E501


        :return: The associated_links of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleNetworkSettingDetails.


        :param associated_links: The associated_links of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleNetworkSettingDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleNetworkSettingDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleNetworkSettingDetails.  # noqa: E501

        Time when this net configuration was created.  # noqa: E501

        :return: The creation_time of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleNetworkSettingDetails.

        Time when this net configuration was created.  # noqa: E501

        :param creation_time: The creation_time of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleNetworkSettingDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleNetworkSettingDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def generation(self):
        """Gets the generation of this NimbleNetworkSettingDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleNetworkSettingDetails.

        generation  # noqa: E501

        :param generation: The generation of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def group_leader_array(self):
        """Gets the group_leader_array of this NimbleNetworkSettingDetails.  # noqa: E501

        Name of the group leader array.  # noqa: E501

        :return: The group_leader_array of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: str
        """
        return self._group_leader_array

    @group_leader_array.setter
    def group_leader_array(self, group_leader_array):
        """Sets the group_leader_array of this NimbleNetworkSettingDetails.

        Name of the group leader array.  # noqa: E501

        :param group_leader_array: The group_leader_array of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: str
        """

        self._group_leader_array = group_leader_array

    @property
    def iscsi_automatic_connection_method(self):
        """Gets the iscsi_automatic_connection_method of this NimbleNetworkSettingDetails.  # noqa: E501

        Indicates whether automatic connection method is enabled.  # noqa: E501

        :return: The iscsi_automatic_connection_method of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_automatic_connection_method

    @iscsi_automatic_connection_method.setter
    def iscsi_automatic_connection_method(self, iscsi_automatic_connection_method):
        """Sets the iscsi_automatic_connection_method of this NimbleNetworkSettingDetails.

        Indicates whether automatic connection method is enabled.  # noqa: E501

        :param iscsi_automatic_connection_method: The iscsi_automatic_connection_method of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: bool
        """

        self._iscsi_automatic_connection_method = iscsi_automatic_connection_method

    @property
    def iscsi_connection_rebalancing(self):
        """Gets the iscsi_connection_rebalancing of this NimbleNetworkSettingDetails.  # noqa: E501

        Indicates whether rebalancing is enabled.  # noqa: E501

        :return: The iscsi_connection_rebalancing of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_connection_rebalancing

    @iscsi_connection_rebalancing.setter
    def iscsi_connection_rebalancing(self, iscsi_connection_rebalancing):
        """Sets the iscsi_connection_rebalancing of this NimbleNetworkSettingDetails.

        Indicates whether rebalancing is enabled.  # noqa: E501

        :param iscsi_connection_rebalancing: The iscsi_connection_rebalancing of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: bool
        """

        self._iscsi_connection_rebalancing = iscsi_connection_rebalancing

    @property
    def last_active(self):
        """Gets the last_active of this NimbleNetworkSettingDetails.  # noqa: E501

        Time of last activity.  # noqa: E501

        :return: The last_active of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_active

    @last_active.setter
    def last_active(self, last_active):
        """Sets the last_active of this NimbleNetworkSettingDetails.

        Time of last activity.  # noqa: E501

        :param last_active: The last_active of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: int
        """

        self._last_active = last_active

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleNetworkSettingDetails.  # noqa: E501

        Time when this network configuration was last modified.  # noqa: E501

        :return: The last_modified of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleNetworkSettingDetails.

        Time when this network configuration was last modified.  # noqa: E501

        :param last_modified: The last_modified of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def mgmt_ip(self):
        """Gets the mgmt_ip of this NimbleNetworkSettingDetails.  # noqa: E501

        Management IP address for the Group.  # noqa: E501

        :return: The mgmt_ip of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ip

    @mgmt_ip.setter
    def mgmt_ip(self, mgmt_ip):
        """Sets the mgmt_ip of this NimbleNetworkSettingDetails.

        Management IP address for the Group.  # noqa: E501

        :param mgmt_ip: The mgmt_ip of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: str
        """

        self._mgmt_ip = mgmt_ip

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleNetworkSettingDetails.  # noqa: E501


        :return: The resource_uri of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleNetworkSettingDetails.


        :param resource_uri: The resource_uri of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def route_list(self):
        """Gets the route_list of this NimbleNetworkSettingDetails.  # noqa: E501

        List of static routes.  # noqa: E501

        :return: The route_list of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: list[NimbleRoute]
        """
        return self._route_list

    @route_list.setter
    def route_list(self, route_list):
        """Sets the route_list of this NimbleNetworkSettingDetails.

        List of static routes.  # noqa: E501

        :param route_list: The route_list of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: list[NimbleRoute]
        """

        self._route_list = route_list

    @property
    def secondary_mgmt_ip(self):
        """Gets the secondary_mgmt_ip of this NimbleNetworkSettingDetails.  # noqa: E501

        Secondary management IP address for the Group.  # noqa: E501

        :return: The secondary_mgmt_ip of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: str
        """
        return self._secondary_mgmt_ip

    @secondary_mgmt_ip.setter
    def secondary_mgmt_ip(self, secondary_mgmt_ip):
        """Sets the secondary_mgmt_ip of this NimbleNetworkSettingDetails.

        Secondary management IP address for the Group.  # noqa: E501

        :param secondary_mgmt_ip: The secondary_mgmt_ip of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: str
        """

        self._secondary_mgmt_ip = secondary_mgmt_ip

    @property
    def subnet_list(self):
        """Gets the subnet_list of this NimbleNetworkSettingDetails.  # noqa: E501

        List of subnet configs.  # noqa: E501

        :return: The subnet_list of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: list[NimbleSubnet]
        """
        return self._subnet_list

    @subnet_list.setter
    def subnet_list(self, subnet_list):
        """Sets the subnet_list of this NimbleNetworkSettingDetails.

        List of subnet configs.  # noqa: E501

        :param subnet_list: The subnet_list of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: list[NimbleSubnet]
        """

        self._subnet_list = subnet_list

    @property
    def type(self):
        """Gets the type of this NimbleNetworkSettingDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleNetworkSettingDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleNetworkSettingDetails.

        type  # noqa: E501

        :param type: The type of this NimbleNetworkSettingDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNetworkSettingDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
