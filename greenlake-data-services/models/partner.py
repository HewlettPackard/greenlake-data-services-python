# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Partner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node_wwn_or_name': 'str',
        'port_wwn_or_ip': 'str',
        'position': 'PartnerPortPosition'
    }

    attribute_map = {
        'node_wwn_or_name': 'nodeWwnOrName',
        'port_wwn_or_ip': 'portWwnOrIp',
        'position': 'position'
    }

    def __init__(self, node_wwn_or_name=None, port_wwn_or_ip=None, position=None):  # noqa: E501
        """Partner - a model defined in OpenAPI"""  # noqa: E501

        self._node_wwn_or_name = None
        self._port_wwn_or_ip = None
        self._position = None
        self.discriminator = None

        if node_wwn_or_name is not None:
            self.node_wwn_or_name = node_wwn_or_name
        if port_wwn_or_ip is not None:
            self.port_wwn_or_ip = port_wwn_or_ip
        if position is not None:
            self.position = position

    @property
    def node_wwn_or_name(self):
        """Gets the node_wwn_or_name of this Partner.  # noqa: E501

        Node WWN (for FC) or iSCSI name (for iSCSI)  `Filter, Sort`  # noqa: E501

        :return: The node_wwn_or_name of this Partner.  # noqa: E501
        :rtype: str
        """
        return self._node_wwn_or_name

    @node_wwn_or_name.setter
    def node_wwn_or_name(self, node_wwn_or_name):
        """Sets the node_wwn_or_name of this Partner.

        Node WWN (for FC) or iSCSI name (for iSCSI)  `Filter, Sort`  # noqa: E501

        :param node_wwn_or_name: The node_wwn_or_name of this Partner.  # noqa: E501
        :type: str
        """

        self._node_wwn_or_name = node_wwn_or_name

    @property
    def port_wwn_or_ip(self):
        """Gets the port_wwn_or_ip of this Partner.  # noqa: E501

        Port WWN (for FC) or IP address (for iSCSI)  `Filter, Sort`  # noqa: E501

        :return: The port_wwn_or_ip of this Partner.  # noqa: E501
        :rtype: str
        """
        return self._port_wwn_or_ip

    @port_wwn_or_ip.setter
    def port_wwn_or_ip(self, port_wwn_or_ip):
        """Sets the port_wwn_or_ip of this Partner.

        Port WWN (for FC) or IP address (for iSCSI)  `Filter, Sort`  # noqa: E501

        :param port_wwn_or_ip: The port_wwn_or_ip of this Partner.  # noqa: E501
        :type: str
        """

        self._port_wwn_or_ip = port_wwn_or_ip

    @property
    def position(self):
        """Gets the position of this Partner.  # noqa: E501


        :return: The position of this Partner.  # noqa: E501
        :rtype: PartnerPortPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Partner.


        :param position: The position of this Partner.  # noqa: E501
        :type: PartnerPortPosition
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Partner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
