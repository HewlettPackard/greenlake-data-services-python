# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleRoute(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gateway': 'str',
        'tgt_netmask': 'str',
        'tgt_network': 'str'
    }

    attribute_map = {
        'gateway': 'gateway',
        'tgt_netmask': 'tgt_netmask',
        'tgt_network': 'tgt_network'
    }

    def __init__(self, gateway=None, tgt_netmask=None, tgt_network=None):  # noqa: E501
        """NimbleRoute - a model defined in OpenAPI"""  # noqa: E501

        self._gateway = None
        self._tgt_netmask = None
        self._tgt_network = None
        self.discriminator = None

        if gateway is not None:
            self.gateway = gateway
        if tgt_netmask is not None:
            self.tgt_netmask = tgt_netmask
        if tgt_network is not None:
            self.tgt_network = tgt_network

    @property
    def gateway(self):
        """Gets the gateway of this NimbleRoute.  # noqa: E501

        Gateway IP address.  # noqa: E501

        :return: The gateway of this NimbleRoute.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NimbleRoute.

        Gateway IP address.  # noqa: E501

        :param gateway: The gateway of this NimbleRoute.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def tgt_netmask(self):
        """Gets the tgt_netmask of this NimbleRoute.  # noqa: E501

        Target network mask.  # noqa: E501

        :return: The tgt_netmask of this NimbleRoute.  # noqa: E501
        :rtype: str
        """
        return self._tgt_netmask

    @tgt_netmask.setter
    def tgt_netmask(self, tgt_netmask):
        """Sets the tgt_netmask of this NimbleRoute.

        Target network mask.  # noqa: E501

        :param tgt_netmask: The tgt_netmask of this NimbleRoute.  # noqa: E501
        :type: str
        """

        self._tgt_netmask = tgt_netmask

    @property
    def tgt_network(self):
        """Gets the tgt_network of this NimbleRoute.  # noqa: E501

        Target network address.  # noqa: E501

        :return: The tgt_network of this NimbleRoute.  # noqa: E501
        :rtype: str
        """
        return self._tgt_network

    @tgt_network.setter
    def tgt_network(self, tgt_network):
        """Sets the tgt_network of this NimbleRoute.

        Target network address.  # noqa: E501

        :param tgt_network: The tgt_network of this NimbleRoute.  # noqa: E501
        :type: str
        """

        self._tgt_network = tgt_network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleRoute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
