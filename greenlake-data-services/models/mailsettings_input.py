# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MailsettingsInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mail_host_domain': 'str',
        'mail_host_server': 'str',
        'port': 'int',
        'sender_email_id': 'str'
    }

    attribute_map = {
        'mail_host_domain': 'mailHostDomain',
        'mail_host_server': 'mailHostServer',
        'port': 'port',
        'sender_email_id': 'senderEmailId'
    }

    def __init__(self, mail_host_domain=None, mail_host_server=None, port=None, sender_email_id=None):  # noqa: E501
        """MailsettingsInput - a model defined in OpenAPI"""  # noqa: E501

        self._mail_host_domain = None
        self._mail_host_server = None
        self._port = None
        self._sender_email_id = None
        self.discriminator = None

        if mail_host_domain is not None:
            self.mail_host_domain = mail_host_domain
        if mail_host_server is not None:
            self.mail_host_server = mail_host_server
        if port is not None:
            self.port = port
        if sender_email_id is not None:
            self.sender_email_id = sender_email_id

    @property
    def mail_host_domain(self):
        """Gets the mail_host_domain of this MailsettingsInput.  # noqa: E501

        SMTP server's Host Domain  # noqa: E501

        :return: The mail_host_domain of this MailsettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._mail_host_domain

    @mail_host_domain.setter
    def mail_host_domain(self, mail_host_domain):
        """Sets the mail_host_domain of this MailsettingsInput.

        SMTP server's Host Domain  # noqa: E501

        :param mail_host_domain: The mail_host_domain of this MailsettingsInput.  # noqa: E501
        :type: str
        """

        self._mail_host_domain = mail_host_domain

    @property
    def mail_host_server(self):
        """Gets the mail_host_server of this MailsettingsInput.  # noqa: E501

        SMTP server address/IP  # noqa: E501

        :return: The mail_host_server of this MailsettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._mail_host_server

    @mail_host_server.setter
    def mail_host_server(self, mail_host_server):
        """Sets the mail_host_server of this MailsettingsInput.

        SMTP server address/IP  # noqa: E501

        :param mail_host_server: The mail_host_server of this MailsettingsInput.  # noqa: E501
        :type: str
        """

        self._mail_host_server = mail_host_server

    @property
    def port(self):
        """Gets the port of this MailsettingsInput.  # noqa: E501

        SMTP server's port number  # noqa: E501

        :return: The port of this MailsettingsInput.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this MailsettingsInput.

        SMTP server's port number  # noqa: E501

        :param port: The port of this MailsettingsInput.  # noqa: E501
        :type: int
        """
        allowed_values = [25, 465, 587, 2525]  # noqa: E501
        if port not in allowed_values:
            raise ValueError(
                "Invalid value for `port` ({0}), must be one of {1}"  # noqa: E501
                .format(port, allowed_values)
            )

        self._port = port

    @property
    def sender_email_id(self):
        """Gets the sender_email_id of this MailsettingsInput.  # noqa: E501

        Sender email address  # noqa: E501

        :return: The sender_email_id of this MailsettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._sender_email_id

    @sender_email_id.setter
    def sender_email_id(self, sender_email_id):
        """Sets the sender_email_id of this MailsettingsInput.

        Sender email address  # noqa: E501

        :param sender_email_id: The sender_email_id of this MailsettingsInput.  # noqa: E501
        :type: str
        """

        self._sender_email_id = sender_email_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailsettingsInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
