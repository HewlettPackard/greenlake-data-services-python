# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IssueDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_details': 'ConsoleReference',
        'body': 'str',
        'category': 'str',
        'cleared_at': 'datetime',
        'created_at': 'datetime',
        'customer_id': 'str',
        'generation': 'str',
        'id': 'str',
        'issue_type': 'str',
        'last_occurred_at': 'datetime',
        'name': 'str',
        'occurrence_count': 'int',
        'related_resource': 'ResourceReference',
        'related_resource_owner': 'ResourceReference',
        'resource_uri': 'str',
        'rule_id': 'str',
        'severity': 'str',
        'state': 'str',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'additional_details': 'additionalDetails',
        'body': 'body',
        'category': 'category',
        'cleared_at': 'clearedAt',
        'created_at': 'createdAt',
        'customer_id': 'customerId',
        'generation': 'generation',
        'id': 'id',
        'issue_type': 'issueType',
        'last_occurred_at': 'lastOccurredAt',
        'name': 'name',
        'occurrence_count': 'occurrenceCount',
        'related_resource': 'relatedResource',
        'related_resource_owner': 'relatedResourceOwner',
        'resource_uri': 'resourceUri',
        'rule_id': 'ruleId',
        'severity': 'severity',
        'state': 'state',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, additional_details=None, body=None, category=None, cleared_at=None, created_at=None, customer_id=None, generation=None, id=None, issue_type=None, last_occurred_at=None, name=None, occurrence_count=None, related_resource=None, related_resource_owner=None, resource_uri=None, rule_id=None, severity=None, state=None, title=None, type=None):  # noqa: E501
        """IssueDetails - a model defined in OpenAPI"""  # noqa: E501

        self._additional_details = None
        self._body = None
        self._category = None
        self._cleared_at = None
        self._created_at = None
        self._customer_id = None
        self._generation = None
        self._id = None
        self._issue_type = None
        self._last_occurred_at = None
        self._name = None
        self._occurrence_count = None
        self._related_resource = None
        self._related_resource_owner = None
        self._resource_uri = None
        self._rule_id = None
        self._severity = None
        self._state = None
        self._title = None
        self._type = None
        self.discriminator = None

        if additional_details is not None:
            self.additional_details = additional_details
        if body is not None:
            self.body = body
        if category is not None:
            self.category = category
        if cleared_at is not None:
            self.cleared_at = cleared_at
        if created_at is not None:
            self.created_at = created_at
        if customer_id is not None:
            self.customer_id = customer_id
        if generation is not None:
            self.generation = generation
        self.id = id
        if issue_type is not None:
            self.issue_type = issue_type
        if last_occurred_at is not None:
            self.last_occurred_at = last_occurred_at
        if name is not None:
            self.name = name
        if occurrence_count is not None:
            self.occurrence_count = occurrence_count
        if related_resource is not None:
            self.related_resource = related_resource
        if related_resource_owner is not None:
            self.related_resource_owner = related_resource_owner
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if rule_id is not None:
            self.rule_id = rule_id
        if severity is not None:
            self.severity = severity
        if state is not None:
            self.state = state
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def additional_details(self):
        """Gets the additional_details of this IssueDetails.  # noqa: E501

        A link to be displayed in the Issues UI.  # noqa: E501

        :return: The additional_details of this IssueDetails.  # noqa: E501
        :rtype: ConsoleReference
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this IssueDetails.

        A link to be displayed in the Issues UI.  # noqa: E501

        :param additional_details: The additional_details of this IssueDetails.  # noqa: E501
        :type: ConsoleReference
        """

        self._additional_details = additional_details

    @property
    def body(self):
        """Gets the body of this IssueDetails.  # noqa: E501

        Long description with more details including possible remediations.  # noqa: E501

        :return: The body of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this IssueDetails.

        Long description with more details including possible remediations.  # noqa: E501

        :param body: The body of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def category(self):
        """Gets the category of this IssueDetails.  # noqa: E501

        Category of the issue. PERFORMANCE, CAPACITY, etc  # noqa: E501

        :return: The category of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this IssueDetails.

        Category of the issue. PERFORMANCE, CAPACITY, etc  # noqa: E501

        :param category: The category of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def cleared_at(self):
        """Gets the cleared_at of this IssueDetails.  # noqa: E501

        Time when the issue was cleared. RFC 3339 timestamp  # noqa: E501

        :return: The cleared_at of this IssueDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._cleared_at

    @cleared_at.setter
    def cleared_at(self, cleared_at):
        """Sets the cleared_at of this IssueDetails.

        Time when the issue was cleared. RFC 3339 timestamp  # noqa: E501

        :param cleared_at: The cleared_at of this IssueDetails.  # noqa: E501
        :type: datetime
        """

        self._cleared_at = cleared_at

    @property
    def created_at(self):
        """Gets the created_at of this IssueDetails.  # noqa: E501

        Time when the issue was created. RFC 3339 timestamp  # noqa: E501

        :return: The created_at of this IssueDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IssueDetails.

        Time when the issue was created. RFC 3339 timestamp  # noqa: E501

        :param created_at: The created_at of this IssueDetails.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this IssueDetails.  # noqa: E501

        Primary identifier for the customer (UUID) associated with the issue.  # noqa: E501

        :return: The customer_id of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this IssueDetails.

        Primary identifier for the customer (UUID) associated with the issue.  # noqa: E501

        :param customer_id: The customer_id of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def generation(self):
        """Gets the generation of this IssueDetails.  # noqa: E501

        A monotonically increasing value incremented every time the resource is updated  # noqa: E501

        :return: The generation of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this IssueDetails.

        A monotonically increasing value incremented every time the resource is updated  # noqa: E501

        :param generation: The generation of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this IssueDetails.  # noqa: E501

        Primary identifier for the issue.  # noqa: E501

        :return: The id of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueDetails.

        Primary identifier for the issue.  # noqa: E501

        :param id: The id of this IssueDetails.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def issue_type(self):
        """Gets the issue_type of this IssueDetails.  # noqa: E501

        The type of the issue. Eg: ISSUE, RECOMMENDATION  # noqa: E501

        :return: The issue_type of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this IssueDetails.

        The type of the issue. Eg: ISSUE, RECOMMENDATION  # noqa: E501

        :param issue_type: The issue_type of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._issue_type = issue_type

    @property
    def last_occurred_at(self):
        """Gets the last_occurred_at of this IssueDetails.  # noqa: E501

        Time when the issue last occurred. RFC 3339 timestamp  # noqa: E501

        :return: The last_occurred_at of this IssueDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_occurred_at

    @last_occurred_at.setter
    def last_occurred_at(self, last_occurred_at):
        """Sets the last_occurred_at of this IssueDetails.

        Time when the issue last occurred. RFC 3339 timestamp  # noqa: E501

        :param last_occurred_at: The last_occurred_at of this IssueDetails.  # noqa: E501
        :type: datetime
        """

        self._last_occurred_at = last_occurred_at

    @property
    def name(self):
        """Gets the name of this IssueDetails.  # noqa: E501

        friendly name of the resource given by the system  # noqa: E501

        :return: The name of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueDetails.

        friendly name of the resource given by the system  # noqa: E501

        :param name: The name of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def occurrence_count(self):
        """Gets the occurrence_count of this IssueDetails.  # noqa: E501

        Indicates the number of occurrences of the issue  # noqa: E501

        :return: The occurrence_count of this IssueDetails.  # noqa: E501
        :rtype: int
        """
        return self._occurrence_count

    @occurrence_count.setter
    def occurrence_count(self, occurrence_count):
        """Sets the occurrence_count of this IssueDetails.

        Indicates the number of occurrences of the issue  # noqa: E501

        :param occurrence_count: The occurrence_count of this IssueDetails.  # noqa: E501
        :type: int
        """

        self._occurrence_count = occurrence_count

    @property
    def related_resource(self):
        """Gets the related_resource of this IssueDetails.  # noqa: E501

        Details of the resource related to the issue  # noqa: E501

        :return: The related_resource of this IssueDetails.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._related_resource

    @related_resource.setter
    def related_resource(self, related_resource):
        """Sets the related_resource of this IssueDetails.

        Details of the resource related to the issue  # noqa: E501

        :param related_resource: The related_resource of this IssueDetails.  # noqa: E501
        :type: ResourceReference
        """

        self._related_resource = related_resource

    @property
    def related_resource_owner(self):
        """Gets the related_resource_owner of this IssueDetails.  # noqa: E501

        Details of the owner of the resource related to the issue  # noqa: E501

        :return: The related_resource_owner of this IssueDetails.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._related_resource_owner

    @related_resource_owner.setter
    def related_resource_owner(self, related_resource_owner):
        """Sets the related_resource_owner of this IssueDetails.

        Details of the owner of the resource related to the issue  # noqa: E501

        :param related_resource_owner: The related_resource_owner of this IssueDetails.  # noqa: E501
        :type: ResourceReference
        """

        self._related_resource_owner = related_resource_owner

    @property
    def resource_uri(self):
        """Gets the resource_uri of this IssueDetails.  # noqa: E501

        URI of the issue. Eg: /api/v1/issues/{id}  # noqa: E501

        :return: The resource_uri of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this IssueDetails.

        URI of the issue. Eg: /api/v1/issues/{id}  # noqa: E501

        :param resource_uri: The resource_uri of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def rule_id(self):
        """Gets the rule_id of this IssueDetails.  # noqa: E501

        Indicates the problem associated with the issue. Disambiguated per system.  # noqa: E501

        :return: The rule_id of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this IssueDetails.

        Indicates the problem associated with the issue. Disambiguated per system.  # noqa: E501

        :param rule_id: The rule_id of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    @property
    def severity(self):
        """Gets the severity of this IssueDetails.  # noqa: E501

        Severity of the issue. For issue: CRITICAL, WARNING, INFO. For reco: HIGH, MEDIUM, LOW  # noqa: E501

        :return: The severity of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this IssueDetails.

        Severity of the issue. For issue: CRITICAL, WARNING, INFO. For reco: HIGH, MEDIUM, LOW  # noqa: E501

        :param severity: The severity of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def state(self):
        """Gets the state of this IssueDetails.  # noqa: E501

        State of the issue. Eg: CREATED, ASSIGNED, CLOSED, SNOOZED, DELETED, etc  # noqa: E501

        :return: The state of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IssueDetails.

        State of the issue. Eg: CREATED, ASSIGNED, CLOSED, SNOOZED, DELETED, etc  # noqa: E501

        :param state: The state of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def title(self):
        """Gets the title of this IssueDetails.  # noqa: E501

        One line description of the issue  # noqa: E501

        :return: The title of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssueDetails.

        One line description of the issue  # noqa: E501

        :param title: The title of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this IssueDetails.  # noqa: E501

        Type of the resource. In this case - issue  # noqa: E501

        :return: The type of this IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IssueDetails.

        Type of the resource. In this case - issue  # noqa: E501

        :param type: The type of this IssueDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
