# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VolumeSetHostProximityInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host_id': 'str',
        'name': 'str',
        'os': 'str',
        'proximity': 'HostProximityDetail'
    }

    attribute_map = {
        'host_id': 'hostId',
        'name': 'name',
        'os': 'os',
        'proximity': 'proximity'
    }

    def __init__(self, host_id=None, name=None, os=None, proximity=None):  # noqa: E501
        """VolumeSetHostProximityInfo - a model defined in OpenAPI"""  # noqa: E501

        self._host_id = None
        self._name = None
        self._os = None
        self._proximity = None
        self.discriminator = None

        if host_id is not None:
            self.host_id = host_id
        if name is not None:
            self.name = name
        if os is not None:
            self.os = os
        if proximity is not None:
            self.proximity = proximity

    @property
    def host_id(self):
        """Gets the host_id of this VolumeSetHostProximityInfo.  # noqa: E501

        Unique ID of host  # noqa: E501

        :return: The host_id of this VolumeSetHostProximityInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VolumeSetHostProximityInfo.

        Unique ID of host  # noqa: E501

        :param host_id: The host_id of this VolumeSetHostProximityInfo.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def name(self):
        """Gets the name of this VolumeSetHostProximityInfo.  # noqa: E501

        Host name  # noqa: E501

        :return: The name of this VolumeSetHostProximityInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeSetHostProximityInfo.

        Host name  # noqa: E501

        :param name: The name of this VolumeSetHostProximityInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os(self):
        """Gets the os of this VolumeSetHostProximityInfo.  # noqa: E501

        OS of host  # noqa: E501

        :return: The os of this VolumeSetHostProximityInfo.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this VolumeSetHostProximityInfo.

        OS of host  # noqa: E501

        :param os: The os of this VolumeSetHostProximityInfo.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def proximity(self):
        """Gets the proximity of this VolumeSetHostProximityInfo.  # noqa: E501


        :return: The proximity of this VolumeSetHostProximityInfo.  # noqa: E501
        :rtype: HostProximityDetail
        """
        return self._proximity

    @proximity.setter
    def proximity(self, proximity):
        """Sets the proximity of this VolumeSetHostProximityInfo.


        :param proximity: The proximity of this VolumeSetHostProximityInfo.  # noqa: E501
        :type: HostProximityDetail
        """

        self._proximity = proximity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeSetHostProximityInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
