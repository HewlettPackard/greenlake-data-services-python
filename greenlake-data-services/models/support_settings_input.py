# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SupportSettingsInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connect_to_hpe': 'str',
        'device_id': 'str',
        'enterprise_server_url': 'str',
        'mini_insplore_enabled': 'str',
        'rap_forwarding': 'str',
        'remote_access': 'str',
        'rts_enabled': 'str'
    }

    attribute_map = {
        'connect_to_hpe': 'connectToHPE',
        'device_id': 'deviceId',
        'enterprise_server_url': 'enterpriseServerURL',
        'mini_insplore_enabled': 'miniInsploreEnabled',
        'rap_forwarding': 'rapForwarding',
        'remote_access': 'remoteAccess',
        'rts_enabled': 'rtsEnabled'
    }

    def __init__(self, connect_to_hpe=None, device_id=None, enterprise_server_url=None, mini_insplore_enabled=None, rap_forwarding=None, remote_access=None, rts_enabled=None):  # noqa: E501
        """SupportSettingsInput - a model defined in OpenAPI"""  # noqa: E501

        self._connect_to_hpe = None
        self._device_id = None
        self._enterprise_server_url = None
        self._mini_insplore_enabled = None
        self._rap_forwarding = None
        self._remote_access = None
        self._rts_enabled = None
        self.discriminator = None

        self.connect_to_hpe = connect_to_hpe
        if device_id is not None:
            self.device_id = device_id
        if enterprise_server_url is not None:
            self.enterprise_server_url = enterprise_server_url
        if mini_insplore_enabled is not None:
            self.mini_insplore_enabled = mini_insplore_enabled
        self.rap_forwarding = rap_forwarding
        self.remote_access = remote_access
        self.rts_enabled = rts_enabled

    @property
    def connect_to_hpe(self):
        """Gets the connect_to_hpe of this SupportSettingsInput.  # noqa: E501

        Enable remote support by allowing sending of files from device to HPE. Allowed values: enabled or disabled. It is mandatory.  # noqa: E501

        :return: The connect_to_hpe of this SupportSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._connect_to_hpe

    @connect_to_hpe.setter
    def connect_to_hpe(self, connect_to_hpe):
        """Sets the connect_to_hpe of this SupportSettingsInput.

        Enable remote support by allowing sending of files from device to HPE. Allowed values: enabled or disabled. It is mandatory.  # noqa: E501

        :param connect_to_hpe: The connect_to_hpe of this SupportSettingsInput.  # noqa: E501
        :type: str
        """
        if connect_to_hpe is None:
            raise ValueError("Invalid value for `connect_to_hpe`, must not be `None`")  # noqa: E501

        self._connect_to_hpe = connect_to_hpe

    @property
    def device_id(self):
        """Gets the device_id of this SupportSettingsInput.  # noqa: E501

        Id of the array. User can get Id info from GET response. It is mandatory.  # noqa: E501

        :return: The device_id of this SupportSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SupportSettingsInput.

        Id of the array. User can get Id info from GET response. It is mandatory.  # noqa: E501

        :param device_id: The device_id of this SupportSettingsInput.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def enterprise_server_url(self):
        """Gets the enterprise_server_url of this SupportSettingsInput.  # noqa: E501

        Callhome collection server URL  # noqa: E501

        :return: The enterprise_server_url of this SupportSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_server_url

    @enterprise_server_url.setter
    def enterprise_server_url(self, enterprise_server_url):
        """Sets the enterprise_server_url of this SupportSettingsInput.

        Callhome collection server URL  # noqa: E501

        :param enterprise_server_url: The enterprise_server_url of this SupportSettingsInput.  # noqa: E501
        :type: str
        """

        self._enterprise_server_url = enterprise_server_url

    @property
    def mini_insplore_enabled(self):
        """Gets the mini_insplore_enabled of this SupportSettingsInput.  # noqa: E501

        Enables/Disable scheduled Mini-Insplore collection. Allowed values: enabled or disabled.  # noqa: E501

        :return: The mini_insplore_enabled of this SupportSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._mini_insplore_enabled

    @mini_insplore_enabled.setter
    def mini_insplore_enabled(self, mini_insplore_enabled):
        """Sets the mini_insplore_enabled of this SupportSettingsInput.

        Enables/Disable scheduled Mini-Insplore collection. Allowed values: enabled or disabled.  # noqa: E501

        :param mini_insplore_enabled: The mini_insplore_enabled of this SupportSettingsInput.  # noqa: E501
        :type: str
        """

        self._mini_insplore_enabled = mini_insplore_enabled

    @property
    def rap_forwarding(self):
        """Gets the rap_forwarding of this SupportSettingsInput.  # noqa: E501

        Enable/Disable RAP forwarding. Allowed values: enabled or disabled. It is mandatory.  # noqa: E501

        :return: The rap_forwarding of this SupportSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._rap_forwarding

    @rap_forwarding.setter
    def rap_forwarding(self, rap_forwarding):
        """Sets the rap_forwarding of this SupportSettingsInput.

        Enable/Disable RAP forwarding. Allowed values: enabled or disabled. It is mandatory.  # noqa: E501

        :param rap_forwarding: The rap_forwarding of this SupportSettingsInput.  # noqa: E501
        :type: str
        """
        if rap_forwarding is None:
            raise ValueError("Invalid value for `rap_forwarding`, must not be `None`")  # noqa: E501

        self._rap_forwarding = rap_forwarding

    @property
    def remote_access(self):
        """Gets the remote_access of this SupportSettingsInput.  # noqa: E501

        Allow HPE Support to access the device remotely. Allowed values: ENABLE_ROOT or DISABLE or ENABLE_NONROOT. It is mandatory.  # noqa: E501

        :return: The remote_access of this SupportSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._remote_access

    @remote_access.setter
    def remote_access(self, remote_access):
        """Sets the remote_access of this SupportSettingsInput.

        Allow HPE Support to access the device remotely. Allowed values: ENABLE_ROOT or DISABLE or ENABLE_NONROOT. It is mandatory.  # noqa: E501

        :param remote_access: The remote_access of this SupportSettingsInput.  # noqa: E501
        :type: str
        """
        if remote_access is None:
            raise ValueError("Invalid value for `remote_access`, must not be `None`")  # noqa: E501
        allowed_values = ["DISABLE", "ENABLE_NONROOT", "ENABLE_ROOT"]  # noqa: E501
        if remote_access not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_access` ({0}), must be one of {1}"  # noqa: E501
                .format(remote_access, allowed_values)
            )

        self._remote_access = remote_access

    @property
    def rts_enabled(self):
        """Gets the rts_enabled of this SupportSettingsInput.  # noqa: E501

        Enable/Disable Real time data scrubbing. Allowed values: enabled or disabled. It is mandatory.  # noqa: E501

        :return: The rts_enabled of this SupportSettingsInput.  # noqa: E501
        :rtype: str
        """
        return self._rts_enabled

    @rts_enabled.setter
    def rts_enabled(self, rts_enabled):
        """Sets the rts_enabled of this SupportSettingsInput.

        Enable/Disable Real time data scrubbing. Allowed values: enabled or disabled. It is mandatory.  # noqa: E501

        :param rts_enabled: The rts_enabled of this SupportSettingsInput.  # noqa: E501
        :type: str
        """
        if rts_enabled is None:
            raise ValueError("Invalid value for `rts_enabled`, must not be `None`")  # noqa: E501

        self._rts_enabled = rts_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportSettingsInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
