# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleVCollectionFieldsWithSortKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_cluster_name': 'str',
        'app_id': 'str',
        'app_server': 'str',
        'app_service_name': 'str',
        'id': 'str',
        'name': 'str',
        'prottmpl_id': 'str',
        'replication_type': 'str',
        'synchronous_replication_state': 'str',
        'synchronous_replication_type': 'str'
    }

    attribute_map = {
        'app_cluster_name': 'app_cluster_name',
        'app_id': 'app_id',
        'app_server': 'app_server',
        'app_service_name': 'app_service_name',
        'id': 'id',
        'name': 'name',
        'prottmpl_id': 'prottmpl_id',
        'replication_type': 'replication_type',
        'synchronous_replication_state': 'synchronous_replication_state',
        'synchronous_replication_type': 'synchronous_replication_type'
    }

    def __init__(self, app_cluster_name=None, app_id=None, app_server=None, app_service_name=None, id=None, name=None, prottmpl_id=None, replication_type=None, synchronous_replication_state=None, synchronous_replication_type=None):  # noqa: E501
        """NimbleVCollectionFieldsWithSortKey - a model defined in OpenAPI"""  # noqa: E501

        self._app_cluster_name = None
        self._app_id = None
        self._app_server = None
        self._app_service_name = None
        self._id = None
        self._name = None
        self._prottmpl_id = None
        self._replication_type = None
        self._synchronous_replication_state = None
        self._synchronous_replication_type = None
        self.discriminator = None

        if app_cluster_name is not None:
            self.app_cluster_name = app_cluster_name
        if app_id is not None:
            self.app_id = app_id
        if app_server is not None:
            self.app_server = app_server
        if app_service_name is not None:
            self.app_service_name = app_service_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if prottmpl_id is not None:
            self.prottmpl_id = prottmpl_id
        if replication_type is not None:
            self.replication_type = replication_type
        if synchronous_replication_state is not None:
            self.synchronous_replication_state = synchronous_replication_state
        if synchronous_replication_type is not None:
            self.synchronous_replication_type = synchronous_replication_type

    @property
    def app_cluster_name(self):
        """Gets the app_cluster_name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        If the application is running within a Windows cluster environment, this is the cluster name. `Filter, Sort`  # noqa: E501

        :return: The app_cluster_name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._app_cluster_name

    @app_cluster_name.setter
    def app_cluster_name(self, app_cluster_name):
        """Sets the app_cluster_name of this NimbleVCollectionFieldsWithSortKey.

        If the application is running within a Windows cluster environment, this is the cluster name. `Filter, Sort`  # noqa: E501

        :param app_cluster_name: The app_cluster_name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._app_cluster_name = app_cluster_name

    @property
    def app_id(self):
        """Gets the app_id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        Application ID running on the server. Application ID can only be specified if application synchronization is \\\\\"vss\\\\\". `Filter, Sort` Possible values: 'exchange_dag', 'sql2012', 'inval', 'sql2014', 'sql2005', 'sql2016', 'exchange', 'sql2017', 'sql2018', 'hyperv'.  # noqa: E501

        :return: The app_id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this NimbleVCollectionFieldsWithSortKey.

        Application ID running on the server. Application ID can only be specified if application synchronization is \\\\\"vss\\\\\". `Filter, Sort` Possible values: 'exchange_dag', 'sql2012', 'inval', 'sql2014', 'sql2005', 'sql2016', 'exchange', 'sql2017', 'sql2018', 'hyperv'.  # noqa: E501

        :param app_id: The app_id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_server(self):
        """Gets the app_server of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        Application server hostname. `Filter, Sort`  # noqa: E501

        :return: The app_server of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._app_server

    @app_server.setter
    def app_server(self, app_server):
        """Sets the app_server of this NimbleVCollectionFieldsWithSortKey.

        Application server hostname. `Filter, Sort`  # noqa: E501

        :param app_server: The app_server of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._app_server = app_server

    @property
    def app_service_name(self):
        """Gets the app_service_name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. `Filter, Sort`  # noqa: E501

        :return: The app_service_name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._app_service_name

    @app_service_name.setter
    def app_service_name(self, app_service_name):
        """Sets the app_service_name of this NimbleVCollectionFieldsWithSortKey.

        If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. `Filter, Sort`  # noqa: E501

        :param app_service_name: The app_service_name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._app_service_name = app_service_name

    @property
    def id(self):
        """Gets the id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        Identifier of the Volume-Collection. `Filter`  # noqa: E501

        :return: The id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleVCollectionFieldsWithSortKey.

        Identifier of the Volume-Collection. `Filter`  # noqa: E501

        :param id: The id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        Name of volume collection. `Filter, Sort`  # noqa: E501

        :return: The name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleVCollectionFieldsWithSortKey.

        Name of volume collection. `Filter, Sort`  # noqa: E501

        :param name: The name of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prottmpl_id(self):
        """Gets the prottmpl_id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        Identifier of the protection template whose attributes will be used to create this volume collection. This attribute is only used for input when creating a volume collection and is not outputed. `Filter, Sort`  # noqa: E501

        :return: The prottmpl_id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._prottmpl_id

    @prottmpl_id.setter
    def prottmpl_id(self, prottmpl_id):
        """Sets the prottmpl_id of this NimbleVCollectionFieldsWithSortKey.

        Identifier of the protection template whose attributes will be used to create this volume collection. This attribute is only used for input when creating a volume collection and is not outputed. `Filter, Sort`  # noqa: E501

        :param prottmpl_id: The prottmpl_id of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._prottmpl_id = prottmpl_id

    @property
    def replication_type(self):
        """Gets the replication_type of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        Type of replication configured for the volume collection. Possible values: 'synchronous', 'periodic_snapshot'. `Filter, Sort`  # noqa: E501

        :return: The replication_type of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._replication_type

    @replication_type.setter
    def replication_type(self, replication_type):
        """Sets the replication_type of this NimbleVCollectionFieldsWithSortKey.

        Type of replication configured for the volume collection. Possible values: 'synchronous', 'periodic_snapshot'. `Filter, Sort`  # noqa: E501

        :param replication_type: The replication_type of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._replication_type = replication_type

    @property
    def synchronous_replication_state(self):
        """Gets the synchronous_replication_state of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        State of synchronous replication on the volume collection. Possible values: 'in_sync', 'not_applicable', 'out_of_sync', 'unknown'. `Filter, Sort`  # noqa: E501

        :return: The synchronous_replication_state of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._synchronous_replication_state

    @synchronous_replication_state.setter
    def synchronous_replication_state(self, synchronous_replication_state):
        """Sets the synchronous_replication_state of this NimbleVCollectionFieldsWithSortKey.

        State of synchronous replication on the volume collection. Possible values: 'in_sync', 'not_applicable', 'out_of_sync', 'unknown'. `Filter, Sort`  # noqa: E501

        :param synchronous_replication_state: The synchronous_replication_state of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._synchronous_replication_state = synchronous_replication_state

    @property
    def synchronous_replication_type(self):
        """Gets the synchronous_replication_type of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501

        Type of synchronous replication configured for the volume collection. Possible values: 'soft_available', 'not_applicable'. `Filter, Sort`  # noqa: E501

        :return: The synchronous_replication_type of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :rtype: str
        """
        return self._synchronous_replication_type

    @synchronous_replication_type.setter
    def synchronous_replication_type(self, synchronous_replication_type):
        """Sets the synchronous_replication_type of this NimbleVCollectionFieldsWithSortKey.

        Type of synchronous replication configured for the volume collection. Possible values: 'soft_available', 'not_applicable'. `Filter, Sort`  # noqa: E501

        :param synchronous_replication_type: The synchronous_replication_type of this NimbleVCollectionFieldsWithSortKey.  # noqa: E501
        :type: str
        """

        self._synchronous_replication_type = synchronous_replication_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleVCollectionFieldsWithSortKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
