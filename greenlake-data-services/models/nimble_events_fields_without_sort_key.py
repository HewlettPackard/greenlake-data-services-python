# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleEventsFieldsWithoutSortKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alarm_id': 'str',
        'category': 'str',
        'event_type': 'int',
        'id': 'str',
        'scope': 'str',
        'severity': 'str',
        'target': 'str',
        'target_type': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'alarm_id': 'alarm_id',
        'category': 'category',
        'event_type': 'event_type',
        'id': 'id',
        'scope': 'scope',
        'severity': 'severity',
        'target': 'target',
        'target_type': 'target_type',
        'timestamp': 'timestamp'
    }

    def __init__(self, alarm_id=None, category=None, event_type=None, id=None, scope=None, severity=None, target=None, target_type=None, timestamp=None):  # noqa: E501
        """NimbleEventsFieldsWithoutSortKey - a model defined in OpenAPI"""  # noqa: E501

        self._alarm_id = None
        self._category = None
        self._event_type = None
        self._id = None
        self._scope = None
        self._severity = None
        self._target = None
        self._target_type = None
        self._timestamp = None
        self.discriminator = None

        if alarm_id is not None:
            self.alarm_id = alarm_id
        if category is not None:
            self.category = category
        if event_type is not None:
            self.event_type = event_type
        if id is not None:
            self.id = id
        if scope is not None:
            self.scope = scope
        if severity is not None:
            self.severity = severity
        if target is not None:
            self.target = target
        if target_type is not None:
            self.target_type = target_type
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def alarm_id(self):
        """Gets the alarm_id of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        The alarm ID if the event is related to an alarm. A 42 digit hexadecimal number.  # noqa: E501

        :return: The alarm_id of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._alarm_id

    @alarm_id.setter
    def alarm_id(self, alarm_id):
        """Sets the alarm_id of this NimbleEventsFieldsWithoutSortKey.

        The alarm ID if the event is related to an alarm. A 42 digit hexadecimal number.  # noqa: E501

        :param alarm_id: The alarm_id of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._alarm_id = alarm_id

    @property
    def category(self):
        """Gets the category of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        Category of the event record. Possible values: 'unknown', 'hardware', 'service', 'replication', 'volume', 'update', 'configuration', 'test', 'security', 'array_upgrade'.  # noqa: E501

        :return: The category of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NimbleEventsFieldsWithoutSortKey.

        Category of the event record. Possible values: 'unknown', 'hardware', 'service', 'replication', 'volume', 'update', 'configuration', 'test', 'security', 'array_upgrade'.  # noqa: E501

        :param category: The category of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def event_type(self):
        """Gets the event_type of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        Type of the event record. Non-negative integer in range [0,2147483647].  # noqa: E501

        :return: The event_type of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this NimbleEventsFieldsWithoutSortKey.

        Type of the event record. Non-negative integer in range [0,2147483647].  # noqa: E501

        :param event_type: The event_type of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        Identifier for the event record. A 42 digit hexadecimal number.  # noqa: E501

        :return: The id of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleEventsFieldsWithoutSortKey.

        Identifier for the event record. A 42 digit hexadecimal number.  # noqa: E501

        :param id: The id of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def scope(self):
        """Gets the scope of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        The array name for array level event. Possible values: array serial number, or '-'.  # noqa: E501

        :return: The scope of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this NimbleEventsFieldsWithoutSortKey.

        The array name for array level event. Possible values: array serial number, or '-'.  # noqa: E501

        :param scope: The scope of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def severity(self):
        """Gets the severity of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        Severity level of the event. Possible values: 'info', 'notice', 'warning', 'critical'.  # noqa: E501

        :return: The severity of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this NimbleEventsFieldsWithoutSortKey.

        Severity level of the event. Possible values: 'info', 'notice', 'warning', 'critical'.  # noqa: E501

        :param severity: The severity of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def target(self):
        """Gets the target of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        Name of object upon which the event occurred. String of up to 400 alphanumeric characters, - and . and : and \" \" are allowed after first character.  # noqa: E501

        :return: The target of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this NimbleEventsFieldsWithoutSortKey.

        Name of object upon which the event occurred. String of up to 400 alphanumeric characters, - and . and : and \" \" are allowed after first character.  # noqa: E501

        :param target: The target of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def target_type(self):
        """Gets the target_type of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        Target type of the event record. Possible values: 'anon', 'array', 'controller', 'disk', 'nic', 'temperature', 'service', 'volume', 'protection_set', 'nvram', 'fan', 'power_supply', 'partner', 'raid', 'test', 'iscsi', 'pool', 'group', 'shelf', 'ntb', 'fc', 'initiator_group'.  # noqa: E501

        :return: The target_type of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this NimbleEventsFieldsWithoutSortKey.

        Target type of the event record. Possible values: 'anon', 'array', 'controller', 'disk', 'nic', 'temperature', 'service', 'volume', 'protection_set', 'nvram', 'fan', 'power_supply', 'partner', 'raid', 'test', 'iscsi', 'pool', 'group', 'shelf', 'ntb', 'fc', 'initiator_group'.  # noqa: E501

        :param target_type: The target_type of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: str
        """

        self._target_type = target_type

    @property
    def timestamp(self):
        """Gets the timestamp of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501

        Time when this event happened. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The timestamp of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this NimbleEventsFieldsWithoutSortKey.

        Time when this event happened. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param timestamp: The timestamp of this NimbleEventsFieldsWithoutSortKey.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleEventsFieldsWithoutSortKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
