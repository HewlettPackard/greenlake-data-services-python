# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RecommendationInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host_group_id': 'str',
        'product_family': 'str',
        'size_mib': 'int'
    }

    attribute_map = {
        'host_group_id': 'hostGroupId',
        'product_family': 'productFamily',
        'size_mib': 'sizeMib'
    }

    def __init__(self, host_group_id=None, product_family=None, size_mib=None):  # noqa: E501
        """RecommendationInput - a model defined in OpenAPI"""  # noqa: E501

        self._host_group_id = None
        self._product_family = None
        self._size_mib = None
        self.discriminator = None

        if host_group_id is not None:
            self.host_group_id = host_group_id
        if product_family is not None:
            self.product_family = product_family
        self.size_mib = size_mib

    @property
    def host_group_id(self):
        """Gets the host_group_id of this RecommendationInput.  # noqa: E501

        host group id  # noqa: E501

        :return: The host_group_id of this RecommendationInput.  # noqa: E501
        :rtype: str
        """
        return self._host_group_id

    @host_group_id.setter
    def host_group_id(self, host_group_id):
        """Sets the host_group_id of this RecommendationInput.

        host group id  # noqa: E501

        :param host_group_id: The host_group_id of this RecommendationInput.  # noqa: E501
        :type: str
        """

        self._host_group_id = host_group_id

    @property
    def product_family(self):
        """Gets the product_family of this RecommendationInput.  # noqa: E501

        Storage device type  # noqa: E501

        :return: The product_family of this RecommendationInput.  # noqa: E501
        :rtype: str
        """
        return self._product_family

    @product_family.setter
    def product_family(self, product_family):
        """Sets the product_family of this RecommendationInput.

        Storage device type  # noqa: E501

        :param product_family: The product_family of this RecommendationInput.  # noqa: E501
        :type: str
        """

        self._product_family = product_family

    @property
    def size_mib(self):
        """Gets the size_mib of this RecommendationInput.  # noqa: E501

        volume size requirement  # noqa: E501

        :return: The size_mib of this RecommendationInput.  # noqa: E501
        :rtype: int
        """
        return self._size_mib

    @size_mib.setter
    def size_mib(self, size_mib):
        """Sets the size_mib of this RecommendationInput.

        volume size requirement  # noqa: E501

        :param size_mib: The size_mib of this RecommendationInput.  # noqa: E501
        :type: int
        """
        if size_mib is None:
            raise ValueError("Invalid value for `size_mib`, must not be `None`")  # noqa: E501

        self._size_mib = size_mib

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
