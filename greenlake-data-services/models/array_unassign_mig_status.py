# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArrayUnassignMigStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bytes_migrated': 'int',
        'bytes_remaining': 'int',
        'destination_arrays': 'list[NimbleArrSummary]',
        'estimated_completion_time': 'int',
        'id': 'str',
        'name': 'str',
        'start_time': 'int'
    }

    attribute_map = {
        'bytes_migrated': 'bytes_migrated',
        'bytes_remaining': 'bytes_remaining',
        'destination_arrays': 'destination_arrays',
        'estimated_completion_time': 'estimated_completion_time',
        'id': 'id',
        'name': 'name',
        'start_time': 'start_time'
    }

    def __init__(self, bytes_migrated=None, bytes_remaining=None, destination_arrays=None, estimated_completion_time=None, id=None, name=None, start_time=None):  # noqa: E501
        """ArrayUnassignMigStatus - a model defined in OpenAPI"""  # noqa: E501

        self._bytes_migrated = None
        self._bytes_remaining = None
        self._destination_arrays = None
        self._estimated_completion_time = None
        self._id = None
        self._name = None
        self._start_time = None
        self.discriminator = None

        if bytes_migrated is not None:
            self.bytes_migrated = bytes_migrated
        if bytes_remaining is not None:
            self.bytes_remaining = bytes_remaining
        if destination_arrays is not None:
            self.destination_arrays = destination_arrays
        if estimated_completion_time is not None:
            self.estimated_completion_time = estimated_completion_time
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if start_time is not None:
            self.start_time = start_time

    @property
    def bytes_migrated(self):
        """Gets the bytes_migrated of this ArrayUnassignMigStatus.  # noqa: E501

        Number of bytes already migrated to the destination arrays.  # noqa: E501

        :return: The bytes_migrated of this ArrayUnassignMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._bytes_migrated

    @bytes_migrated.setter
    def bytes_migrated(self, bytes_migrated):
        """Sets the bytes_migrated of this ArrayUnassignMigStatus.

        Number of bytes already migrated to the destination arrays.  # noqa: E501

        :param bytes_migrated: The bytes_migrated of this ArrayUnassignMigStatus.  # noqa: E501
        :type: int
        """

        self._bytes_migrated = bytes_migrated

    @property
    def bytes_remaining(self):
        """Gets the bytes_remaining of this ArrayUnassignMigStatus.  # noqa: E501

        Number of bytes yet to be migrated to the destination arrays.  # noqa: E501

        :return: The bytes_remaining of this ArrayUnassignMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._bytes_remaining

    @bytes_remaining.setter
    def bytes_remaining(self, bytes_remaining):
        """Sets the bytes_remaining of this ArrayUnassignMigStatus.

        Number of bytes yet to be migrated to the destination arrays.  # noqa: E501

        :param bytes_remaining: The bytes_remaining of this ArrayUnassignMigStatus.  # noqa: E501
        :type: int
        """

        self._bytes_remaining = bytes_remaining

    @property
    def destination_arrays(self):
        """Gets the destination_arrays of this ArrayUnassignMigStatus.  # noqa: E501

        List of arrays to which data is being migrated.  # noqa: E501

        :return: The destination_arrays of this ArrayUnassignMigStatus.  # noqa: E501
        :rtype: list[NimbleArrSummary]
        """
        return self._destination_arrays

    @destination_arrays.setter
    def destination_arrays(self, destination_arrays):
        """Sets the destination_arrays of this ArrayUnassignMigStatus.

        List of arrays to which data is being migrated.  # noqa: E501

        :param destination_arrays: The destination_arrays of this ArrayUnassignMigStatus.  # noqa: E501
        :type: list[NimbleArrSummary]
        """

        self._destination_arrays = destination_arrays

    @property
    def estimated_completion_time(self):
        """Gets the estimated_completion_time of this ArrayUnassignMigStatus.  # noqa: E501

        Estimated completion time. 0 if unknown.  # noqa: E501

        :return: The estimated_completion_time of this ArrayUnassignMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._estimated_completion_time

    @estimated_completion_time.setter
    def estimated_completion_time(self, estimated_completion_time):
        """Sets the estimated_completion_time of this ArrayUnassignMigStatus.

        Estimated completion time. 0 if unknown.  # noqa: E501

        :param estimated_completion_time: The estimated_completion_time of this ArrayUnassignMigStatus.  # noqa: E501
        :type: int
        """

        self._estimated_completion_time = estimated_completion_time

    @property
    def id(self):
        """Gets the id of this ArrayUnassignMigStatus.  # noqa: E501

        Unique identifier of the array being unassigned.  # noqa: E501

        :return: The id of this ArrayUnassignMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArrayUnassignMigStatus.

        Unique identifier of the array being unassigned.  # noqa: E501

        :param id: The id of this ArrayUnassignMigStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ArrayUnassignMigStatus.  # noqa: E501

        Name of the array being unassigned.  # noqa: E501

        :return: The name of this ArrayUnassignMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArrayUnassignMigStatus.

        Name of the array being unassigned.  # noqa: E501

        :param name: The name of this ArrayUnassignMigStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this ArrayUnassignMigStatus.  # noqa: E501

        Time when array unassign operation started.  # noqa: E501

        :return: The start_time of this ArrayUnassignMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ArrayUnassignMigStatus.

        Time when array unassign operation started.  # noqa: E501

        :param start_time: The start_time of this ArrayUnassignMigStatus.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayUnassignMigStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
