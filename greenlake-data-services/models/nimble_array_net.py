# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleArrayNet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ctrlr_a_support_ip': 'str',
        'ctrlr_b_support_ip': 'str',
        'member_gid': 'int',
        'name': 'str',
        'nic_list': 'list[NimbleNIC]'
    }

    attribute_map = {
        'ctrlr_a_support_ip': 'ctrlr_a_support_ip',
        'ctrlr_b_support_ip': 'ctrlr_b_support_ip',
        'member_gid': 'member_gid',
        'name': 'name',
        'nic_list': 'nic_list'
    }

    def __init__(self, ctrlr_a_support_ip=None, ctrlr_b_support_ip=None, member_gid=None, name=None, nic_list=None):  # noqa: E501
        """NimbleArrayNet - a model defined in OpenAPI"""  # noqa: E501

        self._ctrlr_a_support_ip = None
        self._ctrlr_b_support_ip = None
        self._member_gid = None
        self._name = None
        self._nic_list = None
        self.discriminator = None

        if ctrlr_a_support_ip is not None:
            self.ctrlr_a_support_ip = ctrlr_a_support_ip
        if ctrlr_b_support_ip is not None:
            self.ctrlr_b_support_ip = ctrlr_b_support_ip
        if member_gid is not None:
            self.member_gid = member_gid
        if name is not None:
            self.name = name
        if nic_list is not None:
            self.nic_list = nic_list

    @property
    def ctrlr_a_support_ip(self):
        """Gets the ctrlr_a_support_ip of this NimbleArrayNet.  # noqa: E501

        IP address of controller A.  # noqa: E501

        :return: The ctrlr_a_support_ip of this NimbleArrayNet.  # noqa: E501
        :rtype: str
        """
        return self._ctrlr_a_support_ip

    @ctrlr_a_support_ip.setter
    def ctrlr_a_support_ip(self, ctrlr_a_support_ip):
        """Sets the ctrlr_a_support_ip of this NimbleArrayNet.

        IP address of controller A.  # noqa: E501

        :param ctrlr_a_support_ip: The ctrlr_a_support_ip of this NimbleArrayNet.  # noqa: E501
        :type: str
        """

        self._ctrlr_a_support_ip = ctrlr_a_support_ip

    @property
    def ctrlr_b_support_ip(self):
        """Gets the ctrlr_b_support_ip of this NimbleArrayNet.  # noqa: E501

        IP address of controller B.  # noqa: E501

        :return: The ctrlr_b_support_ip of this NimbleArrayNet.  # noqa: E501
        :rtype: str
        """
        return self._ctrlr_b_support_ip

    @ctrlr_b_support_ip.setter
    def ctrlr_b_support_ip(self, ctrlr_b_support_ip):
        """Sets the ctrlr_b_support_ip of this NimbleArrayNet.

        IP address of controller B.  # noqa: E501

        :param ctrlr_b_support_ip: The ctrlr_b_support_ip of this NimbleArrayNet.  # noqa: E501
        :type: str
        """

        self._ctrlr_b_support_ip = ctrlr_b_support_ip

    @property
    def member_gid(self):
        """Gets the member_gid of this NimbleArrayNet.  # noqa: E501

        GID of member.  # noqa: E501

        :return: The member_gid of this NimbleArrayNet.  # noqa: E501
        :rtype: int
        """
        return self._member_gid

    @member_gid.setter
    def member_gid(self, member_gid):
        """Sets the member_gid of this NimbleArrayNet.

        GID of member.  # noqa: E501

        :param member_gid: The member_gid of this NimbleArrayNet.  # noqa: E501
        :type: int
        """

        self._member_gid = member_gid

    @property
    def name(self):
        """Gets the name of this NimbleArrayNet.  # noqa: E501

        Name of the array.  # noqa: E501

        :return: The name of this NimbleArrayNet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleArrayNet.

        Name of the array.  # noqa: E501

        :param name: The name of this NimbleArrayNet.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nic_list(self):
        """Gets the nic_list of this NimbleArrayNet.  # noqa: E501

        List of NICs.  # noqa: E501

        :return: The nic_list of this NimbleArrayNet.  # noqa: E501
        :rtype: list[NimbleNIC]
        """
        return self._nic_list

    @nic_list.setter
    def nic_list(self, nic_list):
        """Sets the nic_list of this NimbleArrayNet.

        List of NICs.  # noqa: E501

        :param nic_list: The nic_list of this NimbleArrayNet.  # noqa: E501
        :type: list[NimbleNIC]
        """

        self._nic_list = nic_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleArrayNet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
