# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EnclosureTypeSingle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNKNOWN = "ENCLOSURE_UNKNOWN"
    DC0 = "ENCLOSURE_DC0"
    DC1 = "ENCLOSURE_DC1"
    DC2 = "ENCLOSURE_DC2"
    DC3 = "ENCLOSURE_DC3"
    DC4 = "ENCLOSURE_DC4"
    DCS1 = "ENCLOSURE_DCS1"
    DCS2 = "ENCLOSURE_DCS2"
    DCN1 = "ENCLOSURE_DCN1"
    DCS3 = "ENCLOSURE_DCS3"
    DCS4 = "ENCLOSURE_DCS4"
    DCS5 = "ENCLOSURE_DCS5"
    DCS6 = "ENCLOSURE_DCS6"
    DCS7 = "ENCLOSURE_DCS7"
    DCS8 = "ENCLOSURE_DCS8"
    DCN2 = "ENCLOSURE_DCN2"
    DCN3 = "ENCLOSURE_DCN3"
    DCN4 = "ENCLOSURE_DCN4"
    DCS9 = "ENCLOSURE_DCS9"
    DCS10 = "ENCLOSURE_DCS10"
    DCS11 = "ENCLOSURE_DCS11"
    DCN5 = "ENCLOSURE_DCN5"
    DCS12 = "ENCLOSURE_DCS12"
    DCN6 = "ENCLOSURE_DCN6"
    DCF1 = "ENCLOSURE_DCF1"

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EnclosureTypeSingle - a model defined in OpenAPI"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnclosureTypeSingle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
