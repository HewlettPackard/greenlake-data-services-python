# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PortFCEdit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config_mode': 'str',
        'connection_type': 'str',
        'interupt_coalesce': 'bool',
        'label': 'str',
        'speed_configured': 'str',
        'unique_wwn': 'bool',
        'vcn': 'bool'
    }

    attribute_map = {
        'config_mode': 'configMode',
        'connection_type': 'connectionType',
        'interupt_coalesce': 'interuptCoalesce',
        'label': 'label',
        'speed_configured': 'speedConfigured',
        'unique_wwn': 'uniqueWWN',
        'vcn': 'vcn'
    }

    def __init__(self, config_mode=None, connection_type=None, interupt_coalesce=None, label=None, speed_configured=None, unique_wwn=None, vcn=None):  # noqa: E501
        """PortFCEdit - a model defined in OpenAPI"""  # noqa: E501

        self._config_mode = None
        self._connection_type = None
        self._interupt_coalesce = None
        self._label = None
        self._speed_configured = None
        self._unique_wwn = None
        self._vcn = None
        self.discriminator = None

        if config_mode is not None:
            self.config_mode = config_mode
        if connection_type is not None:
            self.connection_type = connection_type
        if interupt_coalesce is not None:
            self.interupt_coalesce = interupt_coalesce
        if label is not None:
            self.label = label
        if speed_configured is not None:
            self.speed_configured = speed_configured
        if unique_wwn is not None:
            self.unique_wwn = unique_wwn
        if vcn is not None:
            self.vcn = vcn

    @property
    def config_mode(self):
        """Gets the config_mode of this PortFCEdit.  # noqa: E501

        Configuration of Port. Possible Values: Disk, Host, RCFC, Peer  # noqa: E501

        :return: The config_mode of this PortFCEdit.  # noqa: E501
        :rtype: str
        """
        return self._config_mode

    @config_mode.setter
    def config_mode(self, config_mode):
        """Sets the config_mode of this PortFCEdit.

        Configuration of Port. Possible Values: Disk, Host, RCFC, Peer  # noqa: E501

        :param config_mode: The config_mode of this PortFCEdit.  # noqa: E501
        :type: str
        """

        self._config_mode = config_mode

    @property
    def connection_type(self):
        """Gets the connection_type of this PortFCEdit.  # noqa: E501

        Port connection Type. Possible Values: Point, Loop  # noqa: E501

        :return: The connection_type of this PortFCEdit.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this PortFCEdit.

        Port connection Type. Possible Values: Point, Loop  # noqa: E501

        :param connection_type: The connection_type of this PortFCEdit.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def interupt_coalesce(self):
        """Gets the interupt_coalesce of this PortFCEdit.  # noqa: E501

        Port interuptCoalesce enabled or not  # noqa: E501

        :return: The interupt_coalesce of this PortFCEdit.  # noqa: E501
        :rtype: bool
        """
        return self._interupt_coalesce

    @interupt_coalesce.setter
    def interupt_coalesce(self, interupt_coalesce):
        """Sets the interupt_coalesce of this PortFCEdit.

        Port interuptCoalesce enabled or not  # noqa: E501

        :param interupt_coalesce: The interupt_coalesce of this PortFCEdit.  # noqa: E501
        :type: bool
        """

        self._interupt_coalesce = interupt_coalesce

    @property
    def label(self):
        """Gets the label of this PortFCEdit.  # noqa: E501

        Port name  # noqa: E501

        :return: The label of this PortFCEdit.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PortFCEdit.

        Port name  # noqa: E501

        :param label: The label of this PortFCEdit.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def speed_configured(self):
        """Gets the speed_configured of this PortFCEdit.  # noqa: E501

        Port speed. Possible Values: auto, \"4\", \"8\", \"16\", \"32\"  # noqa: E501

        :return: The speed_configured of this PortFCEdit.  # noqa: E501
        :rtype: str
        """
        return self._speed_configured

    @speed_configured.setter
    def speed_configured(self, speed_configured):
        """Sets the speed_configured of this PortFCEdit.

        Port speed. Possible Values: auto, \"4\", \"8\", \"16\", \"32\"  # noqa: E501

        :param speed_configured: The speed_configured of this PortFCEdit.  # noqa: E501
        :type: str
        """

        self._speed_configured = speed_configured

    @property
    def unique_wwn(self):
        """Gets the unique_wwn of this PortFCEdit.  # noqa: E501

        Port uniquewwn enabled or not  # noqa: E501

        :return: The unique_wwn of this PortFCEdit.  # noqa: E501
        :rtype: bool
        """
        return self._unique_wwn

    @unique_wwn.setter
    def unique_wwn(self, unique_wwn):
        """Sets the unique_wwn of this PortFCEdit.

        Port uniquewwn enabled or not  # noqa: E501

        :param unique_wwn: The unique_wwn of this PortFCEdit.  # noqa: E501
        :type: bool
        """

        self._unique_wwn = unique_wwn

    @property
    def vcn(self):
        """Gets the vcn of this PortFCEdit.  # noqa: E501

        VLUN change notification enabled or not  # noqa: E501

        :return: The vcn of this PortFCEdit.  # noqa: E501
        :rtype: bool
        """
        return self._vcn

    @vcn.setter
    def vcn(self, vcn):
        """Sets the vcn of this PortFCEdit.

        VLUN change notification enabled or not  # noqa: E501

        :param vcn: The vcn of this PortFCEdit.  # noqa: E501
        :type: bool
        """

        self._vcn = vcn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortFCEdit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
