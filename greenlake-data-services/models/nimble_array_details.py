# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleArrayDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_flash': 'bool',
        'allow_lower_limits': 'bool',
        'available_bytes': 'int',
        'brand': 'str',
        'create_pool': 'bool',
        'creation_time': 'int',
        'ctrlr_a_support_ip': 'str',
        'ctrlr_b_support_ip': 'str',
        'customer_id': 'str',
        'dedupe_capacity_bytes': 'int',
        'dedupe_usage_bytes': 'int',
        'extended_model': 'str',
        'fc_port_count': 'int',
        'force': 'bool',
        'full_name': 'str',
        'generation': 'int',
        'gig_nic_port_count': 'int',
        'group_state': 'str',
        'is_fully_dedupe_capable': 'bool',
        'is_sfa': 'bool',
        'is_supported_hw_config': 'bool',
        'last_modified': 'int',
        'model_sub_type': 'str',
        'nic_list': 'list[NICDetails]',
        'oem': 'str',
        'pending_delete_bytes': 'int',
        'pool_description': 'str',
        'pool_name': 'str',
        'public_key': 'PublicKeyDetails',
        'raw_capacity_bytes': 'int',
        'resource_uri': 'str',
        'role': 'str',
        'search_name': 'str',
        'secondary_mgmt_ip': 'str',
        'snap_compression': 'float',
        'snap_saved_bytes': 'int',
        'snap_space_reduction': 'float',
        'snap_usage_bytes': 'int',
        'snap_usage_uncompressed_bytes': 'int',
        'status': 'str',
        'ten_gig_sfp_nic_port_count': 'int',
        'ten_gig_t_nic_port_count': 'int',
        'upgrade': 'UpgradeDetails',
        'usable_cache_capacity_bytes': 'int',
        'usable_capacity_bytes': 'int',
        'usage': 'int',
        'usage_valid': 'bool',
        'version': 'str',
        'vol_compression': 'float',
        'vol_saved_bytes': 'int',
        'vol_usage_bytes': 'int',
        'vol_usage_uncompressed_bytes': 'int',
        'zconf_ipaddrs': 'list[ZConfIPaddrs]'
    }

    attribute_map = {
        'all_flash': 'all_flash',
        'allow_lower_limits': 'allow_lower_limits',
        'available_bytes': 'available_bytes',
        'brand': 'brand',
        'create_pool': 'create_pool',
        'creation_time': 'creation_time',
        'ctrlr_a_support_ip': 'ctrlr_a_support_ip',
        'ctrlr_b_support_ip': 'ctrlr_b_support_ip',
        'customer_id': 'customerId',
        'dedupe_capacity_bytes': 'dedupe_capacity_bytes',
        'dedupe_usage_bytes': 'dedupe_usage_bytes',
        'extended_model': 'extended_model',
        'fc_port_count': 'fc_port_count',
        'force': 'force',
        'full_name': 'full_name',
        'generation': 'generation',
        'gig_nic_port_count': 'gig_nic_port_count',
        'group_state': 'group_state',
        'is_fully_dedupe_capable': 'is_fully_dedupe_capable',
        'is_sfa': 'is_sfa',
        'is_supported_hw_config': 'is_supported_hw_config',
        'last_modified': 'last_modified',
        'model_sub_type': 'model_sub_type',
        'nic_list': 'nic_list',
        'oem': 'oem',
        'pending_delete_bytes': 'pending_delete_bytes',
        'pool_description': 'pool_description',
        'pool_name': 'pool_name',
        'public_key': 'public_key',
        'raw_capacity_bytes': 'raw_capacity_bytes',
        'resource_uri': 'resourceUri',
        'role': 'role',
        'search_name': 'search_name',
        'secondary_mgmt_ip': 'secondary_mgmt_ip',
        'snap_compression': 'snap_compression',
        'snap_saved_bytes': 'snap_saved_bytes',
        'snap_space_reduction': 'snap_space_reduction',
        'snap_usage_bytes': 'snap_usage_bytes',
        'snap_usage_uncompressed_bytes': 'snap_usage_uncompressed_bytes',
        'status': 'status',
        'ten_gig_sfp_nic_port_count': 'ten_gig_sfp_nic_port_count',
        'ten_gig_t_nic_port_count': 'ten_gig_t_nic_port_count',
        'upgrade': 'upgrade',
        'usable_cache_capacity_bytes': 'usable_cache_capacity_bytes',
        'usable_capacity_bytes': 'usable_capacity_bytes',
        'usage': 'usage',
        'usage_valid': 'usage_valid',
        'version': 'version',
        'vol_compression': 'vol_compression',
        'vol_saved_bytes': 'vol_saved_bytes',
        'vol_usage_bytes': 'vol_usage_bytes',
        'vol_usage_uncompressed_bytes': 'vol_usage_uncompressed_bytes',
        'zconf_ipaddrs': 'zconf_ipaddrs'
    }

    def __init__(self, all_flash=None, allow_lower_limits=None, available_bytes=None, brand=None, create_pool=None, creation_time=None, ctrlr_a_support_ip=None, ctrlr_b_support_ip=None, customer_id=None, dedupe_capacity_bytes=None, dedupe_usage_bytes=None, extended_model=None, fc_port_count=None, force=None, full_name=None, generation=None, gig_nic_port_count=None, group_state=None, is_fully_dedupe_capable=None, is_sfa=None, is_supported_hw_config=None, last_modified=None, model_sub_type=None, nic_list=None, oem=None, pending_delete_bytes=None, pool_description=None, pool_name=None, public_key=None, raw_capacity_bytes=None, resource_uri=None, role=None, search_name=None, secondary_mgmt_ip=None, snap_compression=None, snap_saved_bytes=None, snap_space_reduction=None, snap_usage_bytes=None, snap_usage_uncompressed_bytes=None, status=None, ten_gig_sfp_nic_port_count=None, ten_gig_t_nic_port_count=None, upgrade=None, usable_cache_capacity_bytes=None, usable_capacity_bytes=None, usage=None, usage_valid=None, version=None, vol_compression=None, vol_saved_bytes=None, vol_usage_bytes=None, vol_usage_uncompressed_bytes=None, zconf_ipaddrs=None):  # noqa: E501
        """NimbleArrayDetails - a model defined in OpenAPI"""  # noqa: E501

        self._all_flash = None
        self._allow_lower_limits = None
        self._available_bytes = None
        self._brand = None
        self._create_pool = None
        self._creation_time = None
        self._ctrlr_a_support_ip = None
        self._ctrlr_b_support_ip = None
        self._customer_id = None
        self._dedupe_capacity_bytes = None
        self._dedupe_usage_bytes = None
        self._extended_model = None
        self._fc_port_count = None
        self._force = None
        self._full_name = None
        self._generation = None
        self._gig_nic_port_count = None
        self._group_state = None
        self._is_fully_dedupe_capable = None
        self._is_sfa = None
        self._is_supported_hw_config = None
        self._last_modified = None
        self._model_sub_type = None
        self._nic_list = None
        self._oem = None
        self._pending_delete_bytes = None
        self._pool_description = None
        self._pool_name = None
        self._public_key = None
        self._raw_capacity_bytes = None
        self._resource_uri = None
        self._role = None
        self._search_name = None
        self._secondary_mgmt_ip = None
        self._snap_compression = None
        self._snap_saved_bytes = None
        self._snap_space_reduction = None
        self._snap_usage_bytes = None
        self._snap_usage_uncompressed_bytes = None
        self._status = None
        self._ten_gig_sfp_nic_port_count = None
        self._ten_gig_t_nic_port_count = None
        self._upgrade = None
        self._usable_cache_capacity_bytes = None
        self._usable_capacity_bytes = None
        self._usage = None
        self._usage_valid = None
        self._version = None
        self._vol_compression = None
        self._vol_saved_bytes = None
        self._vol_usage_bytes = None
        self._vol_usage_uncompressed_bytes = None
        self._zconf_ipaddrs = None
        self.discriminator = None

        if all_flash is not None:
            self.all_flash = all_flash
        if allow_lower_limits is not None:
            self.allow_lower_limits = allow_lower_limits
        if available_bytes is not None:
            self.available_bytes = available_bytes
        if brand is not None:
            self.brand = brand
        if create_pool is not None:
            self.create_pool = create_pool
        if creation_time is not None:
            self.creation_time = creation_time
        if ctrlr_a_support_ip is not None:
            self.ctrlr_a_support_ip = ctrlr_a_support_ip
        if ctrlr_b_support_ip is not None:
            self.ctrlr_b_support_ip = ctrlr_b_support_ip
        if customer_id is not None:
            self.customer_id = customer_id
        if dedupe_capacity_bytes is not None:
            self.dedupe_capacity_bytes = dedupe_capacity_bytes
        if dedupe_usage_bytes is not None:
            self.dedupe_usage_bytes = dedupe_usage_bytes
        if extended_model is not None:
            self.extended_model = extended_model
        if fc_port_count is not None:
            self.fc_port_count = fc_port_count
        if force is not None:
            self.force = force
        if full_name is not None:
            self.full_name = full_name
        if generation is not None:
            self.generation = generation
        if gig_nic_port_count is not None:
            self.gig_nic_port_count = gig_nic_port_count
        if group_state is not None:
            self.group_state = group_state
        if is_fully_dedupe_capable is not None:
            self.is_fully_dedupe_capable = is_fully_dedupe_capable
        if is_sfa is not None:
            self.is_sfa = is_sfa
        if is_supported_hw_config is not None:
            self.is_supported_hw_config = is_supported_hw_config
        if last_modified is not None:
            self.last_modified = last_modified
        if model_sub_type is not None:
            self.model_sub_type = model_sub_type
        if nic_list is not None:
            self.nic_list = nic_list
        if oem is not None:
            self.oem = oem
        if pending_delete_bytes is not None:
            self.pending_delete_bytes = pending_delete_bytes
        if pool_description is not None:
            self.pool_description = pool_description
        if pool_name is not None:
            self.pool_name = pool_name
        if public_key is not None:
            self.public_key = public_key
        if raw_capacity_bytes is not None:
            self.raw_capacity_bytes = raw_capacity_bytes
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if role is not None:
            self.role = role
        if search_name is not None:
            self.search_name = search_name
        if secondary_mgmt_ip is not None:
            self.secondary_mgmt_ip = secondary_mgmt_ip
        if snap_compression is not None:
            self.snap_compression = snap_compression
        if snap_saved_bytes is not None:
            self.snap_saved_bytes = snap_saved_bytes
        if snap_space_reduction is not None:
            self.snap_space_reduction = snap_space_reduction
        if snap_usage_bytes is not None:
            self.snap_usage_bytes = snap_usage_bytes
        if snap_usage_uncompressed_bytes is not None:
            self.snap_usage_uncompressed_bytes = snap_usage_uncompressed_bytes
        if status is not None:
            self.status = status
        if ten_gig_sfp_nic_port_count is not None:
            self.ten_gig_sfp_nic_port_count = ten_gig_sfp_nic_port_count
        if ten_gig_t_nic_port_count is not None:
            self.ten_gig_t_nic_port_count = ten_gig_t_nic_port_count
        if upgrade is not None:
            self.upgrade = upgrade
        if usable_cache_capacity_bytes is not None:
            self.usable_cache_capacity_bytes = usable_cache_capacity_bytes
        if usable_capacity_bytes is not None:
            self.usable_capacity_bytes = usable_capacity_bytes
        if usage is not None:
            self.usage = usage
        if usage_valid is not None:
            self.usage_valid = usage_valid
        if version is not None:
            self.version = version
        if vol_compression is not None:
            self.vol_compression = vol_compression
        if vol_saved_bytes is not None:
            self.vol_saved_bytes = vol_saved_bytes
        if vol_usage_bytes is not None:
            self.vol_usage_bytes = vol_usage_bytes
        if vol_usage_uncompressed_bytes is not None:
            self.vol_usage_uncompressed_bytes = vol_usage_uncompressed_bytes
        if zconf_ipaddrs is not None:
            self.zconf_ipaddrs = zconf_ipaddrs

    @property
    def all_flash(self):
        """Gets the all_flash of this NimbleArrayDetails.  # noqa: E501

        Whether it is an all-flash array.  # noqa: E501

        :return: The all_flash of this NimbleArrayDetails.  # noqa: E501
        :rtype: bool
        """
        return self._all_flash

    @all_flash.setter
    def all_flash(self, all_flash):
        """Sets the all_flash of this NimbleArrayDetails.

        Whether it is an all-flash array.  # noqa: E501

        :param all_flash: The all_flash of this NimbleArrayDetails.  # noqa: E501
        :type: bool
        """

        self._all_flash = all_flash

    @property
    def allow_lower_limits(self):
        """Gets the allow_lower_limits of this NimbleArrayDetails.  # noqa: E501

        Setting this field to 'true'  will allow the addition of an array with lower limits to a pool with higher limits.  # noqa: E501

        :return: The allow_lower_limits of this NimbleArrayDetails.  # noqa: E501
        :rtype: bool
        """
        return self._allow_lower_limits

    @allow_lower_limits.setter
    def allow_lower_limits(self, allow_lower_limits):
        """Sets the allow_lower_limits of this NimbleArrayDetails.

        Setting this field to 'true'  will allow the addition of an array with lower limits to a pool with higher limits.  # noqa: E501

        :param allow_lower_limits: The allow_lower_limits of this NimbleArrayDetails.  # noqa: E501
        :type: bool
        """

        self._allow_lower_limits = allow_lower_limits

    @property
    def available_bytes(self):
        """Gets the available_bytes of this NimbleArrayDetails.  # noqa: E501

        The available space of the array.  # noqa: E501

        :return: The available_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._available_bytes

    @available_bytes.setter
    def available_bytes(self, available_bytes):
        """Sets the available_bytes of this NimbleArrayDetails.

        The available space of the array.  # noqa: E501

        :param available_bytes: The available_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._available_bytes = available_bytes

    @property
    def brand(self):
        """Gets the brand of this NimbleArrayDetails.  # noqa: E501

        Brand of the array. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The brand of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this NimbleArrayDetails.

        Brand of the array. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param brand: The brand of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def create_pool(self):
        """Gets the create_pool of this NimbleArrayDetails.  # noqa: E501

        Whether to create associated pool during array create.  # noqa: E501

        :return: The create_pool of this NimbleArrayDetails.  # noqa: E501
        :rtype: bool
        """
        return self._create_pool

    @create_pool.setter
    def create_pool(self, create_pool):
        """Sets the create_pool of this NimbleArrayDetails.

        Whether to create associated pool during array create.  # noqa: E501

        :param create_pool: The create_pool of this NimbleArrayDetails.  # noqa: E501
        :type: bool
        """

        self._create_pool = create_pool

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleArrayDetails.  # noqa: E501

        Time when this array object was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The creation_time of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleArrayDetails.

        Time when this array object was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param creation_time: The creation_time of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def ctrlr_a_support_ip(self):
        """Gets the ctrlr_a_support_ip of this NimbleArrayDetails.  # noqa: E501

        Controller A Support IP address.  # noqa: E501

        :return: The ctrlr_a_support_ip of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._ctrlr_a_support_ip

    @ctrlr_a_support_ip.setter
    def ctrlr_a_support_ip(self, ctrlr_a_support_ip):
        """Sets the ctrlr_a_support_ip of this NimbleArrayDetails.

        Controller A Support IP address.  # noqa: E501

        :param ctrlr_a_support_ip: The ctrlr_a_support_ip of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._ctrlr_a_support_ip = ctrlr_a_support_ip

    @property
    def ctrlr_b_support_ip(self):
        """Gets the ctrlr_b_support_ip of this NimbleArrayDetails.  # noqa: E501

        Controller B Support IP address.  # noqa: E501

        :return: The ctrlr_b_support_ip of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._ctrlr_b_support_ip

    @ctrlr_b_support_ip.setter
    def ctrlr_b_support_ip(self, ctrlr_b_support_ip):
        """Sets the ctrlr_b_support_ip of this NimbleArrayDetails.

        Controller B Support IP address.  # noqa: E501

        :param ctrlr_b_support_ip: The ctrlr_b_support_ip of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._ctrlr_b_support_ip = ctrlr_b_support_ip

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleArrayDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleArrayDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def dedupe_capacity_bytes(self):
        """Gets the dedupe_capacity_bytes of this NimbleArrayDetails.  # noqa: E501

        The dedupe capacity of a hybrid array. Does not apply to all-flash arrays.  # noqa: E501

        :return: The dedupe_capacity_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._dedupe_capacity_bytes

    @dedupe_capacity_bytes.setter
    def dedupe_capacity_bytes(self, dedupe_capacity_bytes):
        """Sets the dedupe_capacity_bytes of this NimbleArrayDetails.

        The dedupe capacity of a hybrid array. Does not apply to all-flash arrays.  # noqa: E501

        :param dedupe_capacity_bytes: The dedupe_capacity_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._dedupe_capacity_bytes = dedupe_capacity_bytes

    @property
    def dedupe_usage_bytes(self):
        """Gets the dedupe_usage_bytes of this NimbleArrayDetails.  # noqa: E501

        The dedupe usage of a hybrid array. Does not apply to all-flash arrays.  # noqa: E501

        :return: The dedupe_usage_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._dedupe_usage_bytes

    @dedupe_usage_bytes.setter
    def dedupe_usage_bytes(self, dedupe_usage_bytes):
        """Sets the dedupe_usage_bytes of this NimbleArrayDetails.

        The dedupe usage of a hybrid array. Does not apply to all-flash arrays.  # noqa: E501

        :param dedupe_usage_bytes: The dedupe_usage_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._dedupe_usage_bytes = dedupe_usage_bytes

    @property
    def extended_model(self):
        """Gets the extended_model of this NimbleArrayDetails.  # noqa: E501

        Extended model of the array. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The extended_model of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._extended_model

    @extended_model.setter
    def extended_model(self, extended_model):
        """Sets the extended_model of this NimbleArrayDetails.

        Extended model of the array. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param extended_model: The extended_model of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._extended_model = extended_model

    @property
    def fc_port_count(self):
        """Gets the fc_port_count of this NimbleArrayDetails.  # noqa: E501

        Count of Fibre Channel Ports installed on the array.  # noqa: E501

        :return: The fc_port_count of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._fc_port_count

    @fc_port_count.setter
    def fc_port_count(self, fc_port_count):
        """Sets the fc_port_count of this NimbleArrayDetails.

        Count of Fibre Channel Ports installed on the array.  # noqa: E501

        :param fc_port_count: The fc_port_count of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._fc_port_count = fc_port_count

    @property
    def force(self):
        """Gets the force of this NimbleArrayDetails.  # noqa: E501

        Forcibly delete the specified array.  # noqa: E501

        :return: The force of this NimbleArrayDetails.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this NimbleArrayDetails.

        Forcibly delete the specified array.  # noqa: E501

        :param force: The force of this NimbleArrayDetails.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def full_name(self):
        """Gets the full_name of this NimbleArrayDetails.  # noqa: E501

        The array's fully qualified name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The full_name of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this NimbleArrayDetails.

        The array's fully qualified name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param full_name: The full_name of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def generation(self):
        """Gets the generation of this NimbleArrayDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleArrayDetails.

        generation  # noqa: E501

        :param generation: The generation of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def gig_nic_port_count(self):
        """Gets the gig_nic_port_count of this NimbleArrayDetails.  # noqa: E501

        Count of 1G NIC Ports installed on the array.  # noqa: E501

        :return: The gig_nic_port_count of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._gig_nic_port_count

    @gig_nic_port_count.setter
    def gig_nic_port_count(self, gig_nic_port_count):
        """Sets the gig_nic_port_count of this NimbleArrayDetails.

        Count of 1G NIC Ports installed on the array.  # noqa: E501

        :param gig_nic_port_count: The gig_nic_port_count of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._gig_nic_port_count = gig_nic_port_count

    @property
    def group_state(self):
        """Gets the group_state of this NimbleArrayDetails.  # noqa: E501


        :return: The group_state of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._group_state

    @group_state.setter
    def group_state(self, group_state):
        """Sets the group_state of this NimbleArrayDetails.


        :param group_state: The group_state of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._group_state = group_state

    @property
    def is_fully_dedupe_capable(self):
        """Gets the is_fully_dedupe_capable of this NimbleArrayDetails.  # noqa: E501

        Flag specifies if the array fully capable to dedupe its usable capacity or not.  # noqa: E501

        :return: The is_fully_dedupe_capable of this NimbleArrayDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_fully_dedupe_capable

    @is_fully_dedupe_capable.setter
    def is_fully_dedupe_capable(self, is_fully_dedupe_capable):
        """Sets the is_fully_dedupe_capable of this NimbleArrayDetails.

        Flag specifies if the array fully capable to dedupe its usable capacity or not.  # noqa: E501

        :param is_fully_dedupe_capable: The is_fully_dedupe_capable of this NimbleArrayDetails.  # noqa: E501
        :type: bool
        """

        self._is_fully_dedupe_capable = is_fully_dedupe_capable

    @property
    def is_sfa(self):
        """Gets the is_sfa of this NimbleArrayDetails.  # noqa: E501

        Flag specifies if the array is sfa or not.  # noqa: E501

        :return: The is_sfa of this NimbleArrayDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_sfa

    @is_sfa.setter
    def is_sfa(self, is_sfa):
        """Sets the is_sfa of this NimbleArrayDetails.

        Flag specifies if the array is sfa or not.  # noqa: E501

        :param is_sfa: The is_sfa of this NimbleArrayDetails.  # noqa: E501
        :type: bool
        """

        self._is_sfa = is_sfa

    @property
    def is_supported_hw_config(self):
        """Gets the is_supported_hw_config of this NimbleArrayDetails.  # noqa: E501

        Whether it is a supported hardware config.  # noqa: E501

        :return: The is_supported_hw_config of this NimbleArrayDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_supported_hw_config

    @is_supported_hw_config.setter
    def is_supported_hw_config(self, is_supported_hw_config):
        """Sets the is_supported_hw_config of this NimbleArrayDetails.

        Whether it is a supported hardware config.  # noqa: E501

        :param is_supported_hw_config: The is_supported_hw_config of this NimbleArrayDetails.  # noqa: E501
        :type: bool
        """

        self._is_supported_hw_config = is_supported_hw_config

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleArrayDetails.  # noqa: E501

        Time when this array object was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The last_modified of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleArrayDetails.

        Time when this array object was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param last_modified: The last_modified of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def model_sub_type(self):
        """Gets the model_sub_type of this NimbleArrayDetails.  # noqa: E501

        Array model sub-type.  # noqa: E501

        :return: The model_sub_type of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._model_sub_type

    @model_sub_type.setter
    def model_sub_type(self, model_sub_type):
        """Sets the model_sub_type of this NimbleArrayDetails.

        Array model sub-type.  # noqa: E501

        :param model_sub_type: The model_sub_type of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._model_sub_type = model_sub_type

    @property
    def nic_list(self):
        """Gets the nic_list of this NimbleArrayDetails.  # noqa: E501

        List of NICs information. Used while creating an array.  # noqa: E501

        :return: The nic_list of this NimbleArrayDetails.  # noqa: E501
        :rtype: list[NICDetails]
        """
        return self._nic_list

    @nic_list.setter
    def nic_list(self, nic_list):
        """Sets the nic_list of this NimbleArrayDetails.

        List of NICs information. Used while creating an array.  # noqa: E501

        :param nic_list: The nic_list of this NimbleArrayDetails.  # noqa: E501
        :type: list[NICDetails]
        """

        self._nic_list = nic_list

    @property
    def oem(self):
        """Gets the oem of this NimbleArrayDetails.  # noqa: E501

        OEM brand of the array. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The oem of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """Sets the oem of this NimbleArrayDetails.

        OEM brand of the array. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param oem: The oem of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._oem = oem

    @property
    def pending_delete_bytes(self):
        """Gets the pending_delete_bytes of this NimbleArrayDetails.  # noqa: E501

        The pending delete bytes in he tarray.  # noqa: E501

        :return: The pending_delete_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._pending_delete_bytes

    @pending_delete_bytes.setter
    def pending_delete_bytes(self, pending_delete_bytes):
        """Sets the pending_delete_bytes of this NimbleArrayDetails.

        The pending delete bytes in he tarray.  # noqa: E501

        :param pending_delete_bytes: The pending_delete_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._pending_delete_bytes = pending_delete_bytes

    @property
    def pool_description(self):
        """Gets the pool_description of this NimbleArrayDetails.  # noqa: E501

        Text description of the pool to be created during array creation. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The pool_description of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._pool_description

    @pool_description.setter
    def pool_description(self, pool_description):
        """Sets the pool_description of this NimbleArrayDetails.

        Text description of the pool to be created during array creation. String of up to 255 printable ASCII characters.  # noqa: E501

        :param pool_description: The pool_description of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._pool_description = pool_description

    @property
    def pool_name(self):
        """Gets the pool_name of this NimbleArrayDetails.  # noqa: E501

        Name of pool to which this is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The pool_name of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this NimbleArrayDetails.

        Name of pool to which this is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param pool_name: The pool_name of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def public_key(self):
        """Gets the public_key of this NimbleArrayDetails.  # noqa: E501


        :return: The public_key of this NimbleArrayDetails.  # noqa: E501
        :rtype: PublicKeyDetails
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this NimbleArrayDetails.


        :param public_key: The public_key of this NimbleArrayDetails.  # noqa: E501
        :type: PublicKeyDetails
        """

        self._public_key = public_key

    @property
    def raw_capacity_bytes(self):
        """Gets the raw_capacity_bytes of this NimbleArrayDetails.  # noqa: E501

        The raw capacity bytes of the array.  # noqa: E501

        :return: The raw_capacity_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._raw_capacity_bytes

    @raw_capacity_bytes.setter
    def raw_capacity_bytes(self, raw_capacity_bytes):
        """Sets the raw_capacity_bytes of this NimbleArrayDetails.

        The raw capacity bytes of the array.  # noqa: E501

        :param raw_capacity_bytes: The raw_capacity_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._raw_capacity_bytes = raw_capacity_bytes

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleArrayDetails.  # noqa: E501


        :return: The resource_uri of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleArrayDetails.


        :param resource_uri: The resource_uri of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def role(self):
        """Gets the role of this NimbleArrayDetails.  # noqa: E501


        :return: The role of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this NimbleArrayDetails.


        :param role: The role of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def search_name(self):
        """Gets the search_name of this NimbleArrayDetails.  # noqa: E501

        The array name used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :return: The search_name of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._search_name

    @search_name.setter
    def search_name(self, search_name):
        """Sets the search_name of this NimbleArrayDetails.

        The array name used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :param search_name: The search_name of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._search_name = search_name

    @property
    def secondary_mgmt_ip(self):
        """Gets the secondary_mgmt_ip of this NimbleArrayDetails.  # noqa: E501

        Secondary management IP address for the Group.  # noqa: E501

        :return: The secondary_mgmt_ip of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._secondary_mgmt_ip

    @secondary_mgmt_ip.setter
    def secondary_mgmt_ip(self, secondary_mgmt_ip):
        """Sets the secondary_mgmt_ip of this NimbleArrayDetails.

        Secondary management IP address for the Group.  # noqa: E501

        :param secondary_mgmt_ip: The secondary_mgmt_ip of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._secondary_mgmt_ip = secondary_mgmt_ip

    @property
    def snap_compression(self):
        """Gets the snap_compression of this NimbleArrayDetails.  # noqa: E501

        The compression rate of snapshots in the array expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The snap_compression of this NimbleArrayDetails.  # noqa: E501
        :rtype: float
        """
        return self._snap_compression

    @snap_compression.setter
    def snap_compression(self, snap_compression):
        """Sets the snap_compression of this NimbleArrayDetails.

        The compression rate of snapshots in the array expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param snap_compression: The snap_compression of this NimbleArrayDetails.  # noqa: E501
        :type: float
        """

        self._snap_compression = snap_compression

    @property
    def snap_saved_bytes(self):
        """Gets the snap_saved_bytes of this NimbleArrayDetails.  # noqa: E501

        The saved space of snapshots in the array.  # noqa: E501

        :return: The snap_saved_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._snap_saved_bytes

    @snap_saved_bytes.setter
    def snap_saved_bytes(self, snap_saved_bytes):
        """Sets the snap_saved_bytes of this NimbleArrayDetails.

        The saved space of snapshots in the array.  # noqa: E501

        :param snap_saved_bytes: The snap_saved_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._snap_saved_bytes = snap_saved_bytes

    @property
    def snap_space_reduction(self):
        """Gets the snap_space_reduction of this NimbleArrayDetails.  # noqa: E501

        The space reduction rate of snapshots in the array expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The snap_space_reduction of this NimbleArrayDetails.  # noqa: E501
        :rtype: float
        """
        return self._snap_space_reduction

    @snap_space_reduction.setter
    def snap_space_reduction(self, snap_space_reduction):
        """Sets the snap_space_reduction of this NimbleArrayDetails.

        The space reduction rate of snapshots in the array expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param snap_space_reduction: The snap_space_reduction of this NimbleArrayDetails.  # noqa: E501
        :type: float
        """

        self._snap_space_reduction = snap_space_reduction

    @property
    def snap_usage_bytes(self):
        """Gets the snap_usage_bytes of this NimbleArrayDetails.  # noqa: E501

        The compressed usage of snapshots in array.  # noqa: E501

        :return: The snap_usage_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._snap_usage_bytes

    @snap_usage_bytes.setter
    def snap_usage_bytes(self, snap_usage_bytes):
        """Sets the snap_usage_bytes of this NimbleArrayDetails.

        The compressed usage of snapshots in array.  # noqa: E501

        :param snap_usage_bytes: The snap_usage_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._snap_usage_bytes = snap_usage_bytes

    @property
    def snap_usage_uncompressed_bytes(self):
        """Gets the snap_usage_uncompressed_bytes of this NimbleArrayDetails.  # noqa: E501

        Snap usage uncompressed bytes.  # noqa: E501

        :return: The snap_usage_uncompressed_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._snap_usage_uncompressed_bytes

    @snap_usage_uncompressed_bytes.setter
    def snap_usage_uncompressed_bytes(self, snap_usage_uncompressed_bytes):
        """Sets the snap_usage_uncompressed_bytes of this NimbleArrayDetails.

        Snap usage uncompressed bytes.  # noqa: E501

        :param snap_usage_uncompressed_bytes: The snap_usage_uncompressed_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._snap_usage_uncompressed_bytes = snap_usage_uncompressed_bytes

    @property
    def status(self):
        """Gets the status of this NimbleArrayDetails.  # noqa: E501


        :return: The status of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NimbleArrayDetails.


        :param status: The status of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def ten_gig_sfp_nic_port_count(self):
        """Gets the ten_gig_sfp_nic_port_count of this NimbleArrayDetails.  # noqa: E501

        Count of 10G SFP NIC Ports installed on the array.  # noqa: E501

        :return: The ten_gig_sfp_nic_port_count of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._ten_gig_sfp_nic_port_count

    @ten_gig_sfp_nic_port_count.setter
    def ten_gig_sfp_nic_port_count(self, ten_gig_sfp_nic_port_count):
        """Sets the ten_gig_sfp_nic_port_count of this NimbleArrayDetails.

        Count of 10G SFP NIC Ports installed on the array.  # noqa: E501

        :param ten_gig_sfp_nic_port_count: The ten_gig_sfp_nic_port_count of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._ten_gig_sfp_nic_port_count = ten_gig_sfp_nic_port_count

    @property
    def ten_gig_t_nic_port_count(self):
        """Gets the ten_gig_t_nic_port_count of this NimbleArrayDetails.  # noqa: E501

        Count of 10G BaseT NIC Ports installed on the array.  # noqa: E501

        :return: The ten_gig_t_nic_port_count of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._ten_gig_t_nic_port_count

    @ten_gig_t_nic_port_count.setter
    def ten_gig_t_nic_port_count(self, ten_gig_t_nic_port_count):
        """Sets the ten_gig_t_nic_port_count of this NimbleArrayDetails.

        Count of 10G BaseT NIC Ports installed on the array.  # noqa: E501

        :param ten_gig_t_nic_port_count: The ten_gig_t_nic_port_count of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._ten_gig_t_nic_port_count = ten_gig_t_nic_port_count

    @property
    def upgrade(self):
        """Gets the upgrade of this NimbleArrayDetails.  # noqa: E501


        :return: The upgrade of this NimbleArrayDetails.  # noqa: E501
        :rtype: UpgradeDetails
        """
        return self._upgrade

    @upgrade.setter
    def upgrade(self, upgrade):
        """Sets the upgrade of this NimbleArrayDetails.


        :param upgrade: The upgrade of this NimbleArrayDetails.  # noqa: E501
        :type: UpgradeDetails
        """

        self._upgrade = upgrade

    @property
    def usable_cache_capacity_bytes(self):
        """Gets the usable_cache_capacity_bytes of this NimbleArrayDetails.  # noqa: E501

        Usable cache capacity in bytes.  # noqa: E501

        :return: The usable_cache_capacity_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._usable_cache_capacity_bytes

    @usable_cache_capacity_bytes.setter
    def usable_cache_capacity_bytes(self, usable_cache_capacity_bytes):
        """Sets the usable_cache_capacity_bytes of this NimbleArrayDetails.

        Usable cache capacity in bytes.  # noqa: E501

        :param usable_cache_capacity_bytes: The usable_cache_capacity_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._usable_cache_capacity_bytes = usable_cache_capacity_bytes

    @property
    def usable_capacity_bytes(self):
        """Gets the usable_capacity_bytes of this NimbleArrayDetails.  # noqa: E501

        The usable capacity bytes of the array.  # noqa: E501

        :return: The usable_capacity_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._usable_capacity_bytes

    @usable_capacity_bytes.setter
    def usable_capacity_bytes(self, usable_capacity_bytes):
        """Sets the usable_capacity_bytes of this NimbleArrayDetails.

        The usable capacity bytes of the array.  # noqa: E501

        :param usable_capacity_bytes: The usable_capacity_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._usable_capacity_bytes = usable_capacity_bytes

    @property
    def usage(self):
        """Gets the usage of this NimbleArrayDetails.  # noqa: E501

        Used space of the array in bytes.  # noqa: E501

        :return: The usage of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this NimbleArrayDetails.

        Used space of the array in bytes.  # noqa: E501

        :param usage: The usage of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._usage = usage

    @property
    def usage_valid(self):
        """Gets the usage_valid of this NimbleArrayDetails.  # noqa: E501

        Indicates whether the usage of the array is valid.  # noqa: E501

        :return: The usage_valid of this NimbleArrayDetails.  # noqa: E501
        :rtype: bool
        """
        return self._usage_valid

    @usage_valid.setter
    def usage_valid(self, usage_valid):
        """Sets the usage_valid of this NimbleArrayDetails.

        Indicates whether the usage of the array is valid.  # noqa: E501

        :param usage_valid: The usage_valid of this NimbleArrayDetails.  # noqa: E501
        :type: bool
        """

        self._usage_valid = usage_valid

    @property
    def version(self):
        """Gets the version of this NimbleArrayDetails.  # noqa: E501

        Software version of the array. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The version of this NimbleArrayDetails.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NimbleArrayDetails.

        Software version of the array. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param version: The version of this NimbleArrayDetails.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def vol_compression(self):
        """Gets the vol_compression of this NimbleArrayDetails.  # noqa: E501

        The compression rate of volumes in the array expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The vol_compression of this NimbleArrayDetails.  # noqa: E501
        :rtype: float
        """
        return self._vol_compression

    @vol_compression.setter
    def vol_compression(self, vol_compression):
        """Sets the vol_compression of this NimbleArrayDetails.

        The compression rate of volumes in the array expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param vol_compression: The vol_compression of this NimbleArrayDetails.  # noqa: E501
        :type: float
        """

        self._vol_compression = vol_compression

    @property
    def vol_saved_bytes(self):
        """Gets the vol_saved_bytes of this NimbleArrayDetails.  # noqa: E501

        The saved space of volumes in the array.  # noqa: E501

        :return: The vol_saved_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._vol_saved_bytes

    @vol_saved_bytes.setter
    def vol_saved_bytes(self, vol_saved_bytes):
        """Sets the vol_saved_bytes of this NimbleArrayDetails.

        The saved space of volumes in the array.  # noqa: E501

        :param vol_saved_bytes: The vol_saved_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._vol_saved_bytes = vol_saved_bytes

    @property
    def vol_usage_bytes(self):
        """Gets the vol_usage_bytes of this NimbleArrayDetails.  # noqa: E501

        The compressed usage of volumes in the array.  # noqa: E501

        :return: The vol_usage_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._vol_usage_bytes

    @vol_usage_bytes.setter
    def vol_usage_bytes(self, vol_usage_bytes):
        """Sets the vol_usage_bytes of this NimbleArrayDetails.

        The compressed usage of volumes in the array.  # noqa: E501

        :param vol_usage_bytes: The vol_usage_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._vol_usage_bytes = vol_usage_bytes

    @property
    def vol_usage_uncompressed_bytes(self):
        """Gets the vol_usage_uncompressed_bytes of this NimbleArrayDetails.  # noqa: E501

        The volume usage uncompressed bytes.  # noqa: E501

        :return: The vol_usage_uncompressed_bytes of this NimbleArrayDetails.  # noqa: E501
        :rtype: int
        """
        return self._vol_usage_uncompressed_bytes

    @vol_usage_uncompressed_bytes.setter
    def vol_usage_uncompressed_bytes(self, vol_usage_uncompressed_bytes):
        """Sets the vol_usage_uncompressed_bytes of this NimbleArrayDetails.

        The volume usage uncompressed bytes.  # noqa: E501

        :param vol_usage_uncompressed_bytes: The vol_usage_uncompressed_bytes of this NimbleArrayDetails.  # noqa: E501
        :type: int
        """

        self._vol_usage_uncompressed_bytes = vol_usage_uncompressed_bytes

    @property
    def zconf_ipaddrs(self):
        """Gets the zconf_ipaddrs of this NimbleArrayDetails.  # noqa: E501

        List of link-local zero-configuration addresses of the array.  # noqa: E501

        :return: The zconf_ipaddrs of this NimbleArrayDetails.  # noqa: E501
        :rtype: list[ZConfIPaddrs]
        """
        return self._zconf_ipaddrs

    @zconf_ipaddrs.setter
    def zconf_ipaddrs(self, zconf_ipaddrs):
        """Sets the zconf_ipaddrs of this NimbleArrayDetails.

        List of link-local zero-configuration addresses of the array.  # noqa: E501

        :param zconf_ipaddrs: The zconf_ipaddrs of this NimbleArrayDetails.  # noqa: E501
        :type: list[ZConfIPaddrs]
        """

        self._zconf_ipaddrs = zconf_ipaddrs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleArrayDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
