# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SwRecommendedPackageId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'displayname': 'str',
        'name': 'str',
        'severity': 'str',
        'support_type': 'str'
    }

    attribute_map = {
        'displayname': 'displayname',
        'name': 'name',
        'severity': 'severity',
        'support_type': 'supportType'
    }

    def __init__(self, displayname=None, name=None, severity=None, support_type=None):  # noqa: E501
        """SwRecommendedPackageId - a model defined in OpenAPI"""  # noqa: E501

        self._displayname = None
        self._name = None
        self._severity = None
        self._support_type = None
        self.discriminator = None

        if displayname is not None:
            self.displayname = displayname
        if name is not None:
            self.name = name
        if severity is not None:
            self.severity = severity
        if support_type is not None:
            self.support_type = support_type

    @property
    def displayname(self):
        """Gets the displayname of this SwRecommendedPackageId.  # noqa: E501

        Display name  # noqa: E501

        :return: The displayname of this SwRecommendedPackageId.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this SwRecommendedPackageId.

        Display name  # noqa: E501

        :param displayname: The displayname of this SwRecommendedPackageId.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def name(self):
        """Gets the name of this SwRecommendedPackageId.  # noqa: E501

        Name of the resource  # noqa: E501

        :return: The name of this SwRecommendedPackageId.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SwRecommendedPackageId.

        Name of the resource  # noqa: E501

        :param name: The name of this SwRecommendedPackageId.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def severity(self):
        """Gets the severity of this SwRecommendedPackageId.  # noqa: E501

        Severity. Possible Values: Unknown, CRITICAL, RECOMMENDED, OPTIONAL, AVAILABLE, BLOCKED.  # noqa: E501

        :return: The severity of this SwRecommendedPackageId.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this SwRecommendedPackageId.

        Severity. Possible Values: Unknown, CRITICAL, RECOMMENDED, OPTIONAL, AVAILABLE, BLOCKED.  # noqa: E501

        :param severity: The severity of this SwRecommendedPackageId.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def support_type(self):
        """Gets the support_type of this SwRecommendedPackageId.  # noqa: E501


        :return: The support_type of this SwRecommendedPackageId.  # noqa: E501
        :rtype: str
        """
        return self._support_type

    @support_type.setter
    def support_type(self, support_type):
        """Sets the support_type of this SwRecommendedPackageId.


        :param support_type: The support_type of this SwRecommendedPackageId.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "SHORT_TERM", "LONG_TERM", "null"]  # noqa: E501
        if support_type not in allowed_values:
            raise ValueError(
                "Invalid value for `support_type` ({0}), must be one of {1}"  # noqa: E501
                .format(support_type, allowed_values)
            )

        self._support_type = support_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwRecommendedPackageId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
