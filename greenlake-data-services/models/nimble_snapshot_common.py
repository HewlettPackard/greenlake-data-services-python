# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleSnapshotCommon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_control_records': 'list[AccessControlRecord]',
        'agent_type': 'str',
        'app_uuid': 'str',
        'associated_links': 'AssociatedLinks',
        'console_uri': 'str',
        'creation_time': 'int',
        'customer_id': 'str',
        'description': 'str',
        'expiry_after': 'int',
        'expiry_time': 'int',
        'generation': 'int',
        'is_manually_managed': 'bool',
        'is_replica': 'bool',
        'is_unmanaged': 'bool',
        'last_modified': 'int',
        'metadata': 'list[KeyValue]',
        'new_data_compressed_bytes': 'int',
        'new_data_uncompressed_bytes': 'int',
        'new_data_valid': 'bool',
        'offline_reason': 'str',
        'origin_name': 'str',
        'resource_uri': 'str',
        'type': 'str',
        'vol_id': 'str',
        'vol_name': 'str',
        'vpd_ieee0': 'str',
        'vpd_ieee1': 'str',
        'vpd_t10': 'str'
    }

    attribute_map = {
        'access_control_records': 'access_control_records',
        'agent_type': 'agent_type',
        'app_uuid': 'app_uuid',
        'associated_links': 'associated_links',
        'console_uri': 'consoleUri',
        'creation_time': 'creation_time',
        'customer_id': 'customerId',
        'description': 'description',
        'expiry_after': 'expiry_after',
        'expiry_time': 'expiry_time',
        'generation': 'generation',
        'is_manually_managed': 'is_manually_managed',
        'is_replica': 'is_replica',
        'is_unmanaged': 'is_unmanaged',
        'last_modified': 'last_modified',
        'metadata': 'metadata',
        'new_data_compressed_bytes': 'new_data_compressed_bytes',
        'new_data_uncompressed_bytes': 'new_data_uncompressed_bytes',
        'new_data_valid': 'new_data_valid',
        'offline_reason': 'offline_reason',
        'origin_name': 'origin_name',
        'resource_uri': 'resourceUri',
        'type': 'type',
        'vol_id': 'vol_id',
        'vol_name': 'vol_name',
        'vpd_ieee0': 'vpd_ieee0',
        'vpd_ieee1': 'vpd_ieee1',
        'vpd_t10': 'vpd_t10'
    }

    def __init__(self, access_control_records=None, agent_type=None, app_uuid=None, associated_links=None, console_uri=None, creation_time=None, customer_id=None, description=None, expiry_after=None, expiry_time=None, generation=None, is_manually_managed=None, is_replica=None, is_unmanaged=None, last_modified=None, metadata=None, new_data_compressed_bytes=None, new_data_uncompressed_bytes=None, new_data_valid=None, offline_reason=None, origin_name=None, resource_uri=None, type=None, vol_id=None, vol_name=None, vpd_ieee0=None, vpd_ieee1=None, vpd_t10=None):  # noqa: E501
        """NimbleSnapshotCommon - a model defined in OpenAPI"""  # noqa: E501

        self._access_control_records = None
        self._agent_type = None
        self._app_uuid = None
        self._associated_links = None
        self._console_uri = None
        self._creation_time = None
        self._customer_id = None
        self._description = None
        self._expiry_after = None
        self._expiry_time = None
        self._generation = None
        self._is_manually_managed = None
        self._is_replica = None
        self._is_unmanaged = None
        self._last_modified = None
        self._metadata = None
        self._new_data_compressed_bytes = None
        self._new_data_uncompressed_bytes = None
        self._new_data_valid = None
        self._offline_reason = None
        self._origin_name = None
        self._resource_uri = None
        self._type = None
        self._vol_id = None
        self._vol_name = None
        self._vpd_ieee0 = None
        self._vpd_ieee1 = None
        self._vpd_t10 = None
        self.discriminator = None

        if access_control_records is not None:
            self.access_control_records = access_control_records
        if agent_type is not None:
            self.agent_type = agent_type
        if app_uuid is not None:
            self.app_uuid = app_uuid
        if associated_links is not None:
            self.associated_links = associated_links
        if console_uri is not None:
            self.console_uri = console_uri
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if description is not None:
            self.description = description
        if expiry_after is not None:
            self.expiry_after = expiry_after
        if expiry_time is not None:
            self.expiry_time = expiry_time
        if generation is not None:
            self.generation = generation
        if is_manually_managed is not None:
            self.is_manually_managed = is_manually_managed
        if is_replica is not None:
            self.is_replica = is_replica
        if is_unmanaged is not None:
            self.is_unmanaged = is_unmanaged
        if last_modified is not None:
            self.last_modified = last_modified
        if metadata is not None:
            self.metadata = metadata
        if new_data_compressed_bytes is not None:
            self.new_data_compressed_bytes = new_data_compressed_bytes
        if new_data_uncompressed_bytes is not None:
            self.new_data_uncompressed_bytes = new_data_uncompressed_bytes
        if new_data_valid is not None:
            self.new_data_valid = new_data_valid
        if offline_reason is not None:
            self.offline_reason = offline_reason
        if origin_name is not None:
            self.origin_name = origin_name
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if type is not None:
            self.type = type
        if vol_id is not None:
            self.vol_id = vol_id
        if vol_name is not None:
            self.vol_name = vol_name
        if vpd_ieee0 is not None:
            self.vpd_ieee0 = vpd_ieee0
        if vpd_ieee1 is not None:
            self.vpd_ieee1 = vpd_ieee1
        if vpd_t10 is not None:
            self.vpd_t10 = vpd_t10

    @property
    def access_control_records(self):
        """Gets the access_control_records of this NimbleSnapshotCommon.  # noqa: E501

        List of access control records that apply to this snapshot. List of access control records associated with a volume or snapshot or protocol endpoint.  # noqa: E501

        :return: The access_control_records of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: list[AccessControlRecord]
        """
        return self._access_control_records

    @access_control_records.setter
    def access_control_records(self, access_control_records):
        """Sets the access_control_records of this NimbleSnapshotCommon.

        List of access control records that apply to this snapshot. List of access control records associated with a volume or snapshot or protocol endpoint.  # noqa: E501

        :param access_control_records: The access_control_records of this NimbleSnapshotCommon.  # noqa: E501
        :type: list[AccessControlRecord]
        """

        self._access_control_records = access_control_records

    @property
    def agent_type(self):
        """Gets the agent_type of this NimbleSnapshotCommon.  # noqa: E501

        External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.  # noqa: E501

        :return: The agent_type of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """Sets the agent_type of this NimbleSnapshotCommon.

        External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.  # noqa: E501

        :param agent_type: The agent_type of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._agent_type = agent_type

    @property
    def app_uuid(self):
        """Gets the app_uuid of this NimbleSnapshotCommon.  # noqa: E501

        Application identifier of snapshots. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.  # noqa: E501

        :return: The app_uuid of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid):
        """Sets the app_uuid of this NimbleSnapshotCommon.

        Application identifier of snapshots. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.  # noqa: E501

        :param app_uuid: The app_uuid of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._app_uuid = app_uuid

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleSnapshotCommon.  # noqa: E501


        :return: The associated_links of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleSnapshotCommon.


        :param associated_links: The associated_links of this NimbleSnapshotCommon.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleSnapshotCommon.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleSnapshotCommon.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleSnapshotCommon.  # noqa: E501

        Time when this snapshot was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The creation_time of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleSnapshotCommon.

        Time when this snapshot was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param creation_time: The creation_time of this NimbleSnapshotCommon.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleSnapshotCommon.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleSnapshotCommon.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this NimbleSnapshotCommon.  # noqa: E501

        Text description of snapshot. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleSnapshotCommon.

        Text description of snapshot. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expiry_after(self):
        """Gets the expiry_after of this NimbleSnapshotCommon.  # noqa: E501

        Number of seconds after which this snapshot is considered expired by snapshot TTL. A value of 0 indicates that snapshot never expires, 1 indicates that snapshot uses group-level configured TTL value and any other value indicates number of seconds.  # noqa: E501

        :return: The expiry_after of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: int
        """
        return self._expiry_after

    @expiry_after.setter
    def expiry_after(self, expiry_after):
        """Sets the expiry_after of this NimbleSnapshotCommon.

        Number of seconds after which this snapshot is considered expired by snapshot TTL. A value of 0 indicates that snapshot never expires, 1 indicates that snapshot uses group-level configured TTL value and any other value indicates number of seconds.  # noqa: E501

        :param expiry_after: The expiry_after of this NimbleSnapshotCommon.  # noqa: E501
        :type: int
        """

        self._expiry_after = expiry_after

    @property
    def expiry_time(self):
        """Gets the expiry_time of this NimbleSnapshotCommon.  # noqa: E501

        Unix timestamp indicating that the snapshot is considered expired by Snapshot Time-to-live(TTL). A value of 0 indicates that snapshot never expires. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The expiry_time of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: int
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this NimbleSnapshotCommon.

        Unix timestamp indicating that the snapshot is considered expired by Snapshot Time-to-live(TTL). A value of 0 indicates that snapshot never expires. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param expiry_time: The expiry_time of this NimbleSnapshotCommon.  # noqa: E501
        :type: int
        """

        self._expiry_time = expiry_time

    @property
    def generation(self):
        """Gets the generation of this NimbleSnapshotCommon.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleSnapshotCommon.

        generation  # noqa: E501

        :param generation: The generation of this NimbleSnapshotCommon.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def is_manually_managed(self):
        """Gets the is_manually_managed of this NimbleSnapshotCommon.  # noqa: E501

        Is snapshot manually managed, i.e., snapshot is manually or third party created or created by system at the time of volume restore or resize.  # noqa: E501

        :return: The is_manually_managed of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_manually_managed

    @is_manually_managed.setter
    def is_manually_managed(self, is_manually_managed):
        """Sets the is_manually_managed of this NimbleSnapshotCommon.

        Is snapshot manually managed, i.e., snapshot is manually or third party created or created by system at the time of volume restore or resize.  # noqa: E501

        :param is_manually_managed: The is_manually_managed of this NimbleSnapshotCommon.  # noqa: E501
        :type: bool
        """

        self._is_manually_managed = is_manually_managed

    @property
    def is_replica(self):
        """Gets the is_replica of this NimbleSnapshotCommon.  # noqa: E501

        Snapshot is a replica from upstream replication partner.  # noqa: E501

        :return: The is_replica of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_replica

    @is_replica.setter
    def is_replica(self, is_replica):
        """Sets the is_replica of this NimbleSnapshotCommon.

        Snapshot is a replica from upstream replication partner.  # noqa: E501

        :param is_replica: The is_replica of this NimbleSnapshotCommon.  # noqa: E501
        :type: bool
        """

        self._is_replica = is_replica

    @property
    def is_unmanaged(self):
        """Gets the is_unmanaged of this NimbleSnapshotCommon.  # noqa: E501

        Indicates whether the snapshot is unmanaged. The snapshot will not be deleted automatically unless the unmanaged cleanup feature is enabled.  # noqa: E501

        :return: The is_unmanaged of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_unmanaged

    @is_unmanaged.setter
    def is_unmanaged(self, is_unmanaged):
        """Sets the is_unmanaged of this NimbleSnapshotCommon.

        Indicates whether the snapshot is unmanaged. The snapshot will not be deleted automatically unless the unmanaged cleanup feature is enabled.  # noqa: E501

        :param is_unmanaged: The is_unmanaged of this NimbleSnapshotCommon.  # noqa: E501
        :type: bool
        """

        self._is_unmanaged = is_unmanaged

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleSnapshotCommon.  # noqa: E501

        Time when this snapshot was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The last_modified of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleSnapshotCommon.

        Time when this snapshot was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param last_modified: The last_modified of this NimbleSnapshotCommon.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def metadata(self):
        """Gets the metadata of this NimbleSnapshotCommon.  # noqa: E501

        Key-value pairs that augment a snapshot's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.  # noqa: E501

        :return: The metadata of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: list[KeyValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NimbleSnapshotCommon.

        Key-value pairs that augment a snapshot's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.  # noqa: E501

        :param metadata: The metadata of this NimbleSnapshotCommon.  # noqa: E501
        :type: list[KeyValue]
        """

        self._metadata = metadata

    @property
    def new_data_compressed_bytes(self):
        """Gets the new_data_compressed_bytes of this NimbleSnapshotCommon.  # noqa: E501

        The bytes of compressed new data.  # noqa: E501

        :return: The new_data_compressed_bytes of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: int
        """
        return self._new_data_compressed_bytes

    @new_data_compressed_bytes.setter
    def new_data_compressed_bytes(self, new_data_compressed_bytes):
        """Sets the new_data_compressed_bytes of this NimbleSnapshotCommon.

        The bytes of compressed new data.  # noqa: E501

        :param new_data_compressed_bytes: The new_data_compressed_bytes of this NimbleSnapshotCommon.  # noqa: E501
        :type: int
        """

        self._new_data_compressed_bytes = new_data_compressed_bytes

    @property
    def new_data_uncompressed_bytes(self):
        """Gets the new_data_uncompressed_bytes of this NimbleSnapshotCommon.  # noqa: E501

        The bytes of uncompressed new data.  # noqa: E501

        :return: The new_data_uncompressed_bytes of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: int
        """
        return self._new_data_uncompressed_bytes

    @new_data_uncompressed_bytes.setter
    def new_data_uncompressed_bytes(self, new_data_uncompressed_bytes):
        """Sets the new_data_uncompressed_bytes of this NimbleSnapshotCommon.

        The bytes of uncompressed new data.  # noqa: E501

        :param new_data_uncompressed_bytes: The new_data_uncompressed_bytes of this NimbleSnapshotCommon.  # noqa: E501
        :type: int
        """

        self._new_data_uncompressed_bytes = new_data_uncompressed_bytes

    @property
    def new_data_valid(self):
        """Gets the new_data_valid of this NimbleSnapshotCommon.  # noqa: E501

        Indicate the usage information is valid.  # noqa: E501

        :return: The new_data_valid of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: bool
        """
        return self._new_data_valid

    @new_data_valid.setter
    def new_data_valid(self, new_data_valid):
        """Sets the new_data_valid of this NimbleSnapshotCommon.

        Indicate the usage information is valid.  # noqa: E501

        :param new_data_valid: The new_data_valid of this NimbleSnapshotCommon.  # noqa: E501
        :type: bool
        """

        self._new_data_valid = new_data_valid

    @property
    def offline_reason(self):
        """Gets the offline_reason of this NimbleSnapshotCommon.  # noqa: E501

        Snapshot offline reason - possible entries: one of 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'nvram_loss_recovery', 'pool_free_space_exhausted' . Possible values: 'user', 'recovery', 'replica', 'nvram_loss_recovery', 'serial_number_collision', 'encryption_inactive', 'encryption_key_deleted', 'vvol_unbind', 'cache_unpin_in_progress', 'over_folder_overdraft_limit', 'over_volume_usage_limit', 'pool_free_space_exhausted', 'srep_unconfigured'.  # noqa: E501

        :return: The offline_reason of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._offline_reason

    @offline_reason.setter
    def offline_reason(self, offline_reason):
        """Sets the offline_reason of this NimbleSnapshotCommon.

        Snapshot offline reason - possible entries: one of 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'nvram_loss_recovery', 'pool_free_space_exhausted' . Possible values: 'user', 'recovery', 'replica', 'nvram_loss_recovery', 'serial_number_collision', 'encryption_inactive', 'encryption_key_deleted', 'vvol_unbind', 'cache_unpin_in_progress', 'over_folder_overdraft_limit', 'over_volume_usage_limit', 'pool_free_space_exhausted', 'srep_unconfigured'.  # noqa: E501

        :param offline_reason: The offline_reason of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._offline_reason = offline_reason

    @property
    def origin_name(self):
        """Gets the origin_name of this NimbleSnapshotCommon.  # noqa: E501

        Origination group name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The origin_name of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._origin_name

    @origin_name.setter
    def origin_name(self, origin_name):
        """Sets the origin_name of this NimbleSnapshotCommon.

        Origination group name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param origin_name: The origin_name of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._origin_name = origin_name

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleSnapshotCommon.  # noqa: E501


        :return: The resource_uri of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleSnapshotCommon.


        :param resource_uri: The resource_uri of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def type(self):
        """Gets the type of this NimbleSnapshotCommon.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleSnapshotCommon.

        type  # noqa: E501

        :param type: The type of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vol_id(self):
        """Gets the vol_id of this NimbleSnapshotCommon.  # noqa: E501

        Parent volume ID. A 42 digit hexadecimal number.  # noqa: E501

        :return: The vol_id of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._vol_id

    @vol_id.setter
    def vol_id(self, vol_id):
        """Sets the vol_id of this NimbleSnapshotCommon.

        Parent volume ID. A 42 digit hexadecimal number.  # noqa: E501

        :param vol_id: The vol_id of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._vol_id = vol_id

    @property
    def vol_name(self):
        """Gets the vol_name of this NimbleSnapshotCommon.  # noqa: E501

        Name of the parent volume in which the snapshot belongs to. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :return: The vol_name of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._vol_name

    @vol_name.setter
    def vol_name(self, vol_name):
        """Sets the vol_name of this NimbleSnapshotCommon.

        Name of the parent volume in which the snapshot belongs to. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :param vol_name: The vol_name of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._vol_name = vol_name

    @property
    def vpd_ieee0(self):
        """Gets the vpd_ieee0 of this NimbleSnapshotCommon.  # noqa: E501

        The first 64 bits of the snapshot's EUI-64 identifier, encoded as a hexadecimal string. Plain string.  # noqa: E501

        :return: The vpd_ieee0 of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._vpd_ieee0

    @vpd_ieee0.setter
    def vpd_ieee0(self, vpd_ieee0):
        """Sets the vpd_ieee0 of this NimbleSnapshotCommon.

        The first 64 bits of the snapshot's EUI-64 identifier, encoded as a hexadecimal string. Plain string.  # noqa: E501

        :param vpd_ieee0: The vpd_ieee0 of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._vpd_ieee0 = vpd_ieee0

    @property
    def vpd_ieee1(self):
        """Gets the vpd_ieee1 of this NimbleSnapshotCommon.  # noqa: E501

        The last 64 bits of the snapshot's EUI-64 identifier, encoded as a hexadecimal string. Plain string.  # noqa: E501

        :return: The vpd_ieee1 of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._vpd_ieee1

    @vpd_ieee1.setter
    def vpd_ieee1(self, vpd_ieee1):
        """Sets the vpd_ieee1 of this NimbleSnapshotCommon.

        The last 64 bits of the snapshot's EUI-64 identifier, encoded as a hexadecimal string. Plain string.  # noqa: E501

        :param vpd_ieee1: The vpd_ieee1 of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._vpd_ieee1 = vpd_ieee1

    @property
    def vpd_t10(self):
        """Gets the vpd_t10 of this NimbleSnapshotCommon.  # noqa: E501

        The snapshot's T10 Vendor ID-based identifier. Plain string.  # noqa: E501

        :return: The vpd_t10 of this NimbleSnapshotCommon.  # noqa: E501
        :rtype: str
        """
        return self._vpd_t10

    @vpd_t10.setter
    def vpd_t10(self, vpd_t10):
        """Sets the vpd_t10 of this NimbleSnapshotCommon.

        The snapshot's T10 Vendor ID-based identifier. Plain string.  # noqa: E501

        :param vpd_t10: The vpd_t10 of this NimbleSnapshotCommon.  # noqa: E501
        :type: str
        """

        self._vpd_t10 = vpd_t10

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleSnapshotCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
