# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleVolumeFilterableFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_snap_id': 'str',
        'base_snap_name': 'str',
        'clone': 'bool',
        'dest_pool_id': 'str',
        'dest_pool_name': 'str',
        'folder_id': 'str',
        'folder_name': 'str',
        'id': 'str',
        'name': 'str',
        'online': 'bool',
        'owned_by_group': 'str',
        'owned_by_group_id': 'str',
        'parent_vol_id': 'str',
        'parent_vol_name': 'str',
        'perfpolicy_id': 'str',
        'perfpolicy_name': 'str',
        'pool_id': 'str',
        'pool_name': 'str',
        'read_only': 'bool',
        'replication_role': 'str',
        'secondary_serial_number': 'str',
        'serial_number': 'str',
        'size': 'int',
        'target_name': 'str',
        'volcoll_id': 'str',
        'volcoll_name': 'str'
    }

    attribute_map = {
        'base_snap_id': 'base_snap_id',
        'base_snap_name': 'base_snap_name',
        'clone': 'clone',
        'dest_pool_id': 'dest_pool_id',
        'dest_pool_name': 'dest_pool_name',
        'folder_id': 'folder_id',
        'folder_name': 'folder_name',
        'id': 'id',
        'name': 'name',
        'online': 'online',
        'owned_by_group': 'owned_by_group',
        'owned_by_group_id': 'owned_by_group_id',
        'parent_vol_id': 'parent_vol_id',
        'parent_vol_name': 'parent_vol_name',
        'perfpolicy_id': 'perfpolicy_id',
        'perfpolicy_name': 'perfpolicy_name',
        'pool_id': 'pool_id',
        'pool_name': 'pool_name',
        'read_only': 'read_only',
        'replication_role': 'replication_role',
        'secondary_serial_number': 'secondary_serial_number',
        'serial_number': 'serial_number',
        'size': 'size',
        'target_name': 'target_name',
        'volcoll_id': 'volcoll_id',
        'volcoll_name': 'volcoll_name'
    }

    def __init__(self, base_snap_id=None, base_snap_name=None, clone=None, dest_pool_id=None, dest_pool_name=None, folder_id=None, folder_name=None, id=None, name=None, online=None, owned_by_group=None, owned_by_group_id=None, parent_vol_id=None, parent_vol_name=None, perfpolicy_id=None, perfpolicy_name=None, pool_id=None, pool_name=None, read_only=None, replication_role=None, secondary_serial_number=None, serial_number=None, size=None, target_name=None, volcoll_id=None, volcoll_name=None):  # noqa: E501
        """NimbleVolumeFilterableFields - a model defined in OpenAPI"""  # noqa: E501

        self._base_snap_id = None
        self._base_snap_name = None
        self._clone = None
        self._dest_pool_id = None
        self._dest_pool_name = None
        self._folder_id = None
        self._folder_name = None
        self._id = None
        self._name = None
        self._online = None
        self._owned_by_group = None
        self._owned_by_group_id = None
        self._parent_vol_id = None
        self._parent_vol_name = None
        self._perfpolicy_id = None
        self._perfpolicy_name = None
        self._pool_id = None
        self._pool_name = None
        self._read_only = None
        self._replication_role = None
        self._secondary_serial_number = None
        self._serial_number = None
        self._size = None
        self._target_name = None
        self._volcoll_id = None
        self._volcoll_name = None
        self.discriminator = None

        if base_snap_id is not None:
            self.base_snap_id = base_snap_id
        if base_snap_name is not None:
            self.base_snap_name = base_snap_name
        if clone is not None:
            self.clone = clone
        if dest_pool_id is not None:
            self.dest_pool_id = dest_pool_id
        if dest_pool_name is not None:
            self.dest_pool_name = dest_pool_name
        if folder_id is not None:
            self.folder_id = folder_id
        if folder_name is not None:
            self.folder_name = folder_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if online is not None:
            self.online = online
        if owned_by_group is not None:
            self.owned_by_group = owned_by_group
        if owned_by_group_id is not None:
            self.owned_by_group_id = owned_by_group_id
        if parent_vol_id is not None:
            self.parent_vol_id = parent_vol_id
        if parent_vol_name is not None:
            self.parent_vol_name = parent_vol_name
        if perfpolicy_id is not None:
            self.perfpolicy_id = perfpolicy_id
        if perfpolicy_name is not None:
            self.perfpolicy_name = perfpolicy_name
        if pool_id is not None:
            self.pool_id = pool_id
        if pool_name is not None:
            self.pool_name = pool_name
        if read_only is not None:
            self.read_only = read_only
        if replication_role is not None:
            self.replication_role = replication_role
        if secondary_serial_number is not None:
            self.secondary_serial_number = secondary_serial_number
        if serial_number is not None:
            self.serial_number = serial_number
        if size is not None:
            self.size = size
        if target_name is not None:
            self.target_name = target_name
        if volcoll_id is not None:
            self.volcoll_id = volcoll_id
        if volcoll_name is not None:
            self.volcoll_name = volcoll_name

    @property
    def base_snap_id(self):
        """Gets the base_snap_id of this NimbleVolumeFilterableFields.  # noqa: E501

        Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The base_snap_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._base_snap_id

    @base_snap_id.setter
    def base_snap_id(self, base_snap_id):
        """Sets the base_snap_id of this NimbleVolumeFilterableFields.

        Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param base_snap_id: The base_snap_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._base_snap_id = base_snap_id

    @property
    def base_snap_name(self):
        """Gets the base_snap_name of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of base snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`  # noqa: E501

        :return: The base_snap_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._base_snap_name

    @base_snap_name.setter
    def base_snap_name(self, base_snap_name):
        """Sets the base_snap_name of this NimbleVolumeFilterableFields.

        Name of base snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`  # noqa: E501

        :param base_snap_name: The base_snap_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._base_snap_name = base_snap_name

    @property
    def clone(self):
        """Gets the clone of this NimbleVolumeFilterableFields.  # noqa: E501

        Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. `Filter, Sort`  # noqa: E501

        :return: The clone of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: bool
        """
        return self._clone

    @clone.setter
    def clone(self, clone):
        """Sets the clone of this NimbleVolumeFilterableFields.

        Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. `Filter, Sort`  # noqa: E501

        :param clone: The clone of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: bool
        """

        self._clone = clone

    @property
    def dest_pool_id(self):
        """Gets the dest_pool_id of this NimbleVolumeFilterableFields.  # noqa: E501

        ID of the destination pool where the volume is moving to. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The dest_pool_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._dest_pool_id

    @dest_pool_id.setter
    def dest_pool_id(self, dest_pool_id):
        """Sets the dest_pool_id of this NimbleVolumeFilterableFields.

        ID of the destination pool where the volume is moving to. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param dest_pool_id: The dest_pool_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._dest_pool_id = dest_pool_id

    @property
    def dest_pool_name(self):
        """Gets the dest_pool_name of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of the destination pool where the volume is moving to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :return: The dest_pool_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._dest_pool_name

    @dest_pool_name.setter
    def dest_pool_name(self, dest_pool_name):
        """Sets the dest_pool_name of this NimbleVolumeFilterableFields.

        Name of the destination pool where the volume is moving to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :param dest_pool_name: The dest_pool_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._dest_pool_name = dest_pool_name

    @property
    def folder_id(self):
        """Gets the folder_id of this NimbleVolumeFilterableFields.  # noqa: E501

        ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal number or the empty string. `Filter, Sort`  # noqa: E501

        :return: The folder_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this NimbleVolumeFilterableFields.

        ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal number or the empty string. `Filter, Sort`  # noqa: E501

        :param folder_id: The folder_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def folder_name(self):
        """Gets the folder_name of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of the folder holding this volume. It can be empty. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :return: The folder_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this NimbleVolumeFilterableFields.

        Name of the folder holding this volume. It can be empty. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :param folder_name: The folder_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._folder_name = folder_name

    @property
    def id(self):
        """Gets the id of this NimbleVolumeFilterableFields.  # noqa: E501

        Identifier for the volume. A 42 digit hexadecimal number. `Filter`  # noqa: E501

        :return: The id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleVolumeFilterableFields.

        Identifier for the volume. A 42 digit hexadecimal number. `Filter`  # noqa: E501

        :param id: The id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`  # noqa: E501

        :return: The name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleVolumeFilterableFields.

        Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`  # noqa: E501

        :param name: The name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def online(self):
        """Gets the online of this NimbleVolumeFilterableFields.  # noqa: E501

        Online state of volume, available for host initiators to establish connections. `Filter, Sort`  # noqa: E501

        :return: The online of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this NimbleVolumeFilterableFields.

        Online state of volume, available for host initiators to establish connections. `Filter, Sort`  # noqa: E501

        :param online: The online of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def owned_by_group(self):
        """Gets the owned_by_group of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of group that currently owns the volume. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :return: The owned_by_group of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._owned_by_group

    @owned_by_group.setter
    def owned_by_group(self, owned_by_group):
        """Sets the owned_by_group of this NimbleVolumeFilterableFields.

        Name of group that currently owns the volume. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :param owned_by_group: The owned_by_group of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._owned_by_group = owned_by_group

    @property
    def owned_by_group_id(self):
        """Gets the owned_by_group_id of this NimbleVolumeFilterableFields.  # noqa: E501

        ID of group that currently owns the volume. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The owned_by_group_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._owned_by_group_id

    @owned_by_group_id.setter
    def owned_by_group_id(self, owned_by_group_id):
        """Sets the owned_by_group_id of this NimbleVolumeFilterableFields.

        ID of group that currently owns the volume. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param owned_by_group_id: The owned_by_group_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._owned_by_group_id = owned_by_group_id

    @property
    def parent_vol_id(self):
        """Gets the parent_vol_id of this NimbleVolumeFilterableFields.  # noqa: E501

        Parent volume ID. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The parent_vol_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._parent_vol_id

    @parent_vol_id.setter
    def parent_vol_id(self, parent_vol_id):
        """Sets the parent_vol_id of this NimbleVolumeFilterableFields.

        Parent volume ID. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param parent_vol_id: The parent_vol_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._parent_vol_id = parent_vol_id

    @property
    def parent_vol_name(self):
        """Gets the parent_vol_name of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of parent volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`  # noqa: E501

        :return: The parent_vol_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._parent_vol_name

    @parent_vol_name.setter
    def parent_vol_name(self, parent_vol_name):
        """Sets the parent_vol_name of this NimbleVolumeFilterableFields.

        Name of parent volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`  # noqa: E501

        :param parent_vol_name: The parent_vol_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._parent_vol_name = parent_vol_name

    @property
    def perfpolicy_id(self):
        """Gets the perfpolicy_id of this NimbleVolumeFilterableFields.  # noqa: E501

        Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The perfpolicy_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._perfpolicy_id

    @perfpolicy_id.setter
    def perfpolicy_id(self, perfpolicy_id):
        """Sets the perfpolicy_id of this NimbleVolumeFilterableFields.

        Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param perfpolicy_id: The perfpolicy_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._perfpolicy_id = perfpolicy_id

    @property
    def perfpolicy_name(self):
        """Gets the perfpolicy_name of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of performance policy. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :return: The perfpolicy_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._perfpolicy_name

    @perfpolicy_name.setter
    def perfpolicy_name(self, perfpolicy_name):
        """Sets the perfpolicy_name of this NimbleVolumeFilterableFields.

        Name of performance policy. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :param perfpolicy_name: The perfpolicy_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._perfpolicy_name = perfpolicy_name

    @property
    def pool_id(self):
        """Gets the pool_id of this NimbleVolumeFilterableFields.  # noqa: E501

        Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The pool_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this NimbleVolumeFilterableFields.

        Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param pool_id: The pool_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._pool_id = pool_id

    @property
    def pool_name(self):
        """Gets the pool_name of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of the pool where the volume resides. Volume data will be distributed across arrays over which specified pool is defined. If pool option is not specified, volume is assigned to the default pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :return: The pool_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this NimbleVolumeFilterableFields.

        Name of the pool where the volume resides. Volume data will be distributed across arrays over which specified pool is defined. If pool option is not specified, volume is assigned to the default pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :param pool_name: The pool_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def read_only(self):
        """Gets the read_only of this NimbleVolumeFilterableFields.  # noqa: E501

        Volume is read-only. `Filter, Sort`  # noqa: E501

        :return: The read_only of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this NimbleVolumeFilterableFields.

        Volume is read-only. `Filter, Sort`  # noqa: E501

        :param read_only: The read_only of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def replication_role(self):
        """Gets the replication_role of this NimbleVolumeFilterableFields.  # noqa: E501

        Replication role that this volume performs. Possible values: 'periodic_snapshot_downstream', 'synchronous_upstream', 'synchronous_downstream', 'no_replication', 'periodic_snapshot_upstream'. `Filter, Sort`  # noqa: E501

        :return: The replication_role of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._replication_role

    @replication_role.setter
    def replication_role(self, replication_role):
        """Sets the replication_role of this NimbleVolumeFilterableFields.

        Replication role that this volume performs. Possible values: 'periodic_snapshot_downstream', 'synchronous_upstream', 'synchronous_downstream', 'no_replication', 'periodic_snapshot_upstream'. `Filter, Sort`  # noqa: E501

        :param replication_role: The replication_role of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._replication_role = replication_role

    @property
    def secondary_serial_number(self):
        """Gets the secondary_serial_number of this NimbleVolumeFilterableFields.  # noqa: E501

        Secondary identifier associated with the volume for the SCSI protocol. `Filter, Sort`  # noqa: E501

        :return: The secondary_serial_number of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._secondary_serial_number

    @secondary_serial_number.setter
    def secondary_serial_number(self, secondary_serial_number):
        """Sets the secondary_serial_number of this NimbleVolumeFilterableFields.

        Secondary identifier associated with the volume for the SCSI protocol. `Filter, Sort`  # noqa: E501

        :param secondary_serial_number: The secondary_serial_number of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._secondary_serial_number = secondary_serial_number

    @property
    def serial_number(self):
        """Gets the serial_number of this NimbleVolumeFilterableFields.  # noqa: E501

        Identifier associated with the volume for the SCSI protocol. A 32 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :return: The serial_number of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this NimbleVolumeFilterableFields.

        Identifier associated with the volume for the SCSI protocol. A 32 digit hexadecimal number. `Filter, Sort`  # noqa: E501

        :param serial_number: The serial_number of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def size(self):
        """Gets the size of this NimbleVolumeFilterableFields.  # noqa: E501

        Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume. `Filter, Sort`  # noqa: E501

        :return: The size of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NimbleVolumeFilterableFields.

        Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume. `Filter, Sort`  # noqa: E501

        :param size: The size of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def target_name(self):
        """Gets the target_name of this NimbleVolumeFilterableFields.  # noqa: E501

        The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target volume. The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target. `Filter, Sort`  # noqa: E501

        :return: The target_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this NimbleVolumeFilterableFields.

        The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target volume. The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target. `Filter, Sort`  # noqa: E501

        :param target_name: The target_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def volcoll_id(self):
        """Gets the volcoll_id of this NimbleVolumeFilterableFields.  # noqa: E501

        ID of volume collection of which this volume is a member. Use this attribute in update operation to associate or dissociate volumes with or from volume collections. When associating, set this attribute to the ID of the volume collection. When dissociating, set this attribute to empty string. An optional NsObjectID. A 42 digit hexadecimal number or the empty string. `Filter, Sort`  # noqa: E501

        :return: The volcoll_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._volcoll_id

    @volcoll_id.setter
    def volcoll_id(self, volcoll_id):
        """Sets the volcoll_id of this NimbleVolumeFilterableFields.

        ID of volume collection of which this volume is a member. Use this attribute in update operation to associate or dissociate volumes with or from volume collections. When associating, set this attribute to the ID of the volume collection. When dissociating, set this attribute to empty string. An optional NsObjectID. A 42 digit hexadecimal number or the empty string. `Filter, Sort`  # noqa: E501

        :param volcoll_id: The volcoll_id of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._volcoll_id = volcoll_id

    @property
    def volcoll_name(self):
        """Gets the volcoll_name of this NimbleVolumeFilterableFields.  # noqa: E501

        Name of volume collection of which this volume is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :return: The volcoll_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._volcoll_name

    @volcoll_name.setter
    def volcoll_name(self, volcoll_name):
        """Sets the volcoll_name of this NimbleVolumeFilterableFields.

        Name of volume collection of which this volume is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :param volcoll_name: The volcoll_name of this NimbleVolumeFilterableFields.  # noqa: E501
        :type: str
        """

        self._volcoll_name = volcoll_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleVolumeFilterableFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
