# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CapacityByTier(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fc_free': 'float',
        'fc_used': 'float',
        'nl_free': 'float',
        'nl_used': 'float',
        'ssd_free': 'float',
        'ssd_used': 'float',
        'total_used': 'float',
        'usable_capacity': 'float'
    }

    attribute_map = {
        'fc_free': 'fcFree',
        'fc_used': 'fcUsed',
        'nl_free': 'nlFree',
        'nl_used': 'nlUsed',
        'ssd_free': 'ssdFree',
        'ssd_used': 'ssdUsed',
        'total_used': 'totalUsed',
        'usable_capacity': 'usableCapacity'
    }

    def __init__(self, fc_free=None, fc_used=None, nl_free=None, nl_used=None, ssd_free=None, ssd_used=None, total_used=None, usable_capacity=None):  # noqa: E501
        """CapacityByTier - a model defined in OpenAPI"""  # noqa: E501

        self._fc_free = None
        self._fc_used = None
        self._nl_free = None
        self._nl_used = None
        self._ssd_free = None
        self._ssd_used = None
        self._total_used = None
        self._usable_capacity = None
        self.discriminator = None

        if fc_free is not None:
            self.fc_free = fc_free
        if fc_used is not None:
            self.fc_used = fc_used
        if nl_free is not None:
            self.nl_free = nl_free
        if nl_used is not None:
            self.nl_used = nl_used
        if ssd_free is not None:
            self.ssd_free = ssd_free
        if ssd_used is not None:
            self.ssd_used = ssd_used
        if total_used is not None:
            self.total_used = total_used
        if usable_capacity is not None:
            self.usable_capacity = usable_capacity

    @property
    def fc_free(self):
        """Gets the fc_free of this CapacityByTier.  # noqa: E501

        fc free capacity  # noqa: E501

        :return: The fc_free of this CapacityByTier.  # noqa: E501
        :rtype: float
        """
        return self._fc_free

    @fc_free.setter
    def fc_free(self, fc_free):
        """Sets the fc_free of this CapacityByTier.

        fc free capacity  # noqa: E501

        :param fc_free: The fc_free of this CapacityByTier.  # noqa: E501
        :type: float
        """

        self._fc_free = fc_free

    @property
    def fc_used(self):
        """Gets the fc_used of this CapacityByTier.  # noqa: E501

        fc used capacity  # noqa: E501

        :return: The fc_used of this CapacityByTier.  # noqa: E501
        :rtype: float
        """
        return self._fc_used

    @fc_used.setter
    def fc_used(self, fc_used):
        """Sets the fc_used of this CapacityByTier.

        fc used capacity  # noqa: E501

        :param fc_used: The fc_used of this CapacityByTier.  # noqa: E501
        :type: float
        """

        self._fc_used = fc_used

    @property
    def nl_free(self):
        """Gets the nl_free of this CapacityByTier.  # noqa: E501

        nl free capacity  # noqa: E501

        :return: The nl_free of this CapacityByTier.  # noqa: E501
        :rtype: float
        """
        return self._nl_free

    @nl_free.setter
    def nl_free(self, nl_free):
        """Sets the nl_free of this CapacityByTier.

        nl free capacity  # noqa: E501

        :param nl_free: The nl_free of this CapacityByTier.  # noqa: E501
        :type: float
        """

        self._nl_free = nl_free

    @property
    def nl_used(self):
        """Gets the nl_used of this CapacityByTier.  # noqa: E501

        nl used capacity  # noqa: E501

        :return: The nl_used of this CapacityByTier.  # noqa: E501
        :rtype: float
        """
        return self._nl_used

    @nl_used.setter
    def nl_used(self, nl_used):
        """Sets the nl_used of this CapacityByTier.

        nl used capacity  # noqa: E501

        :param nl_used: The nl_used of this CapacityByTier.  # noqa: E501
        :type: float
        """

        self._nl_used = nl_used

    @property
    def ssd_free(self):
        """Gets the ssd_free of this CapacityByTier.  # noqa: E501

        ssd free capacity  # noqa: E501

        :return: The ssd_free of this CapacityByTier.  # noqa: E501
        :rtype: float
        """
        return self._ssd_free

    @ssd_free.setter
    def ssd_free(self, ssd_free):
        """Sets the ssd_free of this CapacityByTier.

        ssd free capacity  # noqa: E501

        :param ssd_free: The ssd_free of this CapacityByTier.  # noqa: E501
        :type: float
        """

        self._ssd_free = ssd_free

    @property
    def ssd_used(self):
        """Gets the ssd_used of this CapacityByTier.  # noqa: E501

        ssd used capacity  # noqa: E501

        :return: The ssd_used of this CapacityByTier.  # noqa: E501
        :rtype: float
        """
        return self._ssd_used

    @ssd_used.setter
    def ssd_used(self, ssd_used):
        """Sets the ssd_used of this CapacityByTier.

        ssd used capacity  # noqa: E501

        :param ssd_used: The ssd_used of this CapacityByTier.  # noqa: E501
        :type: float
        """

        self._ssd_used = ssd_used

    @property
    def total_used(self):
        """Gets the total_used of this CapacityByTier.  # noqa: E501

        usable capacity  # noqa: E501

        :return: The total_used of this CapacityByTier.  # noqa: E501
        :rtype: float
        """
        return self._total_used

    @total_used.setter
    def total_used(self, total_used):
        """Sets the total_used of this CapacityByTier.

        usable capacity  # noqa: E501

        :param total_used: The total_used of this CapacityByTier.  # noqa: E501
        :type: float
        """

        self._total_used = total_used

    @property
    def usable_capacity(self):
        """Gets the usable_capacity of this CapacityByTier.  # noqa: E501

        usable capacity  # noqa: E501

        :return: The usable_capacity of this CapacityByTier.  # noqa: E501
        :rtype: float
        """
        return self._usable_capacity

    @usable_capacity.setter
    def usable_capacity(self, usable_capacity):
        """Sets the usable_capacity of this CapacityByTier.

        usable capacity  # noqa: E501

        :param usable_capacity: The usable_capacity of this CapacityByTier.  # noqa: E501
        :type: float
        """

        self._usable_capacity = usable_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityByTier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
