# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Mailsettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'MsAssociatedLinks',
        'authentication_required': 'str',
        'console_uri': 'str',
        'customer_id': 'str',
        'friendly_cert': 'FriendlyCertificate',
        'generation': 'int',
        'mail_host_domain': 'str',
        'mail_host_server': 'str',
        'port': 'int',
        'request_uri': 'str',
        'sender_email_id': 'str',
        'type': 'str',
        'username': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'authentication_required': 'authenticationRequired',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'friendly_cert': 'friendlyCert',
        'generation': 'generation',
        'mail_host_domain': 'mailHostDomain',
        'mail_host_server': 'mailHostServer',
        'port': 'port',
        'request_uri': 'requestUri',
        'sender_email_id': 'senderEmailId',
        'type': 'type',
        'username': 'username'
    }

    def __init__(self, associated_links=None, authentication_required=None, console_uri=None, customer_id=None, friendly_cert=None, generation=None, mail_host_domain=None, mail_host_server=None, port=None, request_uri=None, sender_email_id=None, type=None, username=None):  # noqa: E501
        """Mailsettings - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._authentication_required = None
        self._console_uri = None
        self._customer_id = None
        self._friendly_cert = None
        self._generation = None
        self._mail_host_domain = None
        self._mail_host_server = None
        self._port = None
        self._request_uri = None
        self._sender_email_id = None
        self._type = None
        self._username = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if authentication_required is not None:
            self.authentication_required = authentication_required
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if friendly_cert is not None:
            self.friendly_cert = friendly_cert
        if generation is not None:
            self.generation = generation
        if mail_host_domain is not None:
            self.mail_host_domain = mail_host_domain
        if mail_host_server is not None:
            self.mail_host_server = mail_host_server
        if port is not None:
            self.port = port
        if request_uri is not None:
            self.request_uri = request_uri
        if sender_email_id is not None:
            self.sender_email_id = sender_email_id
        if type is not None:
            self.type = type
        if username is not None:
            self.username = username

    @property
    def associated_links(self):
        """Gets the associated_links of this Mailsettings.  # noqa: E501


        :return: The associated_links of this Mailsettings.  # noqa: E501
        :rtype: MsAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this Mailsettings.


        :param associated_links: The associated_links of this Mailsettings.  # noqa: E501
        :type: MsAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def authentication_required(self):
        """Gets the authentication_required of this Mailsettings.  # noqa: E501

        Authentication needed for SMTP settings,possible options are:enabled or disabled  # noqa: E501

        :return: The authentication_required of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._authentication_required

    @authentication_required.setter
    def authentication_required(self, authentication_required):
        """Sets the authentication_required of this Mailsettings.

        Authentication needed for SMTP settings,possible options are:enabled or disabled  # noqa: E501

        :param authentication_required: The authentication_required of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._authentication_required = authentication_required

    @property
    def console_uri(self):
        """Gets the console_uri of this Mailsettings.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this Mailsettings.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this Mailsettings.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Mailsettings.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def friendly_cert(self):
        """Gets the friendly_cert of this Mailsettings.  # noqa: E501


        :return: The friendly_cert of this Mailsettings.  # noqa: E501
        :rtype: FriendlyCertificate
        """
        return self._friendly_cert

    @friendly_cert.setter
    def friendly_cert(self, friendly_cert):
        """Sets the friendly_cert of this Mailsettings.


        :param friendly_cert: The friendly_cert of this Mailsettings.  # noqa: E501
        :type: FriendlyCertificate
        """

        self._friendly_cert = friendly_cert

    @property
    def generation(self):
        """Gets the generation of this Mailsettings.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.   # noqa: E501

        :return: The generation of this Mailsettings.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this Mailsettings.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.   # noqa: E501

        :param generation: The generation of this Mailsettings.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def mail_host_domain(self):
        """Gets the mail_host_domain of this Mailsettings.  # noqa: E501

        SMTP server's Host Domain  # noqa: E501

        :return: The mail_host_domain of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._mail_host_domain

    @mail_host_domain.setter
    def mail_host_domain(self, mail_host_domain):
        """Sets the mail_host_domain of this Mailsettings.

        SMTP server's Host Domain  # noqa: E501

        :param mail_host_domain: The mail_host_domain of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._mail_host_domain = mail_host_domain

    @property
    def mail_host_server(self):
        """Gets the mail_host_server of this Mailsettings.  # noqa: E501

        SMTP server address/IP  # noqa: E501

        :return: The mail_host_server of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._mail_host_server

    @mail_host_server.setter
    def mail_host_server(self, mail_host_server):
        """Sets the mail_host_server of this Mailsettings.

        SMTP server address/IP  # noqa: E501

        :param mail_host_server: The mail_host_server of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._mail_host_server = mail_host_server

    @property
    def port(self):
        """Gets the port of this Mailsettings.  # noqa: E501

        SMTP server's port number  # noqa: E501

        :return: The port of this Mailsettings.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Mailsettings.

        SMTP server's port number  # noqa: E501

        :param port: The port of this Mailsettings.  # noqa: E501
        :type: int
        """
        allowed_values = [25, 465, 587, 2525]  # noqa: E501
        if port not in allowed_values:
            raise ValueError(
                "Invalid value for `port` ({0}), must be one of {1}"  # noqa: E501
                .format(port, allowed_values)
            )

        self._port = port

    @property
    def request_uri(self):
        """Gets the request_uri of this Mailsettings.  # noqa: E501

        requestUri for mail settings     # noqa: E501

        :return: The request_uri of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this Mailsettings.

        requestUri for mail settings     # noqa: E501

        :param request_uri: The request_uri of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def sender_email_id(self):
        """Gets the sender_email_id of this Mailsettings.  # noqa: E501

        Sender email address  # noqa: E501

        :return: The sender_email_id of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._sender_email_id

    @sender_email_id.setter
    def sender_email_id(self, sender_email_id):
        """Sets the sender_email_id of this Mailsettings.

        Sender email address  # noqa: E501

        :param sender_email_id: The sender_email_id of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._sender_email_id = sender_email_id

    @property
    def type(self):
        """Gets the type of this Mailsettings.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Mailsettings.

        The type of resource.  # noqa: E501

        :param type: The type of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def username(self):
        """Gets the username of this Mailsettings.  # noqa: E501

        SMTP server's username authentication  # noqa: E501

        :return: The username of this Mailsettings.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Mailsettings.

        SMTP server's username authentication  # noqa: E501

        :param username: The username of this Mailsettings.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mailsettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
