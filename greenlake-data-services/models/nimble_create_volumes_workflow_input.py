# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleCreateVolumesWorkflowInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'agent_type': 'str',
        'app_uuid': 'str',
        'count': 'int',
        'dedupe_enabled': 'bool',
        'downstream_partner': 'str',
        'downstream_partner_id': 'str',
        'folder_id': 'str',
        'host_groups': 'list[NimbleHostGroupDetails]',
        'limit': 'int',
        'limit_iops': 'int',
        'limit_mbps': 'int',
        'name': 'str',
        'perfpolicy': 'CustomApp',
        'perfpolicy_id': 'str',
        'pool_id': 'str',
        'protection_policy_id': 'str',
        'protection_policy_schedules': 'list[NimbleCreateVolumesWorkflowInputProtectionPolicySchedules]',
        'replication_start_time': 'int',
        'size': 'int',
        'vol_col_id': 'str',
        'vol_col_name': 'str',
        'warn_level': 'int'
    }

    attribute_map = {
        'agent_type': 'agent_type',
        'app_uuid': 'app_uuid',
        'count': 'count',
        'dedupe_enabled': 'dedupe_enabled',
        'downstream_partner': 'downstreamPartner',
        'downstream_partner_id': 'downstreamPartnerId',
        'folder_id': 'folder_id',
        'host_groups': 'host_groups',
        'limit': 'limit',
        'limit_iops': 'limit_iops',
        'limit_mbps': 'limit_mbps',
        'name': 'name',
        'perfpolicy': 'perfpolicy',
        'perfpolicy_id': 'perfpolicy_id',
        'pool_id': 'pool_id',
        'protection_policy_id': 'protectionPolicyId',
        'protection_policy_schedules': 'protectionPolicySchedules',
        'replication_start_time': 'replicationStartTime',
        'size': 'size',
        'vol_col_id': 'volColId',
        'vol_col_name': 'volColName',
        'warn_level': 'warn_level'
    }

    def __init__(self, agent_type=None, app_uuid=None, count=None, dedupe_enabled=None, downstream_partner=None, downstream_partner_id=None, folder_id=None, host_groups=None, limit=None, limit_iops=None, limit_mbps=None, name=None, perfpolicy=None, perfpolicy_id=None, pool_id=None, protection_policy_id=None, protection_policy_schedules=None, replication_start_time=None, size=None, vol_col_id=None, vol_col_name=None, warn_level=None):  # noqa: E501
        """NimbleCreateVolumesWorkflowInput - a model defined in OpenAPI"""  # noqa: E501

        self._agent_type = None
        self._app_uuid = None
        self._count = None
        self._dedupe_enabled = None
        self._downstream_partner = None
        self._downstream_partner_id = None
        self._folder_id = None
        self._host_groups = None
        self._limit = None
        self._limit_iops = None
        self._limit_mbps = None
        self._name = None
        self._perfpolicy = None
        self._perfpolicy_id = None
        self._pool_id = None
        self._protection_policy_id = None
        self._protection_policy_schedules = None
        self._replication_start_time = None
        self._size = None
        self._vol_col_id = None
        self._vol_col_name = None
        self._warn_level = None
        self.discriminator = None

        if agent_type is not None:
            self.agent_type = agent_type
        if app_uuid is not None:
            self.app_uuid = app_uuid
        self.count = count
        if dedupe_enabled is not None:
            self.dedupe_enabled = dedupe_enabled
        if downstream_partner is not None:
            self.downstream_partner = downstream_partner
        if downstream_partner_id is not None:
            self.downstream_partner_id = downstream_partner_id
        if folder_id is not None:
            self.folder_id = folder_id
        if host_groups is not None:
            self.host_groups = host_groups
        if limit is not None:
            self.limit = limit
        if limit_iops is not None:
            self.limit_iops = limit_iops
        if limit_mbps is not None:
            self.limit_mbps = limit_mbps
        self.name = name
        if perfpolicy is not None:
            self.perfpolicy = perfpolicy
        if perfpolicy_id is not None:
            self.perfpolicy_id = perfpolicy_id
        if pool_id is not None:
            self.pool_id = pool_id
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if protection_policy_schedules is not None:
            self.protection_policy_schedules = protection_policy_schedules
        if replication_start_time is not None:
            self.replication_start_time = replication_start_time
        self.size = size
        if vol_col_id is not None:
            self.vol_col_id = vol_col_id
        if vol_col_name is not None:
            self.vol_col_name = vol_col_name
        if warn_level is not None:
            self.warn_level = warn_level

    @property
    def agent_type(self):
        """Gets the agent_type of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        External management agent type. Defaults to 'none'. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'  # noqa: E501

        :return: The agent_type of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """Sets the agent_type of this NimbleCreateVolumesWorkflowInput.

        External management agent type. Defaults to 'none'. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'  # noqa: E501

        :param agent_type: The agent_type of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._agent_type = agent_type

    @property
    def app_uuid(self):
        """Gets the app_uuid of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to the empty string.   # noqa: E501

        :return: The app_uuid of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid):
        """Sets the app_uuid of this NimbleCreateVolumesWorkflowInput.

        Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to the empty string.   # noqa: E501

        :param app_uuid: The app_uuid of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._app_uuid = app_uuid

    @property
    def count(self):
        """Gets the count of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Number of volumes to be created.  # noqa: E501

        :return: The count of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this NimbleCreateVolumesWorkflowInput.

        Number of volumes to be created.  # noqa: E501

        :param count: The count of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def dedupe_enabled(self):
        """Gets the dedupe_enabled of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Indicate whether dedupe is enabled. Defaults to 'false'.  # noqa: E501

        :return: The dedupe_enabled of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_enabled

    @dedupe_enabled.setter
    def dedupe_enabled(self, dedupe_enabled):
        """Sets the dedupe_enabled of this NimbleCreateVolumesWorkflowInput.

        Indicate whether dedupe is enabled. Defaults to 'false'.  # noqa: E501

        :param dedupe_enabled: The dedupe_enabled of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: bool
        """

        self._dedupe_enabled = dedupe_enabled

    @property
    def downstream_partner(self):
        """Gets the downstream_partner of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Name of the downstream partner  # noqa: E501

        :return: The downstream_partner of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._downstream_partner

    @downstream_partner.setter
    def downstream_partner(self, downstream_partner):
        """Sets the downstream_partner of this NimbleCreateVolumesWorkflowInput.

        Name of the downstream partner  # noqa: E501

        :param downstream_partner: The downstream_partner of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._downstream_partner = downstream_partner

    @property
    def downstream_partner_id(self):
        """Gets the downstream_partner_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        ID of the downstream partner  # noqa: E501

        :return: The downstream_partner_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._downstream_partner_id

    @downstream_partner_id.setter
    def downstream_partner_id(self, downstream_partner_id):
        """Sets the downstream_partner_id of this NimbleCreateVolumesWorkflowInput.

        ID of the downstream partner  # noqa: E501

        :param downstream_partner_id: The downstream_partner_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._downstream_partner_id = downstream_partner_id

    @property
    def folder_id(self):
        """Gets the folder_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal int64 or the empty string. Defaults to the empty string.  # noqa: E501

        :return: The folder_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this NimbleCreateVolumesWorkflowInput.

        ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal int64 or the empty string. Defaults to the empty string.  # noqa: E501

        :param folder_id: The folder_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def host_groups(self):
        """Gets the host_groups of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        List of host group details.  # noqa: E501

        :return: The host_groups of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: list[NimbleHostGroupDetails]
        """
        return self._host_groups

    @host_groups.setter
    def host_groups(self, host_groups):
        """Sets the host_groups of this NimbleCreateVolumesWorkflowInput.

        List of host group details.  # noqa: E501

        :param host_groups: The host_groups of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: list[NimbleHostGroupDetails]
        """

        self._host_groups = host_groups

    @property
    def limit(self):
        """Gets the limit of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume limit set on group, typically 100.  # noqa: E501

        :return: The limit of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this NimbleCreateVolumesWorkflowInput.

        Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume limit set on group, typically 100.  # noqa: E501

        :param limit: The limit of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def limit_iops(self):
        """Gets the limit_iops of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default the volume is created with unlimited iops.  # noqa: E501

        :return: The limit_iops of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_iops

    @limit_iops.setter
    def limit_iops(self, limit_iops):
        """Sets the limit_iops of this NimbleCreateVolumesWorkflowInput.

        IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default the volume is created with unlimited iops.  # noqa: E501

        :param limit_iops: The limit_iops of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: int
        """

        self._limit_iops = limit_iops

    @property
    def limit_mbps(self):
        """Gets the limit_mbps of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default, the volume is created with unlimited throughput.  # noqa: E501

        :return: The limit_mbps of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: int
        """
        return self._limit_mbps

    @limit_mbps.setter
    def limit_mbps(self, limit_mbps):
        """Sets the limit_mbps of this NimbleCreateVolumesWorkflowInput.

        Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default, the volume is created with unlimited throughput.  # noqa: E501

        :param limit_mbps: The limit_mbps of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: int
        """

        self._limit_mbps = limit_mbps

    @property
    def name(self):
        """Gets the name of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :return: The name of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleCreateVolumesWorkflowInput.

        Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :param name: The name of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def perfpolicy(self):
        """Gets the perfpolicy of this NimbleCreateVolumesWorkflowInput.  # noqa: E501


        :return: The perfpolicy of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: CustomApp
        """
        return self._perfpolicy

    @perfpolicy.setter
    def perfpolicy(self, perfpolicy):
        """Sets the perfpolicy of this NimbleCreateVolumesWorkflowInput.


        :param perfpolicy: The perfpolicy of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: CustomApp
        """

        self._perfpolicy = perfpolicy

    @property
    def perfpolicy_id(self):
        """Gets the perfpolicy_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal int64. Defaults to ID of the 'default' performance policy.  # noqa: E501

        :return: The perfpolicy_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._perfpolicy_id

    @perfpolicy_id.setter
    def perfpolicy_id(self, perfpolicy_id):
        """Sets the perfpolicy_id of this NimbleCreateVolumesWorkflowInput.

        Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal int64. Defaults to ID of the 'default' performance policy.  # noqa: E501

        :param perfpolicy_id: The perfpolicy_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._perfpolicy_id = perfpolicy_id

    @property
    def pool_id(self):
        """Gets the pool_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal int64. Defaults to the ID of the 'default' pool.  # noqa: E501

        :return: The pool_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this NimbleCreateVolumesWorkflowInput.

        Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal int64. Defaults to the ID of the 'default' pool.  # noqa: E501

        :param pool_id: The pool_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._pool_id = pool_id

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Protection policy ID  # noqa: E501

        :return: The protection_policy_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this NimbleCreateVolumesWorkflowInput.

        Protection policy ID  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def protection_policy_schedules(self):
        """Gets the protection_policy_schedules of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Protection Policy Schedule  # noqa: E501

        :return: The protection_policy_schedules of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: list[NimbleCreateVolumesWorkflowInputProtectionPolicySchedules]
        """
        return self._protection_policy_schedules

    @protection_policy_schedules.setter
    def protection_policy_schedules(self, protection_policy_schedules):
        """Sets the protection_policy_schedules of this NimbleCreateVolumesWorkflowInput.

        Protection Policy Schedule  # noqa: E501

        :param protection_policy_schedules: The protection_policy_schedules of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: list[NimbleCreateVolumesWorkflowInputProtectionPolicySchedules]
        """

        self._protection_policy_schedules = protection_policy_schedules

    @property
    def replication_start_time(self):
        """Gets the replication_start_time of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Remote replication start time which  will be used to offset local snapshot start time  # noqa: E501

        :return: The replication_start_time of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: int
        """
        return self._replication_start_time

    @replication_start_time.setter
    def replication_start_time(self, replication_start_time):
        """Sets the replication_start_time of this NimbleCreateVolumesWorkflowInput.

        Remote replication start time which  will be used to offset local snapshot start time  # noqa: E501

        :param replication_start_time: The replication_start_time of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: int
        """

        self._replication_start_time = replication_start_time

    @property
    def size(self):
        """Gets the size of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.When creating a new volume, size is required. When cloning an existing volume, size defaults to that of the parent volume.  # noqa: E501

        :return: The size of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NimbleCreateVolumesWorkflowInput.

        Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.When creating a new volume, size is required. When cloning an existing volume, size defaults to that of the parent volume.  # noqa: E501

        :param size: The size of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def vol_col_id(self):
        """Gets the vol_col_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        volume collection id  # noqa: E501

        :return: The vol_col_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._vol_col_id

    @vol_col_id.setter
    def vol_col_id(self, vol_col_id):
        """Sets the vol_col_id of this NimbleCreateVolumesWorkflowInput.

        volume collection id  # noqa: E501

        :param vol_col_id: The vol_col_id of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._vol_col_id = vol_col_id

    @property
    def vol_col_name(self):
        """Gets the vol_col_name of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        volume collection Name  # noqa: E501

        :return: The vol_col_name of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: str
        """
        return self._vol_col_name

    @vol_col_name.setter
    def vol_col_name(self, vol_col_name):
        """Sets the vol_col_name of this NimbleCreateVolumesWorkflowInput.

        volume collection Name  # noqa: E501

        :param vol_col_name: The vol_col_name of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: str
        """

        self._vol_col_name = vol_col_name

    @property
    def warn_level(self):
        """Gets the warn_level of this NimbleCreateVolumesWorkflowInput.  # noqa: E501

        Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. Percentage as integer from 0 to 100. Defaults to the default volume warning level set on the group, typically 80.  # noqa: E501

        :return: The warn_level of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :rtype: int
        """
        return self._warn_level

    @warn_level.setter
    def warn_level(self, warn_level):
        """Sets the warn_level of this NimbleCreateVolumesWorkflowInput.

        Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. Percentage as integer from 0 to 100. Defaults to the default volume warning level set on the group, typically 80.  # noqa: E501

        :param warn_level: The warn_level of this NimbleCreateVolumesWorkflowInput.  # noqa: E501
        :type: int
        """

        self._warn_level = warn_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleCreateVolumesWorkflowInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
