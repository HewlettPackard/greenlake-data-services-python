# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateHostGroupInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comment': 'str',
        'host_ids': 'list[str]',
        'hosts_to_create': 'list[CreateHostInput]',
        'name': 'str',
        'user_created': 'bool'
    }

    attribute_map = {
        'comment': 'comment',
        'host_ids': 'hostIds',
        'hosts_to_create': 'hostsToCreate',
        'name': 'name',
        'user_created': 'userCreated'
    }

    def __init__(self, comment=None, host_ids=None, hosts_to_create=None, name=None, user_created=None):  # noqa: E501
        """CreateHostGroupInput - a model defined in OpenAPI"""  # noqa: E501

        self._comment = None
        self._host_ids = None
        self._hosts_to_create = None
        self._name = None
        self._user_created = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if host_ids is not None:
            self.host_ids = host_ids
        if hosts_to_create is not None:
            self.hosts_to_create = hosts_to_create
        self.name = name
        self.user_created = user_created

    @property
    def comment(self):
        """Gets the comment of this CreateHostGroupInput.  # noqa: E501

        Comment  # noqa: E501

        :return: The comment of this CreateHostGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreateHostGroupInput.

        Comment  # noqa: E501

        :param comment: The comment of this CreateHostGroupInput.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def host_ids(self):
        """Gets the host_ids of this CreateHostGroupInput.  # noqa: E501

        List of host ids of existing hosts  # noqa: E501

        :return: The host_ids of this CreateHostGroupInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this CreateHostGroupInput.

        List of host ids of existing hosts  # noqa: E501

        :param host_ids: The host_ids of this CreateHostGroupInput.  # noqa: E501
        :type: list[str]
        """

        self._host_ids = host_ids

    @property
    def hosts_to_create(self):
        """Gets the hosts_to_create of this CreateHostGroupInput.  # noqa: E501

        List of hosts to be created and added to this hostGroup  # noqa: E501

        :return: The hosts_to_create of this CreateHostGroupInput.  # noqa: E501
        :rtype: list[CreateHostInput]
        """
        return self._hosts_to_create

    @hosts_to_create.setter
    def hosts_to_create(self, hosts_to_create):
        """Sets the hosts_to_create of this CreateHostGroupInput.

        List of hosts to be created and added to this hostGroup  # noqa: E501

        :param hosts_to_create: The hosts_to_create of this CreateHostGroupInput.  # noqa: E501
        :type: list[CreateHostInput]
        """

        self._hosts_to_create = hosts_to_create

    @property
    def name(self):
        """Gets the name of this CreateHostGroupInput.  # noqa: E501

        Name of the host group  # noqa: E501

        :return: The name of this CreateHostGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateHostGroupInput.

        Name of the host group  # noqa: E501

        :param name: The name of this CreateHostGroupInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def user_created(self):
        """Gets the user_created of this CreateHostGroupInput.  # noqa: E501

        Idicates whether user created host or discovered host  # noqa: E501

        :return: The user_created of this CreateHostGroupInput.  # noqa: E501
        :rtype: bool
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this CreateHostGroupInput.

        Idicates whether user created host or discovered host  # noqa: E501

        :param user_created: The user_created of this CreateHostGroupInput.  # noqa: E501
        :type: bool
        """
        if user_created is None:
            raise ValueError("Invalid value for `user_created`, must not be `None`")  # noqa: E501

        self._user_created = user_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateHostGroupInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
