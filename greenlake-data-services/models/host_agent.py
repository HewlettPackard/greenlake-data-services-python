# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HostAgent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip_addr': 'str',
        'architecture': 'str',
        'boot_from_san': 'str',
        'cluster_id': 'str',
        'cluster_name': 'str',
        'cluster_software': 'str',
        'cluster_version': 'str',
        'host_apps': 'str',
        'last_updated': 'HostAgentLastUpdated',
        'multi_path_software': 'str',
        'multi_path_software_version': 'str',
        'os': 'str',
        'os_patch': 'str',
        'os_version': 'str',
        'reported_name': 'str'
    }

    attribute_map = {
        'ip_addr': 'IPAddr',
        'architecture': 'architecture',
        'boot_from_san': 'bootFromSan',
        'cluster_id': 'clusterID',
        'cluster_name': 'clusterName',
        'cluster_software': 'clusterSoftware',
        'cluster_version': 'clusterVersion',
        'host_apps': 'hostApps',
        'last_updated': 'lastUpdated',
        'multi_path_software': 'multiPathSoftware',
        'multi_path_software_version': 'multiPathSoftwareVersion',
        'os': 'os',
        'os_patch': 'osPatch',
        'os_version': 'osVersion',
        'reported_name': 'reportedName'
    }

    def __init__(self, ip_addr=None, architecture=None, boot_from_san=None, cluster_id=None, cluster_name=None, cluster_software=None, cluster_version=None, host_apps=None, last_updated=None, multi_path_software=None, multi_path_software_version=None, os=None, os_patch=None, os_version=None, reported_name=None):  # noqa: E501
        """HostAgent - a model defined in OpenAPI"""  # noqa: E501

        self._ip_addr = None
        self._architecture = None
        self._boot_from_san = None
        self._cluster_id = None
        self._cluster_name = None
        self._cluster_software = None
        self._cluster_version = None
        self._host_apps = None
        self._last_updated = None
        self._multi_path_software = None
        self._multi_path_software_version = None
        self._os = None
        self._os_patch = None
        self._os_version = None
        self._reported_name = None
        self.discriminator = None

        if ip_addr is not None:
            self.ip_addr = ip_addr
        if architecture is not None:
            self.architecture = architecture
        if boot_from_san is not None:
            self.boot_from_san = boot_from_san
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if cluster_software is not None:
            self.cluster_software = cluster_software
        if cluster_version is not None:
            self.cluster_version = cluster_version
        if host_apps is not None:
            self.host_apps = host_apps
        if last_updated is not None:
            self.last_updated = last_updated
        if multi_path_software is not None:
            self.multi_path_software = multi_path_software
        if multi_path_software_version is not None:
            self.multi_path_software_version = multi_path_software_version
        if os is not None:
            self.os = os
        if os_patch is not None:
            self.os_patch = os_patch
        if os_version is not None:
            self.os_version = os_version
        if reported_name is not None:
            self.reported_name = reported_name

    @property
    def ip_addr(self):
        """Gets the ip_addr of this HostAgent.  # noqa: E501

        Ip Address  # noqa: E501

        :return: The ip_addr of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._ip_addr

    @ip_addr.setter
    def ip_addr(self, ip_addr):
        """Sets the ip_addr of this HostAgent.

        Ip Address  # noqa: E501

        :param ip_addr: The ip_addr of this HostAgent.  # noqa: E501
        :type: str
        """

        self._ip_addr = ip_addr

    @property
    def architecture(self):
        """Gets the architecture of this HostAgent.  # noqa: E501

        Architecture Name  # noqa: E501

        :return: The architecture of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this HostAgent.

        Architecture Name  # noqa: E501

        :param architecture: The architecture of this HostAgent.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def boot_from_san(self):
        """Gets the boot_from_san of this HostAgent.  # noqa: E501

        Boot from SAN  # noqa: E501

        :return: The boot_from_san of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._boot_from_san

    @boot_from_san.setter
    def boot_from_san(self, boot_from_san):
        """Sets the boot_from_san of this HostAgent.

        Boot from SAN  # noqa: E501

        :param boot_from_san: The boot_from_san of this HostAgent.  # noqa: E501
        :type: str
        """

        self._boot_from_san = boot_from_san

    @property
    def cluster_id(self):
        """Gets the cluster_id of this HostAgent.  # noqa: E501

        Cluster ID   # noqa: E501

        :return: The cluster_id of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this HostAgent.

        Cluster ID   # noqa: E501

        :param cluster_id: The cluster_id of this HostAgent.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this HostAgent.  # noqa: E501

        Cluster Cluster  # noqa: E501

        :return: The cluster_name of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this HostAgent.

        Cluster Cluster  # noqa: E501

        :param cluster_name: The cluster_name of this HostAgent.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def cluster_software(self):
        """Gets the cluster_software of this HostAgent.  # noqa: E501

        Cluster OS  # noqa: E501

        :return: The cluster_software of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._cluster_software

    @cluster_software.setter
    def cluster_software(self, cluster_software):
        """Sets the cluster_software of this HostAgent.

        Cluster OS  # noqa: E501

        :param cluster_software: The cluster_software of this HostAgent.  # noqa: E501
        :type: str
        """

        self._cluster_software = cluster_software

    @property
    def cluster_version(self):
        """Gets the cluster_version of this HostAgent.  # noqa: E501

        Cluster Version   # noqa: E501

        :return: The cluster_version of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._cluster_version

    @cluster_version.setter
    def cluster_version(self, cluster_version):
        """Sets the cluster_version of this HostAgent.

        Cluster Version   # noqa: E501

        :param cluster_version: The cluster_version of this HostAgent.  # noqa: E501
        :type: str
        """

        self._cluster_version = cluster_version

    @property
    def host_apps(self):
        """Gets the host_apps of this HostAgent.  # noqa: E501

        Host Applications  # noqa: E501

        :return: The host_apps of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._host_apps

    @host_apps.setter
    def host_apps(self, host_apps):
        """Sets the host_apps of this HostAgent.

        Host Applications  # noqa: E501

        :param host_apps: The host_apps of this HostAgent.  # noqa: E501
        :type: str
        """

        self._host_apps = host_apps

    @property
    def last_updated(self):
        """Gets the last_updated of this HostAgent.  # noqa: E501


        :return: The last_updated of this HostAgent.  # noqa: E501
        :rtype: HostAgentLastUpdated
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this HostAgent.


        :param last_updated: The last_updated of this HostAgent.  # noqa: E501
        :type: HostAgentLastUpdated
        """

        self._last_updated = last_updated

    @property
    def multi_path_software(self):
        """Gets the multi_path_software of this HostAgent.  # noqa: E501

        Multipath Software  # noqa: E501

        :return: The multi_path_software of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._multi_path_software

    @multi_path_software.setter
    def multi_path_software(self, multi_path_software):
        """Sets the multi_path_software of this HostAgent.

        Multipath Software  # noqa: E501

        :param multi_path_software: The multi_path_software of this HostAgent.  # noqa: E501
        :type: str
        """

        self._multi_path_software = multi_path_software

    @property
    def multi_path_software_version(self):
        """Gets the multi_path_software_version of this HostAgent.  # noqa: E501

        MultiPath Software Version  # noqa: E501

        :return: The multi_path_software_version of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._multi_path_software_version

    @multi_path_software_version.setter
    def multi_path_software_version(self, multi_path_software_version):
        """Sets the multi_path_software_version of this HostAgent.

        MultiPath Software Version  # noqa: E501

        :param multi_path_software_version: The multi_path_software_version of this HostAgent.  # noqa: E501
        :type: str
        """

        self._multi_path_software_version = multi_path_software_version

    @property
    def os(self):
        """Gets the os of this HostAgent.  # noqa: E501

        Operating System Name  # noqa: E501

        :return: The os of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this HostAgent.

        Operating System Name  # noqa: E501

        :param os: The os of this HostAgent.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def os_patch(self):
        """Gets the os_patch of this HostAgent.  # noqa: E501

        Os patch  # noqa: E501

        :return: The os_patch of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._os_patch

    @os_patch.setter
    def os_patch(self, os_patch):
        """Sets the os_patch of this HostAgent.

        Os patch  # noqa: E501

        :param os_patch: The os_patch of this HostAgent.  # noqa: E501
        :type: str
        """

        self._os_patch = os_patch

    @property
    def os_version(self):
        """Gets the os_version of this HostAgent.  # noqa: E501

        Os version  # noqa: E501

        :return: The os_version of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this HostAgent.

        Os version  # noqa: E501

        :param os_version: The os_version of this HostAgent.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def reported_name(self):
        """Gets the reported_name of this HostAgent.  # noqa: E501

        Reported Name  # noqa: E501

        :return: The reported_name of this HostAgent.  # noqa: E501
        :rtype: str
        """
        return self._reported_name

    @reported_name.setter
    def reported_name(self, reported_name):
        """Sets the reported_name of this HostAgent.

        Reported Name  # noqa: E501

        :param reported_name: The reported_name of this HostAgent.  # noqa: E501
        :type: str
        """

        self._reported_name = reported_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
