# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FleetPoolList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'capacity_used': 'int',
        'customer_id': 'str',
        'generation': 'int',
        'id': 'str',
        'name': 'str',
        'resource_uri': 'str',
        'system_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'capacity_used': 'capacityUsed',
        'customer_id': 'customerId',
        'generation': 'generation',
        'id': 'id',
        'name': 'name',
        'resource_uri': 'resourceUri',
        'system_id': 'systemId',
        'type': 'type'
    }

    def __init__(self, capacity_used=None, customer_id=None, generation=None, id=None, name=None, resource_uri=None, system_id=None, type=None):  # noqa: E501
        """FleetPoolList - a model defined in OpenAPI"""  # noqa: E501

        self._capacity_used = None
        self._customer_id = None
        self._generation = None
        self._id = None
        self._name = None
        self._resource_uri = None
        self._system_id = None
        self._type = None
        self.discriminator = None

        if capacity_used is not None:
            self.capacity_used = capacity_used
        if customer_id is not None:
            self.customer_id = customer_id
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type

    @property
    def capacity_used(self):
        """Gets the capacity_used of this FleetPoolList.  # noqa: E501

        Capacity Used  # noqa: E501

        :return: The capacity_used of this FleetPoolList.  # noqa: E501
        :rtype: int
        """
        return self._capacity_used

    @capacity_used.setter
    def capacity_used(self, capacity_used):
        """Sets the capacity_used of this FleetPoolList.

        Capacity Used  # noqa: E501

        :param capacity_used: The capacity_used of this FleetPoolList.  # noqa: E501
        :type: int
        """

        self._capacity_used = capacity_used

    @property
    def customer_id(self):
        """Gets the customer_id of this FleetPoolList.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this FleetPoolList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this FleetPoolList.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this FleetPoolList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def generation(self):
        """Gets the generation of this FleetPoolList.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :return: The generation of this FleetPoolList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this FleetPoolList.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :param generation: The generation of this FleetPoolList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this FleetPoolList.  # noqa: E501

        Unique Identifier of the resource            # noqa: E501

        :return: The id of this FleetPoolList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FleetPoolList.

        Unique Identifier of the resource            # noqa: E501

        :param id: The id of this FleetPoolList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FleetPoolList.  # noqa: E501

        Name of the resource  # noqa: E501

        :return: The name of this FleetPoolList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FleetPoolList.

        Name of the resource  # noqa: E501

        :param name: The name of this FleetPoolList.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def resource_uri(self):
        """Gets the resource_uri of this FleetPoolList.  # noqa: E501

        resourceUri for detailed storage-pool object         # noqa: E501

        :return: The resource_uri of this FleetPoolList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this FleetPoolList.

        resourceUri for detailed storage-pool object         # noqa: E501

        :param resource_uri: The resource_uri of this FleetPoolList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def system_id(self):
        """Gets the system_id of this FleetPoolList.  # noqa: E501

        SystemID of the array  # noqa: E501

        :return: The system_id of this FleetPoolList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this FleetPoolList.

        SystemID of the array  # noqa: E501

        :param system_id: The system_id of this FleetPoolList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this FleetPoolList.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this FleetPoolList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FleetPoolList.

        The type of resource.  # noqa: E501

        :param type: The type of this FleetPoolList.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FleetPoolList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
