# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StateDetailed(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'args': 'list[str]',
        'default': 'str',
        'key': 'str',
        'localized_text': 'str'
    }

    attribute_map = {
        'args': 'args',
        'default': 'default',
        'key': 'key',
        'localized_text': 'localized_text'
    }

    def __init__(self, args=None, default=None, key=None, localized_text=None):  # noqa: E501
        """StateDetailed - a model defined in OpenAPI"""  # noqa: E501

        self._args = None
        self._default = None
        self._key = None
        self._localized_text = None
        self.discriminator = None

        if args is not None:
            self.args = args
        if default is not None:
            self.default = default
        if key is not None:
            self.key = key
        if localized_text is not None:
            self.localized_text = localized_text

    @property
    def args(self):
        """Gets the args of this StateDetailed.  # noqa: E501

        system ntp addresses  # noqa: E501

        :return: The args of this StateDetailed.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this StateDetailed.

        system ntp addresses  # noqa: E501

        :param args: The args of this StateDetailed.  # noqa: E501
        :type: list[str]
        """

        self._args = args

    @property
    def default(self):
        """Gets the default of this StateDetailed.  # noqa: E501

        Default Name  # noqa: E501

        :return: The default of this StateDetailed.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this StateDetailed.

        Default Name  # noqa: E501

        :param default: The default of this StateDetailed.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def key(self):
        """Gets the key of this StateDetailed.  # noqa: E501

        Key of the Host Name  # noqa: E501

        :return: The key of this StateDetailed.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this StateDetailed.

        Key of the Host Name  # noqa: E501

        :param key: The key of this StateDetailed.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def localized_text(self):
        """Gets the localized_text of this StateDetailed.  # noqa: E501

        Localized Text   # noqa: E501

        :return: The localized_text of this StateDetailed.  # noqa: E501
        :rtype: str
        """
        return self._localized_text

    @localized_text.setter
    def localized_text(self, localized_text):
        """Sets the localized_text of this StateDetailed.

        Localized Text   # noqa: E501

        :param localized_text: The localized_text of this StateDetailed.  # noqa: E501
        :type: str
        """

        self._localized_text = localized_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StateDetailed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
