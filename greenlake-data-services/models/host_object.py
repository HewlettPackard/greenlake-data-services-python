# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HostObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'ScAssociatedLinks',
        'associated_systems': 'list[str]',
        'comment': 'str',
        'console_uri': 'str',
        'contact': 'str',
        'customer_id': 'str',
        'edit_status': 'str',
        'fqdn': 'str',
        'generation': 'int',
        'host_groups': 'list[HostGroupSummaryObject]',
        'id': 'str',
        'initiators': 'list[InitiatorSummary]',
        'ip_address': 'str',
        'location': 'str',
        'marked_for_delete': 'bool',
        'model': 'str',
        'name': 'str',
        'operating_system': 'str',
        'persona': 'str',
        'protocol': 'str',
        'subnet': 'str',
        'systems': 'list[str]',
        'type': 'str',
        'user_created': 'bool'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'associated_systems': 'associatedSystems',
        'comment': 'comment',
        'console_uri': 'consoleUri',
        'contact': 'contact',
        'customer_id': 'customerId',
        'edit_status': 'editStatus',
        'fqdn': 'fqdn',
        'generation': 'generation',
        'host_groups': 'hostGroups',
        'id': 'id',
        'initiators': 'initiators',
        'ip_address': 'ipAddress',
        'location': 'location',
        'marked_for_delete': 'markedForDelete',
        'model': 'model',
        'name': 'name',
        'operating_system': 'operatingSystem',
        'persona': 'persona',
        'protocol': 'protocol',
        'subnet': 'subnet',
        'systems': 'systems',
        'type': 'type',
        'user_created': 'userCreated'
    }

    def __init__(self, associated_links=None, associated_systems=None, comment=None, console_uri=None, contact=None, customer_id=None, edit_status=None, fqdn=None, generation=None, host_groups=None, id=None, initiators=None, ip_address=None, location=None, marked_for_delete=None, model=None, name=None, operating_system=None, persona=None, protocol=None, subnet=None, systems=None, type=None, user_created=None):  # noqa: E501
        """HostObject - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._associated_systems = None
        self._comment = None
        self._console_uri = None
        self._contact = None
        self._customer_id = None
        self._edit_status = None
        self._fqdn = None
        self._generation = None
        self._host_groups = None
        self._id = None
        self._initiators = None
        self._ip_address = None
        self._location = None
        self._marked_for_delete = None
        self._model = None
        self._name = None
        self._operating_system = None
        self._persona = None
        self._protocol = None
        self._subnet = None
        self._systems = None
        self._type = None
        self._user_created = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if associated_systems is not None:
            self.associated_systems = associated_systems
        if comment is not None:
            self.comment = comment
        if console_uri is not None:
            self.console_uri = console_uri
        if contact is not None:
            self.contact = contact
        if customer_id is not None:
            self.customer_id = customer_id
        if edit_status is not None:
            self.edit_status = edit_status
        if fqdn is not None:
            self.fqdn = fqdn
        if generation is not None:
            self.generation = generation
        if host_groups is not None:
            self.host_groups = host_groups
        if id is not None:
            self.id = id
        if initiators is not None:
            self.initiators = initiators
        if ip_address is not None:
            self.ip_address = ip_address
        if location is not None:
            self.location = location
        if marked_for_delete is not None:
            self.marked_for_delete = marked_for_delete
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if operating_system is not None:
            self.operating_system = operating_system
        if persona is not None:
            self.persona = persona
        if protocol is not None:
            self.protocol = protocol
        if subnet is not None:
            self.subnet = subnet
        if systems is not None:
            self.systems = systems
        if type is not None:
            self.type = type
        if user_created is not None:
            self.user_created = user_created

    @property
    def associated_links(self):
        """Gets the associated_links of this HostObject.  # noqa: E501


        :return: The associated_links of this HostObject.  # noqa: E501
        :rtype: ScAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this HostObject.


        :param associated_links: The associated_links of this HostObject.  # noqa: E501
        :type: ScAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def associated_systems(self):
        """Gets the associated_systems of this HostObject.  # noqa: E501

        system IDs to which the host belongs to.  # noqa: E501

        :return: The associated_systems of this HostObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_systems

    @associated_systems.setter
    def associated_systems(self, associated_systems):
        """Sets the associated_systems of this HostObject.

        system IDs to which the host belongs to.  # noqa: E501

        :param associated_systems: The associated_systems of this HostObject.  # noqa: E501
        :type: list[str]
        """

        self._associated_systems = associated_systems

    @property
    def comment(self):
        """Gets the comment of this HostObject.  # noqa: E501

        Comment  # noqa: E501

        :return: The comment of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this HostObject.

        Comment  # noqa: E501

        :param comment: The comment of this HostObject.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def console_uri(self):
        """Gets the console_uri of this HostObject.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this HostObject.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this HostObject.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def contact(self):
        """Gets the contact of this HostObject.  # noqa: E501

        Contact information  # noqa: E501

        :return: The contact of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this HostObject.

        Contact information  # noqa: E501

        :param contact: The contact of this HostObject.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def customer_id(self):
        """Gets the customer_id of this HostObject.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this HostObject.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this HostObject.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def edit_status(self):
        """Gets the edit_status of this HostObject.  # noqa: E501

        Host Update or Delete progress status. Possible status are: Update_In_Progress,Update_Success,Update_Failed,Delete_In_Progress,Delete_Failed,Not_Applicable. `Filter`  # noqa: E501

        :return: The edit_status of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._edit_status

    @edit_status.setter
    def edit_status(self, edit_status):
        """Sets the edit_status of this HostObject.

        Host Update or Delete progress status. Possible status are: Update_In_Progress,Update_Success,Update_Failed,Delete_In_Progress,Delete_Failed,Not_Applicable. `Filter`  # noqa: E501

        :param edit_status: The edit_status of this HostObject.  # noqa: E501
        :type: str
        """

        self._edit_status = edit_status

    @property
    def fqdn(self):
        """Gets the fqdn of this HostObject.  # noqa: E501

        Fully qualified domain name of the host.  # noqa: E501

        :return: The fqdn of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this HostObject.

        Fully qualified domain name of the host.  # noqa: E501

        :param fqdn: The fqdn of this HostObject.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def generation(self):
        """Gets the generation of this HostObject.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :return: The generation of this HostObject.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this HostObject.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :param generation: The generation of this HostObject.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def host_groups(self):
        """Gets the host_groups of this HostObject.  # noqa: E501

        Host group to which the host belongs to. `Filter` by hostGroupId.  # noqa: E501

        :return: The host_groups of this HostObject.  # noqa: E501
        :rtype: list[HostGroupSummaryObject]
        """
        return self._host_groups

    @host_groups.setter
    def host_groups(self, host_groups):
        """Sets the host_groups of this HostObject.

        Host group to which the host belongs to. `Filter` by hostGroupId.  # noqa: E501

        :param host_groups: The host_groups of this HostObject.  # noqa: E501
        :type: list[HostGroupSummaryObject]
        """

        self._host_groups = host_groups

    @property
    def id(self):
        """Gets the id of this HostObject.  # noqa: E501

        Identifier for host. `Filter`  # noqa: E501

        :return: The id of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostObject.

        Identifier for host. `Filter`  # noqa: E501

        :param id: The id of this HostObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initiators(self):
        """Gets the initiators of this HostObject.  # noqa: E501

        Host initiator list this host is associated with. `Filter` by initiatorId.  # noqa: E501

        :return: The initiators of this HostObject.  # noqa: E501
        :rtype: list[InitiatorSummary]
        """
        return self._initiators

    @initiators.setter
    def initiators(self, initiators):
        """Sets the initiators of this HostObject.

        Host initiator list this host is associated with. `Filter` by initiatorId.  # noqa: E501

        :param initiators: The initiators of this HostObject.  # noqa: E501
        :type: list[InitiatorSummary]
        """

        self._initiators = initiators

    @property
    def ip_address(self):
        """Gets the ip_address of this HostObject.  # noqa: E501

        IP address of the host.  # noqa: E501

        :return: The ip_address of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this HostObject.

        IP address of the host.  # noqa: E501

        :param ip_address: The ip_address of this HostObject.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def location(self):
        """Gets the location of this HostObject.  # noqa: E501

        location.  # noqa: E501

        :return: The location of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this HostObject.

        location.  # noqa: E501

        :param location: The location of this HostObject.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def marked_for_delete(self):
        """Gets the marked_for_delete of this HostObject.  # noqa: E501

        Indicates whether host is marked for deletion or not  # noqa: E501

        :return: The marked_for_delete of this HostObject.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_delete

    @marked_for_delete.setter
    def marked_for_delete(self, marked_for_delete):
        """Sets the marked_for_delete of this HostObject.

        Indicates whether host is marked for deletion or not  # noqa: E501

        :param marked_for_delete: The marked_for_delete of this HostObject.  # noqa: E501
        :type: bool
        """

        self._marked_for_delete = marked_for_delete

    @property
    def model(self):
        """Gets the model of this HostObject.  # noqa: E501

        Model  # noqa: E501

        :return: The model of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this HostObject.

        Model  # noqa: E501

        :param model: The model of this HostObject.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this HostObject.  # noqa: E501

        Name of the host. `Filter, Sort`  # noqa: E501

        :return: The name of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostObject.

        Name of the host. `Filter, Sort`  # noqa: E501

        :param name: The name of this HostObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operating_system(self):
        """Gets the operating_system of this HostObject.  # noqa: E501

        Host operating system. `Filter`  # noqa: E501

        :return: The operating_system of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this HostObject.

        Host operating system. `Filter`  # noqa: E501

        :param operating_system: The operating_system of this HostObject.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def persona(self):
        """Gets the persona of this HostObject.  # noqa: E501

        Host persona details.  # noqa: E501

        :return: The persona of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._persona

    @persona.setter
    def persona(self, persona):
        """Sets the persona of this HostObject.

        Host persona details.  # noqa: E501

        :param persona: The persona of this HostObject.  # noqa: E501
        :type: str
        """

        self._persona = persona

    @property
    def protocol(self):
        """Gets the protocol of this HostObject.  # noqa: E501

        protocol supported are : FC ,iSCSI or NVMe  # noqa: E501

        :return: The protocol of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this HostObject.

        protocol supported are : FC ,iSCSI or NVMe  # noqa: E501

        :param protocol: The protocol of this HostObject.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def subnet(self):
        """Gets the subnet of this HostObject.  # noqa: E501

        subnet.  # noqa: E501

        :return: The subnet of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this HostObject.

        subnet.  # noqa: E501

        :param subnet: The subnet of this HostObject.  # noqa: E501
        :type: str
        """

        self._subnet = subnet

    @property
    def systems(self):
        """Gets the systems of this HostObject.  # noqa: E501

        system IDs to which the host belongs to. `Filter`  # noqa: E501

        :return: The systems of this HostObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this HostObject.

        system IDs to which the host belongs to. `Filter`  # noqa: E501

        :param systems: The systems of this HostObject.  # noqa: E501
        :type: list[str]
        """

        self._systems = systems

    @property
    def type(self):
        """Gets the type of this HostObject.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this HostObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HostObject.

        The type of resource.  # noqa: E501

        :param type: The type of this HostObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_created(self):
        """Gets the user_created of this HostObject.  # noqa: E501

        Indicates whether user created host or discovered host  # noqa: E501

        :return: The user_created of this HostObject.  # noqa: E501
        :rtype: bool
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this HostObject.

        Indicates whether user created host or discovered host  # noqa: E501

        :param user_created: The user_created of this HostObject.  # noqa: E501
        :type: bool
        """

        self._user_created = user_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
