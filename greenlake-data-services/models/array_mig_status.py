# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArrayMigStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'is_data_source': 'bool',
        'name': 'str',
        'space_utilization': 'int'
    }

    attribute_map = {
        'id': 'id',
        'is_data_source': 'is_data_source',
        'name': 'name',
        'space_utilization': 'space_utilization'
    }

    def __init__(self, id=None, is_data_source=None, name=None, space_utilization=None):  # noqa: E501
        """ArrayMigStatus - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._is_data_source = None
        self._name = None
        self._space_utilization = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_data_source is not None:
            self.is_data_source = is_data_source
        if name is not None:
            self.name = name
        if space_utilization is not None:
            self.space_utilization = space_utilization

    @property
    def id(self):
        """Gets the id of this ArrayMigStatus.  # noqa: E501

        Unique identifier of the array.  # noqa: E501

        :return: The id of this ArrayMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArrayMigStatus.

        Unique identifier of the array.  # noqa: E501

        :param id: The id of this ArrayMigStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_data_source(self):
        """Gets the is_data_source of this ArrayMigStatus.  # noqa: E501

        Indicates whether the array is data source or not.  # noqa: E501

        :return: The is_data_source of this ArrayMigStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_data_source

    @is_data_source.setter
    def is_data_source(self, is_data_source):
        """Sets the is_data_source of this ArrayMigStatus.

        Indicates whether the array is data source or not.  # noqa: E501

        :param is_data_source: The is_data_source of this ArrayMigStatus.  # noqa: E501
        :type: bool
        """

        self._is_data_source = is_data_source

    @property
    def name(self):
        """Gets the name of this ArrayMigStatus.  # noqa: E501

        Name of the array.  # noqa: E501

        :return: The name of this ArrayMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArrayMigStatus.

        Name of the array.  # noqa: E501

        :param name: The name of this ArrayMigStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def space_utilization(self):
        """Gets the space_utilization of this ArrayMigStatus.  # noqa: E501

        Space utilization as a percentage of array size.  # noqa: E501

        :return: The space_utilization of this ArrayMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._space_utilization

    @space_utilization.setter
    def space_utilization(self, space_utilization):
        """Sets the space_utilization of this ArrayMigStatus.

        Space utilization as a percentage of array size.  # noqa: E501

        :param space_utilization: The space_utilization of this ArrayMigStatus.  # noqa: E501
        :type: int
        """

        self._space_utilization = space_utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayMigStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
