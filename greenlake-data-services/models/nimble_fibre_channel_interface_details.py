# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleFibreChannelInterfaceDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'array_name_or_serial': 'str',
        'bus_location': 'str',
        'console_uri': 'str',
        'customer_id': 'str',
        'fabric_info': 'NimbleFibreChannelFabricInfo',
        'fc_port_name': 'str',
        'firmware_version': 'str',
        'generation': 'int',
        'link_info': 'NimbleFibreChannelLinkInfo',
        'logical_port_number': 'int',
        'online': 'bool',
        'orientation': 'str',
        'partial_response_ok': 'bool',
        'peerzone': 'str',
        'port': 'int',
        'slot': 'int',
        'type': 'str'
    }

    attribute_map = {
        'array_name_or_serial': 'array_name_or_serial',
        'bus_location': 'bus_location',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'fabric_info': 'fabric_info',
        'fc_port_name': 'fc_port_name',
        'firmware_version': 'firmware_version',
        'generation': 'generation',
        'link_info': 'link_info',
        'logical_port_number': 'logical_port_number',
        'online': 'online',
        'orientation': 'orientation',
        'partial_response_ok': 'partial_response_ok',
        'peerzone': 'peerzone',
        'port': 'port',
        'slot': 'slot',
        'type': 'type'
    }

    def __init__(self, array_name_or_serial=None, bus_location=None, console_uri=None, customer_id=None, fabric_info=None, fc_port_name=None, firmware_version=None, generation=None, link_info=None, logical_port_number=None, online=None, orientation=None, partial_response_ok=None, peerzone=None, port=None, slot=None, type=None):  # noqa: E501
        """NimbleFibreChannelInterfaceDetails - a model defined in OpenAPI"""  # noqa: E501

        self._array_name_or_serial = None
        self._bus_location = None
        self._console_uri = None
        self._customer_id = None
        self._fabric_info = None
        self._fc_port_name = None
        self._firmware_version = None
        self._generation = None
        self._link_info = None
        self._logical_port_number = None
        self._online = None
        self._orientation = None
        self._partial_response_ok = None
        self._peerzone = None
        self._port = None
        self._slot = None
        self._type = None
        self.discriminator = None

        if array_name_or_serial is not None:
            self.array_name_or_serial = array_name_or_serial
        if bus_location is not None:
            self.bus_location = bus_location
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if fabric_info is not None:
            self.fabric_info = fabric_info
        if fc_port_name is not None:
            self.fc_port_name = fc_port_name
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if generation is not None:
            self.generation = generation
        if link_info is not None:
            self.link_info = link_info
        if logical_port_number is not None:
            self.logical_port_number = logical_port_number
        if online is not None:
            self.online = online
        if orientation is not None:
            self.orientation = orientation
        if partial_response_ok is not None:
            self.partial_response_ok = partial_response_ok
        if peerzone is not None:
            self.peerzone = peerzone
        if port is not None:
            self.port = port
        if slot is not None:
            self.slot = slot
        if type is not None:
            self.type = type

    @property
    def array_name_or_serial(self):
        """Gets the array_name_or_serial of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Name or serial number of array where the interface is hosted.  # noqa: E501

        :return: The array_name_or_serial of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._array_name_or_serial

    @array_name_or_serial.setter
    def array_name_or_serial(self, array_name_or_serial):
        """Sets the array_name_or_serial of this NimbleFibreChannelInterfaceDetails.

        Name or serial number of array where the interface is hosted.  # noqa: E501

        :param array_name_or_serial: The array_name_or_serial of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._array_name_or_serial = array_name_or_serial

    @property
    def bus_location(self):
        """Gets the bus_location of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        PCI bus location of the HBA for this Fibre Channel port.  # noqa: E501

        :return: The bus_location of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._bus_location

    @bus_location.setter
    def bus_location(self, bus_location):
        """Sets the bus_location of this NimbleFibreChannelInterfaceDetails.

        PCI bus location of the HBA for this Fibre Channel port.  # noqa: E501

        :param bus_location: The bus_location of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._bus_location = bus_location

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleFibreChannelInterfaceDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleFibreChannelInterfaceDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def fabric_info(self):
        """Gets the fabric_info of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Fibre Channel fabric information.  # noqa: E501

        :return: The fabric_info of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: NimbleFibreChannelFabricInfo
        """
        return self._fabric_info

    @fabric_info.setter
    def fabric_info(self, fabric_info):
        """Sets the fabric_info of this NimbleFibreChannelInterfaceDetails.

        Fibre Channel fabric information.  # noqa: E501

        :param fabric_info: The fabric_info of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: NimbleFibreChannelFabricInfo
        """

        self._fabric_info = fabric_info

    @property
    def fc_port_name(self):
        """Gets the fc_port_name of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Name of Fibre Channel port.  # noqa: E501

        :return: The fc_port_name of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._fc_port_name

    @fc_port_name.setter
    def fc_port_name(self, fc_port_name):
        """Sets the fc_port_name of this NimbleFibreChannelInterfaceDetails.

        Name of Fibre Channel port.  # noqa: E501

        :param fc_port_name: The fc_port_name of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._fc_port_name = fc_port_name

    @property
    def firmware_version(self):
        """Gets the firmware_version of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Version of the Fibre Channel firmware.  # noqa: E501

        :return: The firmware_version of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this NimbleFibreChannelInterfaceDetails.

        Version of the Fibre Channel firmware.  # noqa: E501

        :param firmware_version: The firmware_version of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def generation(self):
        """Gets the generation of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleFibreChannelInterfaceDetails.

        generation  # noqa: E501

        :param generation: The generation of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def link_info(self):
        """Gets the link_info of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Information about the Fibre Channel link at which interface is operating.  # noqa: E501

        :return: The link_info of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: NimbleFibreChannelLinkInfo
        """
        return self._link_info

    @link_info.setter
    def link_info(self, link_info):
        """Sets the link_info of this NimbleFibreChannelInterfaceDetails.

        Information about the Fibre Channel link at which interface is operating.  # noqa: E501

        :param link_info: The link_info of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: NimbleFibreChannelLinkInfo
        """

        self._link_info = link_info

    @property
    def logical_port_number(self):
        """Gets the logical_port_number of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Logical port number for the Fibre Channel port.  # noqa: E501

        :return: The logical_port_number of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._logical_port_number

    @logical_port_number.setter
    def logical_port_number(self, logical_port_number):
        """Sets the logical_port_number of this NimbleFibreChannelInterfaceDetails.

        Logical port number for the Fibre Channel port.  # noqa: E501

        :param logical_port_number: The logical_port_number of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: int
        """

        self._logical_port_number = logical_port_number

    @property
    def online(self):
        """Gets the online of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Identify whether the Fibre Channel interface is online.  # noqa: E501

        :return: The online of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this NimbleFibreChannelInterfaceDetails.

        Identify whether the Fibre Channel interface is online.  # noqa: E501

        :param online: The online of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def orientation(self):
        """Gets the orientation of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'.  # noqa: E501

        :return: The orientation of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this NimbleFibreChannelInterfaceDetails.

        Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'.  # noqa: E501

        :param orientation: The orientation of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._orientation = orientation

    @property
    def partial_response_ok(self):
        """Gets the partial_response_ok of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Port response.  # noqa: E501

        :return: The partial_response_ok of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._partial_response_ok

    @partial_response_ok.setter
    def partial_response_ok(self, partial_response_ok):
        """Sets the partial_response_ok of this NimbleFibreChannelInterfaceDetails.

        Port response.  # noqa: E501

        :param partial_response_ok: The partial_response_ok of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: bool
        """

        self._partial_response_ok = partial_response_ok

    @property
    def peerzone(self):
        """Gets the peerzone of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        Active peer zone for this Fibre Channel interface.  # noqa: E501

        :return: The peerzone of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._peerzone

    @peerzone.setter
    def peerzone(self, peerzone):
        """Sets the peerzone of this NimbleFibreChannelInterfaceDetails.

        Active peer zone for this Fibre Channel interface.  # noqa: E501

        :param peerzone: The peerzone of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._peerzone = peerzone

    @property
    def port(self):
        """Gets the port of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        HBA port number for this Fibre Channel port.  # noqa: E501

        :return: The port of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NimbleFibreChannelInterfaceDetails.

        HBA port number for this Fibre Channel port.  # noqa: E501

        :param port: The port of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def slot(self):
        """Gets the slot of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        HBA slot number for this Fibre Channel port.  # noqa: E501

        :return: The slot of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this NimbleFibreChannelInterfaceDetails.

        HBA slot number for this Fibre Channel port.  # noqa: E501

        :param slot: The slot of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def type(self):
        """Gets the type of this NimbleFibreChannelInterfaceDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleFibreChannelInterfaceDetails.

        type  # noqa: E501

        :param type: The type of this NimbleFibreChannelInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleFibreChannelInterfaceDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
