# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleChanges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'newly_created': 'bool',
        'warning': 'str'
    }

    attribute_map = {
        'newly_created': 'newlyCreated',
        'warning': 'warning'
    }

    def __init__(self, newly_created=None, warning=None):  # noqa: E501
        """NimbleChanges - a model defined in OpenAPI"""  # noqa: E501

        self._newly_created = None
        self._warning = None
        self.discriminator = None

        if newly_created is not None:
            self.newly_created = newly_created
        if warning is not None:
            self.warning = warning

    @property
    def newly_created(self):
        """Gets the newly_created of this NimbleChanges.  # noqa: E501

        Newly created information  # noqa: E501

        :return: The newly_created of this NimbleChanges.  # noqa: E501
        :rtype: bool
        """
        return self._newly_created

    @newly_created.setter
    def newly_created(self, newly_created):
        """Sets the newly_created of this NimbleChanges.

        Newly created information  # noqa: E501

        :param newly_created: The newly_created of this NimbleChanges.  # noqa: E501
        :type: bool
        """

        self._newly_created = newly_created

    @property
    def warning(self):
        """Gets the warning of this NimbleChanges.  # noqa: E501


        :return: The warning of this NimbleChanges.  # noqa: E501
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this NimbleChanges.


        :param warning: The warning of this NimbleChanges.  # noqa: E501
        :type: str
        """
        allowed_values = ["PERSONA_MISMATCH", "ADDITIONAL_INITIATORS", "OTHER", "null"]  # noqa: E501
        if warning not in allowed_values:
            raise ValueError(
                "Invalid value for `warning` ({0}), must be one of {1}"  # noqa: E501
                .format(warning, allowed_values)
            )

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleChanges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
