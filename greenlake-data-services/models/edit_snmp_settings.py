# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditSnmpSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'snmp_community': 'str',
        'snmp_get_enabled': 'bool',
        'snmp_get_port': 'int',
        'snmp_sys_contact': 'str',
        'snmp_sys_location': 'str',
        'snmp_trap_enabled': 'bool',
        'snmp_trap_host': 'str',
        'snmp_trap_port': 'int'
    }

    attribute_map = {
        'snmp_community': 'snmp_community',
        'snmp_get_enabled': 'snmp_get_enabled',
        'snmp_get_port': 'snmp_get_port',
        'snmp_sys_contact': 'snmp_sys_contact',
        'snmp_sys_location': 'snmp_sys_location',
        'snmp_trap_enabled': 'snmp_trap_enabled',
        'snmp_trap_host': 'snmp_trap_host',
        'snmp_trap_port': 'snmp_trap_port'
    }

    def __init__(self, snmp_community=None, snmp_get_enabled=None, snmp_get_port=None, snmp_sys_contact=None, snmp_sys_location=None, snmp_trap_enabled=None, snmp_trap_host=None, snmp_trap_port=None):  # noqa: E501
        """EditSnmpSettings - a model defined in OpenAPI"""  # noqa: E501

        self._snmp_community = None
        self._snmp_get_enabled = None
        self._snmp_get_port = None
        self._snmp_sys_contact = None
        self._snmp_sys_location = None
        self._snmp_trap_enabled = None
        self._snmp_trap_host = None
        self._snmp_trap_port = None
        self.discriminator = None

        if snmp_community is not None:
            self.snmp_community = snmp_community
        if snmp_get_enabled is not None:
            self.snmp_get_enabled = snmp_get_enabled
        if snmp_get_port is not None:
            self.snmp_get_port = snmp_get_port
        if snmp_sys_contact is not None:
            self.snmp_sys_contact = snmp_sys_contact
        if snmp_sys_location is not None:
            self.snmp_sys_location = snmp_sys_location
        if snmp_trap_enabled is not None:
            self.snmp_trap_enabled = snmp_trap_enabled
        if snmp_trap_host is not None:
            self.snmp_trap_host = snmp_trap_host
        if snmp_trap_port is not None:
            self.snmp_trap_port = snmp_trap_port

    @property
    def snmp_community(self):
        """Gets the snmp_community of this EditSnmpSettings.  # noqa: E501

        Community string to be used with SNMP. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The snmp_community of this EditSnmpSettings.  # noqa: E501
        :rtype: str
        """
        return self._snmp_community

    @snmp_community.setter
    def snmp_community(self, snmp_community):
        """Sets the snmp_community of this EditSnmpSettings.

        Community string to be used with SNMP. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param snmp_community: The snmp_community of this EditSnmpSettings.  # noqa: E501
        :type: str
        """

        self._snmp_community = snmp_community

    @property
    def snmp_get_enabled(self):
        """Gets the snmp_get_enabled of this EditSnmpSettings.  # noqa: E501

        Accept SNMP commands.  # noqa: E501

        :return: The snmp_get_enabled of this EditSnmpSettings.  # noqa: E501
        :rtype: bool
        """
        return self._snmp_get_enabled

    @snmp_get_enabled.setter
    def snmp_get_enabled(self, snmp_get_enabled):
        """Sets the snmp_get_enabled of this EditSnmpSettings.

        Accept SNMP commands.  # noqa: E501

        :param snmp_get_enabled: The snmp_get_enabled of this EditSnmpSettings.  # noqa: E501
        :type: bool
        """

        self._snmp_get_enabled = snmp_get_enabled

    @property
    def snmp_get_port(self):
        """Gets the snmp_get_port of this EditSnmpSettings.  # noqa: E501

        Port number to which SNMP get requests should be sent. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The snmp_get_port of this EditSnmpSettings.  # noqa: E501
        :rtype: int
        """
        return self._snmp_get_port

    @snmp_get_port.setter
    def snmp_get_port(self, snmp_get_port):
        """Sets the snmp_get_port of this EditSnmpSettings.

        Port number to which SNMP get requests should be sent. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param snmp_get_port: The snmp_get_port of this EditSnmpSettings.  # noqa: E501
        :type: int
        """

        self._snmp_get_port = snmp_get_port

    @property
    def snmp_sys_contact(self):
        """Gets the snmp_sys_contact of this EditSnmpSettings.  # noqa: E501

        Name of the SNMP administrator. Plain string.  # noqa: E501

        :return: The snmp_sys_contact of this EditSnmpSettings.  # noqa: E501
        :rtype: str
        """
        return self._snmp_sys_contact

    @snmp_sys_contact.setter
    def snmp_sys_contact(self, snmp_sys_contact):
        """Sets the snmp_sys_contact of this EditSnmpSettings.

        Name of the SNMP administrator. Plain string.  # noqa: E501

        :param snmp_sys_contact: The snmp_sys_contact of this EditSnmpSettings.  # noqa: E501
        :type: str
        """

        self._snmp_sys_contact = snmp_sys_contact

    @property
    def snmp_sys_location(self):
        """Gets the snmp_sys_location of this EditSnmpSettings.  # noqa: E501

        Location of the group. Plain string.  # noqa: E501

        :return: The snmp_sys_location of this EditSnmpSettings.  # noqa: E501
        :rtype: str
        """
        return self._snmp_sys_location

    @snmp_sys_location.setter
    def snmp_sys_location(self, snmp_sys_location):
        """Sets the snmp_sys_location of this EditSnmpSettings.

        Location of the group. Plain string.  # noqa: E501

        :param snmp_sys_location: The snmp_sys_location of this EditSnmpSettings.  # noqa: E501
        :type: str
        """

        self._snmp_sys_location = snmp_sys_location

    @property
    def snmp_trap_enabled(self):
        """Gets the snmp_trap_enabled of this EditSnmpSettings.  # noqa: E501

        Enable or disable SNMP traps  # noqa: E501

        :return: The snmp_trap_enabled of this EditSnmpSettings.  # noqa: E501
        :rtype: bool
        """
        return self._snmp_trap_enabled

    @snmp_trap_enabled.setter
    def snmp_trap_enabled(self, snmp_trap_enabled):
        """Sets the snmp_trap_enabled of this EditSnmpSettings.

        Enable or disable SNMP traps  # noqa: E501

        :param snmp_trap_enabled: The snmp_trap_enabled of this EditSnmpSettings.  # noqa: E501
        :type: bool
        """

        self._snmp_trap_enabled = snmp_trap_enabled

    @property
    def snmp_trap_host(self):
        """Gets the snmp_trap_host of this EditSnmpSettings.  # noqa: E501

        Hostname or IP Address to send SNMP traps. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The snmp_trap_host of this EditSnmpSettings.  # noqa: E501
        :rtype: str
        """
        return self._snmp_trap_host

    @snmp_trap_host.setter
    def snmp_trap_host(self, snmp_trap_host):
        """Sets the snmp_trap_host of this EditSnmpSettings.

        Hostname or IP Address to send SNMP traps. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param snmp_trap_host: The snmp_trap_host of this EditSnmpSettings.  # noqa: E501
        :type: str
        """

        self._snmp_trap_host = snmp_trap_host

    @property
    def snmp_trap_port(self):
        """Gets the snmp_trap_port of this EditSnmpSettings.  # noqa: E501

        Port number of SNMP trap host. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The snmp_trap_port of this EditSnmpSettings.  # noqa: E501
        :rtype: int
        """
        return self._snmp_trap_port

    @snmp_trap_port.setter
    def snmp_trap_port(self, snmp_trap_port):
        """Sets the snmp_trap_port of this EditSnmpSettings.

        Port number of SNMP trap host. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param snmp_trap_port: The snmp_trap_port of this EditSnmpSettings.  # noqa: E501
        :type: int
        """

        self._snmp_trap_port = snmp_trap_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditSnmpSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
