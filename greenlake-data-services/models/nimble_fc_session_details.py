# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleFCSessionDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'AssociatedLinks',
        'console_uri': 'str',
        'customer_id': 'str',
        'generation': 'int',
        'initiator_info': 'NimbleFCInitiatorInfo',
        'resource_uri': 'str',
        'target_info': 'NimbleFCTargetInfo',
        'type': 'str'
    }

    attribute_map = {
        'associated_links': 'associated_links',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'generation': 'generation',
        'initiator_info': 'initiator_info',
        'resource_uri': 'resourceUri',
        'target_info': 'target_info',
        'type': 'type'
    }

    def __init__(self, associated_links=None, console_uri=None, customer_id=None, generation=None, initiator_info=None, resource_uri=None, target_info=None, type=None):  # noqa: E501
        """NimbleFCSessionDetails - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._console_uri = None
        self._customer_id = None
        self._generation = None
        self._initiator_info = None
        self._resource_uri = None
        self._target_info = None
        self._type = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if generation is not None:
            self.generation = generation
        if initiator_info is not None:
            self.initiator_info = initiator_info
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if target_info is not None:
            self.target_info = target_info
        if type is not None:
            self.type = type

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleFCSessionDetails.  # noqa: E501


        :return: The associated_links of this NimbleFCSessionDetails.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleFCSessionDetails.


        :param associated_links: The associated_links of this NimbleFCSessionDetails.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleFCSessionDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleFCSessionDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleFCSessionDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleFCSessionDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleFCSessionDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleFCSessionDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleFCSessionDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleFCSessionDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def generation(self):
        """Gets the generation of this NimbleFCSessionDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleFCSessionDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleFCSessionDetails.

        generation  # noqa: E501

        :param generation: The generation of this NimbleFCSessionDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def initiator_info(self):
        """Gets the initiator_info of this NimbleFCSessionDetails.  # noqa: E501


        :return: The initiator_info of this NimbleFCSessionDetails.  # noqa: E501
        :rtype: NimbleFCInitiatorInfo
        """
        return self._initiator_info

    @initiator_info.setter
    def initiator_info(self, initiator_info):
        """Sets the initiator_info of this NimbleFCSessionDetails.


        :param initiator_info: The initiator_info of this NimbleFCSessionDetails.  # noqa: E501
        :type: NimbleFCInitiatorInfo
        """

        self._initiator_info = initiator_info

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleFCSessionDetails.  # noqa: E501


        :return: The resource_uri of this NimbleFCSessionDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleFCSessionDetails.


        :param resource_uri: The resource_uri of this NimbleFCSessionDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def target_info(self):
        """Gets the target_info of this NimbleFCSessionDetails.  # noqa: E501


        :return: The target_info of this NimbleFCSessionDetails.  # noqa: E501
        :rtype: NimbleFCTargetInfo
        """
        return self._target_info

    @target_info.setter
    def target_info(self, target_info):
        """Sets the target_info of this NimbleFCSessionDetails.


        :param target_info: The target_info of this NimbleFCSessionDetails.  # noqa: E501
        :type: NimbleFCTargetInfo
        """

        self._target_info = target_info

    @property
    def type(self):
        """Gets the type of this NimbleFCSessionDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleFCSessionDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleFCSessionDetails.

        type  # noqa: E501

        :param type: The type of this NimbleFCSessionDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleFCSessionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
