# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EnclosureFanDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'EfAssociatedLinks',
        'console_uri': 'str',
        'customer_id': 'str',
        'displayname': 'str',
        'domain': 'str',
        'element_status_code': 'str',
        'enclosure_cooling_fan_id': 'int',
        'enclosure_device_id': 'int',
        'enclosure_id': 'str',
        'enclosure_name': 'str',
        'enclosure_type': 'EnclosureTypeSingle',
        'fail_indicator': 'bool',
        'generation': 'int',
        'id': 'str',
        'locate_enabled': 'bool',
        'manufacturing': 'ManufacturingSingle',
        'name': 'str',
        'part_number': 'str',
        'protocol': 'str',
        'ps_id': 'int',
        'request_uri': 'str',
        'resource_uri': 'str',
        'safe_to_remove': 'bool',
        'speed': 'str',
        'speed_rpm': 'int',
        'state': 'STATE',
        'system_id': 'str',
        'type': 'str',
        'wwn': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'displayname': 'displayname',
        'domain': 'domain',
        'element_status_code': 'elementStatusCode',
        'enclosure_cooling_fan_id': 'enclosureCoolingFanId',
        'enclosure_device_id': 'enclosureDeviceId',
        'enclosure_id': 'enclosureId',
        'enclosure_name': 'enclosureName',
        'enclosure_type': 'enclosureType',
        'fail_indicator': 'failIndicator',
        'generation': 'generation',
        'id': 'id',
        'locate_enabled': 'locateEnabled',
        'manufacturing': 'manufacturing',
        'name': 'name',
        'part_number': 'partNumber',
        'protocol': 'protocol',
        'ps_id': 'psId',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'safe_to_remove': 'safeToRemove',
        'speed': 'speed',
        'speed_rpm': 'speedRpm',
        'state': 'state',
        'system_id': 'systemId',
        'type': 'type',
        'wwn': 'wwn'
    }

    def __init__(self, associated_links=None, console_uri=None, customer_id=None, displayname=None, domain=None, element_status_code=None, enclosure_cooling_fan_id=None, enclosure_device_id=None, enclosure_id=None, enclosure_name=None, enclosure_type=None, fail_indicator=None, generation=None, id=None, locate_enabled=None, manufacturing=None, name=None, part_number=None, protocol=None, ps_id=None, request_uri=None, resource_uri=None, safe_to_remove=None, speed=None, speed_rpm=None, state=None, system_id=None, type=None, wwn=None):  # noqa: E501
        """EnclosureFanDetails - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._console_uri = None
        self._customer_id = None
        self._displayname = None
        self._domain = None
        self._element_status_code = None
        self._enclosure_cooling_fan_id = None
        self._enclosure_device_id = None
        self._enclosure_id = None
        self._enclosure_name = None
        self._enclosure_type = None
        self._fail_indicator = None
        self._generation = None
        self._id = None
        self._locate_enabled = None
        self._manufacturing = None
        self._name = None
        self._part_number = None
        self._protocol = None
        self._ps_id = None
        self._request_uri = None
        self._resource_uri = None
        self._safe_to_remove = None
        self._speed = None
        self._speed_rpm = None
        self._state = None
        self._system_id = None
        self._type = None
        self._wwn = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if element_status_code is not None:
            self.element_status_code = element_status_code
        if enclosure_cooling_fan_id is not None:
            self.enclosure_cooling_fan_id = enclosure_cooling_fan_id
        if enclosure_device_id is not None:
            self.enclosure_device_id = enclosure_device_id
        if enclosure_id is not None:
            self.enclosure_id = enclosure_id
        if enclosure_name is not None:
            self.enclosure_name = enclosure_name
        if enclosure_type is not None:
            self.enclosure_type = enclosure_type
        if fail_indicator is not None:
            self.fail_indicator = fail_indicator
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if locate_enabled is not None:
            self.locate_enabled = locate_enabled
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if name is not None:
            self.name = name
        if part_number is not None:
            self.part_number = part_number
        if protocol is not None:
            self.protocol = protocol
        if ps_id is not None:
            self.ps_id = ps_id
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if safe_to_remove is not None:
            self.safe_to_remove = safe_to_remove
        if speed is not None:
            self.speed = speed
        if speed_rpm is not None:
            self.speed_rpm = speed_rpm
        if state is not None:
            self.state = state
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type
        if wwn is not None:
            self.wwn = wwn

    @property
    def associated_links(self):
        """Gets the associated_links of this EnclosureFanDetails.  # noqa: E501


        :return: The associated_links of this EnclosureFanDetails.  # noqa: E501
        :rtype: EfAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this EnclosureFanDetails.


        :param associated_links: The associated_links of this EnclosureFanDetails.  # noqa: E501
        :type: EfAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def console_uri(self):
        """Gets the console_uri of this EnclosureFanDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this EnclosureFanDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this EnclosureFanDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this EnclosureFanDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def displayname(self):
        """Gets the displayname of this EnclosureFanDetails.  # noqa: E501

        Enclosure Display name  # noqa: E501

        :return: The displayname of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this EnclosureFanDetails.

        Enclosure Display name  # noqa: E501

        :param displayname: The displayname of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this EnclosureFanDetails.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EnclosureFanDetails.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def element_status_code(self):
        """Gets the element_status_code of this EnclosureFanDetails.  # noqa: E501

        Enclosure status code.  # noqa: E501

        :return: The element_status_code of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._element_status_code

    @element_status_code.setter
    def element_status_code(self, element_status_code):
        """Sets the element_status_code of this EnclosureFanDetails.

        Enclosure status code.  # noqa: E501

        :param element_status_code: The element_status_code of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._element_status_code = element_status_code

    @property
    def enclosure_cooling_fan_id(self):
        """Gets the enclosure_cooling_fan_id of this EnclosureFanDetails.  # noqa: E501

        Numeric ID of the resource  # noqa: E501

        :return: The enclosure_cooling_fan_id of this EnclosureFanDetails.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_cooling_fan_id

    @enclosure_cooling_fan_id.setter
    def enclosure_cooling_fan_id(self, enclosure_cooling_fan_id):
        """Sets the enclosure_cooling_fan_id of this EnclosureFanDetails.

        Numeric ID of the resource  # noqa: E501

        :param enclosure_cooling_fan_id: The enclosure_cooling_fan_id of this EnclosureFanDetails.  # noqa: E501
        :type: int
        """

        self._enclosure_cooling_fan_id = enclosure_cooling_fan_id

    @property
    def enclosure_device_id(self):
        """Gets the enclosure_device_id of this EnclosureFanDetails.  # noqa: E501


        :return: The enclosure_device_id of this EnclosureFanDetails.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_device_id

    @enclosure_device_id.setter
    def enclosure_device_id(self, enclosure_device_id):
        """Sets the enclosure_device_id of this EnclosureFanDetails.


        :param enclosure_device_id: The enclosure_device_id of this EnclosureFanDetails.  # noqa: E501
        :type: int
        """

        self._enclosure_device_id = enclosure_device_id

    @property
    def enclosure_id(self):
        """Gets the enclosure_id of this EnclosureFanDetails.  # noqa: E501

        Parent UID of the resource.  # noqa: E501

        :return: The enclosure_id of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_id

    @enclosure_id.setter
    def enclosure_id(self, enclosure_id):
        """Sets the enclosure_id of this EnclosureFanDetails.

        Parent UID of the resource.  # noqa: E501

        :param enclosure_id: The enclosure_id of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._enclosure_id = enclosure_id

    @property
    def enclosure_name(self):
        """Gets the enclosure_name of this EnclosureFanDetails.  # noqa: E501

        Name of the enclosure  # noqa: E501

        :return: The enclosure_name of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_name

    @enclosure_name.setter
    def enclosure_name(self, enclosure_name):
        """Sets the enclosure_name of this EnclosureFanDetails.

        Name of the enclosure  # noqa: E501

        :param enclosure_name: The enclosure_name of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._enclosure_name = enclosure_name

    @property
    def enclosure_type(self):
        """Gets the enclosure_type of this EnclosureFanDetails.  # noqa: E501


        :return: The enclosure_type of this EnclosureFanDetails.  # noqa: E501
        :rtype: EnclosureTypeSingle
        """
        return self._enclosure_type

    @enclosure_type.setter
    def enclosure_type(self, enclosure_type):
        """Sets the enclosure_type of this EnclosureFanDetails.


        :param enclosure_type: The enclosure_type of this EnclosureFanDetails.  # noqa: E501
        :type: EnclosureTypeSingle
        """

        self._enclosure_type = enclosure_type

    @property
    def fail_indicator(self):
        """Gets the fail_indicator of this EnclosureFanDetails.  # noqa: E501


        :return: The fail_indicator of this EnclosureFanDetails.  # noqa: E501
        :rtype: bool
        """
        return self._fail_indicator

    @fail_indicator.setter
    def fail_indicator(self, fail_indicator):
        """Sets the fail_indicator of this EnclosureFanDetails.


        :param fail_indicator: The fail_indicator of this EnclosureFanDetails.  # noqa: E501
        :type: bool
        """

        self._fail_indicator = fail_indicator

    @property
    def generation(self):
        """Gets the generation of this EnclosureFanDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this EnclosureFanDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this EnclosureFanDetails.

        generation  # noqa: E501

        :param generation: The generation of this EnclosureFanDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this EnclosureFanDetails.  # noqa: E501

        Unique Identifier of the resource.  # noqa: E501

        :return: The id of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnclosureFanDetails.

        Unique Identifier of the resource.  # noqa: E501

        :param id: The id of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def locate_enabled(self):
        """Gets the locate_enabled of this EnclosureFanDetails.  # noqa: E501

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :return: The locate_enabled of this EnclosureFanDetails.  # noqa: E501
        :rtype: bool
        """
        return self._locate_enabled

    @locate_enabled.setter
    def locate_enabled(self, locate_enabled):
        """Sets the locate_enabled of this EnclosureFanDetails.

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :param locate_enabled: The locate_enabled of this EnclosureFanDetails.  # noqa: E501
        :type: bool
        """

        self._locate_enabled = locate_enabled

    @property
    def manufacturing(self):
        """Gets the manufacturing of this EnclosureFanDetails.  # noqa: E501


        :return: The manufacturing of this EnclosureFanDetails.  # noqa: E501
        :rtype: ManufacturingSingle
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this EnclosureFanDetails.


        :param manufacturing: The manufacturing of this EnclosureFanDetails.  # noqa: E501
        :type: ManufacturingSingle
        """

        self._manufacturing = manufacturing

    @property
    def name(self):
        """Gets the name of this EnclosureFanDetails.  # noqa: E501

        Name of the resource.  # noqa: E501

        :return: The name of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnclosureFanDetails.

        Name of the resource.  # noqa: E501

        :param name: The name of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def part_number(self):
        """Gets the part_number of this EnclosureFanDetails.  # noqa: E501


        :return: The part_number of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this EnclosureFanDetails.


        :param part_number: The part_number of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def protocol(self):
        """Gets the protocol of this EnclosureFanDetails.  # noqa: E501


        :return: The protocol of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this EnclosureFanDetails.


        :param protocol: The protocol of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def ps_id(self):
        """Gets the ps_id of this EnclosureFanDetails.  # noqa: E501


        :return: The ps_id of this EnclosureFanDetails.  # noqa: E501
        :rtype: int
        """
        return self._ps_id

    @ps_id.setter
    def ps_id(self, ps_id):
        """Sets the ps_id of this EnclosureFanDetails.


        :param ps_id: The ps_id of this EnclosureFanDetails.  # noqa: E501
        :type: int
        """

        self._ps_id = ps_id

    @property
    def request_uri(self):
        """Gets the request_uri of this EnclosureFanDetails.  # noqa: E501

        resourceUri for detailed enclosure fan object  # noqa: E501

        :return: The request_uri of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this EnclosureFanDetails.

        resourceUri for detailed enclosure fan object  # noqa: E501

        :param request_uri: The request_uri of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this EnclosureFanDetails.  # noqa: E501

        resourceUri for detailed enclosure fan object  # noqa: E501

        :return: The resource_uri of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this EnclosureFanDetails.

        resourceUri for detailed enclosure fan object  # noqa: E501

        :param resource_uri: The resource_uri of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def safe_to_remove(self):
        """Gets the safe_to_remove of this EnclosureFanDetails.  # noqa: E501


        :return: The safe_to_remove of this EnclosureFanDetails.  # noqa: E501
        :rtype: bool
        """
        return self._safe_to_remove

    @safe_to_remove.setter
    def safe_to_remove(self, safe_to_remove):
        """Sets the safe_to_remove of this EnclosureFanDetails.


        :param safe_to_remove: The safe_to_remove of this EnclosureFanDetails.  # noqa: E501
        :type: bool
        """

        self._safe_to_remove = safe_to_remove

    @property
    def speed(self):
        """Gets the speed of this EnclosureFanDetails.  # noqa: E501

        Speed of the resource  # noqa: E501

        :return: The speed of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this EnclosureFanDetails.

        Speed of the resource  # noqa: E501

        :param speed: The speed of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._speed = speed

    @property
    def speed_rpm(self):
        """Gets the speed_rpm of this EnclosureFanDetails.  # noqa: E501

        Speed in rpm  # noqa: E501

        :return: The speed_rpm of this EnclosureFanDetails.  # noqa: E501
        :rtype: int
        """
        return self._speed_rpm

    @speed_rpm.setter
    def speed_rpm(self, speed_rpm):
        """Sets the speed_rpm of this EnclosureFanDetails.

        Speed in rpm  # noqa: E501

        :param speed_rpm: The speed_rpm of this EnclosureFanDetails.  # noqa: E501
        :type: int
        """

        self._speed_rpm = speed_rpm

    @property
    def state(self):
        """Gets the state of this EnclosureFanDetails.  # noqa: E501


        :return: The state of this EnclosureFanDetails.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EnclosureFanDetails.


        :param state: The state of this EnclosureFanDetails.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def system_id(self):
        """Gets the system_id of this EnclosureFanDetails.  # noqa: E501

        SystemUid/Serial Number  of the array.  # noqa: E501

        :return: The system_id of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this EnclosureFanDetails.

        SystemUid/Serial Number  of the array.  # noqa: E501

        :param system_id: The system_id of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this EnclosureFanDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnclosureFanDetails.

        type  # noqa: E501

        :param type: The type of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def wwn(self):
        """Gets the wwn of this EnclosureFanDetails.  # noqa: E501


        :return: The wwn of this EnclosureFanDetails.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this EnclosureFanDetails.


        :param wwn: The wwn of this EnclosureFanDetails.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnclosureFanDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
