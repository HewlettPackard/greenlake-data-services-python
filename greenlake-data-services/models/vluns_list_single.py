# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VlunsListSingle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'console_uri': 'str',
        'device_ww_ns': 'str',
        'disk_partition': 'str',
        'displayname': 'str',
        'domain': 'str',
        'failed_path_interval': 'int',
        'failed_path_policy': 'str',
        'id': 'str',
        'initiators': 'VlunsListInitiators',
        'lun': 'int',
        'mount_point': 'str',
        'mount_point_fsau': 'int',
        'multi_path_type': 'str',
        'port_pos': 'VlunsListSinglePortPos',
        'raw_volume': 'str',
        'remote_name': 'str',
        'request_uri': 'str',
        'resource_uri': 'str',
        'state': 'VlunsListState',
        'status': 'str',
        'system_id': 'str',
        'tpg_id': 'int',
        'type': 'str',
        'used_space': 'int',
        'volume_group': 'str',
        'volume_manager': 'str',
        'volume_name': 'str',
        'volume_wwn': 'str',
        'vv_reserved_user_space': 'int',
        'vv_size': 'int'
    }

    attribute_map = {
        'active': 'active',
        'console_uri': 'consoleUri',
        'device_ww_ns': 'deviceWWNs',
        'disk_partition': 'diskPartition',
        'displayname': 'displayname',
        'domain': 'domain',
        'failed_path_interval': 'failedPathInterval',
        'failed_path_policy': 'failedPathPolicy',
        'id': 'id',
        'initiators': 'initiators',
        'lun': 'lun',
        'mount_point': 'mountPoint',
        'mount_point_fsau': 'mountPointFsau',
        'multi_path_type': 'multiPathType',
        'port_pos': 'portPos',
        'raw_volume': 'rawVolume',
        'remote_name': 'remoteName',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'state': 'state',
        'status': 'status',
        'system_id': 'systemId',
        'tpg_id': 'tpgId',
        'type': 'type',
        'used_space': 'usedSpace',
        'volume_group': 'volumeGroup',
        'volume_manager': 'volumeManager',
        'volume_name': 'volumeName',
        'volume_wwn': 'volumeWWN',
        'vv_reserved_user_space': 'vvReservedUserSpace',
        'vv_size': 'vvSize'
    }

    def __init__(self, active=None, console_uri=None, device_ww_ns=None, disk_partition=None, displayname=None, domain=None, failed_path_interval=None, failed_path_policy=None, id=None, initiators=None, lun=None, mount_point=None, mount_point_fsau=None, multi_path_type=None, port_pos=None, raw_volume=None, remote_name=None, request_uri=None, resource_uri=None, state=None, status=None, system_id=None, tpg_id=None, type=None, used_space=None, volume_group=None, volume_manager=None, volume_name=None, volume_wwn=None, vv_reserved_user_space=None, vv_size=None):  # noqa: E501
        """VlunsListSingle - a model defined in OpenAPI"""  # noqa: E501

        self._active = None
        self._console_uri = None
        self._device_ww_ns = None
        self._disk_partition = None
        self._displayname = None
        self._domain = None
        self._failed_path_interval = None
        self._failed_path_policy = None
        self._id = None
        self._initiators = None
        self._lun = None
        self._mount_point = None
        self._mount_point_fsau = None
        self._multi_path_type = None
        self._port_pos = None
        self._raw_volume = None
        self._remote_name = None
        self._request_uri = None
        self._resource_uri = None
        self._state = None
        self._status = None
        self._system_id = None
        self._tpg_id = None
        self._type = None
        self._used_space = None
        self._volume_group = None
        self._volume_manager = None
        self._volume_name = None
        self._volume_wwn = None
        self._vv_reserved_user_space = None
        self._vv_size = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if console_uri is not None:
            self.console_uri = console_uri
        if device_ww_ns is not None:
            self.device_ww_ns = device_ww_ns
        if disk_partition is not None:
            self.disk_partition = disk_partition
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if failed_path_interval is not None:
            self.failed_path_interval = failed_path_interval
        if failed_path_policy is not None:
            self.failed_path_policy = failed_path_policy
        if id is not None:
            self.id = id
        if initiators is not None:
            self.initiators = initiators
        if lun is not None:
            self.lun = lun
        if mount_point is not None:
            self.mount_point = mount_point
        if mount_point_fsau is not None:
            self.mount_point_fsau = mount_point_fsau
        if multi_path_type is not None:
            self.multi_path_type = multi_path_type
        if port_pos is not None:
            self.port_pos = port_pos
        if raw_volume is not None:
            self.raw_volume = raw_volume
        if remote_name is not None:
            self.remote_name = remote_name
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if system_id is not None:
            self.system_id = system_id
        if tpg_id is not None:
            self.tpg_id = tpg_id
        if type is not None:
            self.type = type
        if used_space is not None:
            self.used_space = used_space
        if volume_group is not None:
            self.volume_group = volume_group
        if volume_manager is not None:
            self.volume_manager = volume_manager
        if volume_name is not None:
            self.volume_name = volume_name
        if volume_wwn is not None:
            self.volume_wwn = volume_wwn
        if vv_reserved_user_space is not None:
            self.vv_reserved_user_space = vv_reserved_user_space
        if vv_size is not None:
            self.vv_size = vv_size

    @property
    def active(self):
        """Gets the active of this VlunsListSingle.  # noqa: E501

        Indicates if this is an active VLUN or a template  # noqa: E501

        :return: The active of this VlunsListSingle.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this VlunsListSingle.

        Indicates if this is an active VLUN or a template  # noqa: E501

        :param active: The active of this VlunsListSingle.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def console_uri(self):
        """Gets the console_uri of this VlunsListSingle.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this VlunsListSingle.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def device_ww_ns(self):
        """Gets the device_ww_ns of this VlunsListSingle.  # noqa: E501

        Device WWNs  # noqa: E501

        :return: The device_ww_ns of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._device_ww_ns

    @device_ww_ns.setter
    def device_ww_ns(self, device_ww_ns):
        """Sets the device_ww_ns of this VlunsListSingle.

        Device WWNs  # noqa: E501

        :param device_ww_ns: The device_ww_ns of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._device_ww_ns = device_ww_ns

    @property
    def disk_partition(self):
        """Gets the disk_partition of this VlunsListSingle.  # noqa: E501

        Disk partition of host  # noqa: E501

        :return: The disk_partition of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._disk_partition

    @disk_partition.setter
    def disk_partition(self, disk_partition):
        """Sets the disk_partition of this VlunsListSingle.

        Disk partition of host  # noqa: E501

        :param disk_partition: The disk_partition of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._disk_partition = disk_partition

    @property
    def displayname(self):
        """Gets the displayname of this VlunsListSingle.  # noqa: E501

        SED state  # noqa: E501

        :return: The displayname of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this VlunsListSingle.

        SED state  # noqa: E501

        :param displayname: The displayname of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this VlunsListSingle.  # noqa: E501

        SED state  # noqa: E501

        :return: The domain of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this VlunsListSingle.

        SED state  # noqa: E501

        :param domain: The domain of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def failed_path_interval(self):
        """Gets the failed_path_interval of this VlunsListSingle.  # noqa: E501

        Monitoring interval in seconds after which the host checks for failed paths  # noqa: E501

        :return: The failed_path_interval of this VlunsListSingle.  # noqa: E501
        :rtype: int
        """
        return self._failed_path_interval

    @failed_path_interval.setter
    def failed_path_interval(self, failed_path_interval):
        """Sets the failed_path_interval of this VlunsListSingle.

        Monitoring interval in seconds after which the host checks for failed paths  # noqa: E501

        :param failed_path_interval: The failed_path_interval of this VlunsListSingle.  # noqa: E501
        :type: int
        """

        self._failed_path_interval = failed_path_interval

    @property
    def failed_path_policy(self):
        """Gets the failed_path_policy of this VlunsListSingle.  # noqa: E501

        Failed path monitoring method  # noqa: E501

        :return: The failed_path_policy of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._failed_path_policy

    @failed_path_policy.setter
    def failed_path_policy(self, failed_path_policy):
        """Sets the failed_path_policy of this VlunsListSingle.

        Failed path monitoring method  # noqa: E501

        :param failed_path_policy: The failed_path_policy of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._failed_path_policy = failed_path_policy

    @property
    def id(self):
        """Gets the id of this VlunsListSingle.  # noqa: E501

        uid of the vlun  # noqa: E501

        :return: The id of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VlunsListSingle.

        uid of the vlun  # noqa: E501

        :param id: The id of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initiators(self):
        """Gets the initiators of this VlunsListSingle.  # noqa: E501


        :return: The initiators of this VlunsListSingle.  # noqa: E501
        :rtype: VlunsListInitiators
        """
        return self._initiators

    @initiators.setter
    def initiators(self, initiators):
        """Sets the initiators of this VlunsListSingle.


        :param initiators: The initiators of this VlunsListSingle.  # noqa: E501
        :type: VlunsListInitiators
        """

        self._initiators = initiators

    @property
    def lun(self):
        """Gets the lun of this VlunsListSingle.  # noqa: E501

        Exported LUN ID  # noqa: E501

        :return: The lun of this VlunsListSingle.  # noqa: E501
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this VlunsListSingle.

        Exported LUN ID  # noqa: E501

        :param lun: The lun of this VlunsListSingle.  # noqa: E501
        :type: int
        """

        self._lun = lun

    @property
    def mount_point(self):
        """Gets the mount_point of this VlunsListSingle.  # noqa: E501

        Mount points of devices  # noqa: E501

        :return: The mount_point of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._mount_point

    @mount_point.setter
    def mount_point(self, mount_point):
        """Sets the mount_point of this VlunsListSingle.

        Mount points of devices  # noqa: E501

        :param mount_point: The mount_point of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._mount_point = mount_point

    @property
    def mount_point_fsau(self):
        """Gets the mount_point_fsau of this VlunsListSingle.  # noqa: E501

        File system allocation unit in MiB  # noqa: E501

        :return: The mount_point_fsau of this VlunsListSingle.  # noqa: E501
        :rtype: int
        """
        return self._mount_point_fsau

    @mount_point_fsau.setter
    def mount_point_fsau(self, mount_point_fsau):
        """Sets the mount_point_fsau of this VlunsListSingle.

        File system allocation unit in MiB  # noqa: E501

        :param mount_point_fsau: The mount_point_fsau of this VlunsListSingle.  # noqa: E501
        :type: int
        """

        self._mount_point_fsau = mount_point_fsau

    @property
    def multi_path_type(self):
        """Gets the multi_path_type of this VlunsListSingle.  # noqa: E501

        Multi-path method in use  # noqa: E501

        :return: The multi_path_type of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._multi_path_type

    @multi_path_type.setter
    def multi_path_type(self, multi_path_type):
        """Sets the multi_path_type of this VlunsListSingle.

        Multi-path method in use  # noqa: E501

        :param multi_path_type: The multi_path_type of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._multi_path_type = multi_path_type

    @property
    def port_pos(self):
        """Gets the port_pos of this VlunsListSingle.  # noqa: E501


        :return: The port_pos of this VlunsListSingle.  # noqa: E501
        :rtype: VlunsListSinglePortPos
        """
        return self._port_pos

    @port_pos.setter
    def port_pos(self, port_pos):
        """Sets the port_pos of this VlunsListSingle.


        :param port_pos: The port_pos of this VlunsListSingle.  # noqa: E501
        :type: VlunsListSinglePortPos
        """

        self._port_pos = port_pos

    @property
    def raw_volume(self):
        """Gets the raw_volume of this VlunsListSingle.  # noqa: E501

        Volume that has not been formatted. Yes if it supports  # noqa: E501

        :return: The raw_volume of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._raw_volume

    @raw_volume.setter
    def raw_volume(self, raw_volume):
        """Sets the raw_volume of this VlunsListSingle.

        Volume that has not been formatted. Yes if it supports  # noqa: E501

        :param raw_volume: The raw_volume of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._raw_volume = raw_volume

    @property
    def remote_name(self):
        """Gets the remote_name of this VlunsListSingle.  # noqa: E501

        Host WWN, iSCSI name, or SAS address; depending on port type  # noqa: E501

        :return: The remote_name of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._remote_name

    @remote_name.setter
    def remote_name(self, remote_name):
        """Sets the remote_name of this VlunsListSingle.

        Host WWN, iSCSI name, or SAS address; depending on port type  # noqa: E501

        :param remote_name: The remote_name of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._remote_name = remote_name

    @property
    def request_uri(self):
        """Gets the request_uri of this VlunsListSingle.  # noqa: E501

        requestUri for detailed vlun object  # noqa: E501

        :return: The request_uri of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this VlunsListSingle.

        requestUri for detailed vlun object  # noqa: E501

        :param request_uri: The request_uri of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this VlunsListSingle.  # noqa: E501

        resourceUri for detailed vlun object  # noqa: E501

        :return: The resource_uri of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this VlunsListSingle.

        resourceUri for detailed vlun object  # noqa: E501

        :param resource_uri: The resource_uri of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def state(self):
        """Gets the state of this VlunsListSingle.  # noqa: E501


        :return: The state of this VlunsListSingle.  # noqa: E501
        :rtype: VlunsListState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VlunsListSingle.


        :param state: The state of this VlunsListSingle.  # noqa: E501
        :type: VlunsListState
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this VlunsListSingle.  # noqa: E501

        SED state  # noqa: E501

        :return: The status of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VlunsListSingle.

        SED state  # noqa: E501

        :param status: The status of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def system_id(self):
        """Gets the system_id of this VlunsListSingle.  # noqa: E501

        SED state  # noqa: E501

        :return: The system_id of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this VlunsListSingle.

        SED state  # noqa: E501

        :param system_id: The system_id of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def tpg_id(self):
        """Gets the tpg_id of this VlunsListSingle.  # noqa: E501

        SED state  # noqa: E501

        :return: The tpg_id of this VlunsListSingle.  # noqa: E501
        :rtype: int
        """
        return self._tpg_id

    @tpg_id.setter
    def tpg_id(self, tpg_id):
        """Sets the tpg_id of this VlunsListSingle.

        SED state  # noqa: E501

        :param tpg_id: The tpg_id of this VlunsListSingle.  # noqa: E501
        :type: int
        """

        self._tpg_id = tpg_id

    @property
    def type(self):
        """Gets the type of this VlunsListSingle.  # noqa: E501

        VLUN type  # noqa: E501

        :return: The type of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VlunsListSingle.

        VLUN type  # noqa: E501

        :param type: The type of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def used_space(self):
        """Gets the used_space of this VlunsListSingle.  # noqa: E501

        Host devices used space in MiB  # noqa: E501

        :return: The used_space of this VlunsListSingle.  # noqa: E501
        :rtype: int
        """
        return self._used_space

    @used_space.setter
    def used_space(self, used_space):
        """Sets the used_space of this VlunsListSingle.

        Host devices used space in MiB  # noqa: E501

        :param used_space: The used_space of this VlunsListSingle.  # noqa: E501
        :type: int
        """

        self._used_space = used_space

    @property
    def volume_group(self):
        """Gets the volume_group of this VlunsListSingle.  # noqa: E501

        Volume group info  # noqa: E501

        :return: The volume_group of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._volume_group

    @volume_group.setter
    def volume_group(self, volume_group):
        """Sets the volume_group of this VlunsListSingle.

        Volume group info  # noqa: E501

        :param volume_group: The volume_group of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._volume_group = volume_group

    @property
    def volume_manager(self):
        """Gets the volume_manager of this VlunsListSingle.  # noqa: E501

        Volume Manager tool used  # noqa: E501

        :return: The volume_manager of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._volume_manager

    @volume_manager.setter
    def volume_manager(self, volume_manager):
        """Sets the volume_manager of this VlunsListSingle.

        Volume Manager tool used  # noqa: E501

        :param volume_manager: The volume_manager of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._volume_manager = volume_manager

    @property
    def volume_name(self):
        """Gets the volume_name of this VlunsListSingle.  # noqa: E501

        Name of exported virtual volume or volume set name  # noqa: E501

        :return: The volume_name of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this VlunsListSingle.

        Name of exported virtual volume or volume set name  # noqa: E501

        :param volume_name: The volume_name of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def volume_wwn(self):
        """Gets the volume_wwn of this VlunsListSingle.  # noqa: E501

        WWN of exported volume.If a volume set is exported, then this value is null.  # noqa: E501

        :return: The volume_wwn of this VlunsListSingle.  # noqa: E501
        :rtype: str
        """
        return self._volume_wwn

    @volume_wwn.setter
    def volume_wwn(self, volume_wwn):
        """Sets the volume_wwn of this VlunsListSingle.

        WWN of exported volume.If a volume set is exported, then this value is null.  # noqa: E501

        :param volume_wwn: The volume_wwn of this VlunsListSingle.  # noqa: E501
        :type: str
        """

        self._volume_wwn = volume_wwn

    @property
    def vv_reserved_user_space(self):
        """Gets the vv_reserved_user_space of this VlunsListSingle.  # noqa: E501

        Volume user reserved space in MiB  # noqa: E501

        :return: The vv_reserved_user_space of this VlunsListSingle.  # noqa: E501
        :rtype: int
        """
        return self._vv_reserved_user_space

    @vv_reserved_user_space.setter
    def vv_reserved_user_space(self, vv_reserved_user_space):
        """Sets the vv_reserved_user_space of this VlunsListSingle.

        Volume user reserved space in MiB  # noqa: E501

        :param vv_reserved_user_space: The vv_reserved_user_space of this VlunsListSingle.  # noqa: E501
        :type: int
        """

        self._vv_reserved_user_space = vv_reserved_user_space

    @property
    def vv_size(self):
        """Gets the vv_size of this VlunsListSingle.  # noqa: E501

        Size of volume in MiB  # noqa: E501

        :return: The vv_size of this VlunsListSingle.  # noqa: E501
        :rtype: int
        """
        return self._vv_size

    @vv_size.setter
    def vv_size(self, vv_size):
        """Sets the vv_size of this VlunsListSingle.

        Size of volume in MiB  # noqa: E501

        :param vv_size: The vv_size of this VlunsListSingle.  # noqa: E501
        :type: int
        """

        self._vv_size = vv_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VlunsListSingle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
