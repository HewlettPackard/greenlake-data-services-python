# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CloneVolumesInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'clone_volume_name': 'str',
        'parent_volume_name': 'str'
    }

    attribute_map = {
        'clone_volume_name': 'clone_volume_name',
        'parent_volume_name': 'parent_volume_name'
    }

    def __init__(self, clone_volume_name=None, parent_volume_name=None):  # noqa: E501
        """CloneVolumesInput - a model defined in OpenAPI"""  # noqa: E501

        self._clone_volume_name = None
        self._parent_volume_name = None
        self.discriminator = None

        self.clone_volume_name = clone_volume_name
        self.parent_volume_name = parent_volume_name

    @property
    def clone_volume_name(self):
        """Gets the clone_volume_name of this CloneVolumesInput.  # noqa: E501

        Name of a clone volume to be created.  # noqa: E501

        :return: The clone_volume_name of this CloneVolumesInput.  # noqa: E501
        :rtype: str
        """
        return self._clone_volume_name

    @clone_volume_name.setter
    def clone_volume_name(self, clone_volume_name):
        """Sets the clone_volume_name of this CloneVolumesInput.

        Name of a clone volume to be created.  # noqa: E501

        :param clone_volume_name: The clone_volume_name of this CloneVolumesInput.  # noqa: E501
        :type: str
        """
        if clone_volume_name is None:
            raise ValueError("Invalid value for `clone_volume_name`, must not be `None`")  # noqa: E501

        self._clone_volume_name = clone_volume_name

    @property
    def parent_volume_name(self):
        """Gets the parent_volume_name of this CloneVolumesInput.  # noqa: E501

        Name of the parent volume for a given clone volume.  # noqa: E501

        :return: The parent_volume_name of this CloneVolumesInput.  # noqa: E501
        :rtype: str
        """
        return self._parent_volume_name

    @parent_volume_name.setter
    def parent_volume_name(self, parent_volume_name):
        """Sets the parent_volume_name of this CloneVolumesInput.

        Name of the parent volume for a given clone volume.  # noqa: E501

        :param parent_volume_name: The parent_volume_name of this CloneVolumesInput.  # noqa: E501
        :type: str
        """
        if parent_volume_name is None:
            raise ValueError("Invalid value for `parent_volume_name`, must not be `None`")  # noqa: E501

        self._parent_volume_name = parent_volume_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloneVolumesInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
