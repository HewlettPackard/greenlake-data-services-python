# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PortsList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'PortsAssociatedLinks',
        'card_type': 'CardType',
        '_class': 'int',
        'class2': 'str',
        'config': 'str',
        'config_mode': 'str',
        'connection_type': 'str',
        'customer_id': 'str',
        'devices': 'ConnectedDevices',
        'displayname': 'str',
        'domain': 'str',
        'failover_status': 'str',
        'fc_data': 'PortFC',
        'fw_version': 'str',
        'generation': 'int',
        'id': 'str',
        'initiator_ports': 'InitiatorPort',
        'interupt_coalesce': 'str',
        'ip_data': 'PortIP',
        'iscsi_data': 'PortISCSI',
        'label': 'str',
        'manufacturing': 'ManufacturingSingle',
        'mode': 'str',
        'mode_change': 'str',
        'name': 'str',
        'node_card_id': 'str',
        'node_id': 'str',
        'partner': 'Partner',
        'port_sfp': 'PortSfp',
        'port_type': 'str',
        'position': 'PortPosition',
        'protocol': 'str',
        'resource_uri': 'str',
        'revision': 'str',
        'smart_san': 'str',
        'speed_actual': 'str',
        'speed_configured': 'str',
        'speed_max': 'str',
        'speed_min': 'str',
        'state': 'STATE',
        'state_description': 'StateDescription',
        'system_id': 'str',
        'tgt_mode_write_opt': 'str',
        'type': 'str',
        'unique_wwn': 'str',
        'vlans': 'list[Vlan]'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'card_type': 'cardType',
        '_class': 'class',
        'class2': 'class2',
        'config': 'config',
        'config_mode': 'configMode',
        'connection_type': 'connectionType',
        'customer_id': 'customerId',
        'devices': 'devices',
        'displayname': 'displayname',
        'domain': 'domain',
        'failover_status': 'failoverStatus',
        'fc_data': 'fcData',
        'fw_version': 'fwVersion',
        'generation': 'generation',
        'id': 'id',
        'initiator_ports': 'initiatorPorts',
        'interupt_coalesce': 'interuptCoalesce',
        'ip_data': 'ipData',
        'iscsi_data': 'iscsiData',
        'label': 'label',
        'manufacturing': 'manufacturing',
        'mode': 'mode',
        'mode_change': 'modeChange',
        'name': 'name',
        'node_card_id': 'nodeCardId',
        'node_id': 'nodeId',
        'partner': 'partner',
        'port_sfp': 'portSfp',
        'port_type': 'portType',
        'position': 'position',
        'protocol': 'protocol',
        'resource_uri': 'resourceUri',
        'revision': 'revision',
        'smart_san': 'smartSAN',
        'speed_actual': 'speedActual',
        'speed_configured': 'speedConfigured',
        'speed_max': 'speedMax',
        'speed_min': 'speedMin',
        'state': 'state',
        'state_description': 'stateDescription',
        'system_id': 'systemId',
        'tgt_mode_write_opt': 'tgtModeWriteOpt',
        'type': 'type',
        'unique_wwn': 'uniqueWWN',
        'vlans': 'vlans'
    }

    def __init__(self, associated_links=None, card_type=None, _class=None, class2=None, config=None, config_mode=None, connection_type=None, customer_id=None, devices=None, displayname=None, domain=None, failover_status=None, fc_data=None, fw_version=None, generation=None, id=None, initiator_ports=None, interupt_coalesce=None, ip_data=None, iscsi_data=None, label=None, manufacturing=None, mode=None, mode_change=None, name=None, node_card_id=None, node_id=None, partner=None, port_sfp=None, port_type=None, position=None, protocol=None, resource_uri=None, revision=None, smart_san=None, speed_actual=None, speed_configured=None, speed_max=None, speed_min=None, state=None, state_description=None, system_id=None, tgt_mode_write_opt=None, type=None, unique_wwn=None, vlans=None):  # noqa: E501
        """PortsList - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._card_type = None
        self.__class = None
        self._class2 = None
        self._config = None
        self._config_mode = None
        self._connection_type = None
        self._customer_id = None
        self._devices = None
        self._displayname = None
        self._domain = None
        self._failover_status = None
        self._fc_data = None
        self._fw_version = None
        self._generation = None
        self._id = None
        self._initiator_ports = None
        self._interupt_coalesce = None
        self._ip_data = None
        self._iscsi_data = None
        self._label = None
        self._manufacturing = None
        self._mode = None
        self._mode_change = None
        self._name = None
        self._node_card_id = None
        self._node_id = None
        self._partner = None
        self._port_sfp = None
        self._port_type = None
        self._position = None
        self._protocol = None
        self._resource_uri = None
        self._revision = None
        self._smart_san = None
        self._speed_actual = None
        self._speed_configured = None
        self._speed_max = None
        self._speed_min = None
        self._state = None
        self._state_description = None
        self._system_id = None
        self._tgt_mode_write_opt = None
        self._type = None
        self._unique_wwn = None
        self._vlans = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if card_type is not None:
            self.card_type = card_type
        if _class is not None:
            self._class = _class
        if class2 is not None:
            self.class2 = class2
        if config is not None:
            self.config = config
        if config_mode is not None:
            self.config_mode = config_mode
        if connection_type is not None:
            self.connection_type = connection_type
        if customer_id is not None:
            self.customer_id = customer_id
        if devices is not None:
            self.devices = devices
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if failover_status is not None:
            self.failover_status = failover_status
        if fc_data is not None:
            self.fc_data = fc_data
        if fw_version is not None:
            self.fw_version = fw_version
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if initiator_ports is not None:
            self.initiator_ports = initiator_ports
        if interupt_coalesce is not None:
            self.interupt_coalesce = interupt_coalesce
        if ip_data is not None:
            self.ip_data = ip_data
        if iscsi_data is not None:
            self.iscsi_data = iscsi_data
        if label is not None:
            self.label = label
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if mode is not None:
            self.mode = mode
        if mode_change is not None:
            self.mode_change = mode_change
        if name is not None:
            self.name = name
        if node_card_id is not None:
            self.node_card_id = node_card_id
        if node_id is not None:
            self.node_id = node_id
        if partner is not None:
            self.partner = partner
        if port_sfp is not None:
            self.port_sfp = port_sfp
        if port_type is not None:
            self.port_type = port_type
        if position is not None:
            self.position = position
        if protocol is not None:
            self.protocol = protocol
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if revision is not None:
            self.revision = revision
        if smart_san is not None:
            self.smart_san = smart_san
        if speed_actual is not None:
            self.speed_actual = speed_actual
        if speed_configured is not None:
            self.speed_configured = speed_configured
        if speed_max is not None:
            self.speed_max = speed_max
        if speed_min is not None:
            self.speed_min = speed_min
        if state is not None:
            self.state = state
        if state_description is not None:
            self.state_description = state_description
        if system_id is not None:
            self.system_id = system_id
        if tgt_mode_write_opt is not None:
            self.tgt_mode_write_opt = tgt_mode_write_opt
        if type is not None:
            self.type = type
        if unique_wwn is not None:
            self.unique_wwn = unique_wwn
        if vlans is not None:
            self.vlans = vlans

    @property
    def associated_links(self):
        """Gets the associated_links of this PortsList.  # noqa: E501


        :return: The associated_links of this PortsList.  # noqa: E501
        :rtype: PortsAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this PortsList.


        :param associated_links: The associated_links of this PortsList.  # noqa: E501
        :type: PortsAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def card_type(self):
        """Gets the card_type of this PortsList.  # noqa: E501


        :return: The card_type of this PortsList.  # noqa: E501
        :rtype: CardType
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this PortsList.


        :param card_type: The card_type of this PortsList.  # noqa: E501
        :type: CardType
        """

        self._card_type = card_type

    @property
    def _class(self):
        """Gets the _class of this PortsList.  # noqa: E501

        Fibre Channel class (can be either 2 or 3)  # noqa: E501

        :return: The _class of this PortsList.  # noqa: E501
        :rtype: int
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this PortsList.

        Fibre Channel class (can be either 2 or 3)  # noqa: E501

        :param _class: The _class of this PortsList.  # noqa: E501
        :type: int
        """

        self.__class = _class

    @property
    def class2(self):
        """Gets the class2 of this PortsList.  # noqa: E501

        Class2 state and configuration  # noqa: E501

        :return: The class2 of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._class2

    @class2.setter
    def class2(self, class2):
        """Sets the class2 of this PortsList.

        Class2 state and configuration  # noqa: E501

        :param class2: The class2 of this PortsList.  # noqa: E501
        :type: str
        """

        self._class2 = class2

    @property
    def config(self):
        """Gets the config of this PortsList.  # noqa: E501

        Configuration state of port  # noqa: E501

        :return: The config of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this PortsList.

        Configuration state of port  # noqa: E501

        :param config: The config of this PortsList.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def config_mode(self):
        """Gets the config_mode of this PortsList.  # noqa: E501

        Connection mode of the port  # noqa: E501

        :return: The config_mode of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._config_mode

    @config_mode.setter
    def config_mode(self, config_mode):
        """Sets the config_mode of this PortsList.

        Connection mode of the port  # noqa: E501

        :param config_mode: The config_mode of this PortsList.  # noqa: E501
        :type: str
        """

        self._config_mode = config_mode

    @property
    def connection_type(self):
        """Gets the connection_type of this PortsList.  # noqa: E501

        port connection type  # noqa: E501

        :return: The connection_type of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this PortsList.

        port connection type  # noqa: E501

        :param connection_type: The connection_type of this PortsList.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def customer_id(self):
        """Gets the customer_id of this PortsList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PortsList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this PortsList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def devices(self):
        """Gets the devices of this PortsList.  # noqa: E501


        :return: The devices of this PortsList.  # noqa: E501
        :rtype: ConnectedDevices
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this PortsList.


        :param devices: The devices of this PortsList.  # noqa: E501
        :type: ConnectedDevices
        """

        self._devices = devices

    @property
    def displayname(self):
        """Gets the displayname of this PortsList.  # noqa: E501

        Name to be used for display purposes  # noqa: E501

        :return: The displayname of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this PortsList.

        Name to be used for display purposes  # noqa: E501

        :param displayname: The displayname of this PortsList.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this PortsList.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PortsList.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this PortsList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def failover_status(self):
        """Gets the failover_status of this PortsList.  # noqa: E501

        Failover status of this port and the partner `Filter, Sort`  # noqa: E501

        :return: The failover_status of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._failover_status

    @failover_status.setter
    def failover_status(self, failover_status):
        """Sets the failover_status of this PortsList.

        Failover status of this port and the partner `Filter, Sort`  # noqa: E501

        :param failover_status: The failover_status of this PortsList.  # noqa: E501
        :type: str
        """

        self._failover_status = failover_status

    @property
    def fc_data(self):
        """Gets the fc_data of this PortsList.  # noqa: E501


        :return: The fc_data of this PortsList.  # noqa: E501
        :rtype: PortFC
        """
        return self._fc_data

    @fc_data.setter
    def fc_data(self, fc_data):
        """Sets the fc_data of this PortsList.


        :param fc_data: The fc_data of this PortsList.  # noqa: E501
        :type: PortFC
        """

        self._fc_data = fc_data

    @property
    def fw_version(self):
        """Gets the fw_version of this PortsList.  # noqa: E501

        Firmware version  # noqa: E501

        :return: The fw_version of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._fw_version

    @fw_version.setter
    def fw_version(self, fw_version):
        """Sets the fw_version of this PortsList.

        Firmware version  # noqa: E501

        :param fw_version: The fw_version of this PortsList.  # noqa: E501
        :type: str
        """

        self._fw_version = fw_version

    @property
    def generation(self):
        """Gets the generation of this PortsList.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this PortsList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this PortsList.

        generation  # noqa: E501

        :param generation: The generation of this PortsList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this PortsList.  # noqa: E501

        Unique Identifier of the resource `Filter`  # noqa: E501

        :return: The id of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortsList.

        Unique Identifier of the resource `Filter`  # noqa: E501

        :param id: The id of this PortsList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initiator_ports(self):
        """Gets the initiator_ports of this PortsList.  # noqa: E501


        :return: The initiator_ports of this PortsList.  # noqa: E501
        :rtype: InitiatorPort
        """
        return self._initiator_ports

    @initiator_ports.setter
    def initiator_ports(self, initiator_ports):
        """Sets the initiator_ports of this PortsList.


        :param initiator_ports: The initiator_ports of this PortsList.  # noqa: E501
        :type: InitiatorPort
        """

        self._initiator_ports = initiator_ports

    @property
    def interupt_coalesce(self):
        """Gets the interupt_coalesce of this PortsList.  # noqa: E501

        Interupt Coalesce  # noqa: E501

        :return: The interupt_coalesce of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._interupt_coalesce

    @interupt_coalesce.setter
    def interupt_coalesce(self, interupt_coalesce):
        """Sets the interupt_coalesce of this PortsList.

        Interupt Coalesce  # noqa: E501

        :param interupt_coalesce: The interupt_coalesce of this PortsList.  # noqa: E501
        :type: str
        """

        self._interupt_coalesce = interupt_coalesce

    @property
    def ip_data(self):
        """Gets the ip_data of this PortsList.  # noqa: E501


        :return: The ip_data of this PortsList.  # noqa: E501
        :rtype: PortIP
        """
        return self._ip_data

    @ip_data.setter
    def ip_data(self, ip_data):
        """Sets the ip_data of this PortsList.


        :param ip_data: The ip_data of this PortsList.  # noqa: E501
        :type: PortIP
        """

        self._ip_data = ip_data

    @property
    def iscsi_data(self):
        """Gets the iscsi_data of this PortsList.  # noqa: E501


        :return: The iscsi_data of this PortsList.  # noqa: E501
        :rtype: PortISCSI
        """
        return self._iscsi_data

    @iscsi_data.setter
    def iscsi_data(self, iscsi_data):
        """Sets the iscsi_data of this PortsList.


        :param iscsi_data: The iscsi_data of this PortsList.  # noqa: E501
        :type: PortISCSI
        """

        self._iscsi_data = iscsi_data

    @property
    def label(self):
        """Gets the label of this PortsList.  # noqa: E501

        Label `Filter, Sort`  # noqa: E501

        :return: The label of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PortsList.

        Label `Filter, Sort`  # noqa: E501

        :param label: The label of this PortsList.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def manufacturing(self):
        """Gets the manufacturing of this PortsList.  # noqa: E501


        :return: The manufacturing of this PortsList.  # noqa: E501
        :rtype: ManufacturingSingle
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this PortsList.


        :param manufacturing: The manufacturing of this PortsList.  # noqa: E501
        :type: ManufacturingSingle
        """

        self._manufacturing = manufacturing

    @property
    def mode(self):
        """Gets the mode of this PortsList.  # noqa: E501

        Current mode the port is in `Filter, Sort`  # noqa: E501

        :return: The mode of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PortsList.

        Current mode the port is in `Filter, Sort`  # noqa: E501

        :param mode: The mode of this PortsList.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def mode_change(self):
        """Gets the mode_change of this PortsList.  # noqa: E501

        Indicates if the mode change is allowed or prohibited  # noqa: E501

        :return: The mode_change of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._mode_change

    @mode_change.setter
    def mode_change(self, mode_change):
        """Sets the mode_change of this PortsList.

        Indicates if the mode change is allowed or prohibited  # noqa: E501

        :param mode_change: The mode_change of this PortsList.  # noqa: E501
        :type: str
        """

        self._mode_change = mode_change

    @property
    def name(self):
        """Gets the name of this PortsList.  # noqa: E501

        Name of the resource `Filter, Sort`  # noqa: E501

        :return: The name of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortsList.

        Name of the resource `Filter, Sort`  # noqa: E501

        :param name: The name of this PortsList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_card_id(self):
        """Gets the node_card_id of this PortsList.  # noqa: E501

        Unique Identifier of the node adapter card  # noqa: E501

        :return: The node_card_id of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._node_card_id

    @node_card_id.setter
    def node_card_id(self, node_card_id):
        """Sets the node_card_id of this PortsList.

        Unique Identifier of the node adapter card  # noqa: E501

        :param node_card_id: The node_card_id of this PortsList.  # noqa: E501
        :type: str
        """

        self._node_card_id = node_card_id

    @property
    def node_id(self):
        """Gets the node_id of this PortsList.  # noqa: E501

        Unique Identifier of the node `Filter`  # noqa: E501

        :return: The node_id of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this PortsList.

        Unique Identifier of the node `Filter`  # noqa: E501

        :param node_id: The node_id of this PortsList.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def partner(self):
        """Gets the partner of this PortsList.  # noqa: E501


        :return: The partner of this PortsList.  # noqa: E501
        :rtype: Partner
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this PortsList.


        :param partner: The partner of this PortsList.  # noqa: E501
        :type: Partner
        """

        self._partner = partner

    @property
    def port_sfp(self):
        """Gets the port_sfp of this PortsList.  # noqa: E501


        :return: The port_sfp of this PortsList.  # noqa: E501
        :rtype: PortSfp
        """
        return self._port_sfp

    @port_sfp.setter
    def port_sfp(self, port_sfp):
        """Sets the port_sfp of this PortsList.


        :param port_sfp: The port_sfp of this PortsList.  # noqa: E501
        :type: PortSfp
        """

        self._port_sfp = port_sfp

    @property
    def port_type(self):
        """Gets the port_type of this PortsList.  # noqa: E501

        Type of the port based on the device it is connected to `Filter, Sort`  # noqa: E501

        :return: The port_type of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._port_type

    @port_type.setter
    def port_type(self, port_type):
        """Sets the port_type of this PortsList.

        Type of the port based on the device it is connected to `Filter, Sort`  # noqa: E501

        :param port_type: The port_type of this PortsList.  # noqa: E501
        :type: str
        """

        self._port_type = port_type

    @property
    def position(self):
        """Gets the position of this PortsList.  # noqa: E501


        :return: The position of this PortsList.  # noqa: E501
        :rtype: PortPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PortsList.


        :param position: The position of this PortsList.  # noqa: E501
        :type: PortPosition
        """

        self._position = position

    @property
    def protocol(self):
        """Gets the protocol of this PortsList.  # noqa: E501

        Current protocol the port is in `Filter, Sort`  # noqa: E501

        :return: The protocol of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PortsList.

        Current protocol the port is in `Filter, Sort`  # noqa: E501

        :param protocol: The protocol of this PortsList.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def resource_uri(self):
        """Gets the resource_uri of this PortsList.  # noqa: E501

        resourceUri for detailed port object  # noqa: E501

        :return: The resource_uri of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this PortsList.

        resourceUri for detailed port object  # noqa: E501

        :param resource_uri: The resource_uri of this PortsList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def revision(self):
        """Gets the revision of this PortsList.  # noqa: E501

        Revision of the Host Bus Adapter  # noqa: E501

        :return: The revision of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this PortsList.

        Revision of the Host Bus Adapter  # noqa: E501

        :param revision: The revision of this PortsList.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def smart_san(self):
        """Gets the smart_san of this PortsList.  # noqa: E501

        Smart SAN status  # noqa: E501

        :return: The smart_san of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._smart_san

    @smart_san.setter
    def smart_san(self, smart_san):
        """Sets the smart_san of this PortsList.

        Smart SAN status  # noqa: E501

        :param smart_san: The smart_san of this PortsList.  # noqa: E501
        :type: str
        """

        self._smart_san = smart_san

    @property
    def speed_actual(self):
        """Gets the speed_actual of this PortsList.  # noqa: E501

        Actual speed that port is running at  `Filter`  # noqa: E501

        :return: The speed_actual of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._speed_actual

    @speed_actual.setter
    def speed_actual(self, speed_actual):
        """Sets the speed_actual of this PortsList.

        Actual speed that port is running at  `Filter`  # noqa: E501

        :param speed_actual: The speed_actual of this PortsList.  # noqa: E501
        :type: str
        """

        self._speed_actual = speed_actual

    @property
    def speed_configured(self):
        """Gets the speed_configured of this PortsList.  # noqa: E501

        Speed that is configured to run as  # noqa: E501

        :return: The speed_configured of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._speed_configured

    @speed_configured.setter
    def speed_configured(self, speed_configured):
        """Sets the speed_configured of this PortsList.

        Speed that is configured to run as  # noqa: E501

        :param speed_configured: The speed_configured of this PortsList.  # noqa: E501
        :type: str
        """

        self._speed_configured = speed_configured

    @property
    def speed_max(self):
        """Gets the speed_max of this PortsList.  # noqa: E501

        Maximum speed that port can run at  # noqa: E501

        :return: The speed_max of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._speed_max

    @speed_max.setter
    def speed_max(self, speed_max):
        """Sets the speed_max of this PortsList.

        Maximum speed that port can run at  # noqa: E501

        :param speed_max: The speed_max of this PortsList.  # noqa: E501
        :type: str
        """

        self._speed_max = speed_max

    @property
    def speed_min(self):
        """Gets the speed_min of this PortsList.  # noqa: E501

        Minimum speed that port can run at  # noqa: E501

        :return: The speed_min of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._speed_min

    @speed_min.setter
    def speed_min(self, speed_min):
        """Sets the speed_min of this PortsList.

        Minimum speed that port can run at  # noqa: E501

        :param speed_min: The speed_min of this PortsList.  # noqa: E501
        :type: str
        """

        self._speed_min = speed_min

    @property
    def state(self):
        """Gets the state of this PortsList.  # noqa: E501


        :return: The state of this PortsList.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PortsList.


        :param state: The state of this PortsList.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def state_description(self):
        """Gets the state_description of this PortsList.  # noqa: E501


        :return: The state_description of this PortsList.  # noqa: E501
        :rtype: StateDescription
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description):
        """Sets the state_description of this PortsList.


        :param state_description: The state_description of this PortsList.  # noqa: E501
        :type: StateDescription
        """

        self._state_description = state_description

    @property
    def system_id(self):
        """Gets the system_id of this PortsList.  # noqa: E501

        SystemUid/SerialNumber of the array.  # noqa: E501

        :return: The system_id of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this PortsList.

        SystemUid/SerialNumber of the array.  # noqa: E501

        :param system_id: The system_id of this PortsList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def tgt_mode_write_opt(self):
        """Gets the tgt_mode_write_opt of this PortsList.  # noqa: E501

        Target mode write optimization setting  # noqa: E501

        :return: The tgt_mode_write_opt of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._tgt_mode_write_opt

    @tgt_mode_write_opt.setter
    def tgt_mode_write_opt(self, tgt_mode_write_opt):
        """Sets the tgt_mode_write_opt of this PortsList.

        Target mode write optimization setting  # noqa: E501

        :param tgt_mode_write_opt: The tgt_mode_write_opt of this PortsList.  # noqa: E501
        :type: str
        """

        self._tgt_mode_write_opt = tgt_mode_write_opt

    @property
    def type(self):
        """Gets the type of this PortsList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PortsList.

        type  # noqa: E501

        :param type: The type of this PortsList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unique_wwn(self):
        """Gets the unique_wwn of this PortsList.  # noqa: E501

        Unique WWN setting  # noqa: E501

        :return: The unique_wwn of this PortsList.  # noqa: E501
        :rtype: str
        """
        return self._unique_wwn

    @unique_wwn.setter
    def unique_wwn(self, unique_wwn):
        """Sets the unique_wwn of this PortsList.

        Unique WWN setting  # noqa: E501

        :param unique_wwn: The unique_wwn of this PortsList.  # noqa: E501
        :type: str
        """

        self._unique_wwn = unique_wwn

    @property
    def vlans(self):
        """Gets the vlans of this PortsList.  # noqa: E501


        :return: The vlans of this PortsList.  # noqa: E501
        :rtype: list[Vlan]
        """
        return self._vlans

    @vlans.setter
    def vlans(self, vlans):
        """Sets the vlans of this PortsList.


        :param vlans: The vlans of this PortsList.  # noqa: E501
        :type: list[Vlan]
        """

        self._vlans = vlans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
