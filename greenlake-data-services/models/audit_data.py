# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AuditData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_resource': 'AuditResource',
        'code': 'str',
        'context_id': 'str',
        'customer_id': 'str',
        'id': 'str',
        'message': 'str',
        'occurred_at': 'str',
        'permission': 'str',
        'scope': 'str',
        'source': 'str',
        'source_ip_address': 'str',
        'state': 'str',
        'task_id': 'str',
        'unique_id': 'str',
        'user_email': 'str',
        'version': 'int'
    }

    attribute_map = {
        'associated_resource': 'associatedResource',
        'code': 'code',
        'context_id': 'contextId',
        'customer_id': 'customerId',
        'id': 'id',
        'message': 'message',
        'occurred_at': 'occurredAt',
        'permission': 'permission',
        'scope': 'scope',
        'source': 'source',
        'source_ip_address': 'sourceIpAddress',
        'state': 'state',
        'task_id': 'taskId',
        'unique_id': 'uniqueId',
        'user_email': 'userEmail',
        'version': 'version'
    }

    def __init__(self, associated_resource=None, code=None, context_id=None, customer_id=None, id=None, message=None, occurred_at=None, permission=None, scope=None, source=None, source_ip_address=None, state=None, task_id=None, unique_id=None, user_email=None, version=None):  # noqa: E501
        """AuditData - a model defined in OpenAPI"""  # noqa: E501

        self._associated_resource = None
        self._code = None
        self._context_id = None
        self._customer_id = None
        self._id = None
        self._message = None
        self._occurred_at = None
        self._permission = None
        self._scope = None
        self._source = None
        self._source_ip_address = None
        self._state = None
        self._task_id = None
        self._unique_id = None
        self._user_email = None
        self._version = None
        self.discriminator = None

        if associated_resource is not None:
            self.associated_resource = associated_resource
        if code is not None:
            self.code = code
        if context_id is not None:
            self.context_id = context_id
        if customer_id is not None:
            self.customer_id = customer_id
        self.id = id
        self.message = message
        self.occurred_at = occurred_at
        if permission is not None:
            self.permission = permission
        if scope is not None:
            self.scope = scope
        if source is not None:
            self.source = source
        if source_ip_address is not None:
            self.source_ip_address = source_ip_address
        self.state = state
        if task_id is not None:
            self.task_id = task_id
        if unique_id is not None:
            self.unique_id = unique_id
        if user_email is not None:
            self.user_email = user_email
        self.version = version

    @property
    def associated_resource(self):
        """Gets the associated_resource of this AuditData.  # noqa: E501


        :return: The associated_resource of this AuditData.  # noqa: E501
        :rtype: AuditResource
        """
        return self._associated_resource

    @associated_resource.setter
    def associated_resource(self, associated_resource):
        """Sets the associated_resource of this AuditData.


        :param associated_resource: The associated_resource of this AuditData.  # noqa: E501
        :type: AuditResource
        """

        self._associated_resource = associated_resource

    @property
    def code(self):
        """Gets the code of this AuditData.  # noqa: E501

        Unique code that describes the type of audit event that occurred  # noqa: E501

        :return: The code of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AuditData.

        Unique code that describes the type of audit event that occurred  # noqa: E501

        :param code: The code of this AuditData.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def context_id(self):
        """Gets the context_id of this AuditData.  # noqa: E501

        Unique id used to track a request across services  # noqa: E501

        :return: The context_id of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this AuditData.

        Unique id used to track a request across services  # noqa: E501

        :param context_id: The context_id of this AuditData.  # noqa: E501
        :type: str
        """

        self._context_id = context_id

    @property
    def customer_id(self):
        """Gets the customer_id of this AuditData.  # noqa: E501

        Application Customer ID associated with this event  # noqa: E501

        :return: The customer_id of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AuditData.

        Application Customer ID associated with this event  # noqa: E501

        :param customer_id: The customer_id of this AuditData.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def id(self):
        """Gets the id of this AuditData.  # noqa: E501

        Required: Unique ID for this audit event message, for example a GUID  # noqa: E501

        :return: The id of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditData.

        Required: Unique ID for this audit event message, for example a GUID  # noqa: E501

        :param id: The id of this AuditData.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def message(self):
        """Gets the message of this AuditData.  # noqa: E501

        Required: Human readable message string that describes the action that occurred  # noqa: E501

        :return: The message of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditData.

        Required: Human readable message string that describes the action that occurred  # noqa: E501

        :param message: The message of this AuditData.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def occurred_at(self):
        """Gets the occurred_at of this AuditData.  # noqa: E501

        Required: UTC timestamp when the event occurred  # noqa: E501

        :return: The occurred_at of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this AuditData.

        Required: UTC timestamp when the event occurred  # noqa: E501

        :param occurred_at: The occurred_at of this AuditData.  # noqa: E501
        :type: str
        """
        if occurred_at is None:
            raise ValueError("Invalid value for `occurred_at`, must not be `None`")  # noqa: E501

        self._occurred_at = occurred_at

    @property
    def permission(self):
        """Gets the permission of this AuditData.  # noqa: E501

        Which privilege was used to grant/deny the action. E.g. controller.edit.  # noqa: E501

        :return: The permission of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AuditData.

        Which privilege was used to grant/deny the action. E.g. controller.edit.  # noqa: E501

        :param permission: The permission of this AuditData.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def scope(self):
        """Gets the scope of this AuditData.  # noqa: E501

        Provides additional limits on the authorization of the request.  # noqa: E501

        :return: The scope of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AuditData.

        Provides additional limits on the authorization of the request.  # noqa: E501

        :param scope: The scope of this AuditData.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def source(self):
        """Gets the source of this AuditData.  # noqa: E501

        Which service/device is responsible for sending this event  # noqa: E501

        :return: The source of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AuditData.

        Which service/device is responsible for sending this event  # noqa: E501

        :param source: The source of this AuditData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_ip_address(self):
        """Gets the source_ip_address of this AuditData.  # noqa: E501

        IP address from where the request originated  # noqa: E501

        :return: The source_ip_address of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._source_ip_address

    @source_ip_address.setter
    def source_ip_address(self, source_ip_address):
        """Sets the source_ip_address of this AuditData.

        IP address from where the request originated  # noqa: E501

        :param source_ip_address: The source_ip_address of this AuditData.  # noqa: E501
        :type: str
        """

        self._source_ip_address = source_ip_address

    @property
    def state(self):
        """Gets the state of this AuditData.  # noqa: E501

        Required: Enum that identifies whether the action was successful or not: Success, Failure, PermissionDenied, Initiated  # noqa: E501

        :return: The state of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AuditData.

        Required: Enum that identifies whether the action was successful or not: Success, Failure, PermissionDenied, Initiated  # noqa: E501

        :param state: The state of this AuditData.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def task_id(self):
        """Gets the task_id of this AuditData.  # noqa: E501

        Identifier linking asynchronous operations allowing initiation and completion of operations to be linked  # noqa: E501

        :return: The task_id of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this AuditData.

        Identifier linking asynchronous operations allowing initiation and completion of operations to be linked  # noqa: E501

        :param task_id: The task_id of this AuditData.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def unique_id(self):
        """Gets the unique_id of this AuditData.  # noqa: E501

        Unique identifier generated internally  # noqa: E501

        :return: The unique_id of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this AuditData.

        Unique identifier generated internally  # noqa: E501

        :param unique_id: The unique_id of this AuditData.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def user_email(self):
        """Gets the user_email of this AuditData.  # noqa: E501

        User who is associated with this event  # noqa: E501

        :return: The user_email of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this AuditData.

        User who is associated with this event  # noqa: E501

        :param user_email: The user_email of this AuditData.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def version(self):
        """Gets the version of this AuditData.  # noqa: E501

        Required: Version of the event structure, allowing for changes in the future  # noqa: E501

        :return: The version of this AuditData.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AuditData.

        Required: Version of the event structure, allowing for changes in the future  # noqa: E501

        :param version: The version of this AuditData.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
