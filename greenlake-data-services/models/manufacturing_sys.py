# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ManufacturingSys(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assembly_rev': 'str',
        'check_sum': 'str',
        'hpe_model_name': 'str',
        'manufacturer': 'str',
        'model': 'str',
        'saleable_part_number': 'str',
        'saleable_serial_number': 'str',
        'serial_number': 'str',
        'spare_part_number': 'str'
    }

    attribute_map = {
        'assembly_rev': 'assemblyRev',
        'check_sum': 'checkSum',
        'hpe_model_name': 'hpeModelName',
        'manufacturer': 'manufacturer',
        'model': 'model',
        'saleable_part_number': 'saleablePartNumber',
        'saleable_serial_number': 'saleableSerialNumber',
        'serial_number': 'serialNumber',
        'spare_part_number': 'sparePartNumber'
    }

    def __init__(self, assembly_rev=None, check_sum=None, hpe_model_name=None, manufacturer=None, model=None, saleable_part_number=None, saleable_serial_number=None, serial_number=None, spare_part_number=None):  # noqa: E501
        """ManufacturingSys - a model defined in OpenAPI"""  # noqa: E501

        self._assembly_rev = None
        self._check_sum = None
        self._hpe_model_name = None
        self._manufacturer = None
        self._model = None
        self._saleable_part_number = None
        self._saleable_serial_number = None
        self._serial_number = None
        self._spare_part_number = None
        self.discriminator = None

        if assembly_rev is not None:
            self.assembly_rev = assembly_rev
        if check_sum is not None:
            self.check_sum = check_sum
        if hpe_model_name is not None:
            self.hpe_model_name = hpe_model_name
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if model is not None:
            self.model = model
        if saleable_part_number is not None:
            self.saleable_part_number = saleable_part_number
        if saleable_serial_number is not None:
            self.saleable_serial_number = saleable_serial_number
        if serial_number is not None:
            self.serial_number = serial_number
        if spare_part_number is not None:
            self.spare_part_number = spare_part_number

    @property
    def assembly_rev(self):
        """Gets the assembly_rev of this ManufacturingSys.  # noqa: E501

        Assembly revision  # noqa: E501

        :return: The assembly_rev of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._assembly_rev

    @assembly_rev.setter
    def assembly_rev(self, assembly_rev):
        """Sets the assembly_rev of this ManufacturingSys.

        Assembly revision  # noqa: E501

        :param assembly_rev: The assembly_rev of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._assembly_rev = assembly_rev

    @property
    def check_sum(self):
        """Gets the check_sum of this ManufacturingSys.  # noqa: E501

        Checksum  # noqa: E501

        :return: The check_sum of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._check_sum

    @check_sum.setter
    def check_sum(self, check_sum):
        """Sets the check_sum of this ManufacturingSys.

        Checksum  # noqa: E501

        :param check_sum: The check_sum of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._check_sum = check_sum

    @property
    def hpe_model_name(self):
        """Gets the hpe_model_name of this ManufacturingSys.  # noqa: E501

        HPE model name  # noqa: E501

        :return: The hpe_model_name of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._hpe_model_name

    @hpe_model_name.setter
    def hpe_model_name(self, hpe_model_name):
        """Sets the hpe_model_name of this ManufacturingSys.

        HPE model name  # noqa: E501

        :param hpe_model_name: The hpe_model_name of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._hpe_model_name = hpe_model_name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ManufacturingSys.  # noqa: E501

        Manufacturer `Filter`  # noqa: E501

        :return: The manufacturer of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ManufacturingSys.

        Manufacturer `Filter`  # noqa: E501

        :param manufacturer: The manufacturer of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this ManufacturingSys.  # noqa: E501

        Model `Filter`  # noqa: E501

        :return: The model of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ManufacturingSys.

        Model `Filter`  # noqa: E501

        :param model: The model of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def saleable_part_number(self):
        """Gets the saleable_part_number of this ManufacturingSys.  # noqa: E501

        Saleable part number  # noqa: E501

        :return: The saleable_part_number of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._saleable_part_number

    @saleable_part_number.setter
    def saleable_part_number(self, saleable_part_number):
        """Sets the saleable_part_number of this ManufacturingSys.

        Saleable part number  # noqa: E501

        :param saleable_part_number: The saleable_part_number of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._saleable_part_number = saleable_part_number

    @property
    def saleable_serial_number(self):
        """Gets the saleable_serial_number of this ManufacturingSys.  # noqa: E501

        Saleable serial number  # noqa: E501

        :return: The saleable_serial_number of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._saleable_serial_number

    @saleable_serial_number.setter
    def saleable_serial_number(self, saleable_serial_number):
        """Sets the saleable_serial_number of this ManufacturingSys.

        Saleable serial number  # noqa: E501

        :param saleable_serial_number: The saleable_serial_number of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._saleable_serial_number = saleable_serial_number

    @property
    def serial_number(self):
        """Gets the serial_number of this ManufacturingSys.  # noqa: E501

        Serial number `Filter, Sort`  # noqa: E501

        :return: The serial_number of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ManufacturingSys.

        Serial number `Filter, Sort`  # noqa: E501

        :param serial_number: The serial_number of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def spare_part_number(self):
        """Gets the spare_part_number of this ManufacturingSys.  # noqa: E501

        Spare part number  # noqa: E501

        :return: The spare_part_number of this ManufacturingSys.  # noqa: E501
        :rtype: str
        """
        return self._spare_part_number

    @spare_part_number.setter
    def spare_part_number(self, spare_part_number):
        """Sets the spare_part_number of this ManufacturingSys.

        Spare part number  # noqa: E501

        :param spare_part_number: The spare_part_number of this ManufacturingSys.  # noqa: E501
        :type: str
        """

        self._spare_part_number = spare_part_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManufacturingSys):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
