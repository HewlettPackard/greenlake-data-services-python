# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNsShelfPortInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'port_errors': 'str',
        'port_idx': 'int',
        'port_name': 'str',
        'port_status': 'str',
        'port_type': 'str',
        'remote_loc_id': 'int',
        'remote_port_id': 'int',
        'remote_sas_addr': 'str',
        'remote_sas_domain': 'str',
        'remote_sas_phy_id': 'str'
    }

    attribute_map = {
        'port_errors': 'port_errors',
        'port_idx': 'port_idx',
        'port_name': 'port_name',
        'port_status': 'port_status',
        'port_type': 'port_type',
        'remote_loc_id': 'remote_loc_id',
        'remote_port_id': 'remote_port_id',
        'remote_sas_addr': 'remote_sas_addr',
        'remote_sas_domain': 'remote_sas_domain',
        'remote_sas_phy_id': 'remote_sas_phy_id'
    }

    def __init__(self, port_errors=None, port_idx=None, port_name=None, port_status=None, port_type=None, remote_loc_id=None, remote_port_id=None, remote_sas_addr=None, remote_sas_domain=None, remote_sas_phy_id=None):  # noqa: E501
        """NimbleNsShelfPortInfo - a model defined in OpenAPI"""  # noqa: E501

        self._port_errors = None
        self._port_idx = None
        self._port_name = None
        self._port_status = None
        self._port_type = None
        self._remote_loc_id = None
        self._remote_port_id = None
        self._remote_sas_addr = None
        self._remote_sas_domain = None
        self._remote_sas_phy_id = None
        self.discriminator = None

        if port_errors is not None:
            self.port_errors = port_errors
        if port_idx is not None:
            self.port_idx = port_idx
        if port_name is not None:
            self.port_name = port_name
        if port_status is not None:
            self.port_status = port_status
        if port_type is not None:
            self.port_type = port_type
        if remote_loc_id is not None:
            self.remote_loc_id = remote_loc_id
        if remote_port_id is not None:
            self.remote_port_id = remote_port_id
        if remote_sas_addr is not None:
            self.remote_sas_addr = remote_sas_addr
        if remote_sas_domain is not None:
            self.remote_sas_domain = remote_sas_domain
        if remote_sas_phy_id is not None:
            self.remote_sas_phy_id = remote_sas_phy_id

    @property
    def port_errors(self):
        """Gets the port_errors of this NimbleNsShelfPortInfo.  # noqa: E501

        Comma separated list of integers to indicate error conditions.  # noqa: E501

        :return: The port_errors of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: str
        """
        return self._port_errors

    @port_errors.setter
    def port_errors(self, port_errors):
        """Sets the port_errors of this NimbleNsShelfPortInfo.

        Comma separated list of integers to indicate error conditions.  # noqa: E501

        :param port_errors: The port_errors of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: str
        """

        self._port_errors = port_errors

    @property
    def port_idx(self):
        """Gets the port_idx of this NimbleNsShelfPortInfo.  # noqa: E501

        Index of the port, starting from 0.  # noqa: E501

        :return: The port_idx of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: int
        """
        return self._port_idx

    @port_idx.setter
    def port_idx(self, port_idx):
        """Sets the port_idx of this NimbleNsShelfPortInfo.

        Index of the port, starting from 0.  # noqa: E501

        :param port_idx: The port_idx of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: int
        """

        self._port_idx = port_idx

    @property
    def port_name(self):
        """Gets the port_name of this NimbleNsShelfPortInfo.  # noqa: E501

        Name of the port.  # noqa: E501

        :return: The port_name of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this NimbleNsShelfPortInfo.

        Name of the port.  # noqa: E501

        :param port_name: The port_name of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def port_status(self):
        """Gets the port_status of this NimbleNsShelfPortInfo.  # noqa: E501

        Status of the port. Possible values:'connected', 'disconnected', 'unknown','disabled'.  # noqa: E501

        :return: The port_status of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: str
        """
        return self._port_status

    @port_status.setter
    def port_status(self, port_status):
        """Sets the port_status of this NimbleNsShelfPortInfo.

        Status of the port. Possible values:'connected', 'disconnected', 'unknown','disabled'.  # noqa: E501

        :param port_status: The port_status of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: str
        """

        self._port_status = port_status

    @property
    def port_type(self):
        """Gets the port_type of this NimbleNsShelfPortInfo.  # noqa: E501

        Type of the sas port (e.g. upstream/downstream). Possible values:'upstream', 'downstream', 'unknown'.  # noqa: E501

        :return: The port_type of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: str
        """
        return self._port_type

    @port_type.setter
    def port_type(self, port_type):
        """Sets the port_type of this NimbleNsShelfPortInfo.

        Type of the sas port (e.g. upstream/downstream). Possible values:'upstream', 'downstream', 'unknown'.  # noqa: E501

        :param port_type: The port_type of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: str
        """

        self._port_type = port_type

    @property
    def remote_loc_id(self):
        """Gets the remote_loc_id of this NimbleNsShelfPortInfo.  # noqa: E501

        The location ID of the controller that connects to this port.  # noqa: E501

        :return: The remote_loc_id of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: int
        """
        return self._remote_loc_id

    @remote_loc_id.setter
    def remote_loc_id(self, remote_loc_id):
        """Sets the remote_loc_id of this NimbleNsShelfPortInfo.

        The location ID of the controller that connects to this port.  # noqa: E501

        :param remote_loc_id: The remote_loc_id of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: int
        """

        self._remote_loc_id = remote_loc_id

    @property
    def remote_port_id(self):
        """Gets the remote_port_id of this NimbleNsShelfPortInfo.  # noqa: E501

        The pord_id of the remote SAS port that connects to this port.  # noqa: E501

        :return: The remote_port_id of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: int
        """
        return self._remote_port_id

    @remote_port_id.setter
    def remote_port_id(self, remote_port_id):
        """Sets the remote_port_id of this NimbleNsShelfPortInfo.

        The pord_id of the remote SAS port that connects to this port.  # noqa: E501

        :param remote_port_id: The remote_port_id of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: int
        """

        self._remote_port_id = remote_port_id

    @property
    def remote_sas_addr(self):
        """Gets the remote_sas_addr of this NimbleNsShelfPortInfo.  # noqa: E501

        SAS address for the connected.  # noqa: E501

        :return: The remote_sas_addr of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: str
        """
        return self._remote_sas_addr

    @remote_sas_addr.setter
    def remote_sas_addr(self, remote_sas_addr):
        """Sets the remote_sas_addr of this NimbleNsShelfPortInfo.

        SAS address for the connected.  # noqa: E501

        :param remote_sas_addr: The remote_sas_addr of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: str
        """

        self._remote_sas_addr = remote_sas_addr

    @property
    def remote_sas_domain(self):
        """Gets the remote_sas_domain of this NimbleNsShelfPortInfo.  # noqa: E501

        The sas domain (A or B side) it connects to. Possible values:'A', 'B', 'unknown'.  # noqa: E501

        :return: The remote_sas_domain of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: str
        """
        return self._remote_sas_domain

    @remote_sas_domain.setter
    def remote_sas_domain(self, remote_sas_domain):
        """Sets the remote_sas_domain of this NimbleNsShelfPortInfo.

        The sas domain (A or B side) it connects to. Possible values:'A', 'B', 'unknown'.  # noqa: E501

        :param remote_sas_domain: The remote_sas_domain of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: str
        """

        self._remote_sas_domain = remote_sas_domain

    @property
    def remote_sas_phy_id(self):
        """Gets the remote_sas_phy_id of this NimbleNsShelfPortInfo.  # noqa: E501

        Comma separated list of phy ids that this port connects to.  # noqa: E501

        :return: The remote_sas_phy_id of this NimbleNsShelfPortInfo.  # noqa: E501
        :rtype: str
        """
        return self._remote_sas_phy_id

    @remote_sas_phy_id.setter
    def remote_sas_phy_id(self, remote_sas_phy_id):
        """Sets the remote_sas_phy_id of this NimbleNsShelfPortInfo.

        Comma separated list of phy ids that this port connects to.  # noqa: E501

        :param remote_sas_phy_id: The remote_sas_phy_id of this NimbleNsShelfPortInfo.  # noqa: E501
        :type: str
        """

        self._remote_sas_phy_id = remote_sas_phy_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNsShelfPortInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
