# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OnlineClone(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_lun': 'bool',
        'destination_cpg': 'str',
        'host_group_id': 'str',
        'lun': 'int'
    }

    attribute_map = {
        'auto_lun': 'autoLun',
        'destination_cpg': 'destinationCpg',
        'host_group_id': 'hostGroupId',
        'lun': 'lun'
    }

    def __init__(self, auto_lun=None, destination_cpg=None, host_group_id=None, lun=None):  # noqa: E501
        """OnlineClone - a model defined in OpenAPI"""  # noqa: E501

        self._auto_lun = None
        self._destination_cpg = None
        self._host_group_id = None
        self._lun = None
        self.discriminator = None

        if auto_lun is not None:
            self.auto_lun = auto_lun
        if destination_cpg is not None:
            self.destination_cpg = destination_cpg
        if host_group_id is not None:
            self.host_group_id = host_group_id
        if lun is not None:
            self.lun = lun

    @property
    def auto_lun(self):
        """Gets the auto_lun of this OnlineClone.  # noqa: E501

        Secify to use auto lun number.  # noqa: E501

        :return: The auto_lun of this OnlineClone.  # noqa: E501
        :rtype: bool
        """
        return self._auto_lun

    @auto_lun.setter
    def auto_lun(self, auto_lun):
        """Sets the auto_lun of this OnlineClone.

        Secify to use auto lun number.  # noqa: E501

        :param auto_lun: The auto_lun of this OnlineClone.  # noqa: E501
        :type: bool
        """

        self._auto_lun = auto_lun

    @property
    def destination_cpg(self):
        """Gets the destination_cpg of this OnlineClone.  # noqa: E501

        Name of the User CPG  # noqa: E501

        :return: The destination_cpg of this OnlineClone.  # noqa: E501
        :rtype: str
        """
        return self._destination_cpg

    @destination_cpg.setter
    def destination_cpg(self, destination_cpg):
        """Sets the destination_cpg of this OnlineClone.

        Name of the User CPG  # noqa: E501

        :param destination_cpg: The destination_cpg of this OnlineClone.  # noqa: E501
        :type: str
        """

        self._destination_cpg = destination_cpg

    @property
    def host_group_id(self):
        """Gets the host_group_id of this OnlineClone.  # noqa: E501

        Unique identifier of host group.  # noqa: E501

        :return: The host_group_id of this OnlineClone.  # noqa: E501
        :rtype: str
        """
        return self._host_group_id

    @host_group_id.setter
    def host_group_id(self, host_group_id):
        """Sets the host_group_id of this OnlineClone.

        Unique identifier of host group.  # noqa: E501

        :param host_group_id: The host_group_id of this OnlineClone.  # noqa: E501
        :type: str
        """

        self._host_group_id = host_group_id

    @property
    def lun(self):
        """Gets the lun of this OnlineClone.  # noqa: E501

        LUN of volume.  # noqa: E501

        :return: The lun of this OnlineClone.  # noqa: E501
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this OnlineClone.

        LUN of volume.  # noqa: E501

        :param lun: The lun of this OnlineClone.  # noqa: E501
        :type: int
        """

        self._lun = lun

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnlineClone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
