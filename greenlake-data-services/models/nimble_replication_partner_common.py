# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleReplicationPartnerCommon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alias': 'str',
        'associated_links': 'AssociatedLinks',
        'control_port': 'int',
        'customer_id': 'str',
        'data_port': 'int',
        'description': 'str',
        'full_name': 'str',
        'generation': 'int',
        'last_keepalive_error': 'str',
        'last_modified': 'int',
        'last_sync_error': 'str',
        'match_folder': 'bool',
        'partner_group_uid': 'int',
        'port_range_start': 'int',
        'proxy_hostname': 'str',
        'proxy_user': 'str',
        'remote_partner_folder_id': 'str',
        'remote_partner_folder_name': 'str',
        'remote_partner_id': 'str',
        'remote_partner_name': 'str',
        'remote_partner_pool_id': 'str',
        'remote_partner_pool_name': 'str',
        'remote_partner_subnet_label': 'str',
        'remote_partner_subnet_type': 'str',
        'remote_partner_system_id': 'str',
        'replication_direction': 'str',
        'search_name': 'str',
        'status': 'str',
        'throttled_bandwidth_current': 'int',
        'throttled_bandwidth_current_kbps': 'int',
        'throttles': 'list[ReplicationThrottle]',
        'type': 'str',
        'unique_name': 'bool',
        'volume_collection_list': 'list[ReplicationVolumeCollectionSummary]',
        'witness': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'associated_links': 'associated_links',
        'control_port': 'control_port',
        'customer_id': 'customerId',
        'data_port': 'data_port',
        'description': 'description',
        'full_name': 'full_name',
        'generation': 'generation',
        'last_keepalive_error': 'last_keepalive_error',
        'last_modified': 'last_modified',
        'last_sync_error': 'last_sync_error',
        'match_folder': 'match_folder',
        'partner_group_uid': 'partner_group_uid',
        'port_range_start': 'port_range_start',
        'proxy_hostname': 'proxy_hostname',
        'proxy_user': 'proxy_user',
        'remote_partner_folder_id': 'remote_partner_folder_id',
        'remote_partner_folder_name': 'remote_partner_folder_name',
        'remote_partner_id': 'remote_partner_id',
        'remote_partner_name': 'remote_partner_name',
        'remote_partner_pool_id': 'remote_partner_pool_id',
        'remote_partner_pool_name': 'remote_partner_pool_name',
        'remote_partner_subnet_label': 'remote_partner_subnet_label',
        'remote_partner_subnet_type': 'remote_partner_subnet_type',
        'remote_partner_system_id': 'remote_partner_system_id',
        'replication_direction': 'replication_direction',
        'search_name': 'search_name',
        'status': 'status',
        'throttled_bandwidth_current': 'throttled_bandwidth_current',
        'throttled_bandwidth_current_kbps': 'throttled_bandwidth_current_kbps',
        'throttles': 'throttles',
        'type': 'type',
        'unique_name': 'unique_name',
        'volume_collection_list': 'volume_collection_list',
        'witness': 'witness'
    }

    def __init__(self, alias=None, associated_links=None, control_port=None, customer_id=None, data_port=None, description=None, full_name=None, generation=None, last_keepalive_error=None, last_modified=None, last_sync_error=None, match_folder=None, partner_group_uid=None, port_range_start=None, proxy_hostname=None, proxy_user=None, remote_partner_folder_id=None, remote_partner_folder_name=None, remote_partner_id=None, remote_partner_name=None, remote_partner_pool_id=None, remote_partner_pool_name=None, remote_partner_subnet_label=None, remote_partner_subnet_type=None, remote_partner_system_id=None, replication_direction=None, search_name=None, status=None, throttled_bandwidth_current=None, throttled_bandwidth_current_kbps=None, throttles=None, type=None, unique_name=None, volume_collection_list=None, witness=None):  # noqa: E501
        """NimbleReplicationPartnerCommon - a model defined in OpenAPI"""  # noqa: E501

        self._alias = None
        self._associated_links = None
        self._control_port = None
        self._customer_id = None
        self._data_port = None
        self._description = None
        self._full_name = None
        self._generation = None
        self._last_keepalive_error = None
        self._last_modified = None
        self._last_sync_error = None
        self._match_folder = None
        self._partner_group_uid = None
        self._port_range_start = None
        self._proxy_hostname = None
        self._proxy_user = None
        self._remote_partner_folder_id = None
        self._remote_partner_folder_name = None
        self._remote_partner_id = None
        self._remote_partner_name = None
        self._remote_partner_pool_id = None
        self._remote_partner_pool_name = None
        self._remote_partner_subnet_label = None
        self._remote_partner_subnet_type = None
        self._remote_partner_system_id = None
        self._replication_direction = None
        self._search_name = None
        self._status = None
        self._throttled_bandwidth_current = None
        self._throttled_bandwidth_current_kbps = None
        self._throttles = None
        self._type = None
        self._unique_name = None
        self._volume_collection_list = None
        self._witness = None
        self.discriminator = None

        if alias is not None:
            self.alias = alias
        if associated_links is not None:
            self.associated_links = associated_links
        if control_port is not None:
            self.control_port = control_port
        if customer_id is not None:
            self.customer_id = customer_id
        if data_port is not None:
            self.data_port = data_port
        if description is not None:
            self.description = description
        if full_name is not None:
            self.full_name = full_name
        if generation is not None:
            self.generation = generation
        if last_keepalive_error is not None:
            self.last_keepalive_error = last_keepalive_error
        if last_modified is not None:
            self.last_modified = last_modified
        if last_sync_error is not None:
            self.last_sync_error = last_sync_error
        if match_folder is not None:
            self.match_folder = match_folder
        if partner_group_uid is not None:
            self.partner_group_uid = partner_group_uid
        if port_range_start is not None:
            self.port_range_start = port_range_start
        if proxy_hostname is not None:
            self.proxy_hostname = proxy_hostname
        if proxy_user is not None:
            self.proxy_user = proxy_user
        if remote_partner_folder_id is not None:
            self.remote_partner_folder_id = remote_partner_folder_id
        if remote_partner_folder_name is not None:
            self.remote_partner_folder_name = remote_partner_folder_name
        if remote_partner_id is not None:
            self.remote_partner_id = remote_partner_id
        if remote_partner_name is not None:
            self.remote_partner_name = remote_partner_name
        if remote_partner_pool_id is not None:
            self.remote_partner_pool_id = remote_partner_pool_id
        if remote_partner_pool_name is not None:
            self.remote_partner_pool_name = remote_partner_pool_name
        if remote_partner_subnet_label is not None:
            self.remote_partner_subnet_label = remote_partner_subnet_label
        if remote_partner_subnet_type is not None:
            self.remote_partner_subnet_type = remote_partner_subnet_type
        if remote_partner_system_id is not None:
            self.remote_partner_system_id = remote_partner_system_id
        if replication_direction is not None:
            self.replication_direction = replication_direction
        if search_name is not None:
            self.search_name = search_name
        if status is not None:
            self.status = status
        if throttled_bandwidth_current is not None:
            self.throttled_bandwidth_current = throttled_bandwidth_current
        if throttled_bandwidth_current_kbps is not None:
            self.throttled_bandwidth_current_kbps = throttled_bandwidth_current_kbps
        if throttles is not None:
            self.throttles = throttles
        if type is not None:
            self.type = type
        if unique_name is not None:
            self.unique_name = unique_name
        if volume_collection_list is not None:
            self.volume_collection_list = volume_collection_list
        if witness is not None:
            self.witness = witness

    @property
    def alias(self):
        """Gets the alias of this NimbleReplicationPartnerCommon.  # noqa: E501

        String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.  # noqa: E501

        :return: The alias of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this NimbleReplicationPartnerCommon.

        String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.  # noqa: E501

        :param alias: The alias of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleReplicationPartnerCommon.  # noqa: E501


        :return: The associated_links of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleReplicationPartnerCommon.


        :param associated_links: The associated_links of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def control_port(self):
        """Gets the control_port of this NimbleReplicationPartnerCommon.  # noqa: E501

        Port number of partner control interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.  # noqa: E501

        :return: The control_port of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: int
        """
        return self._control_port

    @control_port.setter
    def control_port(self, control_port):
        """Sets the control_port of this NimbleReplicationPartnerCommon.

        Port number of partner control interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.  # noqa: E501

        :param control_port: The control_port of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: int
        """

        self._control_port = control_port

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleReplicationPartnerCommon.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleReplicationPartnerCommon.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def data_port(self):
        """Gets the data_port of this NimbleReplicationPartnerCommon.  # noqa: E501

        Port number of partner data interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.  # noqa: E501

        :return: The data_port of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: int
        """
        return self._data_port

    @data_port.setter
    def data_port(self, data_port):
        """Sets the data_port of this NimbleReplicationPartnerCommon.

        Port number of partner data interface. Value -1 for an invalid port or a positive integer value up to 65535 representing the TCP/IP port.  # noqa: E501

        :param data_port: The data_port of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: int
        """

        self._data_port = data_port

    @property
    def description(self):
        """Gets the description of this NimbleReplicationPartnerCommon.  # noqa: E501

        Description of replication partner. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleReplicationPartnerCommon.

        Description of replication partner. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def full_name(self):
        """Gets the full_name of this NimbleReplicationPartnerCommon.  # noqa: E501

        Fully qualified name of replication partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The full_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this NimbleReplicationPartnerCommon.

        Fully qualified name of replication partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param full_name: The full_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def generation(self):
        """Gets the generation of this NimbleReplicationPartnerCommon.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleReplicationPartnerCommon.

        generation  # noqa: E501

        :param generation: The generation of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def last_keepalive_error(self):
        """Gets the last_keepalive_error of this NimbleReplicationPartnerCommon.  # noqa: E501

        Most recent error while attempting to ping the partner. Plain string.  # noqa: E501

        :return: The last_keepalive_error of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._last_keepalive_error

    @last_keepalive_error.setter
    def last_keepalive_error(self, last_keepalive_error):
        """Sets the last_keepalive_error of this NimbleReplicationPartnerCommon.

        Most recent error while attempting to ping the partner. Plain string.  # noqa: E501

        :param last_keepalive_error: The last_keepalive_error of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._last_keepalive_error = last_keepalive_error

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleReplicationPartnerCommon.  # noqa: E501

        Time when this replication partner was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The last_modified of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleReplicationPartnerCommon.

        Time when this replication partner was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param last_modified: The last_modified of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def last_sync_error(self):
        """Gets the last_sync_error of this NimbleReplicationPartnerCommon.  # noqa: E501

        Most recent error seen while attempting to sync objects to the partner. Plain string.  # noqa: E501

        :return: The last_sync_error of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._last_sync_error

    @last_sync_error.setter
    def last_sync_error(self, last_sync_error):
        """Sets the last_sync_error of this NimbleReplicationPartnerCommon.

        Most recent error seen while attempting to sync objects to the partner. Plain string.  # noqa: E501

        :param last_sync_error: The last_sync_error of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._last_sync_error = last_sync_error

    @property
    def match_folder(self):
        """Gets the match_folder of this NimbleReplicationPartnerCommon.  # noqa: E501

        Indicates whether to match the upstream volumes folder on the downstream. Possible values: true, false  # noqa: E501

        :return: The match_folder of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: bool
        """
        return self._match_folder

    @match_folder.setter
    def match_folder(self, match_folder):
        """Sets the match_folder of this NimbleReplicationPartnerCommon.

        Indicates whether to match the upstream volumes folder on the downstream. Possible values: true, false  # noqa: E501

        :param match_folder: The match_folder of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: bool
        """

        self._match_folder = match_folder

    @property
    def partner_group_uid(self):
        """Gets the partner_group_uid of this NimbleReplicationPartnerCommon.  # noqa: E501

        Replication partner group uid. Unsigned 64-bit integer.  # noqa: E501

        :return: The partner_group_uid of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: int
        """
        return self._partner_group_uid

    @partner_group_uid.setter
    def partner_group_uid(self, partner_group_uid):
        """Sets the partner_group_uid of this NimbleReplicationPartnerCommon.

        Replication partner group uid. Unsigned 64-bit integer.  # noqa: E501

        :param partner_group_uid: The partner_group_uid of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: int
        """

        self._partner_group_uid = partner_group_uid

    @property
    def port_range_start(self):
        """Gets the port_range_start of this NimbleReplicationPartnerCommon.  # noqa: E501

        Positive integer value up to 65535 representing TCP/IP port. Example: 1234.  # noqa: E501

        :return: The port_range_start of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: int
        """
        return self._port_range_start

    @port_range_start.setter
    def port_range_start(self, port_range_start):
        """Sets the port_range_start of this NimbleReplicationPartnerCommon.

        Positive integer value up to 65535 representing TCP/IP port. Example: 1234.  # noqa: E501

        :param port_range_start: The port_range_start of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: int
        """

        self._port_range_start = port_range_start

    @property
    def proxy_hostname(self):
        """Gets the proxy_hostname of this NimbleReplicationPartnerCommon.  # noqa: E501

        String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'  # noqa: E501

        :return: The proxy_hostname of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._proxy_hostname

    @proxy_hostname.setter
    def proxy_hostname(self, proxy_hostname):
        """Sets the proxy_hostname of this NimbleReplicationPartnerCommon.

        String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'  # noqa: E501

        :param proxy_hostname: The proxy_hostname of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._proxy_hostname = proxy_hostname

    @property
    def proxy_user(self):
        """Gets the proxy_user of this NimbleReplicationPartnerCommon.  # noqa: E501

        HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.  # noqa: E501

        :return: The proxy_user of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._proxy_user

    @proxy_user.setter
    def proxy_user(self, proxy_user):
        """Sets the proxy_user of this NimbleReplicationPartnerCommon.

        HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.  # noqa: E501

        :param proxy_user: The proxy_user of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._proxy_user = proxy_user

    @property
    def remote_partner_folder_id(self):
        """Gets the remote_partner_folder_id of this NimbleReplicationPartnerCommon.  # noqa: E501

        The folder ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.  # noqa: E501

        :return: The remote_partner_folder_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_folder_id

    @remote_partner_folder_id.setter
    def remote_partner_folder_id(self, remote_partner_folder_id):
        """Sets the remote_partner_folder_id of this NimbleReplicationPartnerCommon.

        The folder ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.  # noqa: E501

        :param remote_partner_folder_id: The remote_partner_folder_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_folder_id = remote_partner_folder_id

    @property
    def remote_partner_folder_name(self):
        """Gets the remote_partner_folder_name of this NimbleReplicationPartnerCommon.  # noqa: E501

        The folder name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.  # noqa: E501

        :return: The remote_partner_folder_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_folder_name

    @remote_partner_folder_name.setter
    def remote_partner_folder_name(self, remote_partner_folder_name):
        """Sets the remote_partner_folder_name of this NimbleReplicationPartnerCommon.

        The folder name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.  # noqa: E501

        :param remote_partner_folder_name: The remote_partner_folder_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_folder_name = remote_partner_folder_name

    @property
    def remote_partner_id(self):
        """Gets the remote_partner_id of this NimbleReplicationPartnerCommon.  # noqa: E501

        ID of the remote partner.  # noqa: E501

        :return: The remote_partner_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_id

    @remote_partner_id.setter
    def remote_partner_id(self, remote_partner_id):
        """Sets the remote_partner_id of this NimbleReplicationPartnerCommon.

        ID of the remote partner.  # noqa: E501

        :param remote_partner_id: The remote_partner_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_id = remote_partner_id

    @property
    def remote_partner_name(self):
        """Gets the remote_partner_name of this NimbleReplicationPartnerCommon.  # noqa: E501

        Name of the remote partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.  # noqa: E501

        :return: The remote_partner_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_name

    @remote_partner_name.setter
    def remote_partner_name(self, remote_partner_name):
        """Sets the remote_partner_name of this NimbleReplicationPartnerCommon.

        Name of the remote partner. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.  # noqa: E501

        :param remote_partner_name: The remote_partner_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_name = remote_partner_name

    @property
    def remote_partner_pool_id(self):
        """Gets the remote_partner_pool_id of this NimbleReplicationPartnerCommon.  # noqa: E501

        The pool ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.  # noqa: E501

        :return: The remote_partner_pool_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_pool_id

    @remote_partner_pool_id.setter
    def remote_partner_pool_id(self, remote_partner_pool_id):
        """Sets the remote_partner_pool_id of this NimbleReplicationPartnerCommon.

        The pool ID where volumes replicated from remote partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. A 42 digit hexadecimal number.  # noqa: E501

        :param remote_partner_pool_id: The remote_partner_pool_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_pool_id = remote_partner_pool_id

    @property
    def remote_partner_pool_name(self):
        """Gets the remote_partner_pool_name of this NimbleReplicationPartnerCommon.  # noqa: E501

        The pool name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.  # noqa: E501

        :return: The remote_partner_pool_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_pool_name

    @remote_partner_pool_name.setter
    def remote_partner_pool_name(self, remote_partner_pool_name):
        """Sets the remote_partner_pool_name of this NimbleReplicationPartnerCommon.

        The pool name where volumes replicated from remote partner will be created. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.  # noqa: E501

        :param remote_partner_pool_name: The remote_partner_pool_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_pool_name = remote_partner_pool_name

    @property
    def remote_partner_subnet_label(self):
        """Gets the remote_partner_subnet_label of this NimbleReplicationPartnerCommon.  # noqa: E501

        Label of the subnet used to replicate to remote partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.  # noqa: E501

        :return: The remote_partner_subnet_label of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_subnet_label

    @remote_partner_subnet_label.setter
    def remote_partner_subnet_label(self, remote_partner_subnet_label):
        """Sets the remote_partner_subnet_label of this NimbleReplicationPartnerCommon.

        Label of the subnet used to replicate to remote partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.  # noqa: E501

        :param remote_partner_subnet_label: The remote_partner_subnet_label of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_subnet_label = remote_partner_subnet_label

    @property
    def remote_partner_subnet_type(self):
        """Gets the remote_partner_subnet_type of this NimbleReplicationPartnerCommon.  # noqa: E501

        Type of the subnet used to replicate to the remote partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.  # noqa: E501

        :return: The remote_partner_subnet_type of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_subnet_type

    @remote_partner_subnet_type.setter
    def remote_partner_subnet_type(self, remote_partner_subnet_type):
        """Sets the remote_partner_subnet_type of this NimbleReplicationPartnerCommon.

        Type of the subnet used to replicate to the remote partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.  # noqa: E501

        :param remote_partner_subnet_type: The remote_partner_subnet_type of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_subnet_type = remote_partner_subnet_type

    @property
    def remote_partner_system_id(self):
        """Gets the remote_partner_system_id of this NimbleReplicationPartnerCommon.  # noqa: E501

        ID of the system to which the remote partner belongs.  # noqa: E501

        :return: The remote_partner_system_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._remote_partner_system_id

    @remote_partner_system_id.setter
    def remote_partner_system_id(self, remote_partner_system_id):
        """Sets the remote_partner_system_id of this NimbleReplicationPartnerCommon.

        ID of the system to which the remote partner belongs.  # noqa: E501

        :param remote_partner_system_id: The remote_partner_system_id of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._remote_partner_system_id = remote_partner_system_id

    @property
    def replication_direction(self):
        """Gets the replication_direction of this NimbleReplicationPartnerCommon.  # noqa: E501

        Direction of replication configured with this partner. Possible values: none, downstream, upstream, bi_directional  # noqa: E501

        :return: The replication_direction of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._replication_direction

    @replication_direction.setter
    def replication_direction(self, replication_direction):
        """Sets the replication_direction of this NimbleReplicationPartnerCommon.

        Direction of replication configured with this partner. Possible values: none, downstream, upstream, bi_directional  # noqa: E501

        :param replication_direction: The replication_direction of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._replication_direction = replication_direction

    @property
    def search_name(self):
        """Gets the search_name of this NimbleReplicationPartnerCommon.  # noqa: E501

        Name of replication partner used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :return: The search_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._search_name

    @search_name.setter
    def search_name(self, search_name):
        """Sets the search_name of this NimbleReplicationPartnerCommon.

        Name of replication partner used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :param search_name: The search_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._search_name = search_name

    @property
    def status(self):
        """Gets the status of this NimbleReplicationPartnerCommon.  # noqa: E501

        Status of the partner. Failed, Normal, Degraded, Unknown.  # noqa: E501

        :return: The status of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NimbleReplicationPartnerCommon.

        Status of the partner. Failed, Normal, Degraded, Unknown.  # noqa: E501

        :param status: The status of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def throttled_bandwidth_current(self):
        """Gets the throttled_bandwidth_current of this NimbleReplicationPartnerCommon.  # noqa: E501

        Current bandwidth throttle for this partner, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.  # noqa: E501

        :return: The throttled_bandwidth_current of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: int
        """
        return self._throttled_bandwidth_current

    @throttled_bandwidth_current.setter
    def throttled_bandwidth_current(self, throttled_bandwidth_current):
        """Sets the throttled_bandwidth_current of this NimbleReplicationPartnerCommon.

        Current bandwidth throttle for this partner, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.  # noqa: E501

        :param throttled_bandwidth_current: The throttled_bandwidth_current of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: int
        """

        self._throttled_bandwidth_current = throttled_bandwidth_current

    @property
    def throttled_bandwidth_current_kbps(self):
        """Gets the throttled_bandwidth_current_kbps of this NimbleReplicationPartnerCommon.  # noqa: E501

        Current bandwidth throttle for this partner, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.  # noqa: E501

        :return: The throttled_bandwidth_current_kbps of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: int
        """
        return self._throttled_bandwidth_current_kbps

    @throttled_bandwidth_current_kbps.setter
    def throttled_bandwidth_current_kbps(self, throttled_bandwidth_current_kbps):
        """Sets the throttled_bandwidth_current_kbps of this NimbleReplicationPartnerCommon.

        Current bandwidth throttle for this partner, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.  # noqa: E501

        :param throttled_bandwidth_current_kbps: The throttled_bandwidth_current_kbps of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: int
        """

        self._throttled_bandwidth_current_kbps = throttled_bandwidth_current_kbps

    @property
    def throttles(self):
        """Gets the throttles of this NimbleReplicationPartnerCommon.  # noqa: E501

        Throttles used while replicating from/to this partner. All the throttles for the partner.  # noqa: E501

        :return: The throttles of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: list[ReplicationThrottle]
        """
        return self._throttles

    @throttles.setter
    def throttles(self, throttles):
        """Sets the throttles of this NimbleReplicationPartnerCommon.

        Throttles used while replicating from/to this partner. All the throttles for the partner.  # noqa: E501

        :param throttles: The throttles of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: list[ReplicationThrottle]
        """

        self._throttles = throttles

    @property
    def type(self):
        """Gets the type of this NimbleReplicationPartnerCommon.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleReplicationPartnerCommon.

        type  # noqa: E501

        :param type: The type of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unique_name(self):
        """Gets the unique_name of this NimbleReplicationPartnerCommon.  # noqa: E501

        Possible values: 'true', 'false'.  # noqa: E501

        :return: The unique_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: bool
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this NimbleReplicationPartnerCommon.

        Possible values: 'true', 'false'.  # noqa: E501

        :param unique_name: The unique_name of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: bool
        """

        self._unique_name = unique_name

    @property
    def volume_collection_list(self):
        """Gets the volume_collection_list of this NimbleReplicationPartnerCommon.  # noqa: E501

        List of volume collections that are replicating from/to this partner. List of volume collections.  # noqa: E501

        :return: The volume_collection_list of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: list[ReplicationVolumeCollectionSummary]
        """
        return self._volume_collection_list

    @volume_collection_list.setter
    def volume_collection_list(self, volume_collection_list):
        """Sets the volume_collection_list of this NimbleReplicationPartnerCommon.

        List of volume collections that are replicating from/to this partner. List of volume collections.  # noqa: E501

        :param volume_collection_list: The volume_collection_list of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: list[ReplicationVolumeCollectionSummary]
        """

        self._volume_collection_list = volume_collection_list

    @property
    def witness(self):
        """Gets the witness of this NimbleReplicationPartnerCommon.  # noqa: E501

        Hostname or ip addresses of witness. Comma separated strings of up to 63 characters of hostname and/or ip addresses. Total length cannot exceed 255 characters.  # noqa: E501

        :return: The witness of this NimbleReplicationPartnerCommon.  # noqa: E501
        :rtype: str
        """
        return self._witness

    @witness.setter
    def witness(self, witness):
        """Sets the witness of this NimbleReplicationPartnerCommon.

        Hostname or ip addresses of witness. Comma separated strings of up to 63 characters of hostname and/or ip addresses. Total length cannot exceed 255 characters.  # noqa: E501

        :param witness: The witness of this NimbleReplicationPartnerCommon.  # noqa: E501
        :type: str
        """

        self._witness = witness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleReplicationPartnerCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
