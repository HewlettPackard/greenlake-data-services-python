# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNsCtrlrRaidInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cur_copies': 'int',
        'is_resyncing': 'bool',
        'max_copies': 'int',
        'raid_id': 'int',
        'raid_type': 'str'
    }

    attribute_map = {
        'cur_copies': 'cur_copies',
        'is_resyncing': 'is_resyncing',
        'max_copies': 'max_copies',
        'raid_id': 'raid_id',
        'raid_type': 'raid_type'
    }

    def __init__(self, cur_copies=None, is_resyncing=None, max_copies=None, raid_id=None, raid_type=None):  # noqa: E501
        """NimbleNsCtrlrRaidInfo - a model defined in OpenAPI"""  # noqa: E501

        self._cur_copies = None
        self._is_resyncing = None
        self._max_copies = None
        self._raid_id = None
        self._raid_type = None
        self.discriminator = None

        if cur_copies is not None:
            self.cur_copies = cur_copies
        if is_resyncing is not None:
            self.is_resyncing = is_resyncing
        if max_copies is not None:
            self.max_copies = max_copies
        if raid_id is not None:
            self.raid_id = raid_id
        if raid_type is not None:
            self.raid_type = raid_type

    @property
    def cur_copies(self):
        """Gets the cur_copies of this NimbleNsCtrlrRaidInfo.  # noqa: E501

        Current number of copies.  # noqa: E501

        :return: The cur_copies of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :rtype: int
        """
        return self._cur_copies

    @cur_copies.setter
    def cur_copies(self, cur_copies):
        """Sets the cur_copies of this NimbleNsCtrlrRaidInfo.

        Current number of copies.  # noqa: E501

        :param cur_copies: The cur_copies of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :type: int
        """

        self._cur_copies = cur_copies

    @property
    def is_resyncing(self):
        """Gets the is_resyncing of this NimbleNsCtrlrRaidInfo.  # noqa: E501

        Is this raid array resynchronizing.  # noqa: E501

        :return: The is_resyncing of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_resyncing

    @is_resyncing.setter
    def is_resyncing(self, is_resyncing):
        """Sets the is_resyncing of this NimbleNsCtrlrRaidInfo.

        Is this raid array resynchronizing.  # noqa: E501

        :param is_resyncing: The is_resyncing of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :type: bool
        """

        self._is_resyncing = is_resyncing

    @property
    def max_copies(self):
        """Gets the max_copies of this NimbleNsCtrlrRaidInfo.  # noqa: E501

        Maximum number of copies.  # noqa: E501

        :return: The max_copies of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_copies

    @max_copies.setter
    def max_copies(self, max_copies):
        """Sets the max_copies of this NimbleNsCtrlrRaidInfo.

        Maximum number of copies.  # noqa: E501

        :param max_copies: The max_copies of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :type: int
        """

        self._max_copies = max_copies

    @property
    def raid_id(self):
        """Gets the raid_id of this NimbleNsCtrlrRaidInfo.  # noqa: E501

        Raid ID for this raid array.  # noqa: E501

        :return: The raid_id of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :rtype: int
        """
        return self._raid_id

    @raid_id.setter
    def raid_id(self, raid_id):
        """Sets the raid_id of this NimbleNsCtrlrRaidInfo.

        Raid ID for this raid array.  # noqa: E501

        :param raid_id: The raid_id of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :type: int
        """

        self._raid_id = raid_id

    @property
    def raid_type(self):
        """Gets the raid_type of this NimbleNsCtrlrRaidInfo.  # noqa: E501

        Type of raid for this array.  # noqa: E501

        :return: The raid_type of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :rtype: str
        """
        return self._raid_type

    @raid_type.setter
    def raid_type(self, raid_type):
        """Sets the raid_type of this NimbleNsCtrlrRaidInfo.

        Type of raid for this array.  # noqa: E501

        :param raid_type: The raid_type of this NimbleNsCtrlrRaidInfo.  # noqa: E501
        :type: str
        """

        self._raid_type = raid_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNsCtrlrRaidInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
