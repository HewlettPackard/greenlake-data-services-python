# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleCreateSnapshotCollectionsInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'agent_type': 'str',
        'allow_writes': 'bool',
        'description': 'str',
        'disable_appsync': 'bool',
        'invoke_on_upstream_partner': 'bool',
        'is_external_trigger': 'bool',
        'metadata': 'list[KeyValue]',
        'name': 'str',
        'replicate': 'bool',
        'replicate_to': 'str',
        'skip_db_consistency_check': 'bool',
        'snap_verify': 'bool',
        'start_online': 'bool',
        'vol_snap_attr_list': 'list[NimbleVolumeSnapAttr]'
    }

    attribute_map = {
        'agent_type': 'agent_type',
        'allow_writes': 'allow_writes',
        'description': 'description',
        'disable_appsync': 'disable_appsync',
        'invoke_on_upstream_partner': 'invoke_on_upstream_partner',
        'is_external_trigger': 'is_external_trigger',
        'metadata': 'metadata',
        'name': 'name',
        'replicate': 'replicate',
        'replicate_to': 'replicate_to',
        'skip_db_consistency_check': 'skip_db_consistency_check',
        'snap_verify': 'snap_verify',
        'start_online': 'start_online',
        'vol_snap_attr_list': 'vol_snap_attr_list'
    }

    def __init__(self, agent_type=None, allow_writes=None, description=None, disable_appsync=None, invoke_on_upstream_partner=None, is_external_trigger=None, metadata=None, name=None, replicate=None, replicate_to=None, skip_db_consistency_check=None, snap_verify=None, start_online=None, vol_snap_attr_list=None):  # noqa: E501
        """NimbleCreateSnapshotCollectionsInput - a model defined in OpenAPI"""  # noqa: E501

        self._agent_type = None
        self._allow_writes = None
        self._description = None
        self._disable_appsync = None
        self._invoke_on_upstream_partner = None
        self._is_external_trigger = None
        self._metadata = None
        self._name = None
        self._replicate = None
        self._replicate_to = None
        self._skip_db_consistency_check = None
        self._snap_verify = None
        self._start_online = None
        self._vol_snap_attr_list = None
        self.discriminator = None

        if agent_type is not None:
            self.agent_type = agent_type
        if allow_writes is not None:
            self.allow_writes = allow_writes
        if description is not None:
            self.description = description
        if disable_appsync is not None:
            self.disable_appsync = disable_appsync
        if invoke_on_upstream_partner is not None:
            self.invoke_on_upstream_partner = invoke_on_upstream_partner
        if is_external_trigger is not None:
            self.is_external_trigger = is_external_trigger
        if metadata is not None:
            self.metadata = metadata
        self.name = name
        if replicate is not None:
            self.replicate = replicate
        if replicate_to is not None:
            self.replicate_to = replicate_to
        if skip_db_consistency_check is not None:
            self.skip_db_consistency_check = skip_db_consistency_check
        if snap_verify is not None:
            self.snap_verify = snap_verify
        if start_online is not None:
            self.start_online = start_online
        if vol_snap_attr_list is not None:
            self.vol_snap_attr_list = vol_snap_attr_list

    @property
    def agent_type(self):
        """Gets the agent_type of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        External management agent type for snapshots being created as part of snapshot collection. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.  # noqa: E501

        :return: The agent_type of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """Sets the agent_type of this NimbleCreateSnapshotCollectionsInput.

        External management agent type for snapshots being created as part of snapshot collection. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.  # noqa: E501

        :param agent_type: The agent_type of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: str
        """

        self._agent_type = agent_type

    @property
    def allow_writes(self):
        """Gets the allow_writes of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Atollow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots. Possible values: 'true', 'false'.  # noqa: E501

        :return: The allow_writes of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: bool
        """
        return self._allow_writes

    @allow_writes.setter
    def allow_writes(self, allow_writes):
        """Sets the allow_writes of this NimbleCreateSnapshotCollectionsInput.

        Atollow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots. Possible values: 'true', 'false'.  # noqa: E501

        :param allow_writes: The allow_writes of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: bool
        """

        self._allow_writes = allow_writes

    @property
    def description(self):
        """Gets the description of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Text description of snapshot collection. String of up to 255 printable ASCII characters. Example: '99.9999% availability'.  # noqa: E501

        :return: The description of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleCreateSnapshotCollectionsInput.

        Text description of snapshot collection. String of up to 255 printable ASCII characters. Example: '99.9999% availability'.  # noqa: E501

        :param description: The description of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disable_appsync(self):
        """Gets the disable_appsync of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Do not perform application synchronization for this snapshot, create a crash-consistent snapshot instead. Possible values: 'true', 'false'.  # noqa: E501

        :return: The disable_appsync of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: bool
        """
        return self._disable_appsync

    @disable_appsync.setter
    def disable_appsync(self, disable_appsync):
        """Sets the disable_appsync of this NimbleCreateSnapshotCollectionsInput.

        Do not perform application synchronization for this snapshot, create a crash-consistent snapshot instead. Possible values: 'true', 'false'.  # noqa: E501

        :param disable_appsync: The disable_appsync of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: bool
        """

        self._disable_appsync = disable_appsync

    @property
    def invoke_on_upstream_partner(self):
        """Gets the invoke_on_upstream_partner of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Invoke snapshot request on upstream partner. Possible values: 'true', 'false'.  # noqa: E501

        :return: The invoke_on_upstream_partner of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: bool
        """
        return self._invoke_on_upstream_partner

    @invoke_on_upstream_partner.setter
    def invoke_on_upstream_partner(self, invoke_on_upstream_partner):
        """Sets the invoke_on_upstream_partner of this NimbleCreateSnapshotCollectionsInput.

        Invoke snapshot request on upstream partner. Possible values: 'true', 'false'.  # noqa: E501

        :param invoke_on_upstream_partner: The invoke_on_upstream_partner of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: bool
        """

        self._invoke_on_upstream_partner = invoke_on_upstream_partner

    @property
    def is_external_trigger(self):
        """Gets the is_external_trigger of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Is externally triggered. Possible values: 'true', 'false'.  # noqa: E501

        :return: The is_external_trigger of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: bool
        """
        return self._is_external_trigger

    @is_external_trigger.setter
    def is_external_trigger(self, is_external_trigger):
        """Sets the is_external_trigger of this NimbleCreateSnapshotCollectionsInput.

        Is externally triggered. Possible values: 'true', 'false'.  # noqa: E501

        :param is_external_trigger: The is_external_trigger of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: bool
        """

        self._is_external_trigger = is_external_trigger

    @property
    def metadata(self):
        """Gets the metadata of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Key-value pairs that augment a snapshot collection's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.  # noqa: E501

        :return: The metadata of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: list[KeyValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NimbleCreateSnapshotCollectionsInput.

        Key-value pairs that augment a snapshot collection's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.  # noqa: E501

        :param metadata: The metadata of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: list[KeyValue]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :return: The name of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleCreateSnapshotCollectionsInput.

        Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.  # noqa: E501

        :param name: The name of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def replicate(self):
        """Gets the replicate of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        True if this snapshot collection has been marked for replication. Possible values: 'true', 'false'.  # noqa: E501

        :return: The replicate of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: bool
        """
        return self._replicate

    @replicate.setter
    def replicate(self, replicate):
        """Sets the replicate of this NimbleCreateSnapshotCollectionsInput.

        True if this snapshot collection has been marked for replication. Possible values: 'true', 'false'.  # noqa: E501

        :param replicate: The replicate of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: bool
        """

        self._replicate = replicate

    @property
    def replicate_to(self):
        """Gets the replicate_to of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Specifies the partner name that the snapshots in this snapshot collection are replicated to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.  # noqa: E501

        :return: The replicate_to of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: str
        """
        return self._replicate_to

    @replicate_to.setter
    def replicate_to(self, replicate_to):
        """Sets the replicate_to of this NimbleCreateSnapshotCollectionsInput.

        Specifies the partner name that the snapshots in this snapshot collection are replicated to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.  # noqa: E501

        :param replicate_to: The replicate_to of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: str
        """

        self._replicate_to = replicate_to

    @property
    def skip_db_consistency_check(self):
        """Gets the skip_db_consistency_check of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Skip consistency check for database files on this snapshot. This option only applies to volume collections with application synchronization set to VSS, application ID set to MS Exchange 2010 or later with Database Availability Group (DAG), snap_verify option set to true, and disable_appsync option set to false. Possible values: 'true', 'false'.  # noqa: E501

        :return: The skip_db_consistency_check of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: bool
        """
        return self._skip_db_consistency_check

    @skip_db_consistency_check.setter
    def skip_db_consistency_check(self, skip_db_consistency_check):
        """Sets the skip_db_consistency_check of this NimbleCreateSnapshotCollectionsInput.

        Skip consistency check for database files on this snapshot. This option only applies to volume collections with application synchronization set to VSS, application ID set to MS Exchange 2010 or later with Database Availability Group (DAG), snap_verify option set to true, and disable_appsync option set to false. Possible values: 'true', 'false'.  # noqa: E501

        :param skip_db_consistency_check: The skip_db_consistency_check of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: bool
        """

        self._skip_db_consistency_check = skip_db_consistency_check

    @property
    def snap_verify(self):
        """Gets the snap_verify of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Run verification tool on this snapshot. This option can only be used with a volume collection that has application synchronization. Possible values: 'true', 'false'.  # noqa: E501

        :return: The snap_verify of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: bool
        """
        return self._snap_verify

    @snap_verify.setter
    def snap_verify(self, snap_verify):
        """Sets the snap_verify of this NimbleCreateSnapshotCollectionsInput.

        Run verification tool on this snapshot. This option can only be used with a volume collection that has application synchronization. Possible values: 'true', 'false'.  # noqa: E501

        :param snap_verify: The snap_verify of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: bool
        """

        self._snap_verify = snap_verify

    @property
    def start_online(self):
        """Gets the start_online of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        Start with snapshot set online. Possible values: 'true', 'false'.  # noqa: E501

        :return: The start_online of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: bool
        """
        return self._start_online

    @start_online.setter
    def start_online(self, start_online):
        """Sets the start_online of this NimbleCreateSnapshotCollectionsInput.

        Start with snapshot set online. Possible values: 'true', 'false'.  # noqa: E501

        :param start_online: The start_online of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: bool
        """

        self._start_online = start_online

    @property
    def vol_snap_attr_list(self):
        """Gets the vol_snap_attr_list of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501

        List of snapshot attributes for snapshots being created as part of snapshot collection creation. List of volumes with per snapshot attributes.  # noqa: E501

        :return: The vol_snap_attr_list of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :rtype: list[NimbleVolumeSnapAttr]
        """
        return self._vol_snap_attr_list

    @vol_snap_attr_list.setter
    def vol_snap_attr_list(self, vol_snap_attr_list):
        """Sets the vol_snap_attr_list of this NimbleCreateSnapshotCollectionsInput.

        List of snapshot attributes for snapshots being created as part of snapshot collection creation. List of volumes with per snapshot attributes.  # noqa: E501

        :param vol_snap_attr_list: The vol_snap_attr_list of this NimbleCreateSnapshotCollectionsInput.  # noqa: E501
        :type: list[NimbleVolumeSnapAttr]
        """

        self._vol_snap_attr_list = vol_snap_attr_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleCreateSnapshotCollectionsInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
