# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditSystemParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alarms_enabled': 'bool',
        'default_volume_limit': 'int',
        'fc_enabled': 'bool',
        'group_target_enabled': 'bool',
        'iscsi_enabled': 'bool',
        'repl_throttle_list': 'list[EditThrottle]',
        'vss_validation_timeout': 'int'
    }

    attribute_map = {
        'alarms_enabled': 'alarms_enabled',
        'default_volume_limit': 'default_volume_limit',
        'fc_enabled': 'fc_enabled',
        'group_target_enabled': 'group_target_enabled',
        'iscsi_enabled': 'iscsi_enabled',
        'repl_throttle_list': 'repl_throttle_list',
        'vss_validation_timeout': 'vss_validation_timeout'
    }

    def __init__(self, alarms_enabled=None, default_volume_limit=None, fc_enabled=None, group_target_enabled=None, iscsi_enabled=None, repl_throttle_list=None, vss_validation_timeout=None):  # noqa: E501
        """EditSystemParameters - a model defined in OpenAPI"""  # noqa: E501

        self._alarms_enabled = None
        self._default_volume_limit = None
        self._fc_enabled = None
        self._group_target_enabled = None
        self._iscsi_enabled = None
        self._repl_throttle_list = None
        self._vss_validation_timeout = None
        self.discriminator = None

        if alarms_enabled is not None:
            self.alarms_enabled = alarms_enabled
        if default_volume_limit is not None:
            self.default_volume_limit = default_volume_limit
        if fc_enabled is not None:
            self.fc_enabled = fc_enabled
        if group_target_enabled is not None:
            self.group_target_enabled = group_target_enabled
        if iscsi_enabled is not None:
            self.iscsi_enabled = iscsi_enabled
        if repl_throttle_list is not None:
            self.repl_throttle_list = repl_throttle_list
        if vss_validation_timeout is not None:
            self.vss_validation_timeout = vss_validation_timeout

    @property
    def alarms_enabled(self):
        """Gets the alarms_enabled of this EditSystemParameters.  # noqa: E501

        Enable or disable alarm feature.  # noqa: E501

        :return: The alarms_enabled of this EditSystemParameters.  # noqa: E501
        :rtype: bool
        """
        return self._alarms_enabled

    @alarms_enabled.setter
    def alarms_enabled(self, alarms_enabled):
        """Sets the alarms_enabled of this EditSystemParameters.

        Enable or disable alarm feature.  # noqa: E501

        :param alarms_enabled: The alarms_enabled of this EditSystemParameters.  # noqa: E501
        :type: bool
        """

        self._alarms_enabled = alarms_enabled

    @property
    def default_volume_limit(self):
        """Gets the default_volume_limit of this EditSystemParameters.  # noqa: E501

        Default limit for a volume space usage as a percentage of volume size. Volume will be taken offline/made non-writable on exceeding its limit. Percentage as integer from 0 to 100.  # noqa: E501

        :return: The default_volume_limit of this EditSystemParameters.  # noqa: E501
        :rtype: int
        """
        return self._default_volume_limit

    @default_volume_limit.setter
    def default_volume_limit(self, default_volume_limit):
        """Sets the default_volume_limit of this EditSystemParameters.

        Default limit for a volume space usage as a percentage of volume size. Volume will be taken offline/made non-writable on exceeding its limit. Percentage as integer from 0 to 100.  # noqa: E501

        :param default_volume_limit: The default_volume_limit of this EditSystemParameters.  # noqa: E501
        :type: int
        """

        self._default_volume_limit = default_volume_limit

    @property
    def fc_enabled(self):
        """Gets the fc_enabled of this EditSystemParameters.  # noqa: E501

        Enable or disable FC.This flag can be modified only on the physical array which supports FC.  # noqa: E501

        :return: The fc_enabled of this EditSystemParameters.  # noqa: E501
        :rtype: bool
        """
        return self._fc_enabled

    @fc_enabled.setter
    def fc_enabled(self, fc_enabled):
        """Sets the fc_enabled of this EditSystemParameters.

        Enable or disable FC.This flag can be modified only on the physical array which supports FC.  # noqa: E501

        :param fc_enabled: The fc_enabled of this EditSystemParameters.  # noqa: E501
        :type: bool
        """

        self._fc_enabled = fc_enabled

    @property
    def group_target_enabled(self):
        """Gets the group_target_enabled of this EditSystemParameters.  # noqa: E501

        Enable or disable group target.  # noqa: E501

        :return: The group_target_enabled of this EditSystemParameters.  # noqa: E501
        :rtype: bool
        """
        return self._group_target_enabled

    @group_target_enabled.setter
    def group_target_enabled(self, group_target_enabled):
        """Sets the group_target_enabled of this EditSystemParameters.

        Enable or disable group target.  # noqa: E501

        :param group_target_enabled: The group_target_enabled of this EditSystemParameters.  # noqa: E501
        :type: bool
        """

        self._group_target_enabled = group_target_enabled

    @property
    def iscsi_enabled(self):
        """Gets the iscsi_enabled of this EditSystemParameters.  # noqa: E501

        Enable or disable iSCSI.  # noqa: E501

        :return: The iscsi_enabled of this EditSystemParameters.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_enabled

    @iscsi_enabled.setter
    def iscsi_enabled(self, iscsi_enabled):
        """Sets the iscsi_enabled of this EditSystemParameters.

        Enable or disable iSCSI.  # noqa: E501

        :param iscsi_enabled: The iscsi_enabled of this EditSystemParameters.  # noqa: E501
        :type: bool
        """

        self._iscsi_enabled = iscsi_enabled

    @property
    def repl_throttle_list(self):
        """Gets the repl_throttle_list of this EditSystemParameters.  # noqa: E501

        All the replication bandwidth limits on the system. All the throttles for the partner.  # noqa: E501

        :return: The repl_throttle_list of this EditSystemParameters.  # noqa: E501
        :rtype: list[EditThrottle]
        """
        return self._repl_throttle_list

    @repl_throttle_list.setter
    def repl_throttle_list(self, repl_throttle_list):
        """Sets the repl_throttle_list of this EditSystemParameters.

        All the replication bandwidth limits on the system. All the throttles for the partner.  # noqa: E501

        :param repl_throttle_list: The repl_throttle_list of this EditSystemParameters.  # noqa: E501
        :type: list[EditThrottle]
        """

        self._repl_throttle_list = repl_throttle_list

    @property
    def vss_validation_timeout(self):
        """Gets the vss_validation_timeout of this EditSystemParameters.  # noqa: E501

        The amount of time in seconds to validate Microsoft VSS application synchronization before timing out. VSS validation timeout in second, valid range is from 1 to 3600 (60 minutes).  # noqa: E501

        :return: The vss_validation_timeout of this EditSystemParameters.  # noqa: E501
        :rtype: int
        """
        return self._vss_validation_timeout

    @vss_validation_timeout.setter
    def vss_validation_timeout(self, vss_validation_timeout):
        """Sets the vss_validation_timeout of this EditSystemParameters.

        The amount of time in seconds to validate Microsoft VSS application synchronization before timing out. VSS validation timeout in second, valid range is from 1 to 3600 (60 minutes).  # noqa: E501

        :param vss_validation_timeout: The vss_validation_timeout of this EditSystemParameters.  # noqa: E501
        :type: int
        """

        self._vss_validation_timeout = vss_validation_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditSystemParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
