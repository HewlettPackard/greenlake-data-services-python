# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PrimeraStorageSystemDetailList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'PrimeraAssociatedLinks',
        'centerplane_type': 'str',
        'chunklet_size_mi_b': 'int',
        'cluster_led': 'str',
        'customer_id': 'str',
        'descriptors': 'Descriptors',
        'device_id': 'int',
        'device_type': 'PrimeraStorageSystemDetailDeviceType',
        'displayname': 'str',
        'domain': 'str',
        'generation': 'int',
        'id': 'str',
        'in_cluster_nodes': 'list[int]',
        'is_fips_enabled': 'bool',
        'locate_enabled': 'bool',
        'maintenance_mode': 'MaintenanceMode',
        'manufacturing': 'ManufacturingSys',
        'master_node': 'int',
        'minimum_password_length': 'int',
        'name': 'str',
        'network_master_node': 'int',
        'node_memory': 'str',
        'nodes_count': 'int',
        'nodes_present': 'list[int]',
        'online_nodes': 'list[int]',
        'overall_state': 'str',
        'parameters': 'Parameters',
        'resource_uri': 'str',
        'safe_to_remove': 'bool',
        'software_versions': 'SoftwareVersions',
        'state': 'SystemState',
        'sys_log_status': 'SysLogStatus',
        'system_date': 'int',
        'system_headroom': 'SystemHeadroom',
        'system_wwn': 'str',
        'timezone': 'str',
        'type': 'str',
        'uptime': 'Uptime',
        'version': 'Version'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'centerplane_type': 'centerplaneType',
        'chunklet_size_mi_b': 'chunkletSizeMiB',
        'cluster_led': 'clusterLED',
        'customer_id': 'customerId',
        'descriptors': 'descriptors',
        'device_id': 'deviceId',
        'device_type': 'deviceType',
        'displayname': 'displayname',
        'domain': 'domain',
        'generation': 'generation',
        'id': 'id',
        'in_cluster_nodes': 'inClusterNodes',
        'is_fips_enabled': 'isFIPSEnabled',
        'locate_enabled': 'locateEnabled',
        'maintenance_mode': 'maintenanceMode',
        'manufacturing': 'manufacturing',
        'master_node': 'masterNode',
        'minimum_password_length': 'minimumPasswordLength',
        'name': 'name',
        'network_master_node': 'networkMasterNode',
        'node_memory': 'nodeMemory',
        'nodes_count': 'nodesCount',
        'nodes_present': 'nodesPresent',
        'online_nodes': 'onlineNodes',
        'overall_state': 'overallState',
        'parameters': 'parameters',
        'resource_uri': 'resourceUri',
        'safe_to_remove': 'safeToRemove',
        'software_versions': 'softwareVersions',
        'state': 'state',
        'sys_log_status': 'sysLogStatus',
        'system_date': 'systemDate',
        'system_headroom': 'systemHeadroom',
        'system_wwn': 'systemWWN',
        'timezone': 'timezone',
        'type': 'type',
        'uptime': 'uptime',
        'version': 'version'
    }

    def __init__(self, associated_links=None, centerplane_type=None, chunklet_size_mi_b=None, cluster_led=None, customer_id=None, descriptors=None, device_id=None, device_type=None, displayname=None, domain=None, generation=None, id=None, in_cluster_nodes=None, is_fips_enabled=None, locate_enabled=None, maintenance_mode=None, manufacturing=None, master_node=None, minimum_password_length=None, name=None, network_master_node=None, node_memory=None, nodes_count=None, nodes_present=None, online_nodes=None, overall_state=None, parameters=None, resource_uri=None, safe_to_remove=None, software_versions=None, state=None, sys_log_status=None, system_date=None, system_headroom=None, system_wwn=None, timezone=None, type=None, uptime=None, version=None):  # noqa: E501
        """PrimeraStorageSystemDetailList - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._centerplane_type = None
        self._chunklet_size_mi_b = None
        self._cluster_led = None
        self._customer_id = None
        self._descriptors = None
        self._device_id = None
        self._device_type = None
        self._displayname = None
        self._domain = None
        self._generation = None
        self._id = None
        self._in_cluster_nodes = None
        self._is_fips_enabled = None
        self._locate_enabled = None
        self._maintenance_mode = None
        self._manufacturing = None
        self._master_node = None
        self._minimum_password_length = None
        self._name = None
        self._network_master_node = None
        self._node_memory = None
        self._nodes_count = None
        self._nodes_present = None
        self._online_nodes = None
        self._overall_state = None
        self._parameters = None
        self._resource_uri = None
        self._safe_to_remove = None
        self._software_versions = None
        self._state = None
        self._sys_log_status = None
        self._system_date = None
        self._system_headroom = None
        self._system_wwn = None
        self._timezone = None
        self._type = None
        self._uptime = None
        self._version = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if centerplane_type is not None:
            self.centerplane_type = centerplane_type
        if chunklet_size_mi_b is not None:
            self.chunklet_size_mi_b = chunklet_size_mi_b
        if cluster_led is not None:
            self.cluster_led = cluster_led
        if customer_id is not None:
            self.customer_id = customer_id
        if descriptors is not None:
            self.descriptors = descriptors
        if device_id is not None:
            self.device_id = device_id
        if device_type is not None:
            self.device_type = device_type
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if in_cluster_nodes is not None:
            self.in_cluster_nodes = in_cluster_nodes
        if is_fips_enabled is not None:
            self.is_fips_enabled = is_fips_enabled
        if locate_enabled is not None:
            self.locate_enabled = locate_enabled
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if master_node is not None:
            self.master_node = master_node
        if minimum_password_length is not None:
            self.minimum_password_length = minimum_password_length
        if name is not None:
            self.name = name
        if network_master_node is not None:
            self.network_master_node = network_master_node
        if node_memory is not None:
            self.node_memory = node_memory
        if nodes_count is not None:
            self.nodes_count = nodes_count
        if nodes_present is not None:
            self.nodes_present = nodes_present
        if online_nodes is not None:
            self.online_nodes = online_nodes
        if overall_state is not None:
            self.overall_state = overall_state
        if parameters is not None:
            self.parameters = parameters
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if safe_to_remove is not None:
            self.safe_to_remove = safe_to_remove
        if software_versions is not None:
            self.software_versions = software_versions
        if state is not None:
            self.state = state
        if sys_log_status is not None:
            self.sys_log_status = sys_log_status
        if system_date is not None:
            self.system_date = system_date
        if system_headroom is not None:
            self.system_headroom = system_headroom
        if system_wwn is not None:
            self.system_wwn = system_wwn
        if timezone is not None:
            self.timezone = timezone
        if type is not None:
            self.type = type
        if uptime is not None:
            self.uptime = uptime
        if version is not None:
            self.version = version

    @property
    def associated_links(self):
        """Gets the associated_links of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The associated_links of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: PrimeraAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this PrimeraStorageSystemDetailList.


        :param associated_links: The associated_links of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: PrimeraAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def centerplane_type(self):
        """Gets the centerplane_type of this PrimeraStorageSystemDetailList.  # noqa: E501

        Centerplane type  # noqa: E501

        :return: The centerplane_type of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._centerplane_type

    @centerplane_type.setter
    def centerplane_type(self, centerplane_type):
        """Sets the centerplane_type of this PrimeraStorageSystemDetailList.

        Centerplane type  # noqa: E501

        :param centerplane_type: The centerplane_type of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._centerplane_type = centerplane_type

    @property
    def chunklet_size_mi_b(self):
        """Gets the chunklet_size_mi_b of this PrimeraStorageSystemDetailList.  # noqa: E501

        Size of chunklet in MiB  # noqa: E501

        :return: The chunklet_size_mi_b of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: int
        """
        return self._chunklet_size_mi_b

    @chunklet_size_mi_b.setter
    def chunklet_size_mi_b(self, chunklet_size_mi_b):
        """Sets the chunklet_size_mi_b of this PrimeraStorageSystemDetailList.

        Size of chunklet in MiB  # noqa: E501

        :param chunklet_size_mi_b: The chunklet_size_mi_b of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: int
        """

        self._chunklet_size_mi_b = chunklet_size_mi_b

    @property
    def cluster_led(self):
        """Gets the cluster_led of this PrimeraStorageSystemDetailList.  # noqa: E501

        Cluster LED state  # noqa: E501

        :return: The cluster_led of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._cluster_led

    @cluster_led.setter
    def cluster_led(self, cluster_led):
        """Sets the cluster_led of this PrimeraStorageSystemDetailList.

        Cluster LED state  # noqa: E501

        :param cluster_led: The cluster_led of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """
        allowed_values = ["LED_UNKNOWN", "LED_OFF", "LED_GREEN", "LED_GREEN_BLNK", "LED_AMBER", "LED_AMBER_BLNK", "LED_BLUE", "LED_BLUE_BLNK", "null"]  # noqa: E501
        if cluster_led not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_led` ({0}), must be one of {1}"  # noqa: E501
                .format(cluster_led, allowed_values)
            )

        self._cluster_led = cluster_led

    @property
    def customer_id(self):
        """Gets the customer_id of this PrimeraStorageSystemDetailList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PrimeraStorageSystemDetailList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def descriptors(self):
        """Gets the descriptors of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The descriptors of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: Descriptors
        """
        return self._descriptors

    @descriptors.setter
    def descriptors(self, descriptors):
        """Sets the descriptors of this PrimeraStorageSystemDetailList.


        :param descriptors: The descriptors of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: Descriptors
        """

        self._descriptors = descriptors

    @property
    def device_id(self):
        """Gets the device_id of this PrimeraStorageSystemDetailList.  # noqa: E501

        Numeric ID of the resource `Filter`  # noqa: E501

        :return: The device_id of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this PrimeraStorageSystemDetailList.

        Numeric ID of the resource `Filter`  # noqa: E501

        :param device_id: The device_id of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def device_type(self):
        """Gets the device_type of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The device_type of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: PrimeraStorageSystemDetailDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this PrimeraStorageSystemDetailList.


        :param device_type: The device_type of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: PrimeraStorageSystemDetailDeviceType
        """

        self._device_type = device_type

    @property
    def displayname(self):
        """Gets the displayname of this PrimeraStorageSystemDetailList.  # noqa: E501

        Array Display name  # noqa: E501

        :return: The displayname of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this PrimeraStorageSystemDetailList.

        Array Display name  # noqa: E501

        :param displayname: The displayname of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this PrimeraStorageSystemDetailList.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PrimeraStorageSystemDetailList.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def generation(self):
        """Gets the generation of this PrimeraStorageSystemDetailList.  # noqa: E501

        generation `Filter, Sort`  # noqa: E501

        :return: The generation of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this PrimeraStorageSystemDetailList.

        generation `Filter, Sort`  # noqa: E501

        :param generation: The generation of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this PrimeraStorageSystemDetailList.  # noqa: E501

        SystemWWN/UUID string uniquely identifying the storage system object. `Filter`  # noqa: E501

        :return: The id of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrimeraStorageSystemDetailList.

        SystemWWN/UUID string uniquely identifying the storage system object. `Filter`  # noqa: E501

        :param id: The id of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def in_cluster_nodes(self):
        """Gets the in_cluster_nodes of this PrimeraStorageSystemDetailList.  # noqa: E501

        IDs of the nodes that are in cluster  # noqa: E501

        :return: The in_cluster_nodes of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: list[int]
        """
        return self._in_cluster_nodes

    @in_cluster_nodes.setter
    def in_cluster_nodes(self, in_cluster_nodes):
        """Sets the in_cluster_nodes of this PrimeraStorageSystemDetailList.

        IDs of the nodes that are in cluster  # noqa: E501

        :param in_cluster_nodes: The in_cluster_nodes of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: list[int]
        """

        self._in_cluster_nodes = in_cluster_nodes

    @property
    def is_fips_enabled(self):
        """Gets the is_fips_enabled of this PrimeraStorageSystemDetailList.  # noqa: E501

        Flag for FIPS  # noqa: E501

        :return: The is_fips_enabled of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: bool
        """
        return self._is_fips_enabled

    @is_fips_enabled.setter
    def is_fips_enabled(self, is_fips_enabled):
        """Sets the is_fips_enabled of this PrimeraStorageSystemDetailList.

        Flag for FIPS  # noqa: E501

        :param is_fips_enabled: The is_fips_enabled of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: bool
        """

        self._is_fips_enabled = is_fips_enabled

    @property
    def locate_enabled(self):
        """Gets the locate_enabled of this PrimeraStorageSystemDetailList.  # noqa: E501

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :return: The locate_enabled of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: bool
        """
        return self._locate_enabled

    @locate_enabled.setter
    def locate_enabled(self, locate_enabled):
        """Sets the locate_enabled of this PrimeraStorageSystemDetailList.

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :param locate_enabled: The locate_enabled of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: bool
        """

        self._locate_enabled = locate_enabled

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The maintenance_mode of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: MaintenanceMode
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this PrimeraStorageSystemDetailList.


        :param maintenance_mode: The maintenance_mode of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: MaintenanceMode
        """

        self._maintenance_mode = maintenance_mode

    @property
    def manufacturing(self):
        """Gets the manufacturing of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The manufacturing of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: ManufacturingSys
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this PrimeraStorageSystemDetailList.


        :param manufacturing: The manufacturing of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: ManufacturingSys
        """

        self._manufacturing = manufacturing

    @property
    def master_node(self):
        """Gets the master_node of this PrimeraStorageSystemDetailList.  # noqa: E501

        ID of the master node  # noqa: E501

        :return: The master_node of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: int
        """
        return self._master_node

    @master_node.setter
    def master_node(self, master_node):
        """Sets the master_node of this PrimeraStorageSystemDetailList.

        ID of the master node  # noqa: E501

        :param master_node: The master_node of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: int
        """

        self._master_node = master_node

    @property
    def minimum_password_length(self):
        """Gets the minimum_password_length of this PrimeraStorageSystemDetailList.  # noqa: E501

        Minimum length of password for users  # noqa: E501

        :return: The minimum_password_length of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: int
        """
        return self._minimum_password_length

    @minimum_password_length.setter
    def minimum_password_length(self, minimum_password_length):
        """Sets the minimum_password_length of this PrimeraStorageSystemDetailList.

        Minimum length of password for users  # noqa: E501

        :param minimum_password_length: The minimum_password_length of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: int
        """

        self._minimum_password_length = minimum_password_length

    @property
    def name(self):
        """Gets the name of this PrimeraStorageSystemDetailList.  # noqa: E501

        Name of the resource `Filter, Sort`  # noqa: E501

        :return: The name of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrimeraStorageSystemDetailList.

        Name of the resource `Filter, Sort`  # noqa: E501

        :param name: The name of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_master_node(self):
        """Gets the network_master_node of this PrimeraStorageSystemDetailList.  # noqa: E501

        The Node ID of the current network master `Filter, Sort`  # noqa: E501

        :return: The network_master_node of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: int
        """
        return self._network_master_node

    @network_master_node.setter
    def network_master_node(self, network_master_node):
        """Sets the network_master_node of this PrimeraStorageSystemDetailList.

        The Node ID of the current network master `Filter, Sort`  # noqa: E501

        :param network_master_node: The network_master_node of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: int
        """

        self._network_master_node = network_master_node

    @property
    def node_memory(self):
        """Gets the node_memory of this PrimeraStorageSystemDetailList.  # noqa: E501

        Node memory size  # noqa: E501

        :return: The node_memory of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._node_memory

    @node_memory.setter
    def node_memory(self, node_memory):
        """Sets the node_memory of this PrimeraStorageSystemDetailList.

        Node memory size  # noqa: E501

        :param node_memory: The node_memory of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._node_memory = node_memory

    @property
    def nodes_count(self):
        """Gets the nodes_count of this PrimeraStorageSystemDetailList.  # noqa: E501

        Number of nodes in the system  # noqa: E501

        :return: The nodes_count of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: int
        """
        return self._nodes_count

    @nodes_count.setter
    def nodes_count(self, nodes_count):
        """Sets the nodes_count of this PrimeraStorageSystemDetailList.

        Number of nodes in the system  # noqa: E501

        :param nodes_count: The nodes_count of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: int
        """

        self._nodes_count = nodes_count

    @property
    def nodes_present(self):
        """Gets the nodes_present of this PrimeraStorageSystemDetailList.  # noqa: E501

        IDs of the nodes that are present  # noqa: E501

        :return: The nodes_present of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: list[int]
        """
        return self._nodes_present

    @nodes_present.setter
    def nodes_present(self, nodes_present):
        """Sets the nodes_present of this PrimeraStorageSystemDetailList.

        IDs of the nodes that are present  # noqa: E501

        :param nodes_present: The nodes_present of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: list[int]
        """

        self._nodes_present = nodes_present

    @property
    def online_nodes(self):
        """Gets the online_nodes of this PrimeraStorageSystemDetailList.  # noqa: E501

        IDs of the nodes that are online  # noqa: E501

        :return: The online_nodes of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: list[int]
        """
        return self._online_nodes

    @online_nodes.setter
    def online_nodes(self, online_nodes):
        """Sets the online_nodes of this PrimeraStorageSystemDetailList.

        IDs of the nodes that are online  # noqa: E501

        :param online_nodes: The online_nodes of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: list[int]
        """

        self._online_nodes = online_nodes

    @property
    def overall_state(self):
        """Gets the overall_state of this PrimeraStorageSystemDetailList.  # noqa: E501

        overallState state derived from enclosure, disk and node state For deviceType1 State derived from ports, enclosure, disk and node state for deviceType2 state is state reported by deviceType2 array `Filter, Sort`  # noqa: E501

        :return: The overall_state of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._overall_state

    @overall_state.setter
    def overall_state(self, overall_state):
        """Sets the overall_state of this PrimeraStorageSystemDetailList.

        overallState state derived from enclosure, disk and node state For deviceType1 State derived from ports, enclosure, disk and node state for deviceType2 state is state reported by deviceType2 array `Filter, Sort`  # noqa: E501

        :param overall_state: The overall_state of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "DEGRADED", "null"]  # noqa: E501
        if overall_state not in allowed_values:
            raise ValueError(
                "Invalid value for `overall_state` ({0}), must be one of {1}"  # noqa: E501
                .format(overall_state, allowed_values)
            )

        self._overall_state = overall_state

    @property
    def parameters(self):
        """Gets the parameters of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The parameters of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: Parameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PrimeraStorageSystemDetailList.


        :param parameters: The parameters of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: Parameters
        """

        self._parameters = parameters

    @property
    def resource_uri(self):
        """Gets the resource_uri of this PrimeraStorageSystemDetailList.  # noqa: E501

        resourceUri for detailed storage object  # noqa: E501

        :return: The resource_uri of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this PrimeraStorageSystemDetailList.

        resourceUri for detailed storage object  # noqa: E501

        :param resource_uri: The resource_uri of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def safe_to_remove(self):
        """Gets the safe_to_remove of this PrimeraStorageSystemDetailList.  # noqa: E501

        Indicates if the component is safe to remove  # noqa: E501

        :return: The safe_to_remove of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: bool
        """
        return self._safe_to_remove

    @safe_to_remove.setter
    def safe_to_remove(self, safe_to_remove):
        """Sets the safe_to_remove of this PrimeraStorageSystemDetailList.

        Indicates if the component is safe to remove  # noqa: E501

        :param safe_to_remove: The safe_to_remove of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: bool
        """

        self._safe_to_remove = safe_to_remove

    @property
    def software_versions(self):
        """Gets the software_versions of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The software_versions of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: SoftwareVersions
        """
        return self._software_versions

    @software_versions.setter
    def software_versions(self, software_versions):
        """Sets the software_versions of this PrimeraStorageSystemDetailList.


        :param software_versions: The software_versions of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: SoftwareVersions
        """

        self._software_versions = software_versions

    @property
    def state(self):
        """Gets the state of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The state of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: SystemState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PrimeraStorageSystemDetailList.


        :param state: The state of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: SystemState
        """

        self._state = state

    @property
    def sys_log_status(self):
        """Gets the sys_log_status of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The sys_log_status of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: SysLogStatus
        """
        return self._sys_log_status

    @sys_log_status.setter
    def sys_log_status(self, sys_log_status):
        """Sets the sys_log_status of this PrimeraStorageSystemDetailList.


        :param sys_log_status: The sys_log_status of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: SysLogStatus
        """

        self._sys_log_status = sys_log_status

    @property
    def system_date(self):
        """Gets the system_date of this PrimeraStorageSystemDetailList.  # noqa: E501

        Current date of the system  # noqa: E501

        :return: The system_date of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: int
        """
        return self._system_date

    @system_date.setter
    def system_date(self, system_date):
        """Sets the system_date of this PrimeraStorageSystemDetailList.

        Current date of the system  # noqa: E501

        :param system_date: The system_date of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: int
        """

        self._system_date = system_date

    @property
    def system_headroom(self):
        """Gets the system_headroom of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The system_headroom of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: SystemHeadroom
        """
        return self._system_headroom

    @system_headroom.setter
    def system_headroom(self, system_headroom):
        """Sets the system_headroom of this PrimeraStorageSystemDetailList.


        :param system_headroom: The system_headroom of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: SystemHeadroom
        """

        self._system_headroom = system_headroom

    @property
    def system_wwn(self):
        """Gets the system_wwn of this PrimeraStorageSystemDetailList.  # noqa: E501

        WWN of the array `Filter, Sort`  # noqa: E501

        :return: The system_wwn of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._system_wwn

    @system_wwn.setter
    def system_wwn(self, system_wwn):
        """Sets the system_wwn of this PrimeraStorageSystemDetailList.

        WWN of the array `Filter, Sort`  # noqa: E501

        :param system_wwn: The system_wwn of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._system_wwn = system_wwn

    @property
    def timezone(self):
        """Gets the timezone of this PrimeraStorageSystemDetailList.  # noqa: E501

        Current timezone of the system  # noqa: E501

        :return: The timezone of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this PrimeraStorageSystemDetailList.

        Current timezone of the system  # noqa: E501

        :param timezone: The timezone of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this PrimeraStorageSystemDetailList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrimeraStorageSystemDetailList.

        type  # noqa: E501

        :param type: The type of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uptime(self):
        """Gets the uptime of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The uptime of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: Uptime
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this PrimeraStorageSystemDetailList.


        :param uptime: The uptime of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: Uptime
        """

        self._uptime = uptime

    @property
    def version(self):
        """Gets the version of this PrimeraStorageSystemDetailList.  # noqa: E501


        :return: The version of this PrimeraStorageSystemDetailList.  # noqa: E501
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PrimeraStorageSystemDetailList.


        :param version: The version of this PrimeraStorageSystemDetailList.  # noqa: E501
        :type: Version
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimeraStorageSystemDetailList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
