# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NodeDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node_id': 'int',
        'associated_links': 'NodeAssociatedLinks',
        'bios_version': 'str',
        'cache_available_pct': 'int',
        'cache_enabled': 'int',
        'console_uri': 'str',
        'control_memory_mi_b': 'int',
        'customer_id': 'str',
        'data_memory_mi_b': 'int',
        'displayname': 'str',
        'domain': 'str',
        'generation': 'int',
        'id': 'str',
        'in_cluster': 'bool',
        'kernel_version': 'str',
        'locate_enabled': 'bool',
        'manufacturing': 'ManufacturingSingle',
        'master': 'bool',
        'name': 'str',
        'online': 'bool',
        'request_uri': 'str',
        'resource_uri': 'str',
        'safe_to_remove': 'bool',
        'service_led': 'str',
        'state': 'STATE',
        'state_description': 'str',
        'system_id': 'str',
        'system_led': 'LED',
        'type': 'str',
        'uptime': 'Nodeuptime'
    }

    attribute_map = {
        'node_id': 'NodeId',
        'associated_links': 'associatedLinks',
        'bios_version': 'biosVersion',
        'cache_available_pct': 'cacheAvailablePct',
        'cache_enabled': 'cacheEnabled',
        'console_uri': 'consoleUri',
        'control_memory_mi_b': 'controlMemoryMiB',
        'customer_id': 'customerId',
        'data_memory_mi_b': 'dataMemoryMiB',
        'displayname': 'displayname',
        'domain': 'domain',
        'generation': 'generation',
        'id': 'id',
        'in_cluster': 'inCluster',
        'kernel_version': 'kernelVersion',
        'locate_enabled': 'locateEnabled',
        'manufacturing': 'manufacturing',
        'master': 'master',
        'name': 'name',
        'online': 'online',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'safe_to_remove': 'safeToRemove',
        'service_led': 'serviceLED',
        'state': 'state',
        'state_description': 'stateDescription',
        'system_id': 'systemId',
        'system_led': 'systemLED',
        'type': 'type',
        'uptime': 'uptime'
    }

    def __init__(self, node_id=None, associated_links=None, bios_version=None, cache_available_pct=None, cache_enabled=None, console_uri=None, control_memory_mi_b=None, customer_id=None, data_memory_mi_b=None, displayname=None, domain=None, generation=None, id=None, in_cluster=None, kernel_version=None, locate_enabled=None, manufacturing=None, master=None, name=None, online=None, request_uri=None, resource_uri=None, safe_to_remove=None, service_led=None, state=None, state_description=None, system_id=None, system_led=None, type=None, uptime=None):  # noqa: E501
        """NodeDetails - a model defined in OpenAPI"""  # noqa: E501

        self._node_id = None
        self._associated_links = None
        self._bios_version = None
        self._cache_available_pct = None
        self._cache_enabled = None
        self._console_uri = None
        self._control_memory_mi_b = None
        self._customer_id = None
        self._data_memory_mi_b = None
        self._displayname = None
        self._domain = None
        self._generation = None
        self._id = None
        self._in_cluster = None
        self._kernel_version = None
        self._locate_enabled = None
        self._manufacturing = None
        self._master = None
        self._name = None
        self._online = None
        self._request_uri = None
        self._resource_uri = None
        self._safe_to_remove = None
        self._service_led = None
        self._state = None
        self._state_description = None
        self._system_id = None
        self._system_led = None
        self._type = None
        self._uptime = None
        self.discriminator = None

        if node_id is not None:
            self.node_id = node_id
        if associated_links is not None:
            self.associated_links = associated_links
        if bios_version is not None:
            self.bios_version = bios_version
        if cache_available_pct is not None:
            self.cache_available_pct = cache_available_pct
        if cache_enabled is not None:
            self.cache_enabled = cache_enabled
        if console_uri is not None:
            self.console_uri = console_uri
        if control_memory_mi_b is not None:
            self.control_memory_mi_b = control_memory_mi_b
        if customer_id is not None:
            self.customer_id = customer_id
        if data_memory_mi_b is not None:
            self.data_memory_mi_b = data_memory_mi_b
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if in_cluster is not None:
            self.in_cluster = in_cluster
        if kernel_version is not None:
            self.kernel_version = kernel_version
        if locate_enabled is not None:
            self.locate_enabled = locate_enabled
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if master is not None:
            self.master = master
        if name is not None:
            self.name = name
        if online is not None:
            self.online = online
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if safe_to_remove is not None:
            self.safe_to_remove = safe_to_remove
        if service_led is not None:
            self.service_led = service_led
        if state is not None:
            self.state = state
        if state_description is not None:
            self.state_description = state_description
        if system_id is not None:
            self.system_id = system_id
        if system_led is not None:
            self.system_led = system_led
        if type is not None:
            self.type = type
        if uptime is not None:
            self.uptime = uptime

    @property
    def node_id(self):
        """Gets the node_id of this NodeDetails.  # noqa: E501

        Numeric ID of the resource.  # noqa: E501

        :return: The node_id of this NodeDetails.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeDetails.

        Numeric ID of the resource.  # noqa: E501

        :param node_id: The node_id of this NodeDetails.  # noqa: E501
        :type: int
        """

        self._node_id = node_id

    @property
    def associated_links(self):
        """Gets the associated_links of this NodeDetails.  # noqa: E501


        :return: The associated_links of this NodeDetails.  # noqa: E501
        :rtype: NodeAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NodeDetails.


        :param associated_links: The associated_links of this NodeDetails.  # noqa: E501
        :type: NodeAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def bios_version(self):
        """Gets the bios_version of this NodeDetails.  # noqa: E501

        Bios version  # noqa: E501

        :return: The bios_version of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._bios_version

    @bios_version.setter
    def bios_version(self, bios_version):
        """Sets the bios_version of this NodeDetails.

        Bios version  # noqa: E501

        :param bios_version: The bios_version of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._bios_version = bios_version

    @property
    def cache_available_pct(self):
        """Gets the cache_available_pct of this NodeDetails.  # noqa: E501

        Percentage of the cache available  # noqa: E501

        :return: The cache_available_pct of this NodeDetails.  # noqa: E501
        :rtype: int
        """
        return self._cache_available_pct

    @cache_available_pct.setter
    def cache_available_pct(self, cache_available_pct):
        """Sets the cache_available_pct of this NodeDetails.

        Percentage of the cache available  # noqa: E501

        :param cache_available_pct: The cache_available_pct of this NodeDetails.  # noqa: E501
        :type: int
        """

        self._cache_available_pct = cache_available_pct

    @property
    def cache_enabled(self):
        """Gets the cache_enabled of this NodeDetails.  # noqa: E501

        Percentage of the cache enabled on the node  # noqa: E501

        :return: The cache_enabled of this NodeDetails.  # noqa: E501
        :rtype: int
        """
        return self._cache_enabled

    @cache_enabled.setter
    def cache_enabled(self, cache_enabled):
        """Sets the cache_enabled of this NodeDetails.

        Percentage of the cache enabled on the node  # noqa: E501

        :param cache_enabled: The cache_enabled of this NodeDetails.  # noqa: E501
        :type: int
        """

        self._cache_enabled = cache_enabled

    @property
    def console_uri(self):
        """Gets the console_uri of this NodeDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NodeDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def control_memory_mi_b(self):
        """Gets the control_memory_mi_b of this NodeDetails.  # noqa: E501

        Total control memory in the node in MiB  # noqa: E501

        :return: The control_memory_mi_b of this NodeDetails.  # noqa: E501
        :rtype: int
        """
        return self._control_memory_mi_b

    @control_memory_mi_b.setter
    def control_memory_mi_b(self, control_memory_mi_b):
        """Sets the control_memory_mi_b of this NodeDetails.

        Total control memory in the node in MiB  # noqa: E501

        :param control_memory_mi_b: The control_memory_mi_b of this NodeDetails.  # noqa: E501
        :type: int
        """

        self._control_memory_mi_b = control_memory_mi_b

    @property
    def customer_id(self):
        """Gets the customer_id of this NodeDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NodeDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def data_memory_mi_b(self):
        """Gets the data_memory_mi_b of this NodeDetails.  # noqa: E501

        Total data memory in the node in MiB  # noqa: E501

        :return: The data_memory_mi_b of this NodeDetails.  # noqa: E501
        :rtype: int
        """
        return self._data_memory_mi_b

    @data_memory_mi_b.setter
    def data_memory_mi_b(self, data_memory_mi_b):
        """Sets the data_memory_mi_b of this NodeDetails.

        Total data memory in the node in MiB  # noqa: E501

        :param data_memory_mi_b: The data_memory_mi_b of this NodeDetails.  # noqa: E501
        :type: int
        """

        self._data_memory_mi_b = data_memory_mi_b

    @property
    def displayname(self):
        """Gets the displayname of this NodeDetails.  # noqa: E501

        Name to be used for display purposes  # noqa: E501

        :return: The displayname of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this NodeDetails.

        Name to be used for display purposes  # noqa: E501

        :param displayname: The displayname of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this NodeDetails.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this NodeDetails.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def generation(self):
        """Gets the generation of this NodeDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NodeDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NodeDetails.

        generation  # noqa: E501

        :param generation: The generation of this NodeDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this NodeDetails.  # noqa: E501

        Unique Identifier of the resource.  # noqa: E501

        :return: The id of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeDetails.

        Unique Identifier of the resource.  # noqa: E501

        :param id: The id of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def in_cluster(self):
        """Gets the in_cluster of this NodeDetails.  # noqa: E501

        Indicates if this node is part of the cluster.  # noqa: E501

        :return: The in_cluster of this NodeDetails.  # noqa: E501
        :rtype: bool
        """
        return self._in_cluster

    @in_cluster.setter
    def in_cluster(self, in_cluster):
        """Sets the in_cluster of this NodeDetails.

        Indicates if this node is part of the cluster.  # noqa: E501

        :param in_cluster: The in_cluster of this NodeDetails.  # noqa: E501
        :type: bool
        """

        self._in_cluster = in_cluster

    @property
    def kernel_version(self):
        """Gets the kernel_version of this NodeDetails.  # noqa: E501

        Kernel version  # noqa: E501

        :return: The kernel_version of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._kernel_version

    @kernel_version.setter
    def kernel_version(self, kernel_version):
        """Sets the kernel_version of this NodeDetails.

        Kernel version  # noqa: E501

        :param kernel_version: The kernel_version of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._kernel_version = kernel_version

    @property
    def locate_enabled(self):
        """Gets the locate_enabled of this NodeDetails.  # noqa: E501

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :return: The locate_enabled of this NodeDetails.  # noqa: E501
        :rtype: bool
        """
        return self._locate_enabled

    @locate_enabled.setter
    def locate_enabled(self, locate_enabled):
        """Sets the locate_enabled of this NodeDetails.

        Indicates if the locate beacon is enabled or not  # noqa: E501

        :param locate_enabled: The locate_enabled of this NodeDetails.  # noqa: E501
        :type: bool
        """

        self._locate_enabled = locate_enabled

    @property
    def manufacturing(self):
        """Gets the manufacturing of this NodeDetails.  # noqa: E501


        :return: The manufacturing of this NodeDetails.  # noqa: E501
        :rtype: ManufacturingSingle
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this NodeDetails.


        :param manufacturing: The manufacturing of this NodeDetails.  # noqa: E501
        :type: ManufacturingSingle
        """

        self._manufacturing = manufacturing

    @property
    def master(self):
        """Gets the master of this NodeDetails.  # noqa: E501

        Indicates if this is the master node.  # noqa: E501

        :return: The master of this NodeDetails.  # noqa: E501
        :rtype: bool
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this NodeDetails.

        Indicates if this is the master node.  # noqa: E501

        :param master: The master of this NodeDetails.  # noqa: E501
        :type: bool
        """

        self._master = master

    @property
    def name(self):
        """Gets the name of this NodeDetails.  # noqa: E501

        Name of the resource.  # noqa: E501

        :return: The name of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeDetails.

        Name of the resource.  # noqa: E501

        :param name: The name of this NodeDetails.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def online(self):
        """Gets the online of this NodeDetails.  # noqa: E501

        Indicates if this node is online  # noqa: E501

        :return: The online of this NodeDetails.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this NodeDetails.

        Indicates if this node is online  # noqa: E501

        :param online: The online of this NodeDetails.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def request_uri(self):
        """Gets the request_uri of this NodeDetails.  # noqa: E501

        requestUri for detailed node object  # noqa: E501

        :return: The request_uri of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this NodeDetails.

        requestUri for detailed node object  # noqa: E501

        :param request_uri: The request_uri of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NodeDetails.  # noqa: E501

        resourceUri for detailed node object  # noqa: E501

        :return: The resource_uri of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NodeDetails.

        resourceUri for detailed node object  # noqa: E501

        :param resource_uri: The resource_uri of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def safe_to_remove(self):
        """Gets the safe_to_remove of this NodeDetails.  # noqa: E501

        Indicates if the component is safe to remove  # noqa: E501

        :return: The safe_to_remove of this NodeDetails.  # noqa: E501
        :rtype: bool
        """
        return self._safe_to_remove

    @safe_to_remove.setter
    def safe_to_remove(self, safe_to_remove):
        """Sets the safe_to_remove of this NodeDetails.

        Indicates if the component is safe to remove  # noqa: E501

        :param safe_to_remove: The safe_to_remove of this NodeDetails.  # noqa: E501
        :type: bool
        """

        self._safe_to_remove = safe_to_remove

    @property
    def service_led(self):
        """Gets the service_led of this NodeDetails.  # noqa: E501

        LED state.  # noqa: E501

        :return: The service_led of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._service_led

    @service_led.setter
    def service_led(self, service_led):
        """Sets the service_led of this NodeDetails.

        LED state.  # noqa: E501

        :param service_led: The service_led of this NodeDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["LED_UNKNOWN", "LED_OFF", "LED_GREEN", "LED_GREEN_BLNK", "LED_AMBER", "LED_AMBER_BLNK", "LED_BLUE", "LED_BLUE_BLNK", "null"]  # noqa: E501
        if service_led not in allowed_values:
            raise ValueError(
                "Invalid value for `service_led` ({0}), must be one of {1}"  # noqa: E501
                .format(service_led, allowed_values)
            )

        self._service_led = service_led

    @property
    def state(self):
        """Gets the state of this NodeDetails.  # noqa: E501


        :return: The state of this NodeDetails.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeDetails.


        :param state: The state of this NodeDetails.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def state_description(self):
        """Gets the state_description of this NodeDetails.  # noqa: E501

        State of the resource  # noqa: E501

        :return: The state_description of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description):
        """Sets the state_description of this NodeDetails.

        State of the resource  # noqa: E501

        :param state_description: The state_description of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._state_description = state_description

    @property
    def system_id(self):
        """Gets the system_id of this NodeDetails.  # noqa: E501

        SystemId/Serial Number  of the array.  # noqa: E501

        :return: The system_id of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this NodeDetails.

        SystemId/Serial Number  of the array.  # noqa: E501

        :param system_id: The system_id of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_led(self):
        """Gets the system_led of this NodeDetails.  # noqa: E501


        :return: The system_led of this NodeDetails.  # noqa: E501
        :rtype: LED
        """
        return self._system_led

    @system_led.setter
    def system_led(self, system_led):
        """Sets the system_led of this NodeDetails.


        :param system_led: The system_led of this NodeDetails.  # noqa: E501
        :type: LED
        """

        self._system_led = system_led

    @property
    def type(self):
        """Gets the type of this NodeDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NodeDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeDetails.

        type  # noqa: E501

        :param type: The type of this NodeDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uptime(self):
        """Gets the uptime of this NodeDetails.  # noqa: E501


        :return: The uptime of this NodeDetails.  # noqa: E501
        :rtype: Nodeuptime
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this NodeDetails.


        :param uptime: The uptime of this NodeDetails.  # noqa: E501
        :type: Nodeuptime
        """

        self._uptime = uptime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
