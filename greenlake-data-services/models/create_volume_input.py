# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateVolumeInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comments': 'str',
        'count': 'int',
        'data_reduction': 'bool',
        'name': 'str',
        'size_mib': 'int',
        'snap_cpg': 'str',
        'snapshot_alloc_warning': 'int',
        'user_alloc_warning': 'int',
        'user_cpg': 'str'
    }

    attribute_map = {
        'comments': 'comments',
        'count': 'count',
        'data_reduction': 'dataReduction',
        'name': 'name',
        'size_mib': 'sizeMib',
        'snap_cpg': 'snapCpg',
        'snapshot_alloc_warning': 'snapshotAllocWarning',
        'user_alloc_warning': 'userAllocWarning',
        'user_cpg': 'userCpg'
    }

    def __init__(self, comments=None, count=None, data_reduction=None, name=None, size_mib=None, snap_cpg=None, snapshot_alloc_warning=None, user_alloc_warning=None, user_cpg=None):  # noqa: E501
        """CreateVolumeInput - a model defined in OpenAPI"""  # noqa: E501

        self._comments = None
        self._count = None
        self._data_reduction = None
        self._name = None
        self._size_mib = None
        self._snap_cpg = None
        self._snapshot_alloc_warning = None
        self._user_alloc_warning = None
        self._user_cpg = None
        self.discriminator = None

        if comments is not None:
            self.comments = comments
        if count is not None:
            self.count = count
        if data_reduction is not None:
            self.data_reduction = data_reduction
        self.name = name
        self.size_mib = size_mib
        if snap_cpg is not None:
            self.snap_cpg = snap_cpg
        if snapshot_alloc_warning is not None:
            self.snapshot_alloc_warning = snapshot_alloc_warning
        if user_alloc_warning is not None:
            self.user_alloc_warning = user_alloc_warning
        self.user_cpg = user_cpg

    @property
    def comments(self):
        """Gets the comments of this CreateVolumeInput.  # noqa: E501

        test  # noqa: E501

        :return: The comments of this CreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CreateVolumeInput.

        test  # noqa: E501

        :param comments: The comments of this CreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def count(self):
        """Gets the count of this CreateVolumeInput.  # noqa: E501

        Volumes count  # noqa: E501

        :return: The count of this CreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CreateVolumeInput.

        Volumes count  # noqa: E501

        :param count: The count of this CreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def data_reduction(self):
        """Gets the data_reduction of this CreateVolumeInput.  # noqa: E501

        Data Reduction  # noqa: E501

        :return: The data_reduction of this CreateVolumeInput.  # noqa: E501
        :rtype: bool
        """
        return self._data_reduction

    @data_reduction.setter
    def data_reduction(self, data_reduction):
        """Sets the data_reduction of this CreateVolumeInput.

        Data Reduction  # noqa: E501

        :param data_reduction: The data_reduction of this CreateVolumeInput.  # noqa: E501
        :type: bool
        """

        self._data_reduction = data_reduction

    @property
    def name(self):
        """Gets the name of this CreateVolumeInput.  # noqa: E501

        Name of the volume  # noqa: E501

        :return: The name of this CreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVolumeInput.

        Name of the volume  # noqa: E501

        :param name: The name of this CreateVolumeInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def size_mib(self):
        """Gets the size_mib of this CreateVolumeInput.  # noqa: E501

        Size in MB  # noqa: E501

        :return: The size_mib of this CreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._size_mib

    @size_mib.setter
    def size_mib(self, size_mib):
        """Sets the size_mib of this CreateVolumeInput.

        Size in MB  # noqa: E501

        :param size_mib: The size_mib of this CreateVolumeInput.  # noqa: E501
        :type: int
        """
        if size_mib is None:
            raise ValueError("Invalid value for `size_mib`, must not be `None`")  # noqa: E501

        self._size_mib = size_mib

    @property
    def snap_cpg(self):
        """Gets the snap_cpg of this CreateVolumeInput.  # noqa: E501

        Snap CPG  # noqa: E501

        :return: The snap_cpg of this CreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._snap_cpg

    @snap_cpg.setter
    def snap_cpg(self, snap_cpg):
        """Sets the snap_cpg of this CreateVolumeInput.

        Snap CPG  # noqa: E501

        :param snap_cpg: The snap_cpg of this CreateVolumeInput.  # noqa: E501
        :type: str
        """

        self._snap_cpg = snap_cpg

    @property
    def snapshot_alloc_warning(self):
        """Gets the snapshot_alloc_warning of this CreateVolumeInput.  # noqa: E501

        Snapshot Alloc Warning  # noqa: E501

        :return: The snapshot_alloc_warning of this CreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_alloc_warning

    @snapshot_alloc_warning.setter
    def snapshot_alloc_warning(self, snapshot_alloc_warning):
        """Sets the snapshot_alloc_warning of this CreateVolumeInput.

        Snapshot Alloc Warning  # noqa: E501

        :param snapshot_alloc_warning: The snapshot_alloc_warning of this CreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._snapshot_alloc_warning = snapshot_alloc_warning

    @property
    def user_alloc_warning(self):
        """Gets the user_alloc_warning of this CreateVolumeInput.  # noqa: E501

        User Alloc Warning  # noqa: E501

        :return: The user_alloc_warning of this CreateVolumeInput.  # noqa: E501
        :rtype: int
        """
        return self._user_alloc_warning

    @user_alloc_warning.setter
    def user_alloc_warning(self, user_alloc_warning):
        """Sets the user_alloc_warning of this CreateVolumeInput.

        User Alloc Warning  # noqa: E501

        :param user_alloc_warning: The user_alloc_warning of this CreateVolumeInput.  # noqa: E501
        :type: int
        """

        self._user_alloc_warning = user_alloc_warning

    @property
    def user_cpg(self):
        """Gets the user_cpg of this CreateVolumeInput.  # noqa: E501

        User CPG  # noqa: E501

        :return: The user_cpg of this CreateVolumeInput.  # noqa: E501
        :rtype: str
        """
        return self._user_cpg

    @user_cpg.setter
    def user_cpg(self, user_cpg):
        """Sets the user_cpg of this CreateVolumeInput.

        User CPG  # noqa: E501

        :param user_cpg: The user_cpg of this CreateVolumeInput.  # noqa: E501
        :type: str
        """
        if user_cpg is None:
            raise ValueError("Invalid value for `user_cpg`, must not be `None`")  # noqa: E501

        self._user_cpg = user_cpg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVolumeInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
