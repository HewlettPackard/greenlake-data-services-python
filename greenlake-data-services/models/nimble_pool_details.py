# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimblePoolDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_flash': 'bool',
        'array_count': 'int',
        'array_list': 'list[NimbleArrayDetail]',
        'associated_links': 'AssociatedLinks',
        'cache_capacity': 'int',
        'capacity': 'int',
        'clone_ratio': 'float',
        'compression_ratio': 'float',
        'console_uri': 'str',
        'creation_time': 'int',
        'customer_id': 'str',
        'data_reduction_ratio': 'float',
        'dedupe_all_volumes': 'bool',
        'dedupe_capable': 'bool',
        'dedupe_capacity_bytes': 'int',
        'dedupe_ratio': 'float',
        'dedupe_usage_bytes': 'int',
        'description': 'str',
        'folder_list': 'list[NimbleFolderSummary]',
        'free_space': 'int',
        'full_name': 'str',
        'generation': 'int',
        'is_default': 'bool',
        'last_modified': 'int',
        'pinnable_cache_capacity': 'int',
        'pinned_cache_capacity': 'int',
        'pinned_vol_list': 'list[NimblePinnedVolumeInfo]',
        'resource_uri': 'str',
        'savings': 'int',
        'savings_clone': 'int',
        'savings_compression': 'int',
        'savings_data_reduction': 'int',
        'savings_dedupe': 'int',
        'savings_ratio': 'float',
        'savings_vol_thin_provisioning': 'int',
        'search_name': 'str',
        'snap_count': 'int',
        'snapcoll_count': 'int',
        'type': 'str',
        'unassigned_array_list': 'list[NimbleArrSummary]',
        'unused_reserve': 'int',
        'usage': 'int',
        'usage_valid': 'bool',
        'vol_count': 'int',
        'vol_list': 'list[NimbleVolumeSummary]',
        'vol_thin_provisioning_ratio': 'float'
    }

    attribute_map = {
        'all_flash': 'all_flash',
        'array_count': 'array_count',
        'array_list': 'array_list',
        'associated_links': 'associated_links',
        'cache_capacity': 'cache_capacity',
        'capacity': 'capacity',
        'clone_ratio': 'clone_ratio',
        'compression_ratio': 'compression_ratio',
        'console_uri': 'consoleUri',
        'creation_time': 'creation_time',
        'customer_id': 'customerId',
        'data_reduction_ratio': 'data_reduction_ratio',
        'dedupe_all_volumes': 'dedupe_all_volumes',
        'dedupe_capable': 'dedupe_capable',
        'dedupe_capacity_bytes': 'dedupe_capacity_bytes',
        'dedupe_ratio': 'dedupe_ratio',
        'dedupe_usage_bytes': 'dedupe_usage_bytes',
        'description': 'description',
        'folder_list': 'folder_list',
        'free_space': 'free_space',
        'full_name': 'full_name',
        'generation': 'generation',
        'is_default': 'is_default',
        'last_modified': 'last_modified',
        'pinnable_cache_capacity': 'pinnable_cache_capacity',
        'pinned_cache_capacity': 'pinned_cache_capacity',
        'pinned_vol_list': 'pinned_vol_list',
        'resource_uri': 'resourceUri',
        'savings': 'savings',
        'savings_clone': 'savings_clone',
        'savings_compression': 'savings_compression',
        'savings_data_reduction': 'savings_data_reduction',
        'savings_dedupe': 'savings_dedupe',
        'savings_ratio': 'savings_ratio',
        'savings_vol_thin_provisioning': 'savings_vol_thin_provisioning',
        'search_name': 'search_name',
        'snap_count': 'snap_count',
        'snapcoll_count': 'snapcoll_count',
        'type': 'type',
        'unassigned_array_list': 'unassigned_array_list',
        'unused_reserve': 'unused_reserve',
        'usage': 'usage',
        'usage_valid': 'usage_valid',
        'vol_count': 'vol_count',
        'vol_list': 'vol_list',
        'vol_thin_provisioning_ratio': 'vol_thin_provisioning_ratio'
    }

    def __init__(self, all_flash=None, array_count=None, array_list=None, associated_links=None, cache_capacity=None, capacity=None, clone_ratio=None, compression_ratio=None, console_uri=None, creation_time=None, customer_id=None, data_reduction_ratio=None, dedupe_all_volumes=None, dedupe_capable=None, dedupe_capacity_bytes=None, dedupe_ratio=None, dedupe_usage_bytes=None, description=None, folder_list=None, free_space=None, full_name=None, generation=None, is_default=None, last_modified=None, pinnable_cache_capacity=None, pinned_cache_capacity=None, pinned_vol_list=None, resource_uri=None, savings=None, savings_clone=None, savings_compression=None, savings_data_reduction=None, savings_dedupe=None, savings_ratio=None, savings_vol_thin_provisioning=None, search_name=None, snap_count=None, snapcoll_count=None, type=None, unassigned_array_list=None, unused_reserve=None, usage=None, usage_valid=None, vol_count=None, vol_list=None, vol_thin_provisioning_ratio=None):  # noqa: E501
        """NimblePoolDetails - a model defined in OpenAPI"""  # noqa: E501

        self._all_flash = None
        self._array_count = None
        self._array_list = None
        self._associated_links = None
        self._cache_capacity = None
        self._capacity = None
        self._clone_ratio = None
        self._compression_ratio = None
        self._console_uri = None
        self._creation_time = None
        self._customer_id = None
        self._data_reduction_ratio = None
        self._dedupe_all_volumes = None
        self._dedupe_capable = None
        self._dedupe_capacity_bytes = None
        self._dedupe_ratio = None
        self._dedupe_usage_bytes = None
        self._description = None
        self._folder_list = None
        self._free_space = None
        self._full_name = None
        self._generation = None
        self._is_default = None
        self._last_modified = None
        self._pinnable_cache_capacity = None
        self._pinned_cache_capacity = None
        self._pinned_vol_list = None
        self._resource_uri = None
        self._savings = None
        self._savings_clone = None
        self._savings_compression = None
        self._savings_data_reduction = None
        self._savings_dedupe = None
        self._savings_ratio = None
        self._savings_vol_thin_provisioning = None
        self._search_name = None
        self._snap_count = None
        self._snapcoll_count = None
        self._type = None
        self._unassigned_array_list = None
        self._unused_reserve = None
        self._usage = None
        self._usage_valid = None
        self._vol_count = None
        self._vol_list = None
        self._vol_thin_provisioning_ratio = None
        self.discriminator = None

        if all_flash is not None:
            self.all_flash = all_flash
        if array_count is not None:
            self.array_count = array_count
        if array_list is not None:
            self.array_list = array_list
        if associated_links is not None:
            self.associated_links = associated_links
        if cache_capacity is not None:
            self.cache_capacity = cache_capacity
        if capacity is not None:
            self.capacity = capacity
        if clone_ratio is not None:
            self.clone_ratio = clone_ratio
        if compression_ratio is not None:
            self.compression_ratio = compression_ratio
        if console_uri is not None:
            self.console_uri = console_uri
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if data_reduction_ratio is not None:
            self.data_reduction_ratio = data_reduction_ratio
        if dedupe_all_volumes is not None:
            self.dedupe_all_volumes = dedupe_all_volumes
        if dedupe_capable is not None:
            self.dedupe_capable = dedupe_capable
        if dedupe_capacity_bytes is not None:
            self.dedupe_capacity_bytes = dedupe_capacity_bytes
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if dedupe_usage_bytes is not None:
            self.dedupe_usage_bytes = dedupe_usage_bytes
        if description is not None:
            self.description = description
        if folder_list is not None:
            self.folder_list = folder_list
        if free_space is not None:
            self.free_space = free_space
        if full_name is not None:
            self.full_name = full_name
        if generation is not None:
            self.generation = generation
        if is_default is not None:
            self.is_default = is_default
        if last_modified is not None:
            self.last_modified = last_modified
        if pinnable_cache_capacity is not None:
            self.pinnable_cache_capacity = pinnable_cache_capacity
        if pinned_cache_capacity is not None:
            self.pinned_cache_capacity = pinned_cache_capacity
        if pinned_vol_list is not None:
            self.pinned_vol_list = pinned_vol_list
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if savings is not None:
            self.savings = savings
        if savings_clone is not None:
            self.savings_clone = savings_clone
        if savings_compression is not None:
            self.savings_compression = savings_compression
        if savings_data_reduction is not None:
            self.savings_data_reduction = savings_data_reduction
        if savings_dedupe is not None:
            self.savings_dedupe = savings_dedupe
        if savings_ratio is not None:
            self.savings_ratio = savings_ratio
        if savings_vol_thin_provisioning is not None:
            self.savings_vol_thin_provisioning = savings_vol_thin_provisioning
        if search_name is not None:
            self.search_name = search_name
        if snap_count is not None:
            self.snap_count = snap_count
        if snapcoll_count is not None:
            self.snapcoll_count = snapcoll_count
        if type is not None:
            self.type = type
        if unassigned_array_list is not None:
            self.unassigned_array_list = unassigned_array_list
        if unused_reserve is not None:
            self.unused_reserve = unused_reserve
        if usage is not None:
            self.usage = usage
        if usage_valid is not None:
            self.usage_valid = usage_valid
        if vol_count is not None:
            self.vol_count = vol_count
        if vol_list is not None:
            self.vol_list = vol_list
        if vol_thin_provisioning_ratio is not None:
            self.vol_thin_provisioning_ratio = vol_thin_provisioning_ratio

    @property
    def all_flash(self):
        """Gets the all_flash of this NimblePoolDetails.  # noqa: E501

        Indicate whether the pool is an all_flash pool.  # noqa: E501

        :return: The all_flash of this NimblePoolDetails.  # noqa: E501
        :rtype: bool
        """
        return self._all_flash

    @all_flash.setter
    def all_flash(self, all_flash):
        """Sets the all_flash of this NimblePoolDetails.

        Indicate whether the pool is an all_flash pool.  # noqa: E501

        :param all_flash: The all_flash of this NimblePoolDetails.  # noqa: E501
        :type: bool
        """

        self._all_flash = all_flash

    @property
    def array_count(self):
        """Gets the array_count of this NimblePoolDetails.  # noqa: E501

        Number of arrays in the pool.  # noqa: E501

        :return: The array_count of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._array_count

    @array_count.setter
    def array_count(self, array_count):
        """Sets the array_count of this NimblePoolDetails.

        Number of arrays in the pool.  # noqa: E501

        :param array_count: The array_count of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._array_count = array_count

    @property
    def array_list(self):
        """Gets the array_list of this NimblePoolDetails.  # noqa: E501

        List of arrays in the pool with detailed information. When create/update array list, only arrays' id is required.  # noqa: E501

        :return: The array_list of this NimblePoolDetails.  # noqa: E501
        :rtype: list[NimbleArrayDetail]
        """
        return self._array_list

    @array_list.setter
    def array_list(self, array_list):
        """Sets the array_list of this NimblePoolDetails.

        List of arrays in the pool with detailed information. When create/update array list, only arrays' id is required.  # noqa: E501

        :param array_list: The array_list of this NimblePoolDetails.  # noqa: E501
        :type: list[NimbleArrayDetail]
        """

        self._array_list = array_list

    @property
    def associated_links(self):
        """Gets the associated_links of this NimblePoolDetails.  # noqa: E501


        :return: The associated_links of this NimblePoolDetails.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimblePoolDetails.


        :param associated_links: The associated_links of this NimblePoolDetails.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def cache_capacity(self):
        """Gets the cache_capacity of this NimblePoolDetails.  # noqa: E501

        Total usable cache capacity of the pool in bytes.  # noqa: E501

        :return: The cache_capacity of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._cache_capacity

    @cache_capacity.setter
    def cache_capacity(self, cache_capacity):
        """Sets the cache_capacity of this NimblePoolDetails.

        Total usable cache capacity of the pool in bytes.  # noqa: E501

        :param cache_capacity: The cache_capacity of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._cache_capacity = cache_capacity

    @property
    def capacity(self):
        """Gets the capacity of this NimblePoolDetails.  # noqa: E501

        Total storage space of the pool in bytes.  # noqa: E501

        :return: The capacity of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this NimblePoolDetails.

        Total storage space of the pool in bytes.  # noqa: E501

        :param capacity: The capacity of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def clone_ratio(self):
        """Gets the clone_ratio of this NimblePoolDetails.  # noqa: E501

        Clone savings for the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The clone_ratio of this NimblePoolDetails.  # noqa: E501
        :rtype: float
        """
        return self._clone_ratio

    @clone_ratio.setter
    def clone_ratio(self, clone_ratio):
        """Sets the clone_ratio of this NimblePoolDetails.

        Clone savings for the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param clone_ratio: The clone_ratio of this NimblePoolDetails.  # noqa: E501
        :type: float
        """

        self._clone_ratio = clone_ratio

    @property
    def compression_ratio(self):
        """Gets the compression_ratio of this NimblePoolDetails.  # noqa: E501

        Compression savings for the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The compression_ratio of this NimblePoolDetails.  # noqa: E501
        :rtype: float
        """
        return self._compression_ratio

    @compression_ratio.setter
    def compression_ratio(self, compression_ratio):
        """Sets the compression_ratio of this NimblePoolDetails.

        Compression savings for the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param compression_ratio: The compression_ratio of this NimblePoolDetails.  # noqa: E501
        :type: float
        """

        self._compression_ratio = compression_ratio

    @property
    def console_uri(self):
        """Gets the console_uri of this NimblePoolDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimblePoolDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimblePoolDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimblePoolDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def creation_time(self):
        """Gets the creation_time of this NimblePoolDetails.  # noqa: E501

        Time when this pool was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The creation_time of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimblePoolDetails.

        Time when this pool was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param creation_time: The creation_time of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this NimblePoolDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimblePoolDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimblePoolDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimblePoolDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def data_reduction_ratio(self):
        """Gets the data_reduction_ratio of this NimblePoolDetails.  # noqa: E501

        Space usage savings in the pool expressed as ratio that does not include thin-provisioning savings. Fraction expressed as floating point number.  # noqa: E501

        :return: The data_reduction_ratio of this NimblePoolDetails.  # noqa: E501
        :rtype: float
        """
        return self._data_reduction_ratio

    @data_reduction_ratio.setter
    def data_reduction_ratio(self, data_reduction_ratio):
        """Sets the data_reduction_ratio of this NimblePoolDetails.

        Space usage savings in the pool expressed as ratio that does not include thin-provisioning savings. Fraction expressed as floating point number.  # noqa: E501

        :param data_reduction_ratio: The data_reduction_ratio of this NimblePoolDetails.  # noqa: E501
        :type: float
        """

        self._data_reduction_ratio = data_reduction_ratio

    @property
    def dedupe_all_volumes(self):
        """Gets the dedupe_all_volumes of this NimblePoolDetails.  # noqa: E501

        Indicates if dedupe is enabled by default for new volumes on this pool.  # noqa: E501

        :return: The dedupe_all_volumes of this NimblePoolDetails.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_all_volumes

    @dedupe_all_volumes.setter
    def dedupe_all_volumes(self, dedupe_all_volumes):
        """Sets the dedupe_all_volumes of this NimblePoolDetails.

        Indicates if dedupe is enabled by default for new volumes on this pool.  # noqa: E501

        :param dedupe_all_volumes: The dedupe_all_volumes of this NimblePoolDetails.  # noqa: E501
        :type: bool
        """

        self._dedupe_all_volumes = dedupe_all_volumes

    @property
    def dedupe_capable(self):
        """Gets the dedupe_capable of this NimblePoolDetails.  # noqa: E501

        Indicates whether the pool is capable of hosting deduped volumes.  # noqa: E501

        :return: The dedupe_capable of this NimblePoolDetails.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_capable

    @dedupe_capable.setter
    def dedupe_capable(self, dedupe_capable):
        """Sets the dedupe_capable of this NimblePoolDetails.

        Indicates whether the pool is capable of hosting deduped volumes.  # noqa: E501

        :param dedupe_capable: The dedupe_capable of this NimblePoolDetails.  # noqa: E501
        :type: bool
        """

        self._dedupe_capable = dedupe_capable

    @property
    def dedupe_capacity_bytes(self):
        """Gets the dedupe_capacity_bytes of this NimblePoolDetails.  # noqa: E501

        The dedupe capacity of a hybrid pool. Does not apply to all-flash pools.  # noqa: E501

        :return: The dedupe_capacity_bytes of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._dedupe_capacity_bytes

    @dedupe_capacity_bytes.setter
    def dedupe_capacity_bytes(self, dedupe_capacity_bytes):
        """Sets the dedupe_capacity_bytes of this NimblePoolDetails.

        The dedupe capacity of a hybrid pool. Does not apply to all-flash pools.  # noqa: E501

        :param dedupe_capacity_bytes: The dedupe_capacity_bytes of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._dedupe_capacity_bytes = dedupe_capacity_bytes

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this NimblePoolDetails.  # noqa: E501

        Dedupe savings for the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The dedupe_ratio of this NimblePoolDetails.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this NimblePoolDetails.

        Dedupe savings for the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this NimblePoolDetails.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def dedupe_usage_bytes(self):
        """Gets the dedupe_usage_bytes of this NimblePoolDetails.  # noqa: E501

        The dedupe usage of a hybrid pool. Does not apply to all-flash pools.  # noqa: E501

        :return: The dedupe_usage_bytes of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._dedupe_usage_bytes

    @dedupe_usage_bytes.setter
    def dedupe_usage_bytes(self, dedupe_usage_bytes):
        """Sets the dedupe_usage_bytes of this NimblePoolDetails.

        The dedupe usage of a hybrid pool. Does not apply to all-flash pools.  # noqa: E501

        :param dedupe_usage_bytes: The dedupe_usage_bytes of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._dedupe_usage_bytes = dedupe_usage_bytes

    @property
    def description(self):
        """Gets the description of this NimblePoolDetails.  # noqa: E501

        Text description of pool. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this NimblePoolDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimblePoolDetails.

        Text description of pool. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this NimblePoolDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def folder_list(self):
        """Gets the folder_list of this NimblePoolDetails.  # noqa: E501

        The list of fully qualified names of folders in the pool.  # noqa: E501

        :return: The folder_list of this NimblePoolDetails.  # noqa: E501
        :rtype: list[NimbleFolderSummary]
        """
        return self._folder_list

    @folder_list.setter
    def folder_list(self, folder_list):
        """Sets the folder_list of this NimblePoolDetails.

        The list of fully qualified names of folders in the pool.  # noqa: E501

        :param folder_list: The folder_list of this NimblePoolDetails.  # noqa: E501
        :type: list[NimbleFolderSummary]
        """

        self._folder_list = folder_list

    @property
    def free_space(self):
        """Gets the free_space of this NimblePoolDetails.  # noqa: E501

        Free space of the pool in bytes.  # noqa: E501

        :return: The free_space of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._free_space

    @free_space.setter
    def free_space(self, free_space):
        """Sets the free_space of this NimblePoolDetails.

        Free space of the pool in bytes.  # noqa: E501

        :param free_space: The free_space of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._free_space = free_space

    @property
    def full_name(self):
        """Gets the full_name of this NimblePoolDetails.  # noqa: E501

        Fully qualified name of pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The full_name of this NimblePoolDetails.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this NimblePoolDetails.

        Fully qualified name of pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param full_name: The full_name of this NimblePoolDetails.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def generation(self):
        """Gets the generation of this NimblePoolDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimblePoolDetails.

        generation  # noqa: E501

        :param generation: The generation of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def is_default(self):
        """Gets the is_default of this NimblePoolDetails.  # noqa: E501

        Indicates if this is the default pool.  # noqa: E501

        :return: The is_default of this NimblePoolDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this NimblePoolDetails.

        Indicates if this is the default pool.  # noqa: E501

        :param is_default: The is_default of this NimblePoolDetails.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def last_modified(self):
        """Gets the last_modified of this NimblePoolDetails.  # noqa: E501

        Time when this pool was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The last_modified of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimblePoolDetails.

        Time when this pool was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param last_modified: The last_modified of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def pinnable_cache_capacity(self):
        """Gets the pinnable_cache_capacity of this NimblePoolDetails.  # noqa: E501

        Total pinnable cache capacity of the pool in bytes.  # noqa: E501

        :return: The pinnable_cache_capacity of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._pinnable_cache_capacity

    @pinnable_cache_capacity.setter
    def pinnable_cache_capacity(self, pinnable_cache_capacity):
        """Sets the pinnable_cache_capacity of this NimblePoolDetails.

        Total pinnable cache capacity of the pool in bytes.  # noqa: E501

        :param pinnable_cache_capacity: The pinnable_cache_capacity of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._pinnable_cache_capacity = pinnable_cache_capacity

    @property
    def pinned_cache_capacity(self):
        """Gets the pinned_cache_capacity of this NimblePoolDetails.  # noqa: E501

        Total pinned cache capacity of the pool in bytes.  # noqa: E501

        :return: The pinned_cache_capacity of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._pinned_cache_capacity

    @pinned_cache_capacity.setter
    def pinned_cache_capacity(self, pinned_cache_capacity):
        """Sets the pinned_cache_capacity of this NimblePoolDetails.

        Total pinned cache capacity of the pool in bytes.  # noqa: E501

        :param pinned_cache_capacity: The pinned_cache_capacity of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._pinned_cache_capacity = pinned_cache_capacity

    @property
    def pinned_vol_list(self):
        """Gets the pinned_vol_list of this NimblePoolDetails.  # noqa: E501

        The list of pinned volumes in the pool.  # noqa: E501

        :return: The pinned_vol_list of this NimblePoolDetails.  # noqa: E501
        :rtype: list[NimblePinnedVolumeInfo]
        """
        return self._pinned_vol_list

    @pinned_vol_list.setter
    def pinned_vol_list(self, pinned_vol_list):
        """Sets the pinned_vol_list of this NimblePoolDetails.

        The list of pinned volumes in the pool.  # noqa: E501

        :param pinned_vol_list: The pinned_vol_list of this NimblePoolDetails.  # noqa: E501
        :type: list[NimblePinnedVolumeInfo]
        """

        self._pinned_vol_list = pinned_vol_list

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimblePoolDetails.  # noqa: E501


        :return: The resource_uri of this NimblePoolDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimblePoolDetails.


        :param resource_uri: The resource_uri of this NimblePoolDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def savings(self):
        """Gets the savings of this NimblePoolDetails.  # noqa: E501

        Overall space usage savings in the pool.  # noqa: E501

        :return: The savings of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this NimblePoolDetails.

        Overall space usage savings in the pool.  # noqa: E501

        :param savings: The savings of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._savings = savings

    @property
    def savings_clone(self):
        """Gets the savings_clone of this NimblePoolDetails.  # noqa: E501

        Space usage savings in the pool due to cloning of volumes.  # noqa: E501

        :return: The savings_clone of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._savings_clone

    @savings_clone.setter
    def savings_clone(self, savings_clone):
        """Sets the savings_clone of this NimblePoolDetails.

        Space usage savings in the pool due to cloning of volumes.  # noqa: E501

        :param savings_clone: The savings_clone of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._savings_clone = savings_clone

    @property
    def savings_compression(self):
        """Gets the savings_compression of this NimblePoolDetails.  # noqa: E501

        Space usage savings in the pool due to compression.  # noqa: E501

        :return: The savings_compression of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._savings_compression

    @savings_compression.setter
    def savings_compression(self, savings_compression):
        """Sets the savings_compression of this NimblePoolDetails.

        Space usage savings in the pool due to compression.  # noqa: E501

        :param savings_compression: The savings_compression of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._savings_compression = savings_compression

    @property
    def savings_data_reduction(self):
        """Gets the savings_data_reduction of this NimblePoolDetails.  # noqa: E501

        Space usage savings in the pool that does not include thin-provisioning savings.  # noqa: E501

        :return: The savings_data_reduction of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._savings_data_reduction

    @savings_data_reduction.setter
    def savings_data_reduction(self, savings_data_reduction):
        """Sets the savings_data_reduction of this NimblePoolDetails.

        Space usage savings in the pool that does not include thin-provisioning savings.  # noqa: E501

        :param savings_data_reduction: The savings_data_reduction of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._savings_data_reduction = savings_data_reduction

    @property
    def savings_dedupe(self):
        """Gets the savings_dedupe of this NimblePoolDetails.  # noqa: E501

        Space usage savings in the pool due to deduplication.  # noqa: E501

        :return: The savings_dedupe of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._savings_dedupe

    @savings_dedupe.setter
    def savings_dedupe(self, savings_dedupe):
        """Sets the savings_dedupe of this NimblePoolDetails.

        Space usage savings in the pool due to deduplication.  # noqa: E501

        :param savings_dedupe: The savings_dedupe of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._savings_dedupe = savings_dedupe

    @property
    def savings_ratio(self):
        """Gets the savings_ratio of this NimblePoolDetails.  # noqa: E501

        Overall space usage savings in the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The savings_ratio of this NimblePoolDetails.  # noqa: E501
        :rtype: float
        """
        return self._savings_ratio

    @savings_ratio.setter
    def savings_ratio(self, savings_ratio):
        """Sets the savings_ratio of this NimblePoolDetails.

        Overall space usage savings in the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param savings_ratio: The savings_ratio of this NimblePoolDetails.  # noqa: E501
        :type: float
        """

        self._savings_ratio = savings_ratio

    @property
    def savings_vol_thin_provisioning(self):
        """Gets the savings_vol_thin_provisioning of this NimblePoolDetails.  # noqa: E501

        Space usage savings in the pool due to thin provisioning of volumes.  # noqa: E501

        :return: The savings_vol_thin_provisioning of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._savings_vol_thin_provisioning

    @savings_vol_thin_provisioning.setter
    def savings_vol_thin_provisioning(self, savings_vol_thin_provisioning):
        """Sets the savings_vol_thin_provisioning of this NimblePoolDetails.

        Space usage savings in the pool due to thin provisioning of volumes.  # noqa: E501

        :param savings_vol_thin_provisioning: The savings_vol_thin_provisioning of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._savings_vol_thin_provisioning = savings_vol_thin_provisioning

    @property
    def search_name(self):
        """Gets the search_name of this NimblePoolDetails.  # noqa: E501

        Name of pool used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :return: The search_name of this NimblePoolDetails.  # noqa: E501
        :rtype: str
        """
        return self._search_name

    @search_name.setter
    def search_name(self, search_name):
        """Sets the search_name of this NimblePoolDetails.

        Name of pool used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :param search_name: The search_name of this NimblePoolDetails.  # noqa: E501
        :type: str
        """

        self._search_name = search_name

    @property
    def snap_count(self):
        """Gets the snap_count of this NimblePoolDetails.  # noqa: E501

        Snapshot count.  # noqa: E501

        :return: The snap_count of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._snap_count

    @snap_count.setter
    def snap_count(self, snap_count):
        """Sets the snap_count of this NimblePoolDetails.

        Snapshot count.  # noqa: E501

        :param snap_count: The snap_count of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._snap_count = snap_count

    @property
    def snapcoll_count(self):
        """Gets the snapcoll_count of this NimblePoolDetails.  # noqa: E501

        Snapshot collection count.  # noqa: E501

        :return: The snapcoll_count of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._snapcoll_count

    @snapcoll_count.setter
    def snapcoll_count(self, snapcoll_count):
        """Sets the snapcoll_count of this NimblePoolDetails.

        Snapshot collection count.  # noqa: E501

        :param snapcoll_count: The snapcoll_count of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._snapcoll_count = snapcoll_count

    @property
    def type(self):
        """Gets the type of this NimblePoolDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimblePoolDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimblePoolDetails.

        type  # noqa: E501

        :param type: The type of this NimblePoolDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unassigned_array_list(self):
        """Gets the unassigned_array_list of this NimblePoolDetails.  # noqa: E501

        List of arrays being unassigned from the pool.  # noqa: E501

        :return: The unassigned_array_list of this NimblePoolDetails.  # noqa: E501
        :rtype: list[NimbleArrSummary]
        """
        return self._unassigned_array_list

    @unassigned_array_list.setter
    def unassigned_array_list(self, unassigned_array_list):
        """Sets the unassigned_array_list of this NimblePoolDetails.

        List of arrays being unassigned from the pool.  # noqa: E501

        :param unassigned_array_list: The unassigned_array_list of this NimblePoolDetails.  # noqa: E501
        :type: list[NimbleArrSummary]
        """

        self._unassigned_array_list = unassigned_array_list

    @property
    def unused_reserve(self):
        """Gets the unused_reserve of this NimblePoolDetails.  # noqa: E501

        Unused reserve space of the pool in bytes.  # noqa: E501

        :return: The unused_reserve of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._unused_reserve

    @unused_reserve.setter
    def unused_reserve(self, unused_reserve):
        """Sets the unused_reserve of this NimblePoolDetails.

        Unused reserve space of the pool in bytes.  # noqa: E501

        :param unused_reserve: The unused_reserve of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._unused_reserve = unused_reserve

    @property
    def usage(self):
        """Gets the usage of this NimblePoolDetails.  # noqa: E501

        Used space of the pool in bytes.  # noqa: E501

        :return: The usage of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this NimblePoolDetails.

        Used space of the pool in bytes.  # noqa: E501

        :param usage: The usage of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._usage = usage

    @property
    def usage_valid(self):
        """Gets the usage_valid of this NimblePoolDetails.  # noqa: E501

        Identifier of pool. A 42 digit hexadecimal number.  # noqa: E501

        :return: The usage_valid of this NimblePoolDetails.  # noqa: E501
        :rtype: bool
        """
        return self._usage_valid

    @usage_valid.setter
    def usage_valid(self, usage_valid):
        """Sets the usage_valid of this NimblePoolDetails.

        Identifier of pool. A 42 digit hexadecimal number.  # noqa: E501

        :param usage_valid: The usage_valid of this NimblePoolDetails.  # noqa: E501
        :type: bool
        """

        self._usage_valid = usage_valid

    @property
    def vol_count(self):
        """Gets the vol_count of this NimblePoolDetails.  # noqa: E501

        Number of volumes assigned to the pool.  # noqa: E501

        :return: The vol_count of this NimblePoolDetails.  # noqa: E501
        :rtype: int
        """
        return self._vol_count

    @vol_count.setter
    def vol_count(self, vol_count):
        """Sets the vol_count of this NimblePoolDetails.

        Number of volumes assigned to the pool.  # noqa: E501

        :param vol_count: The vol_count of this NimblePoolDetails.  # noqa: E501
        :type: int
        """

        self._vol_count = vol_count

    @property
    def vol_list(self):
        """Gets the vol_list of this NimblePoolDetails.  # noqa: E501

        The list of volumes in the pool.  # noqa: E501

        :return: The vol_list of this NimblePoolDetails.  # noqa: E501
        :rtype: list[NimbleVolumeSummary]
        """
        return self._vol_list

    @vol_list.setter
    def vol_list(self, vol_list):
        """Sets the vol_list of this NimblePoolDetails.

        The list of volumes in the pool.  # noqa: E501

        :param vol_list: The vol_list of this NimblePoolDetails.  # noqa: E501
        :type: list[NimbleVolumeSummary]
        """

        self._vol_list = vol_list

    @property
    def vol_thin_provisioning_ratio(self):
        """Gets the vol_thin_provisioning_ratio of this NimblePoolDetails.  # noqa: E501

        Thin provisioning savings for volumes in the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :return: The vol_thin_provisioning_ratio of this NimblePoolDetails.  # noqa: E501
        :rtype: float
        """
        return self._vol_thin_provisioning_ratio

    @vol_thin_provisioning_ratio.setter
    def vol_thin_provisioning_ratio(self, vol_thin_provisioning_ratio):
        """Sets the vol_thin_provisioning_ratio of this NimblePoolDetails.

        Thin provisioning savings for volumes in the pool expressed as ratio. Fraction expressed as floating point number.  # noqa: E501

        :param vol_thin_provisioning_ratio: The vol_thin_provisioning_ratio of this NimblePoolDetails.  # noqa: E501
        :type: float
        """

        self._vol_thin_provisioning_ratio = vol_thin_provisioning_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimblePoolDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
