# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditApplicationServer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'hostname': 'str',
        'metadata': 'list[AppKeyValue]',
        'name': 'str',
        'port': 'int',
        'server_type': 'str',
        'username': 'str'
    }

    attribute_map = {
        'description': 'description',
        'hostname': 'hostname',
        'metadata': 'metadata',
        'name': 'name',
        'port': 'port',
        'server_type': 'server_type',
        'username': 'username'
    }

    def __init__(self, description=None, hostname=None, metadata=None, name=None, port=None, server_type=None, username=None):  # noqa: E501
        """EditApplicationServer - a model defined in OpenAPI"""  # noqa: E501

        self._description = None
        self._hostname = None
        self._metadata = None
        self._name = None
        self._port = None
        self._server_type = None
        self._username = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if hostname is not None:
            self.hostname = hostname
        if metadata is not None:
            self.metadata = metadata
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if server_type is not None:
            self.server_type = server_type
        if username is not None:
            self.username = username

    @property
    def description(self):
        """Gets the description of this EditApplicationServer.  # noqa: E501

        Text description of application server. String of up to 255 printable ASCII characters. Defaults to the empty string.  # noqa: E501

        :return: The description of this EditApplicationServer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditApplicationServer.

        Text description of application server. String of up to 255 printable ASCII characters. Defaults to the empty string.  # noqa: E501

        :param description: The description of this EditApplicationServer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hostname(self):
        """Gets the hostname of this EditApplicationServer.  # noqa: E501

        Application server hostname. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; Hypen and  colon are allowed after the first and before the last character.  # noqa: E501

        :return: The hostname of this EditApplicationServer.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this EditApplicationServer.

        Application server hostname. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; Hypen and  colon are allowed after the first and before the last character.  # noqa: E501

        :param hostname: The hostname of this EditApplicationServer.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def metadata(self):
        """Gets the metadata of this EditApplicationServer.  # noqa: E501

        Key-value pairs that augment an application server's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.  # noqa: E501

        :return: The metadata of this EditApplicationServer.  # noqa: E501
        :rtype: list[AppKeyValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this EditApplicationServer.

        Key-value pairs that augment an application server's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.  # noqa: E501

        :param metadata: The metadata of this EditApplicationServer.  # noqa: E501
        :type: list[AppKeyValue]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this EditApplicationServer.  # noqa: E501

        Name of the volume. String of up to 64 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.  # noqa: E501

        :return: The name of this EditApplicationServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditApplicationServer.

        Name of the volume. String of up to 64 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.  # noqa: E501

        :param name: The name of this EditApplicationServer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this EditApplicationServer.  # noqa: E501

        Application server port number. Positive integer value up to 65535 representing TCP/IP port. Defaults to 65536.  # noqa: E501

        :return: The port of this EditApplicationServer.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EditApplicationServer.

        Application server port number. Positive integer value up to 65535 representing TCP/IP port. Defaults to 65536.  # noqa: E501

        :param port: The port of this EditApplicationServer.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def server_type(self):
        """Gets the server_type of this EditApplicationServer.  # noqa: E501

        Application server type. Defaults to 'vmware'. Possible values are 'vss' and 'vmware'.  # noqa: E501

        :return: The server_type of this EditApplicationServer.  # noqa: E501
        :rtype: str
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this EditApplicationServer.

        Application server type. Defaults to 'vmware'. Possible values are 'vss' and 'vmware'.  # noqa: E501

        :param server_type: The server_type of this EditApplicationServer.  # noqa: E501
        :type: str
        """

        self._server_type = server_type

    @property
    def username(self):
        """Gets the username of this EditApplicationServer.  # noqa: E501

        Application server username. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The username of this EditApplicationServer.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EditApplicationServer.

        Application server username. String of up to 255 printable ASCII characters.  # noqa: E501

        :param username: The username of this EditApplicationServer.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditApplicationServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
