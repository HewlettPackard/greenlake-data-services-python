# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PerformanceHeadroom(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available_headroom': 'str',
        'utilization': 'float'
    }

    attribute_map = {
        'available_headroom': 'availableHeadroom',
        'utilization': 'utilization'
    }

    def __init__(self, available_headroom=None, utilization=None):  # noqa: E501
        """PerformanceHeadroom - a model defined in OpenAPI"""  # noqa: E501

        self._available_headroom = None
        self._utilization = None
        self.discriminator = None

        if available_headroom is not None:
            self.available_headroom = available_headroom
        if utilization is not None:
            self.utilization = utilization

    @property
    def available_headroom(self):
        """Gets the available_headroom of this PerformanceHeadroom.  # noqa: E501

        Available Headroom on the systems (High Medium or Low)  # noqa: E501

        :return: The available_headroom of this PerformanceHeadroom.  # noqa: E501
        :rtype: str
        """
        return self._available_headroom

    @available_headroom.setter
    def available_headroom(self, available_headroom):
        """Sets the available_headroom of this PerformanceHeadroom.

        Available Headroom on the systems (High Medium or Low)  # noqa: E501

        :param available_headroom: The available_headroom of this PerformanceHeadroom.  # noqa: E501
        :type: str
        """

        self._available_headroom = available_headroom

    @property
    def utilization(self):
        """Gets the utilization of this PerformanceHeadroom.  # noqa: E501

        Utilization in percentage  # noqa: E501

        :return: The utilization of this PerformanceHeadroom.  # noqa: E501
        :rtype: float
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this PerformanceHeadroom.

        Utilization in percentage  # noqa: E501

        :param utilization: The utilization of this PerformanceHeadroom.  # noqa: E501
        :type: float
        """

        self._utilization = utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceHeadroom):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
