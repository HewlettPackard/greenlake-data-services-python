# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditAlertSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alert_from_email_addr': 'str',
        'alert_min_level': 'str',
        'alert_to_email_addrs': 'str',
        'send_alert_to_support': 'bool'
    }

    attribute_map = {
        'alert_from_email_addr': 'alert_from_email_addr',
        'alert_min_level': 'alert_min_level',
        'alert_to_email_addrs': 'alert_to_email_addrs',
        'send_alert_to_support': 'send_alert_to_support'
    }

    def __init__(self, alert_from_email_addr=None, alert_min_level=None, alert_to_email_addrs=None, send_alert_to_support=None):  # noqa: E501
        """EditAlertSettings - a model defined in OpenAPI"""  # noqa: E501

        self._alert_from_email_addr = None
        self._alert_min_level = None
        self._alert_to_email_addrs = None
        self._send_alert_to_support = None
        self.discriminator = None

        if alert_from_email_addr is not None:
            self.alert_from_email_addr = alert_from_email_addr
        if alert_min_level is not None:
            self.alert_min_level = alert_min_level
        if alert_to_email_addrs is not None:
            self.alert_to_email_addrs = alert_to_email_addrs
        if send_alert_to_support is not None:
            self.send_alert_to_support = send_alert_to_support

    @property
    def alert_from_email_addr(self):
        """Gets the alert_from_email_addr of this EditAlertSettings.  # noqa: E501

        From email address to use while sending emails. Case insensitive email address.  # noqa: E501

        :return: The alert_from_email_addr of this EditAlertSettings.  # noqa: E501
        :rtype: str
        """
        return self._alert_from_email_addr

    @alert_from_email_addr.setter
    def alert_from_email_addr(self, alert_from_email_addr):
        """Sets the alert_from_email_addr of this EditAlertSettings.

        From email address to use while sending emails. Case insensitive email address.  # noqa: E501

        :param alert_from_email_addr: The alert_from_email_addr of this EditAlertSettings.  # noqa: E501
        :type: str
        """

        self._alert_from_email_addr = alert_from_email_addr

    @property
    def alert_min_level(self):
        """Gets the alert_min_level of this EditAlertSettings.  # noqa: E501

        Minimum level of alert to be notified. Possible values: 'info', 'notice', 'warning', 'critical'.  # noqa: E501

        :return: The alert_min_level of this EditAlertSettings.  # noqa: E501
        :rtype: str
        """
        return self._alert_min_level

    @alert_min_level.setter
    def alert_min_level(self, alert_min_level):
        """Sets the alert_min_level of this EditAlertSettings.

        Minimum level of alert to be notified. Possible values: 'info', 'notice', 'warning', 'critical'.  # noqa: E501

        :param alert_min_level: The alert_min_level of this EditAlertSettings.  # noqa: E501
        :type: str
        """

        self._alert_min_level = alert_min_level

    @property
    def alert_to_email_addrs(self):
        """Gets the alert_to_email_addrs of this EditAlertSettings.  # noqa: E501

        Comma-separated list of email addresss to receive emails.  # noqa: E501

        :return: The alert_to_email_addrs of this EditAlertSettings.  # noqa: E501
        :rtype: str
        """
        return self._alert_to_email_addrs

    @alert_to_email_addrs.setter
    def alert_to_email_addrs(self, alert_to_email_addrs):
        """Sets the alert_to_email_addrs of this EditAlertSettings.

        Comma-separated list of email addresss to receive emails.  # noqa: E501

        :param alert_to_email_addrs: The alert_to_email_addrs of this EditAlertSettings.  # noqa: E501
        :type: str
        """

        self._alert_to_email_addrs = alert_to_email_addrs

    @property
    def send_alert_to_support(self):
        """Gets the send_alert_to_support of this EditAlertSettings.  # noqa: E501

        Enable or disable alert to support  # noqa: E501

        :return: The send_alert_to_support of this EditAlertSettings.  # noqa: E501
        :rtype: bool
        """
        return self._send_alert_to_support

    @send_alert_to_support.setter
    def send_alert_to_support(self, send_alert_to_support):
        """Sets the send_alert_to_support of this EditAlertSettings.

        Enable or disable alert to support  # noqa: E501

        :param send_alert_to_support: The send_alert_to_support of this EditAlertSettings.  # noqa: E501
        :type: bool
        """

        self._send_alert_to_support = send_alert_to_support

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditAlertSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
