# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNIC(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_ip': 'str',
        'name': 'str',
        'subnet_label': 'str',
        'tagged': 'bool'
    }

    attribute_map = {
        'data_ip': 'data_ip',
        'name': 'name',
        'subnet_label': 'subnet_label',
        'tagged': 'tagged'
    }

    def __init__(self, data_ip=None, name=None, subnet_label=None, tagged=None):  # noqa: E501
        """NimbleNIC - a model defined in OpenAPI"""  # noqa: E501

        self._data_ip = None
        self._name = None
        self._subnet_label = None
        self._tagged = None
        self.discriminator = None

        if data_ip is not None:
            self.data_ip = data_ip
        if name is not None:
            self.name = name
        if subnet_label is not None:
            self.subnet_label = subnet_label
        if tagged is not None:
            self.tagged = tagged

    @property
    def data_ip(self):
        """Gets the data_ip of this NimbleNIC.  # noqa: E501

        Data IP address.  # noqa: E501

        :return: The data_ip of this NimbleNIC.  # noqa: E501
        :rtype: str
        """
        return self._data_ip

    @data_ip.setter
    def data_ip(self, data_ip):
        """Sets the data_ip of this NimbleNIC.

        Data IP address.  # noqa: E501

        :param data_ip: The data_ip of this NimbleNIC.  # noqa: E501
        :type: str
        """

        self._data_ip = data_ip

    @property
    def name(self):
        """Gets the name of this NimbleNIC.  # noqa: E501

        Name of NIC.  # noqa: E501

        :return: The name of this NimbleNIC.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleNIC.

        Name of NIC.  # noqa: E501

        :param name: The name of this NimbleNIC.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def subnet_label(self):
        """Gets the subnet_label of this NimbleNIC.  # noqa: E501

        Subnet label for this NIC.  # noqa: E501

        :return: The subnet_label of this NimbleNIC.  # noqa: E501
        :rtype: str
        """
        return self._subnet_label

    @subnet_label.setter
    def subnet_label(self, subnet_label):
        """Sets the subnet_label of this NimbleNIC.

        Subnet label for this NIC.  # noqa: E501

        :param subnet_label: The subnet_label of this NimbleNIC.  # noqa: E501
        :type: str
        """

        self._subnet_label = subnet_label

    @property
    def tagged(self):
        """Gets the tagged of this NimbleNIC.  # noqa: E501

        Identify whether the NIC is tagged.  # noqa: E501

        :return: The tagged of this NimbleNIC.  # noqa: E501
        :rtype: bool
        """
        return self._tagged

    @tagged.setter
    def tagged(self, tagged):
        """Sets the tagged of this NimbleNIC.

        Identify whether the NIC is tagged.  # noqa: E501

        :param tagged: The tagged of this NimbleNIC.  # noqa: E501
        :type: bool
        """

        self._tagged = tagged

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNIC):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
