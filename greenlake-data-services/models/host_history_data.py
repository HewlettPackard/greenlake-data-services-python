# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HostHistoryData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'iops_metrics_data': 'list[HostPerfHistory]',
        'latency_metrics_data_ms': 'list[HostPerfHistory]',
        'throughput_metrics_data_kbps': 'list[HostPerfHistory]'
    }

    attribute_map = {
        'iops_metrics_data': 'iopsMetricsData',
        'latency_metrics_data_ms': 'latencyMetricsDataMs',
        'throughput_metrics_data_kbps': 'throughputMetricsDataKbps'
    }

    def __init__(self, iops_metrics_data=None, latency_metrics_data_ms=None, throughput_metrics_data_kbps=None):  # noqa: E501
        """HostHistoryData - a model defined in OpenAPI"""  # noqa: E501

        self._iops_metrics_data = None
        self._latency_metrics_data_ms = None
        self._throughput_metrics_data_kbps = None
        self.discriminator = None

        if iops_metrics_data is not None:
            self.iops_metrics_data = iops_metrics_data
        if latency_metrics_data_ms is not None:
            self.latency_metrics_data_ms = latency_metrics_data_ms
        if throughput_metrics_data_kbps is not None:
            self.throughput_metrics_data_kbps = throughput_metrics_data_kbps

    @property
    def iops_metrics_data(self):
        """Gets the iops_metrics_data of this HostHistoryData.  # noqa: E501


        :return: The iops_metrics_data of this HostHistoryData.  # noqa: E501
        :rtype: list[HostPerfHistory]
        """
        return self._iops_metrics_data

    @iops_metrics_data.setter
    def iops_metrics_data(self, iops_metrics_data):
        """Sets the iops_metrics_data of this HostHistoryData.


        :param iops_metrics_data: The iops_metrics_data of this HostHistoryData.  # noqa: E501
        :type: list[HostPerfHistory]
        """

        self._iops_metrics_data = iops_metrics_data

    @property
    def latency_metrics_data_ms(self):
        """Gets the latency_metrics_data_ms of this HostHistoryData.  # noqa: E501


        :return: The latency_metrics_data_ms of this HostHistoryData.  # noqa: E501
        :rtype: list[HostPerfHistory]
        """
        return self._latency_metrics_data_ms

    @latency_metrics_data_ms.setter
    def latency_metrics_data_ms(self, latency_metrics_data_ms):
        """Sets the latency_metrics_data_ms of this HostHistoryData.


        :param latency_metrics_data_ms: The latency_metrics_data_ms of this HostHistoryData.  # noqa: E501
        :type: list[HostPerfHistory]
        """

        self._latency_metrics_data_ms = latency_metrics_data_ms

    @property
    def throughput_metrics_data_kbps(self):
        """Gets the throughput_metrics_data_kbps of this HostHistoryData.  # noqa: E501


        :return: The throughput_metrics_data_kbps of this HostHistoryData.  # noqa: E501
        :rtype: list[HostPerfHistory]
        """
        return self._throughput_metrics_data_kbps

    @throughput_metrics_data_kbps.setter
    def throughput_metrics_data_kbps(self, throughput_metrics_data_kbps):
        """Sets the throughput_metrics_data_kbps of this HostHistoryData.


        :param throughput_metrics_data_kbps: The throughput_metrics_data_kbps of this HostHistoryData.  # noqa: E501
        :type: list[HostPerfHistory]
        """

        self._throughput_metrics_data_kbps = throughput_metrics_data_kbps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostHistoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
