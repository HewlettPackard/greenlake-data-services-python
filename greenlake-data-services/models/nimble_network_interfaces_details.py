# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNetworkInterfacesDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'array_id': 'str',
        'array_name_or_serial': 'str',
        'associated_links': 'AssociatedLinks',
        'console_uri': 'str',
        'controller_id': 'str',
        'controller_name': 'str',
        'customer_id': 'str',
        'generation': 'int',
        'id': 'str',
        'ip_list': 'list[NimbleNetworkIP]',
        'is_present': 'bool',
        'link_speed': 'str',
        'link_status': 'str',
        'mac': 'str',
        'max_link_speed': 'str',
        'mtu': 'int',
        'name': 'str',
        'nic_type': 'str',
        'port': 'int',
        'resource_uri': 'str',
        'slot': 'int',
        'type': 'str'
    }

    attribute_map = {
        'array_id': 'array_id',
        'array_name_or_serial': 'array_name_or_serial',
        'associated_links': 'associated_links',
        'console_uri': 'consoleUri',
        'controller_id': 'controller_id',
        'controller_name': 'controller_name',
        'customer_id': 'customerId',
        'generation': 'generation',
        'id': 'id',
        'ip_list': 'ip_list',
        'is_present': 'is_present',
        'link_speed': 'link_speed',
        'link_status': 'link_status',
        'mac': 'mac',
        'max_link_speed': 'max_link_speed',
        'mtu': 'mtu',
        'name': 'name',
        'nic_type': 'nic_type',
        'port': 'port',
        'resource_uri': 'resourceUri',
        'slot': 'slot',
        'type': 'type'
    }

    def __init__(self, array_id=None, array_name_or_serial=None, associated_links=None, console_uri=None, controller_id=None, controller_name=None, customer_id=None, generation=None, id=None, ip_list=None, is_present=None, link_speed=None, link_status=None, mac=None, max_link_speed=None, mtu=None, name=None, nic_type=None, port=None, resource_uri=None, slot=None, type=None):  # noqa: E501
        """NimbleNetworkInterfacesDetails - a model defined in OpenAPI"""  # noqa: E501

        self._array_id = None
        self._array_name_or_serial = None
        self._associated_links = None
        self._console_uri = None
        self._controller_id = None
        self._controller_name = None
        self._customer_id = None
        self._generation = None
        self._id = None
        self._ip_list = None
        self._is_present = None
        self._link_speed = None
        self._link_status = None
        self._mac = None
        self._max_link_speed = None
        self._mtu = None
        self._name = None
        self._nic_type = None
        self._port = None
        self._resource_uri = None
        self._slot = None
        self._type = None
        self.discriminator = None

        if array_id is not None:
            self.array_id = array_id
        if array_name_or_serial is not None:
            self.array_name_or_serial = array_name_or_serial
        if associated_links is not None:
            self.associated_links = associated_links
        if console_uri is not None:
            self.console_uri = console_uri
        if controller_id is not None:
            self.controller_id = controller_id
        if controller_name is not None:
            self.controller_name = controller_name
        if customer_id is not None:
            self.customer_id = customer_id
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if ip_list is not None:
            self.ip_list = ip_list
        if is_present is not None:
            self.is_present = is_present
        if link_speed is not None:
            self.link_speed = link_speed
        if link_status is not None:
            self.link_status = link_status
        if mac is not None:
            self.mac = mac
        if max_link_speed is not None:
            self.max_link_speed = max_link_speed
        if mtu is not None:
            self.mtu = mtu
        if name is not None:
            self.name = name
        if nic_type is not None:
            self.nic_type = nic_type
        if port is not None:
            self.port = port
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if slot is not None:
            self.slot = slot
        if type is not None:
            self.type = type

    @property
    def array_id(self):
        """Gets the array_id of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Identifier for the array. A 42 digit hexadecimal number.  # noqa: E501

        :return: The array_id of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._array_id

    @array_id.setter
    def array_id(self, array_id):
        """Sets the array_id of this NimbleNetworkInterfacesDetails.

        Identifier for the array. A 42 digit hexadecimal number.  # noqa: E501

        :param array_id: The array_id of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._array_id = array_id

    @property
    def array_name_or_serial(self):
        """Gets the array_name_or_serial of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Name or serial of the array where the interface is hosted.String of up to 64 alphanumeric characters.  # noqa: E501

        :return: The array_name_or_serial of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._array_name_or_serial

    @array_name_or_serial.setter
    def array_name_or_serial(self, array_name_or_serial):
        """Sets the array_name_or_serial of this NimbleNetworkInterfacesDetails.

        Name or serial of the array where the interface is hosted.String of up to 64 alphanumeric characters.  # noqa: E501

        :param array_name_or_serial: The array_name_or_serial of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._array_name_or_serial = array_name_or_serial

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleNetworkInterfacesDetails.  # noqa: E501


        :return: The associated_links of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleNetworkInterfacesDetails.


        :param associated_links: The associated_links of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleNetworkInterfacesDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleNetworkInterfacesDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def controller_id(self):
        """Gets the controller_id of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Identifier of the controller where the interface is hosted. A 42 digit hexadecimal number.  # noqa: E501

        :return: The controller_id of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._controller_id

    @controller_id.setter
    def controller_id(self, controller_id):
        """Sets the controller_id of this NimbleNetworkInterfacesDetails.

        Identifier of the controller where the interface is hosted. A 42 digit hexadecimal number.  # noqa: E501

        :param controller_id: The controller_id of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._controller_id = controller_id

    @property
    def controller_name(self):
        """Gets the controller_name of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Name (A or B) of the controller where the interface is hosted. Plain string.  # noqa: E501

        :return: The controller_name of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._controller_name

    @controller_name.setter
    def controller_name(self, controller_name):
        """Sets the controller_name of this NimbleNetworkInterfacesDetails.

        Name (A or B) of the controller where the interface is hosted. Plain string.  # noqa: E501

        :param controller_name: The controller_name of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._controller_name = controller_name

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleNetworkInterfacesDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleNetworkInterfacesDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def generation(self):
        """Gets the generation of this NimbleNetworkInterfacesDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleNetworkInterfacesDetails.

        generation  # noqa: E501

        :param generation: The generation of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Identifier for the array. A 42 digit hexadecimal number.  # noqa: E501

        :return: The id of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleNetworkInterfacesDetails.

        Identifier for the array. A 42 digit hexadecimal number.  # noqa: E501

        :param id: The id of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_list(self):
        """Gets the ip_list of this NimbleNetworkInterfacesDetails.  # noqa: E501

        List of IP addresses assigned to this network interface. List of IP address assignment details to network interface.  # noqa: E501

        :return: The ip_list of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: list[NimbleNetworkIP]
        """
        return self._ip_list

    @ip_list.setter
    def ip_list(self, ip_list):
        """Sets the ip_list of this NimbleNetworkInterfacesDetails.

        List of IP addresses assigned to this network interface. List of IP address assignment details to network interface.  # noqa: E501

        :param ip_list: The ip_list of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: list[NimbleNetworkIP]
        """

        self._ip_list = ip_list

    @property
    def is_present(self):
        """Gets the is_present of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Whether this interface is present on this controller. Possible values : true, false.  # noqa: E501

        :return: The is_present of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_present

    @is_present.setter
    def is_present(self, is_present):
        """Sets the is_present of this NimbleNetworkInterfacesDetails.

        Whether this interface is present on this controller. Possible values : true, false.  # noqa: E501

        :param is_present: The is_present of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: bool
        """

        self._is_present = is_present

    @property
    def link_speed(self):
        """Gets the link_speed of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Speed of the link. Possible values: link_speed_unknown, link_speed_10M,link_speed_100M, link_speed_1000M, link_speed_10000M..  # noqa: E501

        :return: The link_speed of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this NimbleNetworkInterfacesDetails.

        Speed of the link. Possible values: link_speed_unknown, link_speed_10M,link_speed_100M, link_speed_1000M, link_speed_10000M..  # noqa: E501

        :param link_speed: The link_speed of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._link_speed = link_speed

    @property
    def link_status(self):
        """Gets the link_status of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Status of the link. Possible values: link_status_unknown,link_status_down, link_status_up  # noqa: E501

        :return: The link_status of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """Sets the link_status of this NimbleNetworkInterfacesDetails.

        Status of the link. Possible values: link_status_unknown,link_status_down, link_status_up  # noqa: E501

        :param link_status: The link_status of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._link_status = link_status

    @property
    def mac(self):
        """Gets the mac of this NimbleNetworkInterfacesDetails.  # noqa: E501

        MAC address of the interface. Mac address of an interface.  # noqa: E501

        :return: The mac of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this NimbleNetworkInterfacesDetails.

        MAC address of the interface. Mac address of an interface.  # noqa: E501

        :param mac: The mac of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def max_link_speed(self):
        """Gets the max_link_speed of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Maximum speed of the link. Possible values: 'link_speed_unknown', 'link_speed_10M','link_speed_100M', 'link_speed_1000M', 'link_speed_10000M', 'link_speed_25000M','link_speed_40000M', 'link_speed_50000M', 'link_speed_100000M'.  # noqa: E501

        :return: The max_link_speed of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._max_link_speed

    @max_link_speed.setter
    def max_link_speed(self, max_link_speed):
        """Sets the max_link_speed of this NimbleNetworkInterfacesDetails.

        Maximum speed of the link. Possible values: 'link_speed_unknown', 'link_speed_10M','link_speed_100M', 'link_speed_1000M', 'link_speed_10000M', 'link_speed_25000M','link_speed_40000M', 'link_speed_50000M', 'link_speed_100000M'.  # noqa: E501

        :param max_link_speed: The max_link_speed of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._max_link_speed = max_link_speed

    @property
    def mtu(self):
        """Gets the mtu of this NimbleNetworkInterfacesDetails.  # noqa: E501

        MTU on the link. Unsigned 64-bit integer.  # noqa: E501

        :return: The mtu of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NimbleNetworkInterfacesDetails.

        MTU on the link. Unsigned 64-bit integer.  # noqa: E501

        :param mtu: The mtu of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def name(self):
        """Gets the name of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Name of the interface. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The name of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleNetworkInterfacesDetails.

        Name of the interface. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param name: The name of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nic_type(self):
        """Gets the nic_type of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Interface type. Possible values: nic_type_unknown, nic_type_tp, nic_type_sfp  # noqa: E501

        :return: The nic_type of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._nic_type

    @nic_type.setter
    def nic_type(self, nic_type):
        """Sets the nic_type of this NimbleNetworkInterfacesDetails.

        Interface type. Possible values: nic_type_unknown, nic_type_tp, nic_type_sfp  # noqa: E501

        :param nic_type: The nic_type of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._nic_type = nic_type

    @property
    def port(self):
        """Gets the port of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Port number for this interface.Unsigned 64-bit integer.  # noqa: E501

        :return: The port of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NimbleNetworkInterfacesDetails.

        Port number for this interface.Unsigned 64-bit integer.  # noqa: E501

        :param port: The port of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleNetworkInterfacesDetails.  # noqa: E501


        :return: The resource_uri of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleNetworkInterfacesDetails.


        :param resource_uri: The resource_uri of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def slot(self):
        """Gets the slot of this NimbleNetworkInterfacesDetails.  # noqa: E501

        Slot number for this interface. Unsigned 64-bit integer.  # noqa: E501

        :return: The slot of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this NimbleNetworkInterfacesDetails.

        Slot number for this interface. Unsigned 64-bit integer.  # noqa: E501

        :param slot: The slot of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def type(self):
        """Gets the type of this NimbleNetworkInterfacesDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleNetworkInterfacesDetails.

        type  # noqa: E501

        :param type: The type of this NimbleNetworkInterfacesDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNetworkInterfacesDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
