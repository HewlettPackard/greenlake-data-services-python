# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UpdateHostInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'initiators_to_create': 'list[InitiatorInput]',
        'name': 'str',
        'updated_initiators': 'list[str]'
    }

    attribute_map = {
        'initiators_to_create': 'initiatorsToCreate',
        'name': 'name',
        'updated_initiators': 'updatedInitiators'
    }

    def __init__(self, initiators_to_create=None, name=None, updated_initiators=None):  # noqa: E501
        """UpdateHostInput - a model defined in OpenAPI"""  # noqa: E501

        self._initiators_to_create = None
        self._name = None
        self._updated_initiators = None
        self.discriminator = None

        if initiators_to_create is not None:
            self.initiators_to_create = initiators_to_create
        if name is not None:
            self.name = name
        if updated_initiators is not None:
            self.updated_initiators = updated_initiators

    @property
    def initiators_to_create(self):
        """Gets the initiators_to_create of this UpdateHostInput.  # noqa: E501

        List of initiators to be created and added to this host  # noqa: E501

        :return: The initiators_to_create of this UpdateHostInput.  # noqa: E501
        :rtype: list[InitiatorInput]
        """
        return self._initiators_to_create

    @initiators_to_create.setter
    def initiators_to_create(self, initiators_to_create):
        """Sets the initiators_to_create of this UpdateHostInput.

        List of initiators to be created and added to this host  # noqa: E501

        :param initiators_to_create: The initiators_to_create of this UpdateHostInput.  # noqa: E501
        :type: list[InitiatorInput]
        """

        self._initiators_to_create = initiators_to_create

    @property
    def name(self):
        """Gets the name of this UpdateHostInput.  # noqa: E501

        Name of the host.  # noqa: E501

        :return: The name of this UpdateHostInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateHostInput.

        Name of the host.  # noqa: E501

        :param name: The name of this UpdateHostInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def updated_initiators(self):
        """Gets the updated_initiators of this UpdateHostInput.  # noqa: E501

        List of existing initiator IDs to be replaced to the host  # noqa: E501

        :return: The updated_initiators of this UpdateHostInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._updated_initiators

    @updated_initiators.setter
    def updated_initiators(self, updated_initiators):
        """Sets the updated_initiators of this UpdateHostInput.

        List of existing initiator IDs to be replaced to the host  # noqa: E501

        :param updated_initiators: The updated_initiators of this UpdateHostInput.  # noqa: E501
        :type: list[str]
        """

        self._updated_initiators = updated_initiators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateHostInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
