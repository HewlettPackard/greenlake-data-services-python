# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SnapshotsetsList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_set_business_unit': 'str',
        'app_set_comments': 'str',
        'app_set_exclude_ai_qo_s': 'str',
        'app_set_importance': 'str',
        'app_set_name': 'str',
        'app_set_type': 'str',
        'comment': 'str',
        'creation_time': 'PrimeraVolumeDetailsListCreationTime',
        'customer_id': 'str',
        'display_name': 'str',
        'domain': 'str',
        'export_status': 'str',
        'generation': 'int',
        'id': 'str',
        'kv_pairs_present': 'bool',
        'members': 'list[str]',
        'name': 'str',
        'request_uri': 'str',
        'serial_number': 'str',
        'snap_set_id': 'int',
        'snap_set_parent_id': 'int',
        'snap_set_parent_name': 'str',
        'system_id': 'str',
        'type': 'str',
        'vv_set_type': 'str'
    }

    attribute_map = {
        'app_set_business_unit': 'appSetBusinessUnit',
        'app_set_comments': 'appSetComments',
        'app_set_exclude_ai_qo_s': 'appSetExcludeAIQoS',
        'app_set_importance': 'appSetImportance',
        'app_set_name': 'appSetName',
        'app_set_type': 'appSetType',
        'comment': 'comment',
        'creation_time': 'creationTime',
        'customer_id': 'customerId',
        'display_name': 'displayName',
        'domain': 'domain',
        'export_status': 'exportStatus',
        'generation': 'generation',
        'id': 'id',
        'kv_pairs_present': 'kvPairsPresent',
        'members': 'members',
        'name': 'name',
        'request_uri': 'requestUri',
        'serial_number': 'serialNumber',
        'snap_set_id': 'snapSetId',
        'snap_set_parent_id': 'snapSetParentId',
        'snap_set_parent_name': 'snapSetParentName',
        'system_id': 'systemId',
        'type': 'type',
        'vv_set_type': 'vvSetType'
    }

    def __init__(self, app_set_business_unit=None, app_set_comments=None, app_set_exclude_ai_qo_s=None, app_set_importance=None, app_set_name=None, app_set_type=None, comment=None, creation_time=None, customer_id=None, display_name=None, domain=None, export_status=None, generation=None, id=None, kv_pairs_present=None, members=None, name=None, request_uri=None, serial_number=None, snap_set_id=None, snap_set_parent_id=None, snap_set_parent_name=None, system_id=None, type=None, vv_set_type=None):  # noqa: E501
        """SnapshotsetsList - a model defined in OpenAPI"""  # noqa: E501

        self._app_set_business_unit = None
        self._app_set_comments = None
        self._app_set_exclude_ai_qo_s = None
        self._app_set_importance = None
        self._app_set_name = None
        self._app_set_type = None
        self._comment = None
        self._creation_time = None
        self._customer_id = None
        self._display_name = None
        self._domain = None
        self._export_status = None
        self._generation = None
        self._id = None
        self._kv_pairs_present = None
        self._members = None
        self._name = None
        self._request_uri = None
        self._serial_number = None
        self._snap_set_id = None
        self._snap_set_parent_id = None
        self._snap_set_parent_name = None
        self._system_id = None
        self._type = None
        self._vv_set_type = None
        self.discriminator = None

        if app_set_business_unit is not None:
            self.app_set_business_unit = app_set_business_unit
        if app_set_comments is not None:
            self.app_set_comments = app_set_comments
        if app_set_exclude_ai_qo_s is not None:
            self.app_set_exclude_ai_qo_s = app_set_exclude_ai_qo_s
        if app_set_importance is not None:
            self.app_set_importance = app_set_importance
        if app_set_name is not None:
            self.app_set_name = app_set_name
        if app_set_type is not None:
            self.app_set_type = app_set_type
        if comment is not None:
            self.comment = comment
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if export_status is not None:
            self.export_status = export_status
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if kv_pairs_present is not None:
            self.kv_pairs_present = kv_pairs_present
        if members is not None:
            self.members = members
        if name is not None:
            self.name = name
        if request_uri is not None:
            self.request_uri = request_uri
        if serial_number is not None:
            self.serial_number = serial_number
        if snap_set_id is not None:
            self.snap_set_id = snap_set_id
        if snap_set_parent_id is not None:
            self.snap_set_parent_id = snap_set_parent_id
        if snap_set_parent_name is not None:
            self.snap_set_parent_name = snap_set_parent_name
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type
        if vv_set_type is not None:
            self.vv_set_type = vv_set_type

    @property
    def app_set_business_unit(self):
        """Gets the app_set_business_unit of this SnapshotsetsList.  # noqa: E501

        Appset BusinessUnit  # noqa: E501

        :return: The app_set_business_unit of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._app_set_business_unit

    @app_set_business_unit.setter
    def app_set_business_unit(self, app_set_business_unit):
        """Sets the app_set_business_unit of this SnapshotsetsList.

        Appset BusinessUnit  # noqa: E501

        :param app_set_business_unit: The app_set_business_unit of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._app_set_business_unit = app_set_business_unit

    @property
    def app_set_comments(self):
        """Gets the app_set_comments of this SnapshotsetsList.  # noqa: E501

        Application set comments  # noqa: E501

        :return: The app_set_comments of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._app_set_comments

    @app_set_comments.setter
    def app_set_comments(self, app_set_comments):
        """Sets the app_set_comments of this SnapshotsetsList.

        Application set comments  # noqa: E501

        :param app_set_comments: The app_set_comments of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._app_set_comments = app_set_comments

    @property
    def app_set_exclude_ai_qo_s(self):
        """Gets the app_set_exclude_ai_qo_s of this SnapshotsetsList.  # noqa: E501

        Exclusion from AI QoS  # noqa: E501

        :return: The app_set_exclude_ai_qo_s of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._app_set_exclude_ai_qo_s

    @app_set_exclude_ai_qo_s.setter
    def app_set_exclude_ai_qo_s(self, app_set_exclude_ai_qo_s):
        """Sets the app_set_exclude_ai_qo_s of this SnapshotsetsList.

        Exclusion from AI QoS  # noqa: E501

        :param app_set_exclude_ai_qo_s: The app_set_exclude_ai_qo_s of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._app_set_exclude_ai_qo_s = app_set_exclude_ai_qo_s

    @property
    def app_set_importance(self):
        """Gets the app_set_importance of this SnapshotsetsList.  # noqa: E501

        Importance Level  # noqa: E501

        :return: The app_set_importance of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._app_set_importance

    @app_set_importance.setter
    def app_set_importance(self, app_set_importance):
        """Sets the app_set_importance of this SnapshotsetsList.

        Importance Level  # noqa: E501

        :param app_set_importance: The app_set_importance of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._app_set_importance = app_set_importance

    @property
    def app_set_name(self):
        """Gets the app_set_name of this SnapshotsetsList.  # noqa: E501

        Application set name  # noqa: E501

        :return: The app_set_name of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._app_set_name

    @app_set_name.setter
    def app_set_name(self, app_set_name):
        """Sets the app_set_name of this SnapshotsetsList.

        Application set name  # noqa: E501

        :param app_set_name: The app_set_name of this SnapshotsetsList.  # noqa: E501
        :type: str
        """
        if app_set_name is not None and len(app_set_name) > 255:
            raise ValueError("Invalid value for `app_set_name`, length must be less than or equal to `255`")  # noqa: E501

        self._app_set_name = app_set_name

    @property
    def app_set_type(self):
        """Gets the app_set_type of this SnapshotsetsList.  # noqa: E501

        Type of the snapshotset  # noqa: E501

        :return: The app_set_type of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._app_set_type

    @app_set_type.setter
    def app_set_type(self, app_set_type):
        """Sets the app_set_type of this SnapshotsetsList.

        Type of the snapshotset  # noqa: E501

        :param app_set_type: The app_set_type of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._app_set_type = app_set_type

    @property
    def comment(self):
        """Gets the comment of this SnapshotsetsList.  # noqa: E501

        Comments if any  # noqa: E501

        :return: The comment of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SnapshotsetsList.

        Comments if any  # noqa: E501

        :param comment: The comment of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def creation_time(self):
        """Gets the creation_time of this SnapshotsetsList.  # noqa: E501


        :return: The creation_time of this SnapshotsetsList.  # noqa: E501
        :rtype: PrimeraVolumeDetailsListCreationTime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this SnapshotsetsList.


        :param creation_time: The creation_time of this SnapshotsetsList.  # noqa: E501
        :type: PrimeraVolumeDetailsListCreationTime
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this SnapshotsetsList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SnapshotsetsList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def display_name(self):
        """Gets the display_name of this SnapshotsetsList.  # noqa: E501

        Display Name  # noqa: E501

        :return: The display_name of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SnapshotsetsList.

        Display Name  # noqa: E501

        :param display_name: The display_name of this SnapshotsetsList.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501

        self._display_name = display_name

    @property
    def domain(self):
        """Gets the domain of this SnapshotsetsList.  # noqa: E501

        Domain name  # noqa: E501

        :return: The domain of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SnapshotsetsList.

        Domain name  # noqa: E501

        :param domain: The domain of this SnapshotsetsList.  # noqa: E501
        :type: str
        """
        if domain is not None and len(domain) > 255:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `255`")  # noqa: E501

        self._domain = domain

    @property
    def export_status(self):
        """Gets the export_status of this SnapshotsetsList.  # noqa: E501

        Export status  # noqa: E501

        :return: The export_status of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._export_status

    @export_status.setter
    def export_status(self, export_status):
        """Sets the export_status of this SnapshotsetsList.

        Export status  # noqa: E501

        :param export_status: The export_status of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._export_status = export_status

    @property
    def generation(self):
        """Gets the generation of this SnapshotsetsList.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this SnapshotsetsList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this SnapshotsetsList.

        generation  # noqa: E501

        :param generation: The generation of this SnapshotsetsList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this SnapshotsetsList.  # noqa: E501

        uid of the snapshotset. `Filter`  # noqa: E501

        :return: The id of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnapshotsetsList.

        uid of the snapshotset. `Filter`  # noqa: E501

        :param id: The id of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kv_pairs_present(self):
        """Gets the kv_pairs_present of this SnapshotsetsList.  # noqa: E501

        Represents KV pairs present or not  # noqa: E501

        :return: The kv_pairs_present of this SnapshotsetsList.  # noqa: E501
        :rtype: bool
        """
        return self._kv_pairs_present

    @kv_pairs_present.setter
    def kv_pairs_present(self, kv_pairs_present):
        """Sets the kv_pairs_present of this SnapshotsetsList.

        Represents KV pairs present or not  # noqa: E501

        :param kv_pairs_present: The kv_pairs_present of this SnapshotsetsList.  # noqa: E501
        :type: bool
        """

        self._kv_pairs_present = kv_pairs_present

    @property
    def members(self):
        """Gets the members of this SnapshotsetsList.  # noqa: E501

        Volume Names  # noqa: E501

        :return: The members of this SnapshotsetsList.  # noqa: E501
        :rtype: list[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this SnapshotsetsList.

        Volume Names  # noqa: E501

        :param members: The members of this SnapshotsetsList.  # noqa: E501
        :type: list[str]
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this SnapshotsetsList.  # noqa: E501

        Name of the snapshotset. `Filter, Sort`  # noqa: E501

        :return: The name of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotsetsList.

        Name of the snapshotset. `Filter, Sort`  # noqa: E501

        :param name: The name of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def request_uri(self):
        """Gets the request_uri of this SnapshotsetsList.  # noqa: E501

        RequestUri for snapshotsets resources  # noqa: E501

        :return: The request_uri of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this SnapshotsetsList.

        RequestUri for snapshotsets resources  # noqa: E501

        :param request_uri: The request_uri of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def serial_number(self):
        """Gets the serial_number of this SnapshotsetsList.  # noqa: E501

        Serial number.  # noqa: E501

        :return: The serial_number of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this SnapshotsetsList.

        Serial number.  # noqa: E501

        :param serial_number: The serial_number of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def snap_set_id(self):
        """Gets the snap_set_id of this SnapshotsetsList.  # noqa: E501

        ID  # noqa: E501

        :return: The snap_set_id of this SnapshotsetsList.  # noqa: E501
        :rtype: int
        """
        return self._snap_set_id

    @snap_set_id.setter
    def snap_set_id(self, snap_set_id):
        """Sets the snap_set_id of this SnapshotsetsList.

        ID  # noqa: E501

        :param snap_set_id: The snap_set_id of this SnapshotsetsList.  # noqa: E501
        :type: int
        """

        self._snap_set_id = snap_set_id

    @property
    def snap_set_parent_id(self):
        """Gets the snap_set_parent_id of this SnapshotsetsList.  # noqa: E501

        ParentId of the snapSet  # noqa: E501

        :return: The snap_set_parent_id of this SnapshotsetsList.  # noqa: E501
        :rtype: int
        """
        return self._snap_set_parent_id

    @snap_set_parent_id.setter
    def snap_set_parent_id(self, snap_set_parent_id):
        """Sets the snap_set_parent_id of this SnapshotsetsList.

        ParentId of the snapSet  # noqa: E501

        :param snap_set_parent_id: The snap_set_parent_id of this SnapshotsetsList.  # noqa: E501
        :type: int
        """

        self._snap_set_parent_id = snap_set_parent_id

    @property
    def snap_set_parent_name(self):
        """Gets the snap_set_parent_name of this SnapshotsetsList.  # noqa: E501

        Parent name of the snapSet  # noqa: E501

        :return: The snap_set_parent_name of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._snap_set_parent_name

    @snap_set_parent_name.setter
    def snap_set_parent_name(self, snap_set_parent_name):
        """Sets the snap_set_parent_name of this SnapshotsetsList.

        Parent name of the snapSet  # noqa: E501

        :param snap_set_parent_name: The snap_set_parent_name of this SnapshotsetsList.  # noqa: E501
        :type: str
        """
        if snap_set_parent_name is not None and len(snap_set_parent_name) > 255:
            raise ValueError("Invalid value for `snap_set_parent_name`, length must be less than or equal to `255`")  # noqa: E501

        self._snap_set_parent_name = snap_set_parent_name

    @property
    def system_id(self):
        """Gets the system_id of this SnapshotsetsList.  # noqa: E501

        SystemUid/serialNumber of the array.  # noqa: E501

        :return: The system_id of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SnapshotsetsList.

        SystemUid/serialNumber of the array.  # noqa: E501

        :param system_id: The system_id of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this SnapshotsetsList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SnapshotsetsList.

        type  # noqa: E501

        :param type: The type of this SnapshotsetsList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vv_set_type(self):
        """Gets the vv_set_type of this SnapshotsetsList.  # noqa: E501

        Type of the volume-set  # noqa: E501

        :return: The vv_set_type of this SnapshotsetsList.  # noqa: E501
        :rtype: str
        """
        return self._vv_set_type

    @vv_set_type.setter
    def vv_set_type(self, vv_set_type):
        """Sets the vv_set_type of this SnapshotsetsList.

        Type of the volume-set  # noqa: E501

        :param vv_set_type: The vv_set_type of this SnapshotsetsList.  # noqa: E501
        :type: str
        """
        if vv_set_type is not None and len(vv_set_type) > 255:
            raise ValueError("Invalid value for `vv_set_type`, length must be less than or equal to `255`")  # noqa: E501

        self._vv_set_type = vv_set_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotsetsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
