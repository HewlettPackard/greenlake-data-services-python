# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleEditGroupInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_switchover_enabled': 'bool',
        'autoclean_unmanaged_snapshots_enabled': 'bool',
        'autoclean_unmanaged_snapshots_ttl_unit': 'int',
        'cc_mode_enabled': 'bool',
        'date': 'int',
        'default_iscsi_target_scope': 'str',
        'group_snapshot_ttl': 'int',
        'group_target_name': 'str',
        'name': 'str',
        'ntp_server': 'str',
        'tdz_enabled': 'bool',
        'tdz_prefix': 'str',
        'timezone': 'str',
        'tlsv1_enabled': 'bool'
    }

    attribute_map = {
        'auto_switchover_enabled': 'auto_switchover_enabled',
        'autoclean_unmanaged_snapshots_enabled': 'autoclean_unmanaged_snapshots_enabled',
        'autoclean_unmanaged_snapshots_ttl_unit': 'autoclean_unmanaged_snapshots_ttl_unit',
        'cc_mode_enabled': 'cc_mode_enabled',
        'date': 'date',
        'default_iscsi_target_scope': 'default_iscsi_target_scope',
        'group_snapshot_ttl': 'group_snapshot_ttl',
        'group_target_name': 'group_target_name',
        'name': 'name',
        'ntp_server': 'ntp_server',
        'tdz_enabled': 'tdz_enabled',
        'tdz_prefix': 'tdz_prefix',
        'timezone': 'timezone',
        'tlsv1_enabled': 'tlsv1_enabled'
    }

    def __init__(self, auto_switchover_enabled=None, autoclean_unmanaged_snapshots_enabled=None, autoclean_unmanaged_snapshots_ttl_unit=None, cc_mode_enabled=None, date=None, default_iscsi_target_scope=None, group_snapshot_ttl=None, group_target_name=None, name=None, ntp_server=None, tdz_enabled=None, tdz_prefix=None, timezone=None, tlsv1_enabled=None):  # noqa: E501
        """NimbleEditGroupInput - a model defined in OpenAPI"""  # noqa: E501

        self._auto_switchover_enabled = None
        self._autoclean_unmanaged_snapshots_enabled = None
        self._autoclean_unmanaged_snapshots_ttl_unit = None
        self._cc_mode_enabled = None
        self._date = None
        self._default_iscsi_target_scope = None
        self._group_snapshot_ttl = None
        self._group_target_name = None
        self._name = None
        self._ntp_server = None
        self._tdz_enabled = None
        self._tdz_prefix = None
        self._timezone = None
        self._tlsv1_enabled = None
        self.discriminator = None

        if auto_switchover_enabled is not None:
            self.auto_switchover_enabled = auto_switchover_enabled
        if autoclean_unmanaged_snapshots_enabled is not None:
            self.autoclean_unmanaged_snapshots_enabled = autoclean_unmanaged_snapshots_enabled
        if autoclean_unmanaged_snapshots_ttl_unit is not None:
            self.autoclean_unmanaged_snapshots_ttl_unit = autoclean_unmanaged_snapshots_ttl_unit
        if cc_mode_enabled is not None:
            self.cc_mode_enabled = cc_mode_enabled
        if date is not None:
            self.date = date
        if default_iscsi_target_scope is not None:
            self.default_iscsi_target_scope = default_iscsi_target_scope
        if group_snapshot_ttl is not None:
            self.group_snapshot_ttl = group_snapshot_ttl
        if group_target_name is not None:
            self.group_target_name = group_target_name
        if name is not None:
            self.name = name
        if ntp_server is not None:
            self.ntp_server = ntp_server
        if tdz_enabled is not None:
            self.tdz_enabled = tdz_enabled
        if tdz_prefix is not None:
            self.tdz_prefix = tdz_prefix
        if timezone is not None:
            self.timezone = timezone
        if tlsv1_enabled is not None:
            self.tlsv1_enabled = tlsv1_enabled

    @property
    def auto_switchover_enabled(self):
        """Gets the auto_switchover_enabled of this NimbleEditGroupInput.  # noqa: E501

        Whether automatic switchover of Group management services feature is enabled.  # noqa: E501

        :return: The auto_switchover_enabled of this NimbleEditGroupInput.  # noqa: E501
        :rtype: bool
        """
        return self._auto_switchover_enabled

    @auto_switchover_enabled.setter
    def auto_switchover_enabled(self, auto_switchover_enabled):
        """Sets the auto_switchover_enabled of this NimbleEditGroupInput.

        Whether automatic switchover of Group management services feature is enabled.  # noqa: E501

        :param auto_switchover_enabled: The auto_switchover_enabled of this NimbleEditGroupInput.  # noqa: E501
        :type: bool
        """

        self._auto_switchover_enabled = auto_switchover_enabled

    @property
    def autoclean_unmanaged_snapshots_enabled(self):
        """Gets the autoclean_unmanaged_snapshots_enabled of this NimbleEditGroupInput.  # noqa: E501

        Whether auto-clean unmanaged snapshots feature is enabled.  # noqa: E501

        :return: The autoclean_unmanaged_snapshots_enabled of this NimbleEditGroupInput.  # noqa: E501
        :rtype: bool
        """
        return self._autoclean_unmanaged_snapshots_enabled

    @autoclean_unmanaged_snapshots_enabled.setter
    def autoclean_unmanaged_snapshots_enabled(self, autoclean_unmanaged_snapshots_enabled):
        """Sets the autoclean_unmanaged_snapshots_enabled of this NimbleEditGroupInput.

        Whether auto-clean unmanaged snapshots feature is enabled.  # noqa: E501

        :param autoclean_unmanaged_snapshots_enabled: The autoclean_unmanaged_snapshots_enabled of this NimbleEditGroupInput.  # noqa: E501
        :type: bool
        """

        self._autoclean_unmanaged_snapshots_enabled = autoclean_unmanaged_snapshots_enabled

    @property
    def autoclean_unmanaged_snapshots_ttl_unit(self):
        """Gets the autoclean_unmanaged_snapshots_ttl_unit of this NimbleEditGroupInput.  # noqa: E501

        Unit for unmanaged snapshot time to live.  # noqa: E501

        :return: The autoclean_unmanaged_snapshots_ttl_unit of this NimbleEditGroupInput.  # noqa: E501
        :rtype: int
        """
        return self._autoclean_unmanaged_snapshots_ttl_unit

    @autoclean_unmanaged_snapshots_ttl_unit.setter
    def autoclean_unmanaged_snapshots_ttl_unit(self, autoclean_unmanaged_snapshots_ttl_unit):
        """Sets the autoclean_unmanaged_snapshots_ttl_unit of this NimbleEditGroupInput.

        Unit for unmanaged snapshot time to live.  # noqa: E501

        :param autoclean_unmanaged_snapshots_ttl_unit: The autoclean_unmanaged_snapshots_ttl_unit of this NimbleEditGroupInput.  # noqa: E501
        :type: int
        """

        self._autoclean_unmanaged_snapshots_ttl_unit = autoclean_unmanaged_snapshots_ttl_unit

    @property
    def cc_mode_enabled(self):
        """Gets the cc_mode_enabled of this NimbleEditGroupInput.  # noqa: E501

        Enable or disable Common Criteria mode.  # noqa: E501

        :return: The cc_mode_enabled of this NimbleEditGroupInput.  # noqa: E501
        :rtype: bool
        """
        return self._cc_mode_enabled

    @cc_mode_enabled.setter
    def cc_mode_enabled(self, cc_mode_enabled):
        """Sets the cc_mode_enabled of this NimbleEditGroupInput.

        Enable or disable Common Criteria mode.  # noqa: E501

        :param cc_mode_enabled: The cc_mode_enabled of this NimbleEditGroupInput.  # noqa: E501
        :type: bool
        """

        self._cc_mode_enabled = cc_mode_enabled

    @property
    def date(self):
        """Gets the date of this NimbleEditGroupInput.  # noqa: E501

        Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970. Setting this along with ntp_server causes ntp_server to be reset.  # noqa: E501

        :return: The date of this NimbleEditGroupInput.  # noqa: E501
        :rtype: int
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this NimbleEditGroupInput.

        Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970. Setting this along with ntp_server causes ntp_server to be reset.  # noqa: E501

        :param date: The date of this NimbleEditGroupInput.  # noqa: E501
        :type: int
        """

        self._date = date

    @property
    def default_iscsi_target_scope(self):
        """Gets the default_iscsi_target_scope of this NimbleEditGroupInput.  # noqa: E501

        Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target.  # noqa: E501

        :return: The default_iscsi_target_scope of this NimbleEditGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._default_iscsi_target_scope

    @default_iscsi_target_scope.setter
    def default_iscsi_target_scope(self, default_iscsi_target_scope):
        """Sets the default_iscsi_target_scope of this NimbleEditGroupInput.

        Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target.  # noqa: E501

        :param default_iscsi_target_scope: The default_iscsi_target_scope of this NimbleEditGroupInput.  # noqa: E501
        :type: str
        """

        self._default_iscsi_target_scope = default_iscsi_target_scope

    @property
    def group_snapshot_ttl(self):
        """Gets the group_snapshot_ttl of this NimbleEditGroupInput.  # noqa: E501

        Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL.  # noqa: E501

        :return: The group_snapshot_ttl of this NimbleEditGroupInput.  # noqa: E501
        :rtype: int
        """
        return self._group_snapshot_ttl

    @group_snapshot_ttl.setter
    def group_snapshot_ttl(self, group_snapshot_ttl):
        """Sets the group_snapshot_ttl of this NimbleEditGroupInput.

        Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL.  # noqa: E501

        :param group_snapshot_ttl: The group_snapshot_ttl of this NimbleEditGroupInput.  # noqa: E501
        :type: int
        """

        self._group_snapshot_ttl = group_snapshot_ttl

    @property
    def group_target_name(self):
        """Gets the group_target_name of this NimbleEditGroupInput.  # noqa: E501

        Iscsi target name for this group. Plain string.  # noqa: E501

        :return: The group_target_name of this NimbleEditGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._group_target_name

    @group_target_name.setter
    def group_target_name(self, group_target_name):
        """Sets the group_target_name of this NimbleEditGroupInput.

        Iscsi target name for this group. Plain string.  # noqa: E501

        :param group_target_name: The group_target_name of this NimbleEditGroupInput.  # noqa: E501
        :type: str
        """

        self._group_target_name = group_target_name

    @property
    def name(self):
        """Gets the name of this NimbleEditGroupInput.  # noqa: E501

        Name of the group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The name of this NimbleEditGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleEditGroupInput.

        Name of the group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param name: The name of this NimbleEditGroupInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ntp_server(self):
        """Gets the ntp_server of this NimbleEditGroupInput.  # noqa: E501

        Either IP address or hostname of the NTP server for this group.  # noqa: E501

        :return: The ntp_server of this NimbleEditGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._ntp_server

    @ntp_server.setter
    def ntp_server(self, ntp_server):
        """Sets the ntp_server of this NimbleEditGroupInput.

        Either IP address or hostname of the NTP server for this group.  # noqa: E501

        :param ntp_server: The ntp_server of this NimbleEditGroupInput.  # noqa: E501
        :type: str
        """

        self._ntp_server = ntp_server

    @property
    def tdz_enabled(self):
        """Gets the tdz_enabled of this NimbleEditGroupInput.  # noqa: E501

        Is Target Driven Zoning (TDZ) enabled on this group.  # noqa: E501

        :return: The tdz_enabled of this NimbleEditGroupInput.  # noqa: E501
        :rtype: bool
        """
        return self._tdz_enabled

    @tdz_enabled.setter
    def tdz_enabled(self, tdz_enabled):
        """Sets the tdz_enabled of this NimbleEditGroupInput.

        Is Target Driven Zoning (TDZ) enabled on this group.  # noqa: E501

        :param tdz_enabled: The tdz_enabled of this NimbleEditGroupInput.  # noqa: E501
        :type: bool
        """

        self._tdz_enabled = tdz_enabled

    @property
    def tdz_prefix(self):
        """Gets the tdz_prefix of this NimbleEditGroupInput.  # noqa: E501

        Target Driven Zoning (TDZ) prefix for peer zones created by TDZ.  # noqa: E501

        :return: The tdz_prefix of this NimbleEditGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._tdz_prefix

    @tdz_prefix.setter
    def tdz_prefix(self, tdz_prefix):
        """Sets the tdz_prefix of this NimbleEditGroupInput.

        Target Driven Zoning (TDZ) prefix for peer zones created by TDZ.  # noqa: E501

        :param tdz_prefix: The tdz_prefix of this NimbleEditGroupInput.  # noqa: E501
        :type: str
        """

        self._tdz_prefix = tdz_prefix

    @property
    def timezone(self):
        """Gets the timezone of this NimbleEditGroupInput.  # noqa: E501

        Timezone in which this group is located. Plain string.  # noqa: E501

        :return: The timezone of this NimbleEditGroupInput.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this NimbleEditGroupInput.

        Timezone in which this group is located. Plain string.  # noqa: E501

        :param timezone: The timezone of this NimbleEditGroupInput.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def tlsv1_enabled(self):
        """Gets the tlsv1_enabled of this NimbleEditGroupInput.  # noqa: E501

        Enable or disable TLSv1.0 and TLSv1.1.  # noqa: E501

        :return: The tlsv1_enabled of this NimbleEditGroupInput.  # noqa: E501
        :rtype: bool
        """
        return self._tlsv1_enabled

    @tlsv1_enabled.setter
    def tlsv1_enabled(self, tlsv1_enabled):
        """Sets the tlsv1_enabled of this NimbleEditGroupInput.

        Enable or disable TLSv1.0 and TLSv1.1.  # noqa: E501

        :param tlsv1_enabled: The tlsv1_enabled of this NimbleEditGroupInput.  # noqa: E501
        :type: bool
        """

        self._tlsv1_enabled = tlsv1_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleEditGroupInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
