# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CertificateDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'CertAssociatedLinks',
        'cert_type': 'str',
        'commonname': 'str',
        'console_uri': 'str',
        'customer_id': 'str',
        'displayname': 'str',
        'domain': 'str',
        'enddate': 'CertificateDetailsEnddate',
        'fingerprint': 'str',
        'generation': 'int',
        'id': 'str',
        'issuer': 'str',
        'pem': 'str',
        'request_uri': 'str',
        'serial': 'str',
        'service': 'str',
        'signaturetype': 'str',
        'startdate': 'CertificateDetailsStartdate',
        'subject': 'str',
        'subjectaltname': 'str',
        'system_id': 'str',
        'text': 'str',
        'type': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'cert_type': 'certType',
        'commonname': 'commonname',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'displayname': 'displayname',
        'domain': 'domain',
        'enddate': 'enddate',
        'fingerprint': 'fingerprint',
        'generation': 'generation',
        'id': 'id',
        'issuer': 'issuer',
        'pem': 'pem',
        'request_uri': 'requestUri',
        'serial': 'serial',
        'service': 'service',
        'signaturetype': 'signaturetype',
        'startdate': 'startdate',
        'subject': 'subject',
        'subjectaltname': 'subjectaltname',
        'system_id': 'systemId',
        'text': 'text',
        'type': 'type',
        'uri': 'uri'
    }

    def __init__(self, associated_links=None, cert_type=None, commonname=None, console_uri=None, customer_id=None, displayname=None, domain=None, enddate=None, fingerprint=None, generation=None, id=None, issuer=None, pem=None, request_uri=None, serial=None, service=None, signaturetype=None, startdate=None, subject=None, subjectaltname=None, system_id=None, text=None, type=None, uri=None):  # noqa: E501
        """CertificateDetails - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._cert_type = None
        self._commonname = None
        self._console_uri = None
        self._customer_id = None
        self._displayname = None
        self._domain = None
        self._enddate = None
        self._fingerprint = None
        self._generation = None
        self._id = None
        self._issuer = None
        self._pem = None
        self._request_uri = None
        self._serial = None
        self._service = None
        self._signaturetype = None
        self._startdate = None
        self._subject = None
        self._subjectaltname = None
        self._system_id = None
        self._text = None
        self._type = None
        self._uri = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if cert_type is not None:
            self.cert_type = cert_type
        if commonname is not None:
            self.commonname = commonname
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if enddate is not None:
            self.enddate = enddate
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if issuer is not None:
            self.issuer = issuer
        if pem is not None:
            self.pem = pem
        if request_uri is not None:
            self.request_uri = request_uri
        if serial is not None:
            self.serial = serial
        if service is not None:
            self.service = service
        if signaturetype is not None:
            self.signaturetype = signaturetype
        if startdate is not None:
            self.startdate = startdate
        if subject is not None:
            self.subject = subject
        if subjectaltname is not None:
            self.subjectaltname = subjectaltname
        if system_id is not None:
            self.system_id = system_id
        if text is not None:
            self.text = text
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri

    @property
    def associated_links(self):
        """Gets the associated_links of this CertificateDetails.  # noqa: E501


        :return: The associated_links of this CertificateDetails.  # noqa: E501
        :rtype: CertAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this CertificateDetails.


        :param associated_links: The associated_links of this CertificateDetails.  # noqa: E501
        :type: CertAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def cert_type(self):
        """Gets the cert_type of this CertificateDetails.  # noqa: E501

        Type of array certificate  # noqa: E501

        :return: The cert_type of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this CertificateDetails.

        Type of array certificate  # noqa: E501

        :param cert_type: The cert_type of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._cert_type = cert_type

    @property
    def commonname(self):
        """Gets the commonname of this CertificateDetails.  # noqa: E501

        Commonname of the resource  # noqa: E501

        :return: The commonname of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._commonname

    @commonname.setter
    def commonname(self, commonname):
        """Sets the commonname of this CertificateDetails.

        Commonname of the resource  # noqa: E501

        :param commonname: The commonname of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._commonname = commonname

    @property
    def console_uri(self):
        """Gets the console_uri of this CertificateDetails.  # noqa: E501

        consoleUri for detailed storage object   # noqa: E501

        :return: The console_uri of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this CertificateDetails.

        consoleUri for detailed storage object   # noqa: E501

        :param console_uri: The console_uri of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this CertificateDetails.  # noqa: E501

        The customer application identifier  # noqa: E501

        :return: The customer_id of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CertificateDetails.

        The customer application identifier  # noqa: E501

        :param customer_id: The customer_id of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def displayname(self):
        """Gets the displayname of this CertificateDetails.  # noqa: E501

        Displayname of the resource  # noqa: E501

        :return: The displayname of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this CertificateDetails.

        Displayname of the resource  # noqa: E501

        :param displayname: The displayname of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this CertificateDetails.  # noqa: E501

        Domain of the resource  # noqa: E501

        :return: The domain of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CertificateDetails.

        Domain of the resource  # noqa: E501

        :param domain: The domain of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def enddate(self):
        """Gets the enddate of this CertificateDetails.  # noqa: E501


        :return: The enddate of this CertificateDetails.  # noqa: E501
        :rtype: CertificateDetailsEnddate
        """
        return self._enddate

    @enddate.setter
    def enddate(self, enddate):
        """Sets the enddate of this CertificateDetails.


        :param enddate: The enddate of this CertificateDetails.  # noqa: E501
        :type: CertificateDetailsEnddate
        """

        self._enddate = enddate

    @property
    def fingerprint(self):
        """Gets the fingerprint of this CertificateDetails.  # noqa: E501

        Fingerprint of the resource  # noqa: E501

        :return: The fingerprint of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this CertificateDetails.

        Fingerprint of the resource  # noqa: E501

        :param fingerprint: The fingerprint of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def generation(self):
        """Gets the generation of this CertificateDetails.  # noqa: E501

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :return: The generation of this CertificateDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this CertificateDetails.

        A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.  # noqa: E501

        :param generation: The generation of this CertificateDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this CertificateDetails.  # noqa: E501

        Unique Identifier of the resource  # noqa: E501

        :return: The id of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CertificateDetails.

        Unique Identifier of the resource  # noqa: E501

        :param id: The id of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issuer(self):
        """Gets the issuer of this CertificateDetails.  # noqa: E501

        Issuer of the resource  # noqa: E501

        :return: The issuer of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateDetails.

        Issuer of the resource  # noqa: E501

        :param issuer: The issuer of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def pem(self):
        """Gets the pem of this CertificateDetails.  # noqa: E501

        array certificate pem  # noqa: E501

        :return: The pem of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._pem

    @pem.setter
    def pem(self, pem):
        """Sets the pem of this CertificateDetails.

        array certificate pem  # noqa: E501

        :param pem: The pem of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._pem = pem

    @property
    def request_uri(self):
        """Gets the request_uri of this CertificateDetails.  # noqa: E501

        requestUri for detailed certificate object  # noqa: E501

        :return: The request_uri of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this CertificateDetails.

        requestUri for detailed certificate object  # noqa: E501

        :param request_uri: The request_uri of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def serial(self):
        """Gets the serial of this CertificateDetails.  # noqa: E501

        Serial of the resource  # noqa: E501

        :return: The serial of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this CertificateDetails.

        Serial of the resource  # noqa: E501

        :param serial: The serial of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def service(self):
        """Gets the service of this CertificateDetails.  # noqa: E501

        Service name of the resource  # noqa: E501

        :return: The service of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this CertificateDetails.

        Service name of the resource  # noqa: E501

        :param service: The service of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def signaturetype(self):
        """Gets the signaturetype of this CertificateDetails.  # noqa: E501

        Signature type of the resource  # noqa: E501

        :return: The signaturetype of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._signaturetype

    @signaturetype.setter
    def signaturetype(self, signaturetype):
        """Sets the signaturetype of this CertificateDetails.

        Signature type of the resource  # noqa: E501

        :param signaturetype: The signaturetype of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._signaturetype = signaturetype

    @property
    def startdate(self):
        """Gets the startdate of this CertificateDetails.  # noqa: E501


        :return: The startdate of this CertificateDetails.  # noqa: E501
        :rtype: CertificateDetailsStartdate
        """
        return self._startdate

    @startdate.setter
    def startdate(self, startdate):
        """Sets the startdate of this CertificateDetails.


        :param startdate: The startdate of this CertificateDetails.  # noqa: E501
        :type: CertificateDetailsStartdate
        """

        self._startdate = startdate

    @property
    def subject(self):
        """Gets the subject of this CertificateDetails.  # noqa: E501

        Subject of the resource  # noqa: E501

        :return: The subject of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateDetails.

        Subject of the resource  # noqa: E501

        :param subject: The subject of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def subjectaltname(self):
        """Gets the subjectaltname of this CertificateDetails.  # noqa: E501

        Subjectaltname of the resource  # noqa: E501

        :return: The subjectaltname of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._subjectaltname

    @subjectaltname.setter
    def subjectaltname(self, subjectaltname):
        """Sets the subjectaltname of this CertificateDetails.

        Subjectaltname of the resource  # noqa: E501

        :param subjectaltname: The subjectaltname of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._subjectaltname = subjectaltname

    @property
    def system_id(self):
        """Gets the system_id of this CertificateDetails.  # noqa: E501

        SystemID of the array  # noqa: E501

        :return: The system_id of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this CertificateDetails.

        SystemID of the array  # noqa: E501

        :param system_id: The system_id of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def text(self):
        """Gets the text of this CertificateDetails.  # noqa: E501

        array certificate text  # noqa: E501

        :return: The text of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CertificateDetails.

        array certificate text  # noqa: E501

        :param text: The text of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this CertificateDetails.  # noqa: E501

        The type of resource.  # noqa: E501

        :return: The type of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CertificateDetails.

        The type of resource.  # noqa: E501

        :param type: The type of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this CertificateDetails.  # noqa: E501

        URI of the resource  # noqa: E501

        :return: The uri of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CertificateDetails.

        URI of the resource  # noqa: E501

        :param uri: The uri of this CertificateDetails.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
