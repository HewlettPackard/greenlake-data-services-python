# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReplicationPartnerList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer_id': 'str',
        'display_name': 'str',
        'domain': 'str',
        'generation': 'int',
        'group_id': 'str',
        'group_last_sync_time': 'SyncTime',
        'group_name': 'str',
        'group_object_id': 'int',
        'id': 'str',
        'is_protection_policy_configured': 'bool',
        'is_remote_array_support_replication': 'bool',
        'is_source_array_support_replication': 'bool',
        'mode': 'str',
        'policies': 'ReplicationPartnerListPolicies',
        'protection_type': 'str',
        'remote_snp_cpg': 'str',
        'remote_usr_cpg': 'str',
        'remote_volume_set_name': 'str',
        'resource_uri': 'str',
        'role_reversed': 'bool',
        'snap_frequency_secs': 'int',
        'state': 'str',
        'sync_period': 'int',
        'system_id': 'str',
        'system_name': 'str',
        'system_wwn': 'str',
        'target_name': 'str',
        'type': 'str',
        'volume_count': 'int'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'display_name': 'displayName',
        'domain': 'domain',
        'generation': 'generation',
        'group_id': 'groupId',
        'group_last_sync_time': 'groupLastSyncTime',
        'group_name': 'groupName',
        'group_object_id': 'groupObjectId',
        'id': 'id',
        'is_protection_policy_configured': 'isProtectionPolicyConfigured',
        'is_remote_array_support_replication': 'isRemoteArraySupportReplication',
        'is_source_array_support_replication': 'isSourceArraySupportReplication',
        'mode': 'mode',
        'policies': 'policies',
        'protection_type': 'protectionType',
        'remote_snp_cpg': 'remoteSnpCPG',
        'remote_usr_cpg': 'remoteUsrCPG',
        'remote_volume_set_name': 'remoteVolumeSetName',
        'resource_uri': 'resourceUri',
        'role_reversed': 'roleReversed',
        'snap_frequency_secs': 'snapFrequencySecs',
        'state': 'state',
        'sync_period': 'syncPeriod',
        'system_id': 'systemId',
        'system_name': 'systemName',
        'system_wwn': 'systemWWN',
        'target_name': 'targetName',
        'type': 'type',
        'volume_count': 'volumeCount'
    }

    def __init__(self, customer_id=None, display_name=None, domain=None, generation=None, group_id=None, group_last_sync_time=None, group_name=None, group_object_id=None, id=None, is_protection_policy_configured=None, is_remote_array_support_replication=None, is_source_array_support_replication=None, mode=None, policies=None, protection_type=None, remote_snp_cpg=None, remote_usr_cpg=None, remote_volume_set_name=None, resource_uri=None, role_reversed=None, snap_frequency_secs=None, state=None, sync_period=None, system_id=None, system_name=None, system_wwn=None, target_name=None, type=None, volume_count=None):  # noqa: E501
        """ReplicationPartnerList - a model defined in OpenAPI"""  # noqa: E501

        self._customer_id = None
        self._display_name = None
        self._domain = None
        self._generation = None
        self._group_id = None
        self._group_last_sync_time = None
        self._group_name = None
        self._group_object_id = None
        self._id = None
        self._is_protection_policy_configured = None
        self._is_remote_array_support_replication = None
        self._is_source_array_support_replication = None
        self._mode = None
        self._policies = None
        self._protection_type = None
        self._remote_snp_cpg = None
        self._remote_usr_cpg = None
        self._remote_volume_set_name = None
        self._resource_uri = None
        self._role_reversed = None
        self._snap_frequency_secs = None
        self._state = None
        self._sync_period = None
        self._system_id = None
        self._system_name = None
        self._system_wwn = None
        self._target_name = None
        self._type = None
        self._volume_count = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if generation is not None:
            self.generation = generation
        if group_id is not None:
            self.group_id = group_id
        if group_last_sync_time is not None:
            self.group_last_sync_time = group_last_sync_time
        if group_name is not None:
            self.group_name = group_name
        if group_object_id is not None:
            self.group_object_id = group_object_id
        if id is not None:
            self.id = id
        if is_protection_policy_configured is not None:
            self.is_protection_policy_configured = is_protection_policy_configured
        if is_remote_array_support_replication is not None:
            self.is_remote_array_support_replication = is_remote_array_support_replication
        if is_source_array_support_replication is not None:
            self.is_source_array_support_replication = is_source_array_support_replication
        if mode is not None:
            self.mode = mode
        if policies is not None:
            self.policies = policies
        if protection_type is not None:
            self.protection_type = protection_type
        if remote_snp_cpg is not None:
            self.remote_snp_cpg = remote_snp_cpg
        if remote_usr_cpg is not None:
            self.remote_usr_cpg = remote_usr_cpg
        if remote_volume_set_name is not None:
            self.remote_volume_set_name = remote_volume_set_name
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if role_reversed is not None:
            self.role_reversed = role_reversed
        if snap_frequency_secs is not None:
            self.snap_frequency_secs = snap_frequency_secs
        if state is not None:
            self.state = state
        if sync_period is not None:
            self.sync_period = sync_period
        if system_id is not None:
            self.system_id = system_id
        if system_name is not None:
            self.system_name = system_name
        if system_wwn is not None:
            self.system_wwn = system_wwn
        if target_name is not None:
            self.target_name = target_name
        if type is not None:
            self.type = type
        if volume_count is not None:
            self.volume_count = volume_count

    @property
    def customer_id(self):
        """Gets the customer_id of this ReplicationPartnerList.  # noqa: E501

        customer ID  # noqa: E501

        :return: The customer_id of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ReplicationPartnerList.

        customer ID  # noqa: E501

        :param customer_id: The customer_id of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def display_name(self):
        """Gets the display_name of this ReplicationPartnerList.  # noqa: E501

        Replication partner display name.  # noqa: E501

        :return: The display_name of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ReplicationPartnerList.

        Replication partner display name.  # noqa: E501

        :param display_name: The display_name of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self):
        """Gets the domain of this ReplicationPartnerList.  # noqa: E501

        Domain that the resource belongs to.  # noqa: E501

        :return: The domain of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ReplicationPartnerList.

        Domain that the resource belongs to.  # noqa: E501

        :param domain: The domain of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def generation(self):
        """Gets the generation of this ReplicationPartnerList.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this ReplicationPartnerList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this ReplicationPartnerList.

        generation  # noqa: E501

        :param generation: The generation of this ReplicationPartnerList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def group_id(self):
        """Gets the group_id of this ReplicationPartnerList.  # noqa: E501

        Unique id of replication partner remote group  # noqa: E501

        :return: The group_id of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ReplicationPartnerList.

        Unique id of replication partner remote group  # noqa: E501

        :param group_id: The group_id of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def group_last_sync_time(self):
        """Gets the group_last_sync_time of this ReplicationPartnerList.  # noqa: E501


        :return: The group_last_sync_time of this ReplicationPartnerList.  # noqa: E501
        :rtype: SyncTime
        """
        return self._group_last_sync_time

    @group_last_sync_time.setter
    def group_last_sync_time(self, group_last_sync_time):
        """Sets the group_last_sync_time of this ReplicationPartnerList.


        :param group_last_sync_time: The group_last_sync_time of this ReplicationPartnerList.  # noqa: E501
        :type: SyncTime
        """

        self._group_last_sync_time = group_last_sync_time

    @property
    def group_name(self):
        """Gets the group_name of this ReplicationPartnerList.  # noqa: E501

        Replication partner remote group name.  # noqa: E501

        :return: The group_name of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ReplicationPartnerList.

        Replication partner remote group name.  # noqa: E501

        :param group_name: The group_name of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_object_id(self):
        """Gets the group_object_id of this ReplicationPartnerList.  # noqa: E501

        Replication partner group ID.  # noqa: E501

        :return: The group_object_id of this ReplicationPartnerList.  # noqa: E501
        :rtype: int
        """
        return self._group_object_id

    @group_object_id.setter
    def group_object_id(self, group_object_id):
        """Sets the group_object_id of this ReplicationPartnerList.

        Replication partner group ID.  # noqa: E501

        :param group_object_id: The group_object_id of this ReplicationPartnerList.  # noqa: E501
        :type: int
        """

        self._group_object_id = group_object_id

    @property
    def id(self):
        """Gets the id of this ReplicationPartnerList.  # noqa: E501

        Unique Identifier of the replication partner.  # noqa: E501

        :return: The id of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationPartnerList.

        Unique Identifier of the replication partner.  # noqa: E501

        :param id: The id of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_protection_policy_configured(self):
        """Gets the is_protection_policy_configured of this ReplicationPartnerList.  # noqa: E501

        Boolean value to indicate if protection policy is properly configured on the volume set. If it is set to false, user needs to either delete the policy or fix the policy configuration. All other operations will be blocked in this scenario.  # noqa: E501

        :return: The is_protection_policy_configured of this ReplicationPartnerList.  # noqa: E501
        :rtype: bool
        """
        return self._is_protection_policy_configured

    @is_protection_policy_configured.setter
    def is_protection_policy_configured(self, is_protection_policy_configured):
        """Sets the is_protection_policy_configured of this ReplicationPartnerList.

        Boolean value to indicate if protection policy is properly configured on the volume set. If it is set to false, user needs to either delete the policy or fix the policy configuration. All other operations will be blocked in this scenario.  # noqa: E501

        :param is_protection_policy_configured: The is_protection_policy_configured of this ReplicationPartnerList.  # noqa: E501
        :type: bool
        """

        self._is_protection_policy_configured = is_protection_policy_configured

    @property
    def is_remote_array_support_replication(self):
        """Gets the is_remote_array_support_replication of this ReplicationPartnerList.  # noqa: E501

        Boolean value to indicate if remote array OS version supports replication  # noqa: E501

        :return: The is_remote_array_support_replication of this ReplicationPartnerList.  # noqa: E501
        :rtype: bool
        """
        return self._is_remote_array_support_replication

    @is_remote_array_support_replication.setter
    def is_remote_array_support_replication(self, is_remote_array_support_replication):
        """Sets the is_remote_array_support_replication of this ReplicationPartnerList.

        Boolean value to indicate if remote array OS version supports replication  # noqa: E501

        :param is_remote_array_support_replication: The is_remote_array_support_replication of this ReplicationPartnerList.  # noqa: E501
        :type: bool
        """

        self._is_remote_array_support_replication = is_remote_array_support_replication

    @property
    def is_source_array_support_replication(self):
        """Gets the is_source_array_support_replication of this ReplicationPartnerList.  # noqa: E501

        Boolean value to indicate if source array OS version supports replication  # noqa: E501

        :return: The is_source_array_support_replication of this ReplicationPartnerList.  # noqa: E501
        :rtype: bool
        """
        return self._is_source_array_support_replication

    @is_source_array_support_replication.setter
    def is_source_array_support_replication(self, is_source_array_support_replication):
        """Sets the is_source_array_support_replication of this ReplicationPartnerList.

        Boolean value to indicate if source array OS version supports replication  # noqa: E501

        :param is_source_array_support_replication: The is_source_array_support_replication of this ReplicationPartnerList.  # noqa: E501
        :type: bool
        """

        self._is_source_array_support_replication = is_source_array_support_replication

    @property
    def mode(self):
        """Gets the mode of this ReplicationPartnerList.  # noqa: E501

        Replication partner group mode.  # noqa: E501

        :return: The mode of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ReplicationPartnerList.

        Replication partner group mode.  # noqa: E501

        :param mode: The mode of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def policies(self):
        """Gets the policies of this ReplicationPartnerList.  # noqa: E501


        :return: The policies of this ReplicationPartnerList.  # noqa: E501
        :rtype: ReplicationPartnerListPolicies
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this ReplicationPartnerList.


        :param policies: The policies of this ReplicationPartnerList.  # noqa: E501
        :type: ReplicationPartnerListPolicies
        """

        self._policies = policies

    @property
    def protection_type(self):
        """Gets the protection_type of this ReplicationPartnerList.  # noqa: E501

        Type of protection  # noqa: E501

        :return: The protection_type of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._protection_type

    @protection_type.setter
    def protection_type(self, protection_type):
        """Sets the protection_type of this ReplicationPartnerList.

        Type of protection  # noqa: E501

        :param protection_type: The protection_type of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._protection_type = protection_type

    @property
    def remote_snp_cpg(self):
        """Gets the remote_snp_cpg of this ReplicationPartnerList.  # noqa: E501

        Name for which the snapshot space is allocated on the remote target.  # noqa: E501

        :return: The remote_snp_cpg of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._remote_snp_cpg

    @remote_snp_cpg.setter
    def remote_snp_cpg(self, remote_snp_cpg):
        """Sets the remote_snp_cpg of this ReplicationPartnerList.

        Name for which the snapshot space is allocated on the remote target.  # noqa: E501

        :param remote_snp_cpg: The remote_snp_cpg of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._remote_snp_cpg = remote_snp_cpg

    @property
    def remote_usr_cpg(self):
        """Gets the remote_usr_cpg of this ReplicationPartnerList.  # noqa: E501

        Name for which the user space is allocated on the remote target.  # noqa: E501

        :return: The remote_usr_cpg of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._remote_usr_cpg

    @remote_usr_cpg.setter
    def remote_usr_cpg(self, remote_usr_cpg):
        """Sets the remote_usr_cpg of this ReplicationPartnerList.

        Name for which the user space is allocated on the remote target.  # noqa: E501

        :param remote_usr_cpg: The remote_usr_cpg of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._remote_usr_cpg = remote_usr_cpg

    @property
    def remote_volume_set_name(self):
        """Gets the remote_volume_set_name of this ReplicationPartnerList.  # noqa: E501

        Target volume set name where remote protection is enabled  # noqa: E501

        :return: The remote_volume_set_name of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._remote_volume_set_name

    @remote_volume_set_name.setter
    def remote_volume_set_name(self, remote_volume_set_name):
        """Sets the remote_volume_set_name of this ReplicationPartnerList.

        Target volume set name where remote protection is enabled  # noqa: E501

        :param remote_volume_set_name: The remote_volume_set_name of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._remote_volume_set_name = remote_volume_set_name

    @property
    def resource_uri(self):
        """Gets the resource_uri of this ReplicationPartnerList.  # noqa: E501

        resourceUri for replication partner list where volume set is remote protected  # noqa: E501

        :return: The resource_uri of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this ReplicationPartnerList.

        resourceUri for replication partner list where volume set is remote protected  # noqa: E501

        :param resource_uri: The resource_uri of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def role_reversed(self):
        """Gets the role_reversed of this ReplicationPartnerList.  # noqa: E501

        Remote group role switched due to a fail over.  # noqa: E501

        :return: The role_reversed of this ReplicationPartnerList.  # noqa: E501
        :rtype: bool
        """
        return self._role_reversed

    @role_reversed.setter
    def role_reversed(self, role_reversed):
        """Sets the role_reversed of this ReplicationPartnerList.

        Remote group role switched due to a fail over.  # noqa: E501

        :param role_reversed: The role_reversed of this ReplicationPartnerList.  # noqa: E501
        :type: bool
        """

        self._role_reversed = role_reversed

    @property
    def snap_frequency_secs(self):
        """Gets the snap_frequency_secs of this ReplicationPartnerList.  # noqa: E501

        Specifies the interval in seconds at which remote group takes coordinated snapshots. This field applies only to Async mode: it is set to -1 otherwise.  # noqa: E501

        :return: The snap_frequency_secs of this ReplicationPartnerList.  # noqa: E501
        :rtype: int
        """
        return self._snap_frequency_secs

    @snap_frequency_secs.setter
    def snap_frequency_secs(self, snap_frequency_secs):
        """Sets the snap_frequency_secs of this ReplicationPartnerList.

        Specifies the interval in seconds at which remote group takes coordinated snapshots. This field applies only to Async mode: it is set to -1 otherwise.  # noqa: E501

        :param snap_frequency_secs: The snap_frequency_secs of this ReplicationPartnerList.  # noqa: E501
        :type: int
        """

        self._snap_frequency_secs = snap_frequency_secs

    @property
    def state(self):
        """Gets the state of this ReplicationPartnerList.  # noqa: E501

        Status of the Remote group for the replication partner. Can be New, Starting, Started, Restart, Stopped, Backup, Failsafe or Logging. Null if unset.  # noqa: E501

        :return: The state of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReplicationPartnerList.

        Status of the Remote group for the replication partner. Can be New, Starting, Started, Restart, Stopped, Backup, Failsafe or Logging. Null if unset.  # noqa: E501

        :param state: The state of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def sync_period(self):
        """Gets the sync_period of this ReplicationPartnerList.  # noqa: E501

        Time period in seconds for automatic resynchronization. The value must be at least five minutes and not more than one year. Defaults to 0.  # noqa: E501

        :return: The sync_period of this ReplicationPartnerList.  # noqa: E501
        :rtype: int
        """
        return self._sync_period

    @sync_period.setter
    def sync_period(self, sync_period):
        """Sets the sync_period of this ReplicationPartnerList.

        Time period in seconds for automatic resynchronization. The value must be at least five minutes and not more than one year. Defaults to 0.  # noqa: E501

        :param sync_period: The sync_period of this ReplicationPartnerList.  # noqa: E501
        :type: int
        """

        self._sync_period = sync_period

    @property
    def system_id(self):
        """Gets the system_id of this ReplicationPartnerList.  # noqa: E501

        Unique ID or serial number of the system.  # noqa: E501

        :return: The system_id of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this ReplicationPartnerList.

        Unique ID or serial number of the system.  # noqa: E501

        :param system_id: The system_id of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_name(self):
        """Gets the system_name of this ReplicationPartnerList.  # noqa: E501

        Name of the system.  # noqa: E501

        :return: The system_name of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this ReplicationPartnerList.

        Name of the system.  # noqa: E501

        :param system_name: The system_name of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def system_wwn(self):
        """Gets the system_wwn of this ReplicationPartnerList.  # noqa: E501

        WWN of the system.  # noqa: E501

        :return: The system_wwn of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._system_wwn

    @system_wwn.setter
    def system_wwn(self, system_wwn):
        """Sets the system_wwn of this ReplicationPartnerList.

        WWN of the system.  # noqa: E501

        :param system_wwn: The system_wwn of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._system_wwn = system_wwn

    @property
    def target_name(self):
        """Gets the target_name of this ReplicationPartnerList.  # noqa: E501

        Target to which the volume group is mirrored. This is the same as replication partner.  # noqa: E501

        :return: The target_name of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this ReplicationPartnerList.

        Target to which the volume group is mirrored. This is the same as replication partner.  # noqa: E501

        :param target_name: The target_name of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def type(self):
        """Gets the type of this ReplicationPartnerList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this ReplicationPartnerList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReplicationPartnerList.

        type  # noqa: E501

        :param type: The type of this ReplicationPartnerList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def volume_count(self):
        """Gets the volume_count of this ReplicationPartnerList.  # noqa: E501

        Number of volumes in the group for a replication partner.  # noqa: E501

        :return: The volume_count of this ReplicationPartnerList.  # noqa: E501
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this ReplicationPartnerList.

        Number of volumes in the group for a replication partner.  # noqa: E501

        :param volume_count: The volume_count of this ReplicationPartnerList.  # noqa: E501
        :type: int
        """

        self._volume_count = volume_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationPartnerList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
