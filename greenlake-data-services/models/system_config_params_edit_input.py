# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SystemConfigParamsEditInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth_mode': 'object',
        'date_time': 'str',
        'installation_sites': 'object',
        'name': 'str',
        'ntp_addresses': 'list[str]',
        'remote_syslog_settings': 'object',
        'srinfo': 'object',
        'support_contact': 'ContactsEditDetails',
        'system_parameters': 'object',
        'timezone': 'str'
    }

    attribute_map = {
        'auth_mode': 'authMode',
        'date_time': 'dateTime',
        'installation_sites': 'installationSites',
        'name': 'name',
        'ntp_addresses': 'ntpAddresses',
        'remote_syslog_settings': 'remoteSyslogSettings',
        'srinfo': 'srinfo',
        'support_contact': 'supportContact',
        'system_parameters': 'systemParameters',
        'timezone': 'timezone'
    }

    def __init__(self, auth_mode=None, date_time=None, installation_sites=None, name=None, ntp_addresses=None, remote_syslog_settings=None, srinfo=None, support_contact=None, system_parameters=None, timezone=None):  # noqa: E501
        """SystemConfigParamsEditInput - a model defined in OpenAPI"""  # noqa: E501

        self._auth_mode = None
        self._date_time = None
        self._installation_sites = None
        self._name = None
        self._ntp_addresses = None
        self._remote_syslog_settings = None
        self._srinfo = None
        self._support_contact = None
        self._system_parameters = None
        self._timezone = None
        self.discriminator = None

        if auth_mode is not None:
            self.auth_mode = auth_mode
        if date_time is not None:
            self.date_time = date_time
        if installation_sites is not None:
            self.installation_sites = installation_sites
        if name is not None:
            self.name = name
        if ntp_addresses is not None:
            self.ntp_addresses = ntp_addresses
        if remote_syslog_settings is not None:
            self.remote_syslog_settings = remote_syslog_settings
        if srinfo is not None:
            self.srinfo = srinfo
        if support_contact is not None:
            self.support_contact = support_contact
        if system_parameters is not None:
            self.system_parameters = system_parameters
        if timezone is not None:
            self.timezone = timezone

    @property
    def auth_mode(self):
        """Gets the auth_mode of this SystemConfigParamsEditInput.  # noqa: E501


        :return: The auth_mode of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: object
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this SystemConfigParamsEditInput.


        :param auth_mode: The auth_mode of this SystemConfigParamsEditInput.  # noqa: E501
        :type: object
        """

        self._auth_mode = auth_mode

    @property
    def date_time(self):
        """Gets the date_time of this SystemConfigParamsEditInput.  # noqa: E501

        system date time  # noqa: E501

        :return: The date_time of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this SystemConfigParamsEditInput.

        system date time  # noqa: E501

        :param date_time: The date_time of this SystemConfigParamsEditInput.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def installation_sites(self):
        """Gets the installation_sites of this SystemConfigParamsEditInput.  # noqa: E501


        :return: The installation_sites of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: object
        """
        return self._installation_sites

    @installation_sites.setter
    def installation_sites(self, installation_sites):
        """Sets the installation_sites of this SystemConfigParamsEditInput.


        :param installation_sites: The installation_sites of this SystemConfigParamsEditInput.  # noqa: E501
        :type: object
        """

        self._installation_sites = installation_sites

    @property
    def name(self):
        """Gets the name of this SystemConfigParamsEditInput.  # noqa: E501

        system name  # noqa: E501

        :return: The name of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemConfigParamsEditInput.

        system name  # noqa: E501

        :param name: The name of this SystemConfigParamsEditInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ntp_addresses(self):
        """Gets the ntp_addresses of this SystemConfigParamsEditInput.  # noqa: E501

        system ntp addresses  # noqa: E501

        :return: The ntp_addresses of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._ntp_addresses

    @ntp_addresses.setter
    def ntp_addresses(self, ntp_addresses):
        """Sets the ntp_addresses of this SystemConfigParamsEditInput.

        system ntp addresses  # noqa: E501

        :param ntp_addresses: The ntp_addresses of this SystemConfigParamsEditInput.  # noqa: E501
        :type: list[str]
        """

        self._ntp_addresses = ntp_addresses

    @property
    def remote_syslog_settings(self):
        """Gets the remote_syslog_settings of this SystemConfigParamsEditInput.  # noqa: E501


        :return: The remote_syslog_settings of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: object
        """
        return self._remote_syslog_settings

    @remote_syslog_settings.setter
    def remote_syslog_settings(self, remote_syslog_settings):
        """Sets the remote_syslog_settings of this SystemConfigParamsEditInput.


        :param remote_syslog_settings: The remote_syslog_settings of this SystemConfigParamsEditInput.  # noqa: E501
        :type: object
        """

        self._remote_syslog_settings = remote_syslog_settings

    @property
    def srinfo(self):
        """Gets the srinfo of this SystemConfigParamsEditInput.  # noqa: E501


        :return: The srinfo of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: object
        """
        return self._srinfo

    @srinfo.setter
    def srinfo(self, srinfo):
        """Sets the srinfo of this SystemConfigParamsEditInput.


        :param srinfo: The srinfo of this SystemConfigParamsEditInput.  # noqa: E501
        :type: object
        """

        self._srinfo = srinfo

    @property
    def support_contact(self):
        """Gets the support_contact of this SystemConfigParamsEditInput.  # noqa: E501


        :return: The support_contact of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: ContactsEditDetails
        """
        return self._support_contact

    @support_contact.setter
    def support_contact(self, support_contact):
        """Sets the support_contact of this SystemConfigParamsEditInput.


        :param support_contact: The support_contact of this SystemConfigParamsEditInput.  # noqa: E501
        :type: ContactsEditDetails
        """

        self._support_contact = support_contact

    @property
    def system_parameters(self):
        """Gets the system_parameters of this SystemConfigParamsEditInput.  # noqa: E501


        :return: The system_parameters of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: object
        """
        return self._system_parameters

    @system_parameters.setter
    def system_parameters(self, system_parameters):
        """Sets the system_parameters of this SystemConfigParamsEditInput.


        :param system_parameters: The system_parameters of this SystemConfigParamsEditInput.  # noqa: E501
        :type: object
        """

        self._system_parameters = system_parameters

    @property
    def timezone(self):
        """Gets the timezone of this SystemConfigParamsEditInput.  # noqa: E501

        system time zone  # noqa: E501

        :return: The timezone of this SystemConfigParamsEditInput.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SystemConfigParamsEditInput.

        system time zone  # noqa: E501

        :param timezone: The timezone of this SystemConfigParamsEditInput.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemConfigParamsEditInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
