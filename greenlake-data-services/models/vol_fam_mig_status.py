# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VolFamMigStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'array_list': 'list[ArrayMigStatus]',
        'dest_pool_id': 'str',
        'dest_pool_name': 'str',
        'move_bytes_migrated': 'int',
        'move_bytes_remaining': 'int',
        'move_est_compl_time': 'int',
        'move_start_time': 'int',
        'root_vol_id': 'str',
        'root_vol_name': 'str',
        'source_pool_id': 'str',
        'source_pool_name': 'str'
    }

    attribute_map = {
        'array_list': 'array_list',
        'dest_pool_id': 'dest_pool_id',
        'dest_pool_name': 'dest_pool_name',
        'move_bytes_migrated': 'move_bytes_migrated',
        'move_bytes_remaining': 'move_bytes_remaining',
        'move_est_compl_time': 'move_est_compl_time',
        'move_start_time': 'move_start_time',
        'root_vol_id': 'root_vol_id',
        'root_vol_name': 'root_vol_name',
        'source_pool_id': 'source_pool_id',
        'source_pool_name': 'source_pool_name'
    }

    def __init__(self, array_list=None, dest_pool_id=None, dest_pool_name=None, move_bytes_migrated=None, move_bytes_remaining=None, move_est_compl_time=None, move_start_time=None, root_vol_id=None, root_vol_name=None, source_pool_id=None, source_pool_name=None):  # noqa: E501
        """VolFamMigStatus - a model defined in OpenAPI"""  # noqa: E501

        self._array_list = None
        self._dest_pool_id = None
        self._dest_pool_name = None
        self._move_bytes_migrated = None
        self._move_bytes_remaining = None
        self._move_est_compl_time = None
        self._move_start_time = None
        self._root_vol_id = None
        self._root_vol_name = None
        self._source_pool_id = None
        self._source_pool_name = None
        self.discriminator = None

        if array_list is not None:
            self.array_list = array_list
        if dest_pool_id is not None:
            self.dest_pool_id = dest_pool_id
        if dest_pool_name is not None:
            self.dest_pool_name = dest_pool_name
        if move_bytes_migrated is not None:
            self.move_bytes_migrated = move_bytes_migrated
        if move_bytes_remaining is not None:
            self.move_bytes_remaining = move_bytes_remaining
        if move_est_compl_time is not None:
            self.move_est_compl_time = move_est_compl_time
        if move_start_time is not None:
            self.move_start_time = move_start_time
        if root_vol_id is not None:
            self.root_vol_id = root_vol_id
        if root_vol_name is not None:
            self.root_vol_name = root_vol_name
        if source_pool_id is not None:
            self.source_pool_id = source_pool_id
        if source_pool_name is not None:
            self.source_pool_name = source_pool_name

    @property
    def array_list(self):
        """Gets the array_list of this VolFamMigStatus.  # noqa: E501

        Data migration status for the arrays that store the volumes.  # noqa: E501

        :return: The array_list of this VolFamMigStatus.  # noqa: E501
        :rtype: list[ArrayMigStatus]
        """
        return self._array_list

    @array_list.setter
    def array_list(self, array_list):
        """Sets the array_list of this VolFamMigStatus.

        Data migration status for the arrays that store the volumes.  # noqa: E501

        :param array_list: The array_list of this VolFamMigStatus.  # noqa: E501
        :type: list[ArrayMigStatus]
        """

        self._array_list = array_list

    @property
    def dest_pool_id(self):
        """Gets the dest_pool_id of this VolFamMigStatus.  # noqa: E501

        ID of the destination pool, where the volumes are moved.  # noqa: E501

        :return: The dest_pool_id of this VolFamMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._dest_pool_id

    @dest_pool_id.setter
    def dest_pool_id(self, dest_pool_id):
        """Sets the dest_pool_id of this VolFamMigStatus.

        ID of the destination pool, where the volumes are moved.  # noqa: E501

        :param dest_pool_id: The dest_pool_id of this VolFamMigStatus.  # noqa: E501
        :type: str
        """

        self._dest_pool_id = dest_pool_id

    @property
    def dest_pool_name(self):
        """Gets the dest_pool_name of this VolFamMigStatus.  # noqa: E501

        Name of the destination pool, where the volumes are moved.  # noqa: E501

        :return: The dest_pool_name of this VolFamMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._dest_pool_name

    @dest_pool_name.setter
    def dest_pool_name(self, dest_pool_name):
        """Sets the dest_pool_name of this VolFamMigStatus.

        Name of the destination pool, where the volumes are moved.  # noqa: E501

        :param dest_pool_name: The dest_pool_name of this VolFamMigStatus.  # noqa: E501
        :type: str
        """

        self._dest_pool_name = dest_pool_name

    @property
    def move_bytes_migrated(self):
        """Gets the move_bytes_migrated of this VolFamMigStatus.  # noqa: E501

        The bytes of volumes which have been moved.  # noqa: E501

        :return: The move_bytes_migrated of this VolFamMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._move_bytes_migrated

    @move_bytes_migrated.setter
    def move_bytes_migrated(self, move_bytes_migrated):
        """Sets the move_bytes_migrated of this VolFamMigStatus.

        The bytes of volumes which have been moved.  # noqa: E501

        :param move_bytes_migrated: The move_bytes_migrated of this VolFamMigStatus.  # noqa: E501
        :type: int
        """

        self._move_bytes_migrated = move_bytes_migrated

    @property
    def move_bytes_remaining(self):
        """Gets the move_bytes_remaining of this VolFamMigStatus.  # noqa: E501

        The bytes of volumes which have not been moved.  # noqa: E501

        :return: The move_bytes_remaining of this VolFamMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._move_bytes_remaining

    @move_bytes_remaining.setter
    def move_bytes_remaining(self, move_bytes_remaining):
        """Sets the move_bytes_remaining of this VolFamMigStatus.

        The bytes of volumes which have not been moved.  # noqa: E501

        :param move_bytes_remaining: The move_bytes_remaining of this VolFamMigStatus.  # noqa: E501
        :type: int
        """

        self._move_bytes_remaining = move_bytes_remaining

    @property
    def move_est_compl_time(self):
        """Gets the move_est_compl_time of this VolFamMigStatus.  # noqa: E501

        The estimated time of completion of a move.  # noqa: E501

        :return: The move_est_compl_time of this VolFamMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._move_est_compl_time

    @move_est_compl_time.setter
    def move_est_compl_time(self, move_est_compl_time):
        """Sets the move_est_compl_time of this VolFamMigStatus.

        The estimated time of completion of a move.  # noqa: E501

        :param move_est_compl_time: The move_est_compl_time of this VolFamMigStatus.  # noqa: E501
        :type: int
        """

        self._move_est_compl_time = move_est_compl_time

    @property
    def move_start_time(self):
        """Gets the move_start_time of this VolFamMigStatus.  # noqa: E501

        The start time when the volumes was moved.  # noqa: E501

        :return: The move_start_time of this VolFamMigStatus.  # noqa: E501
        :rtype: int
        """
        return self._move_start_time

    @move_start_time.setter
    def move_start_time(self, move_start_time):
        """Sets the move_start_time of this VolFamMigStatus.

        The start time when the volumes was moved.  # noqa: E501

        :param move_start_time: The move_start_time of this VolFamMigStatus.  # noqa: E501
        :type: int
        """

        self._move_start_time = move_start_time

    @property
    def root_vol_id(self):
        """Gets the root_vol_id of this VolFamMigStatus.  # noqa: E501

        ID of the root volume in the group.  # noqa: E501

        :return: The root_vol_id of this VolFamMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._root_vol_id

    @root_vol_id.setter
    def root_vol_id(self, root_vol_id):
        """Sets the root_vol_id of this VolFamMigStatus.

        ID of the root volume in the group.  # noqa: E501

        :param root_vol_id: The root_vol_id of this VolFamMigStatus.  # noqa: E501
        :type: str
        """

        self._root_vol_id = root_vol_id

    @property
    def root_vol_name(self):
        """Gets the root_vol_name of this VolFamMigStatus.  # noqa: E501

        Name of the root volume in the group.  # noqa: E501

        :return: The root_vol_name of this VolFamMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._root_vol_name

    @root_vol_name.setter
    def root_vol_name(self, root_vol_name):
        """Sets the root_vol_name of this VolFamMigStatus.

        Name of the root volume in the group.  # noqa: E501

        :param root_vol_name: The root_vol_name of this VolFamMigStatus.  # noqa: E501
        :type: str
        """

        self._root_vol_name = root_vol_name

    @property
    def source_pool_id(self):
        """Gets the source_pool_id of this VolFamMigStatus.  # noqa: E501

        ID of the source pool, where the volumes originally locate.  # noqa: E501

        :return: The source_pool_id of this VolFamMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._source_pool_id

    @source_pool_id.setter
    def source_pool_id(self, source_pool_id):
        """Sets the source_pool_id of this VolFamMigStatus.

        ID of the source pool, where the volumes originally locate.  # noqa: E501

        :param source_pool_id: The source_pool_id of this VolFamMigStatus.  # noqa: E501
        :type: str
        """

        self._source_pool_id = source_pool_id

    @property
    def source_pool_name(self):
        """Gets the source_pool_name of this VolFamMigStatus.  # noqa: E501

        Name of the source pool, where the volumes originally locate.  # noqa: E501

        :return: The source_pool_name of this VolFamMigStatus.  # noqa: E501
        :rtype: str
        """
        return self._source_pool_name

    @source_pool_name.setter
    def source_pool_name(self, source_pool_name):
        """Sets the source_pool_name of this VolFamMigStatus.

        Name of the source pool, where the volumes originally locate.  # noqa: E501

        :param source_pool_name: The source_pool_name of this VolFamMigStatus.  # noqa: E501
        :type: str
        """

        self._source_pool_name = source_pool_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolFamMigStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
