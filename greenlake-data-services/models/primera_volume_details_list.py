# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PrimeraVolumeDetailsList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'admin_allocation_settings': 'UserAllocationSettings',
        'admin_space': 'Space',
        'associated_links': 'list[PrimeraVolumeDetailsAssociatedLinks]',
        'base_id': 'int',
        'comment': 'str',
        'compact_efficiency': 'float',
        'compression_efficiency': 'float',
        'compression_policy': 'str',
        'conversion_type': 'str',
        'copied_mb': 'float',
        'copied_perc': 'int',
        'copy_of_id': 'int',
        'creation_time': 'PrimeraVolumeDetailsListCreationTime',
        'customer_id': 'str',
        'data_reduction': 'str',
        'ddc_size': 'float',
        'dds_size': 'float',
        'dedup': 'str',
        'dedup_savings_size': 'float',
        'dedup_written_size': 'float',
        'dev_type': 'str',
        'displayname': 'str',
        'domain': 'str',
        'efficiency_update_time': 'Calendar',
        'expiration_time': 'Calendar',
        'fully_provisioned': 'bool',
        'generation': 'int',
        'heads_per_cylinder': 'int',
        'health_state': 'int',
        'hidden': 'bool',
        'host_written_mi_b': 'float',
        'host_written_to_virtual_percent': 'float',
        'id': 'str',
        'initiators': 'list[PrimeraApplicationSetDetailsInitiators]',
        'name': 'str',
        'parent_id': 'int',
        'phys_parent_id': 'int',
        'physical_copy': 'bool',
        'policy': 'Policy',
        'prov_type': 'str',
        'raid': 'str',
        'rcopy_status': 'str',
        'read_only': 'bool',
        'resource_uri': 'str',
        'retention_time': 'Calendar',
        'ro_child_id': 'int',
        'rw_child_id': 'int',
        'sectors_per_track': 'int',
        'shared_parent_id': 'int',
        'size_mi_b': 'float',
        'snap_shot_tier': 'str',
        'snapshot_alloc_limit': 'int',
        'snapshot_alloc_warning': 'int',
        'snapshot_allocation_settings': 'UserAllocationSettings',
        'snapshot_cpg_id': 'int',
        'snapshot_cpg_name': 'str',
        'snapshot_space': 'Space',
        'snapshot_tdvv_size': 'SnapshotTdvvsize',
        'snapshot_used_to_virtual_percent': 'float',
        'space_calculation_time': 'Calendar',
        'started': 'bool',
        'state': 'STATE',
        'storage_tier': 'str',
        'system_id': 'str',
        'thin_provisioned': 'bool',
        'thin_savings': 'str',
        'total_raw_reserved_mi_b': 'float',
        'total_reserved_mi_b': 'float',
        'total_space_mi_b': 'float',
        'type': 'str',
        'unref_space_freed_time': 'Calendar',
        'used_capacity': 'float',
        'used_size_mi_b': 'float',
        'user_alloc_limit': 'int',
        'user_alloc_warning': 'int',
        'user_allocation_settings': 'UserAllocationSettings',
        'user_cpg_id': 'int',
        'user_cpg_name': 'str',
        'user_reserved_to_virtual_percent': 'float',
        'user_space': 'Space',
        'user_used_to_virtual_percent': 'float',
        'vlun_sector_size': 'int',
        'volume_id': 'int',
        'volume_type': 'str',
        'wwn': 'str'
    }

    attribute_map = {
        'admin_allocation_settings': 'adminAllocationSettings',
        'admin_space': 'adminSpace',
        'associated_links': 'associatedLinks',
        'base_id': 'baseId',
        'comment': 'comment',
        'compact_efficiency': 'compactEfficiency',
        'compression_efficiency': 'compressionEfficiency',
        'compression_policy': 'compressionPolicy',
        'conversion_type': 'conversionType',
        'copied_mb': 'copiedMB',
        'copied_perc': 'copiedPerc',
        'copy_of_id': 'copyOfID',
        'creation_time': 'creationTime',
        'customer_id': 'customerId',
        'data_reduction': 'dataReduction',
        'ddc_size': 'ddcSize',
        'dds_size': 'ddsSize',
        'dedup': 'dedup',
        'dedup_savings_size': 'dedupSavingsSize',
        'dedup_written_size': 'dedupWrittenSize',
        'dev_type': 'devType',
        'displayname': 'displayname',
        'domain': 'domain',
        'efficiency_update_time': 'efficiencyUpdateTime',
        'expiration_time': 'expirationTime',
        'fully_provisioned': 'fullyProvisioned',
        'generation': 'generation',
        'heads_per_cylinder': 'headsPerCylinder',
        'health_state': 'healthState',
        'hidden': 'hidden',
        'host_written_mi_b': 'hostWrittenMiB',
        'host_written_to_virtual_percent': 'hostWrittenToVirtualPercent',
        'id': 'id',
        'initiators': 'initiators',
        'name': 'name',
        'parent_id': 'parentID',
        'phys_parent_id': 'physParentID',
        'physical_copy': 'physicalCopy',
        'policy': 'policy',
        'prov_type': 'provType',
        'raid': 'raid',
        'rcopy_status': 'rcopyStatus',
        'read_only': 'readOnly',
        'resource_uri': 'resourceUri',
        'retention_time': 'retentionTime',
        'ro_child_id': 'roChildID',
        'rw_child_id': 'rwChildID',
        'sectors_per_track': 'sectorsPerTrack',
        'shared_parent_id': 'sharedParentId',
        'size_mi_b': 'sizeMiB',
        'snap_shot_tier': 'snapShotTier',
        'snapshot_alloc_limit': 'snapshotAllocLimit',
        'snapshot_alloc_warning': 'snapshotAllocWarning',
        'snapshot_allocation_settings': 'snapshotAllocationSettings',
        'snapshot_cpg_id': 'snapshotCpgID',
        'snapshot_cpg_name': 'snapshotCpgName',
        'snapshot_space': 'snapshotSpace',
        'snapshot_tdvv_size': 'snapshotTdvvSize',
        'snapshot_used_to_virtual_percent': 'snapshotUsedToVirtualPercent',
        'space_calculation_time': 'spaceCalculationTime',
        'started': 'started',
        'state': 'state',
        'storage_tier': 'storageTier',
        'system_id': 'systemId',
        'thin_provisioned': 'thinProvisioned',
        'thin_savings': 'thinSavings',
        'total_raw_reserved_mi_b': 'totalRawReservedMiB',
        'total_reserved_mi_b': 'totalReservedMiB',
        'total_space_mi_b': 'totalSpaceMiB',
        'type': 'type',
        'unref_space_freed_time': 'unrefSpaceFreedTime',
        'used_capacity': 'usedCapacity',
        'used_size_mi_b': 'usedSizeMiB',
        'user_alloc_limit': 'userAllocLimit',
        'user_alloc_warning': 'userAllocWarning',
        'user_allocation_settings': 'userAllocationSettings',
        'user_cpg_id': 'userCpgID',
        'user_cpg_name': 'userCpgName',
        'user_reserved_to_virtual_percent': 'userReservedToVirtualPercent',
        'user_space': 'userSpace',
        'user_used_to_virtual_percent': 'userUsedToVirtualPercent',
        'vlun_sector_size': 'vlunSectorSize',
        'volume_id': 'volumeId',
        'volume_type': 'volumeType',
        'wwn': 'wwn'
    }

    def __init__(self, admin_allocation_settings=None, admin_space=None, associated_links=None, base_id=None, comment=None, compact_efficiency=None, compression_efficiency=None, compression_policy=None, conversion_type=None, copied_mb=None, copied_perc=None, copy_of_id=None, creation_time=None, customer_id=None, data_reduction=None, ddc_size=None, dds_size=None, dedup=None, dedup_savings_size=None, dedup_written_size=None, dev_type=None, displayname=None, domain=None, efficiency_update_time=None, expiration_time=None, fully_provisioned=None, generation=None, heads_per_cylinder=None, health_state=None, hidden=None, host_written_mi_b=None, host_written_to_virtual_percent=None, id=None, initiators=None, name=None, parent_id=None, phys_parent_id=None, physical_copy=None, policy=None, prov_type=None, raid=None, rcopy_status=None, read_only=None, resource_uri=None, retention_time=None, ro_child_id=None, rw_child_id=None, sectors_per_track=None, shared_parent_id=None, size_mi_b=None, snap_shot_tier=None, snapshot_alloc_limit=None, snapshot_alloc_warning=None, snapshot_allocation_settings=None, snapshot_cpg_id=None, snapshot_cpg_name=None, snapshot_space=None, snapshot_tdvv_size=None, snapshot_used_to_virtual_percent=None, space_calculation_time=None, started=None, state=None, storage_tier=None, system_id=None, thin_provisioned=None, thin_savings=None, total_raw_reserved_mi_b=None, total_reserved_mi_b=None, total_space_mi_b=None, type=None, unref_space_freed_time=None, used_capacity=None, used_size_mi_b=None, user_alloc_limit=None, user_alloc_warning=None, user_allocation_settings=None, user_cpg_id=None, user_cpg_name=None, user_reserved_to_virtual_percent=None, user_space=None, user_used_to_virtual_percent=None, vlun_sector_size=None, volume_id=None, volume_type=None, wwn=None):  # noqa: E501
        """PrimeraVolumeDetailsList - a model defined in OpenAPI"""  # noqa: E501

        self._admin_allocation_settings = None
        self._admin_space = None
        self._associated_links = None
        self._base_id = None
        self._comment = None
        self._compact_efficiency = None
        self._compression_efficiency = None
        self._compression_policy = None
        self._conversion_type = None
        self._copied_mb = None
        self._copied_perc = None
        self._copy_of_id = None
        self._creation_time = None
        self._customer_id = None
        self._data_reduction = None
        self._ddc_size = None
        self._dds_size = None
        self._dedup = None
        self._dedup_savings_size = None
        self._dedup_written_size = None
        self._dev_type = None
        self._displayname = None
        self._domain = None
        self._efficiency_update_time = None
        self._expiration_time = None
        self._fully_provisioned = None
        self._generation = None
        self._heads_per_cylinder = None
        self._health_state = None
        self._hidden = None
        self._host_written_mi_b = None
        self._host_written_to_virtual_percent = None
        self._id = None
        self._initiators = None
        self._name = None
        self._parent_id = None
        self._phys_parent_id = None
        self._physical_copy = None
        self._policy = None
        self._prov_type = None
        self._raid = None
        self._rcopy_status = None
        self._read_only = None
        self._resource_uri = None
        self._retention_time = None
        self._ro_child_id = None
        self._rw_child_id = None
        self._sectors_per_track = None
        self._shared_parent_id = None
        self._size_mi_b = None
        self._snap_shot_tier = None
        self._snapshot_alloc_limit = None
        self._snapshot_alloc_warning = None
        self._snapshot_allocation_settings = None
        self._snapshot_cpg_id = None
        self._snapshot_cpg_name = None
        self._snapshot_space = None
        self._snapshot_tdvv_size = None
        self._snapshot_used_to_virtual_percent = None
        self._space_calculation_time = None
        self._started = None
        self._state = None
        self._storage_tier = None
        self._system_id = None
        self._thin_provisioned = None
        self._thin_savings = None
        self._total_raw_reserved_mi_b = None
        self._total_reserved_mi_b = None
        self._total_space_mi_b = None
        self._type = None
        self._unref_space_freed_time = None
        self._used_capacity = None
        self._used_size_mi_b = None
        self._user_alloc_limit = None
        self._user_alloc_warning = None
        self._user_allocation_settings = None
        self._user_cpg_id = None
        self._user_cpg_name = None
        self._user_reserved_to_virtual_percent = None
        self._user_space = None
        self._user_used_to_virtual_percent = None
        self._vlun_sector_size = None
        self._volume_id = None
        self._volume_type = None
        self._wwn = None
        self.discriminator = None

        if admin_allocation_settings is not None:
            self.admin_allocation_settings = admin_allocation_settings
        if admin_space is not None:
            self.admin_space = admin_space
        if associated_links is not None:
            self.associated_links = associated_links
        if base_id is not None:
            self.base_id = base_id
        if comment is not None:
            self.comment = comment
        if compact_efficiency is not None:
            self.compact_efficiency = compact_efficiency
        if compression_efficiency is not None:
            self.compression_efficiency = compression_efficiency
        if compression_policy is not None:
            self.compression_policy = compression_policy
        if conversion_type is not None:
            self.conversion_type = conversion_type
        if copied_mb is not None:
            self.copied_mb = copied_mb
        if copied_perc is not None:
            self.copied_perc = copied_perc
        if copy_of_id is not None:
            self.copy_of_id = copy_of_id
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if data_reduction is not None:
            self.data_reduction = data_reduction
        if ddc_size is not None:
            self.ddc_size = ddc_size
        if dds_size is not None:
            self.dds_size = dds_size
        if dedup is not None:
            self.dedup = dedup
        if dedup_savings_size is not None:
            self.dedup_savings_size = dedup_savings_size
        if dedup_written_size is not None:
            self.dedup_written_size = dedup_written_size
        if dev_type is not None:
            self.dev_type = dev_type
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if efficiency_update_time is not None:
            self.efficiency_update_time = efficiency_update_time
        if expiration_time is not None:
            self.expiration_time = expiration_time
        if fully_provisioned is not None:
            self.fully_provisioned = fully_provisioned
        if generation is not None:
            self.generation = generation
        if heads_per_cylinder is not None:
            self.heads_per_cylinder = heads_per_cylinder
        if health_state is not None:
            self.health_state = health_state
        if hidden is not None:
            self.hidden = hidden
        if host_written_mi_b is not None:
            self.host_written_mi_b = host_written_mi_b
        if host_written_to_virtual_percent is not None:
            self.host_written_to_virtual_percent = host_written_to_virtual_percent
        if id is not None:
            self.id = id
        if initiators is not None:
            self.initiators = initiators
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if phys_parent_id is not None:
            self.phys_parent_id = phys_parent_id
        if physical_copy is not None:
            self.physical_copy = physical_copy
        if policy is not None:
            self.policy = policy
        if prov_type is not None:
            self.prov_type = prov_type
        if raid is not None:
            self.raid = raid
        if rcopy_status is not None:
            self.rcopy_status = rcopy_status
        if read_only is not None:
            self.read_only = read_only
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if retention_time is not None:
            self.retention_time = retention_time
        if ro_child_id is not None:
            self.ro_child_id = ro_child_id
        if rw_child_id is not None:
            self.rw_child_id = rw_child_id
        if sectors_per_track is not None:
            self.sectors_per_track = sectors_per_track
        if shared_parent_id is not None:
            self.shared_parent_id = shared_parent_id
        if size_mi_b is not None:
            self.size_mi_b = size_mi_b
        if snap_shot_tier is not None:
            self.snap_shot_tier = snap_shot_tier
        if snapshot_alloc_limit is not None:
            self.snapshot_alloc_limit = snapshot_alloc_limit
        if snapshot_alloc_warning is not None:
            self.snapshot_alloc_warning = snapshot_alloc_warning
        if snapshot_allocation_settings is not None:
            self.snapshot_allocation_settings = snapshot_allocation_settings
        if snapshot_cpg_id is not None:
            self.snapshot_cpg_id = snapshot_cpg_id
        if snapshot_cpg_name is not None:
            self.snapshot_cpg_name = snapshot_cpg_name
        if snapshot_space is not None:
            self.snapshot_space = snapshot_space
        if snapshot_tdvv_size is not None:
            self.snapshot_tdvv_size = snapshot_tdvv_size
        if snapshot_used_to_virtual_percent is not None:
            self.snapshot_used_to_virtual_percent = snapshot_used_to_virtual_percent
        if space_calculation_time is not None:
            self.space_calculation_time = space_calculation_time
        if started is not None:
            self.started = started
        if state is not None:
            self.state = state
        if storage_tier is not None:
            self.storage_tier = storage_tier
        if system_id is not None:
            self.system_id = system_id
        if thin_provisioned is not None:
            self.thin_provisioned = thin_provisioned
        if thin_savings is not None:
            self.thin_savings = thin_savings
        if total_raw_reserved_mi_b is not None:
            self.total_raw_reserved_mi_b = total_raw_reserved_mi_b
        if total_reserved_mi_b is not None:
            self.total_reserved_mi_b = total_reserved_mi_b
        if total_space_mi_b is not None:
            self.total_space_mi_b = total_space_mi_b
        if type is not None:
            self.type = type
        if unref_space_freed_time is not None:
            self.unref_space_freed_time = unref_space_freed_time
        if used_capacity is not None:
            self.used_capacity = used_capacity
        if used_size_mi_b is not None:
            self.used_size_mi_b = used_size_mi_b
        if user_alloc_limit is not None:
            self.user_alloc_limit = user_alloc_limit
        if user_alloc_warning is not None:
            self.user_alloc_warning = user_alloc_warning
        if user_allocation_settings is not None:
            self.user_allocation_settings = user_allocation_settings
        if user_cpg_id is not None:
            self.user_cpg_id = user_cpg_id
        if user_cpg_name is not None:
            self.user_cpg_name = user_cpg_name
        if user_reserved_to_virtual_percent is not None:
            self.user_reserved_to_virtual_percent = user_reserved_to_virtual_percent
        if user_space is not None:
            self.user_space = user_space
        if user_used_to_virtual_percent is not None:
            self.user_used_to_virtual_percent = user_used_to_virtual_percent
        if vlun_sector_size is not None:
            self.vlun_sector_size = vlun_sector_size
        if volume_id is not None:
            self.volume_id = volume_id
        if volume_type is not None:
            self.volume_type = volume_type
        if wwn is not None:
            self.wwn = wwn

    @property
    def admin_allocation_settings(self):
        """Gets the admin_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The admin_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: UserAllocationSettings
        """
        return self._admin_allocation_settings

    @admin_allocation_settings.setter
    def admin_allocation_settings(self, admin_allocation_settings):
        """Sets the admin_allocation_settings of this PrimeraVolumeDetailsList.


        :param admin_allocation_settings: The admin_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: UserAllocationSettings
        """

        self._admin_allocation_settings = admin_allocation_settings

    @property
    def admin_space(self):
        """Gets the admin_space of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The admin_space of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Space
        """
        return self._admin_space

    @admin_space.setter
    def admin_space(self, admin_space):
        """Sets the admin_space of this PrimeraVolumeDetailsList.


        :param admin_space: The admin_space of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Space
        """

        self._admin_space = admin_space

    @property
    def associated_links(self):
        """Gets the associated_links of this PrimeraVolumeDetailsList.  # noqa: E501

        Associated Links  # noqa: E501

        :return: The associated_links of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: list[PrimeraVolumeDetailsAssociatedLinks]
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this PrimeraVolumeDetailsList.

        Associated Links  # noqa: E501

        :param associated_links: The associated_links of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: list[PrimeraVolumeDetailsAssociatedLinks]
        """

        self._associated_links = associated_links

    @property
    def base_id(self):
        """Gets the base_id of this PrimeraVolumeDetailsList.  # noqa: E501

        snapshot Tdvv Size  # noqa: E501

        :return: The base_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._base_id

    @base_id.setter
    def base_id(self, base_id):
        """Sets the base_id of this PrimeraVolumeDetailsList.

        snapshot Tdvv Size  # noqa: E501

        :param base_id: The base_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._base_id = base_id

    @property
    def comment(self):
        """Gets the comment of this PrimeraVolumeDetailsList.  # noqa: E501

        Comments  # noqa: E501

        :return: The comment of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PrimeraVolumeDetailsList.

        Comments  # noqa: E501

        :param comment: The comment of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def compact_efficiency(self):
        """Gets the compact_efficiency of this PrimeraVolumeDetailsList.  # noqa: E501

        Compact Efficiency  # noqa: E501

        :return: The compact_efficiency of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._compact_efficiency

    @compact_efficiency.setter
    def compact_efficiency(self, compact_efficiency):
        """Sets the compact_efficiency of this PrimeraVolumeDetailsList.

        Compact Efficiency  # noqa: E501

        :param compact_efficiency: The compact_efficiency of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._compact_efficiency = compact_efficiency

    @property
    def compression_efficiency(self):
        """Gets the compression_efficiency of this PrimeraVolumeDetailsList.  # noqa: E501

        Compression Efficiency  # noqa: E501

        :return: The compression_efficiency of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._compression_efficiency

    @compression_efficiency.setter
    def compression_efficiency(self, compression_efficiency):
        """Sets the compression_efficiency of this PrimeraVolumeDetailsList.

        Compression Efficiency  # noqa: E501

        :param compression_efficiency: The compression_efficiency of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._compression_efficiency = compression_efficiency

    @property
    def compression_policy(self):
        """Gets the compression_policy of this PrimeraVolumeDetailsList.  # noqa: E501

        Compression Policy  # noqa: E501

        :return: The compression_policy of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._compression_policy

    @compression_policy.setter
    def compression_policy(self, compression_policy):
        """Sets the compression_policy of this PrimeraVolumeDetailsList.

        Compression Policy  # noqa: E501

        :param compression_policy: The compression_policy of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._compression_policy = compression_policy

    @property
    def conversion_type(self):
        """Gets the conversion_type of this PrimeraVolumeDetailsList.  # noqa: E501

        Conversion Type of Volume  # noqa: E501

        :return: The conversion_type of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._conversion_type

    @conversion_type.setter
    def conversion_type(self, conversion_type):
        """Sets the conversion_type of this PrimeraVolumeDetailsList.

        Conversion Type of Volume  # noqa: E501

        :param conversion_type: The conversion_type of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONVERSIONTYPE_THIN", "CONVERSIONTYPE_DDS", "CONVERSIONTYPE_V1", "CONVERSIONTYPE_V2", "null"]  # noqa: E501
        if conversion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `conversion_type` ({0}), must be one of {1}"  # noqa: E501
                .format(conversion_type, allowed_values)
            )

        self._conversion_type = conversion_type

    @property
    def copied_mb(self):
        """Gets the copied_mb of this PrimeraVolumeDetailsList.  # noqa: E501

        Copied MB  # noqa: E501

        :return: The copied_mb of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._copied_mb

    @copied_mb.setter
    def copied_mb(self, copied_mb):
        """Sets the copied_mb of this PrimeraVolumeDetailsList.

        Copied MB  # noqa: E501

        :param copied_mb: The copied_mb of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._copied_mb = copied_mb

    @property
    def copied_perc(self):
        """Gets the copied_perc of this PrimeraVolumeDetailsList.  # noqa: E501

        Copied Perecentage  # noqa: E501

        :return: The copied_perc of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._copied_perc

    @copied_perc.setter
    def copied_perc(self, copied_perc):
        """Sets the copied_perc of this PrimeraVolumeDetailsList.

        Copied Perecentage  # noqa: E501

        :param copied_perc: The copied_perc of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._copied_perc = copied_perc

    @property
    def copy_of_id(self):
        """Gets the copy_of_id of this PrimeraVolumeDetailsList.  # noqa: E501

        Copy of Id  # noqa: E501

        :return: The copy_of_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._copy_of_id

    @copy_of_id.setter
    def copy_of_id(self, copy_of_id):
        """Sets the copy_of_id of this PrimeraVolumeDetailsList.

        Copy of Id  # noqa: E501

        :param copy_of_id: The copy_of_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._copy_of_id = copy_of_id

    @property
    def creation_time(self):
        """Gets the creation_time of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The creation_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: PrimeraVolumeDetailsListCreationTime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this PrimeraVolumeDetailsList.


        :param creation_time: The creation_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: PrimeraVolumeDetailsListCreationTime
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this PrimeraVolumeDetailsList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PrimeraVolumeDetailsList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def data_reduction(self):
        """Gets the data_reduction of this PrimeraVolumeDetailsList.  # noqa: E501

        Data Reduction type  # noqa: E501

        :return: The data_reduction of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._data_reduction

    @data_reduction.setter
    def data_reduction(self, data_reduction):
        """Sets the data_reduction of this PrimeraVolumeDetailsList.

        Data Reduction type  # noqa: E501

        :param data_reduction: The data_reduction of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._data_reduction = data_reduction

    @property
    def ddc_size(self):
        """Gets the ddc_size of this PrimeraVolumeDetailsList.  # noqa: E501

        Note, will be updated at most once in an hour  # noqa: E501

        :return: The ddc_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._ddc_size

    @ddc_size.setter
    def ddc_size(self, ddc_size):
        """Sets the ddc_size of this PrimeraVolumeDetailsList.

        Note, will be updated at most once in an hour  # noqa: E501

        :param ddc_size: The ddc_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._ddc_size = ddc_size

    @property
    def dds_size(self):
        """Gets the dds_size of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The dds_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._dds_size

    @dds_size.setter
    def dds_size(self, dds_size):
        """Sets the dds_size of this PrimeraVolumeDetailsList.


        :param dds_size: The dds_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._dds_size = dds_size

    @property
    def dedup(self):
        """Gets the dedup of this PrimeraVolumeDetailsList.  # noqa: E501

        Field to indicate Dedup status  # noqa: E501

        :return: The dedup of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._dedup

    @dedup.setter
    def dedup(self, dedup):
        """Sets the dedup of this PrimeraVolumeDetailsList.

        Field to indicate Dedup status  # noqa: E501

        :param dedup: The dedup of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._dedup = dedup

    @property
    def dedup_savings_size(self):
        """Gets the dedup_savings_size of this PrimeraVolumeDetailsList.  # noqa: E501

        Note, will be updated at most once in an hour  # noqa: E501

        :return: The dedup_savings_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._dedup_savings_size

    @dedup_savings_size.setter
    def dedup_savings_size(self, dedup_savings_size):
        """Sets the dedup_savings_size of this PrimeraVolumeDetailsList.

        Note, will be updated at most once in an hour  # noqa: E501

        :param dedup_savings_size: The dedup_savings_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._dedup_savings_size = dedup_savings_size

    @property
    def dedup_written_size(self):
        """Gets the dedup_written_size of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The dedup_written_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._dedup_written_size

    @dedup_written_size.setter
    def dedup_written_size(self, dedup_written_size):
        """Sets the dedup_written_size of this PrimeraVolumeDetailsList.


        :param dedup_written_size: The dedup_written_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._dedup_written_size = dedup_written_size

    @property
    def dev_type(self):
        """Gets the dev_type of this PrimeraVolumeDetailsList.  # noqa: E501

        Device Type `Filter`  # noqa: E501

        :return: The dev_type of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._dev_type

    @dev_type.setter
    def dev_type(self, dev_type):
        """Sets the dev_type of this PrimeraVolumeDetailsList.

        Device Type `Filter`  # noqa: E501

        :param dev_type: The dev_type of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._dev_type = dev_type

    @property
    def displayname(self):
        """Gets the displayname of this PrimeraVolumeDetailsList.  # noqa: E501

        Display name of the volume  # noqa: E501

        :return: The displayname of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this PrimeraVolumeDetailsList.

        Display name of the volume  # noqa: E501

        :param displayname: The displayname of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this PrimeraVolumeDetailsList.  # noqa: E501

        Domain of the volume  # noqa: E501

        :return: The domain of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PrimeraVolumeDetailsList.

        Domain of the volume  # noqa: E501

        :param domain: The domain of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def efficiency_update_time(self):
        """Gets the efficiency_update_time of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The efficiency_update_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Calendar
        """
        return self._efficiency_update_time

    @efficiency_update_time.setter
    def efficiency_update_time(self, efficiency_update_time):
        """Sets the efficiency_update_time of this PrimeraVolumeDetailsList.


        :param efficiency_update_time: The efficiency_update_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Calendar
        """

        self._efficiency_update_time = efficiency_update_time

    @property
    def expiration_time(self):
        """Gets the expiration_time of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The expiration_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Calendar
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this PrimeraVolumeDetailsList.


        :param expiration_time: The expiration_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Calendar
        """

        self._expiration_time = expiration_time

    @property
    def fully_provisioned(self):
        """Gets the fully_provisioned of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The fully_provisioned of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: bool
        """
        return self._fully_provisioned

    @fully_provisioned.setter
    def fully_provisioned(self, fully_provisioned):
        """Sets the fully_provisioned of this PrimeraVolumeDetailsList.


        :param fully_provisioned: The fully_provisioned of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: bool
        """

        self._fully_provisioned = fully_provisioned

    @property
    def generation(self):
        """Gets the generation of this PrimeraVolumeDetailsList.  # noqa: E501

        generation `Filter, Sort`  # noqa: E501

        :return: The generation of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this PrimeraVolumeDetailsList.

        generation `Filter, Sort`  # noqa: E501

        :param generation: The generation of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def heads_per_cylinder(self):
        """Gets the heads_per_cylinder of this PrimeraVolumeDetailsList.  # noqa: E501

        Heads per Cylinder  # noqa: E501

        :return: The heads_per_cylinder of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._heads_per_cylinder

    @heads_per_cylinder.setter
    def heads_per_cylinder(self, heads_per_cylinder):
        """Sets the heads_per_cylinder of this PrimeraVolumeDetailsList.

        Heads per Cylinder  # noqa: E501

        :param heads_per_cylinder: The heads_per_cylinder of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._heads_per_cylinder = heads_per_cylinder

    @property
    def health_state(self):
        """Gets the health_state of this PrimeraVolumeDetailsList.  # noqa: E501

        Health status of the Volume. `Filter, Sort`  # noqa: E501

        :return: The health_state of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this PrimeraVolumeDetailsList.

        Health status of the Volume. `Filter, Sort`  # noqa: E501

        :param health_state: The health_state of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._health_state = health_state

    @property
    def hidden(self):
        """Gets the hidden of this PrimeraVolumeDetailsList.  # noqa: E501

        Flag to know if the Volume is hidden or not  # noqa: E501

        :return: The hidden of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this PrimeraVolumeDetailsList.

        Flag to know if the Volume is hidden or not  # noqa: E501

        :param hidden: The hidden of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def host_written_mi_b(self):
        """Gets the host_written_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501

        Host written data size in MiB. `Filter, Sort`  # noqa: E501

        :return: The host_written_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._host_written_mi_b

    @host_written_mi_b.setter
    def host_written_mi_b(self, host_written_mi_b):
        """Sets the host_written_mi_b of this PrimeraVolumeDetailsList.

        Host written data size in MiB. `Filter, Sort`  # noqa: E501

        :param host_written_mi_b: The host_written_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._host_written_mi_b = host_written_mi_b

    @property
    def host_written_to_virtual_percent(self):
        """Gets the host_written_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501

        Host written to virtual percent  # noqa: E501

        :return: The host_written_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._host_written_to_virtual_percent

    @host_written_to_virtual_percent.setter
    def host_written_to_virtual_percent(self, host_written_to_virtual_percent):
        """Sets the host_written_to_virtual_percent of this PrimeraVolumeDetailsList.

        Host written to virtual percent  # noqa: E501

        :param host_written_to_virtual_percent: The host_written_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._host_written_to_virtual_percent = host_written_to_virtual_percent

    @property
    def id(self):
        """Gets the id of this PrimeraVolumeDetailsList.  # noqa: E501

        UUID string uniquely identifying the storage system object. `Filter`  # noqa: E501

        :return: The id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrimeraVolumeDetailsList.

        UUID string uniquely identifying the storage system object. `Filter`  # noqa: E501

        :param id: The id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initiators(self):
        """Gets the initiators of this PrimeraVolumeDetailsList.  # noqa: E501

        Initiator details  # noqa: E501

        :return: The initiators of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: list[PrimeraApplicationSetDetailsInitiators]
        """
        return self._initiators

    @initiators.setter
    def initiators(self, initiators):
        """Sets the initiators of this PrimeraVolumeDetailsList.

        Initiator details  # noqa: E501

        :param initiators: The initiators of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: list[PrimeraApplicationSetDetailsInitiators]
        """

        self._initiators = initiators

    @property
    def name(self):
        """Gets the name of this PrimeraVolumeDetailsList.  # noqa: E501

        A user friendly name to identify the storage system volume (resourceName). `Filter, Sort`  # noqa: E501

        :return: The name of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrimeraVolumeDetailsList.

        A user friendly name to identify the storage system volume (resourceName). `Filter, Sort`  # noqa: E501

        :param name: The name of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this PrimeraVolumeDetailsList.  # noqa: E501

        Parent Id `Filter`  # noqa: E501

        :return: The parent_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this PrimeraVolumeDetailsList.

        Parent Id `Filter`  # noqa: E501

        :param parent_id: The parent_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def phys_parent_id(self):
        """Gets the phys_parent_id of this PrimeraVolumeDetailsList.  # noqa: E501

        physical Parent Id  # noqa: E501

        :return: The phys_parent_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._phys_parent_id

    @phys_parent_id.setter
    def phys_parent_id(self, phys_parent_id):
        """Sets the phys_parent_id of this PrimeraVolumeDetailsList.

        physical Parent Id  # noqa: E501

        :param phys_parent_id: The phys_parent_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._phys_parent_id = phys_parent_id

    @property
    def physical_copy(self):
        """Gets the physical_copy of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The physical_copy of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: bool
        """
        return self._physical_copy

    @physical_copy.setter
    def physical_copy(self, physical_copy):
        """Sets the physical_copy of this PrimeraVolumeDetailsList.


        :param physical_copy: The physical_copy of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: bool
        """

        self._physical_copy = physical_copy

    @property
    def policy(self):
        """Gets the policy of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The policy of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PrimeraVolumeDetailsList.


        :param policy: The policy of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Policy
        """

        self._policy = policy

    @property
    def prov_type(self):
        """Gets the prov_type of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The prov_type of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._prov_type

    @prov_type.setter
    def prov_type(self, prov_type):
        """Sets the prov_type of this PrimeraVolumeDetailsList.


        :param prov_type: The prov_type of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._prov_type = prov_type

    @property
    def raid(self):
        """Gets the raid of this PrimeraVolumeDetailsList.  # noqa: E501

        Raid  # noqa: E501

        :return: The raid of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._raid

    @raid.setter
    def raid(self, raid):
        """Sets the raid of this PrimeraVolumeDetailsList.

        Raid  # noqa: E501

        :param raid: The raid of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._raid = raid

    @property
    def rcopy_status(self):
        """Gets the rcopy_status of this PrimeraVolumeDetailsList.  # noqa: E501

        RemoteCopy Status  # noqa: E501

        :return: The rcopy_status of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._rcopy_status

    @rcopy_status.setter
    def rcopy_status(self, rcopy_status):
        """Sets the rcopy_status of this PrimeraVolumeDetailsList.

        RemoteCopy Status  # noqa: E501

        :param rcopy_status: The rcopy_status of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._rcopy_status = rcopy_status

    @property
    def read_only(self):
        """Gets the read_only of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The read_only of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this PrimeraVolumeDetailsList.


        :param read_only: The read_only of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def resource_uri(self):
        """Gets the resource_uri of this PrimeraVolumeDetailsList.  # noqa: E501

        resourceUri for detailed volume object  # noqa: E501

        :return: The resource_uri of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this PrimeraVolumeDetailsList.

        resourceUri for detailed volume object  # noqa: E501

        :param resource_uri: The resource_uri of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def retention_time(self):
        """Gets the retention_time of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The retention_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Calendar
        """
        return self._retention_time

    @retention_time.setter
    def retention_time(self, retention_time):
        """Sets the retention_time of this PrimeraVolumeDetailsList.


        :param retention_time: The retention_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Calendar
        """

        self._retention_time = retention_time

    @property
    def ro_child_id(self):
        """Gets the ro_child_id of this PrimeraVolumeDetailsList.  # noqa: E501

        RO child id  # noqa: E501

        :return: The ro_child_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._ro_child_id

    @ro_child_id.setter
    def ro_child_id(self, ro_child_id):
        """Sets the ro_child_id of this PrimeraVolumeDetailsList.

        RO child id  # noqa: E501

        :param ro_child_id: The ro_child_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._ro_child_id = ro_child_id

    @property
    def rw_child_id(self):
        """Gets the rw_child_id of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The rw_child_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._rw_child_id

    @rw_child_id.setter
    def rw_child_id(self, rw_child_id):
        """Sets the rw_child_id of this PrimeraVolumeDetailsList.


        :param rw_child_id: The rw_child_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._rw_child_id = rw_child_id

    @property
    def sectors_per_track(self):
        """Gets the sectors_per_track of this PrimeraVolumeDetailsList.  # noqa: E501

        Sector per Track  # noqa: E501

        :return: The sectors_per_track of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._sectors_per_track

    @sectors_per_track.setter
    def sectors_per_track(self, sectors_per_track):
        """Sets the sectors_per_track of this PrimeraVolumeDetailsList.

        Sector per Track  # noqa: E501

        :param sectors_per_track: The sectors_per_track of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._sectors_per_track = sectors_per_track

    @property
    def shared_parent_id(self):
        """Gets the shared_parent_id of this PrimeraVolumeDetailsList.  # noqa: E501

        Shared Parent Id  # noqa: E501

        :return: The shared_parent_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._shared_parent_id

    @shared_parent_id.setter
    def shared_parent_id(self, shared_parent_id):
        """Sets the shared_parent_id of this PrimeraVolumeDetailsList.

        Shared Parent Id  # noqa: E501

        :param shared_parent_id: The shared_parent_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._shared_parent_id = shared_parent_id

    @property
    def size_mi_b(self):
        """Gets the size_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501

        Size in MiB `Filter, Sort`  # noqa: E501

        :return: The size_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._size_mi_b

    @size_mi_b.setter
    def size_mi_b(self, size_mi_b):
        """Sets the size_mi_b of this PrimeraVolumeDetailsList.

        Size in MiB `Filter, Sort`  # noqa: E501

        :param size_mi_b: The size_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._size_mi_b = size_mi_b

    @property
    def snap_shot_tier(self):
        """Gets the snap_shot_tier of this PrimeraVolumeDetailsList.  # noqa: E501

        Snapshot Tier  # noqa: E501

        :return: The snap_shot_tier of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._snap_shot_tier

    @snap_shot_tier.setter
    def snap_shot_tier(self, snap_shot_tier):
        """Sets the snap_shot_tier of this PrimeraVolumeDetailsList.

        Snapshot Tier  # noqa: E501

        :param snap_shot_tier: The snap_shot_tier of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._snap_shot_tier = snap_shot_tier

    @property
    def snapshot_alloc_limit(self):
        """Gets the snapshot_alloc_limit of this PrimeraVolumeDetailsList.  # noqa: E501

        Snapshot alloc limit  # noqa: E501

        :return: The snapshot_alloc_limit of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_alloc_limit

    @snapshot_alloc_limit.setter
    def snapshot_alloc_limit(self, snapshot_alloc_limit):
        """Sets the snapshot_alloc_limit of this PrimeraVolumeDetailsList.

        Snapshot alloc limit  # noqa: E501

        :param snapshot_alloc_limit: The snapshot_alloc_limit of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._snapshot_alloc_limit = snapshot_alloc_limit

    @property
    def snapshot_alloc_warning(self):
        """Gets the snapshot_alloc_warning of this PrimeraVolumeDetailsList.  # noqa: E501

        Snapshot alloc Warning  # noqa: E501

        :return: The snapshot_alloc_warning of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_alloc_warning

    @snapshot_alloc_warning.setter
    def snapshot_alloc_warning(self, snapshot_alloc_warning):
        """Sets the snapshot_alloc_warning of this PrimeraVolumeDetailsList.

        Snapshot alloc Warning  # noqa: E501

        :param snapshot_alloc_warning: The snapshot_alloc_warning of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._snapshot_alloc_warning = snapshot_alloc_warning

    @property
    def snapshot_allocation_settings(self):
        """Gets the snapshot_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The snapshot_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: UserAllocationSettings
        """
        return self._snapshot_allocation_settings

    @snapshot_allocation_settings.setter
    def snapshot_allocation_settings(self, snapshot_allocation_settings):
        """Sets the snapshot_allocation_settings of this PrimeraVolumeDetailsList.


        :param snapshot_allocation_settings: The snapshot_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: UserAllocationSettings
        """

        self._snapshot_allocation_settings = snapshot_allocation_settings

    @property
    def snapshot_cpg_id(self):
        """Gets the snapshot_cpg_id of this PrimeraVolumeDetailsList.  # noqa: E501

        Snapshot CPG Id  # noqa: E501

        :return: The snapshot_cpg_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_cpg_id

    @snapshot_cpg_id.setter
    def snapshot_cpg_id(self, snapshot_cpg_id):
        """Sets the snapshot_cpg_id of this PrimeraVolumeDetailsList.

        Snapshot CPG Id  # noqa: E501

        :param snapshot_cpg_id: The snapshot_cpg_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._snapshot_cpg_id = snapshot_cpg_id

    @property
    def snapshot_cpg_name(self):
        """Gets the snapshot_cpg_name of this PrimeraVolumeDetailsList.  # noqa: E501

        Snapshot CPG name  # noqa: E501

        :return: The snapshot_cpg_name of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_cpg_name

    @snapshot_cpg_name.setter
    def snapshot_cpg_name(self, snapshot_cpg_name):
        """Sets the snapshot_cpg_name of this PrimeraVolumeDetailsList.

        Snapshot CPG name  # noqa: E501

        :param snapshot_cpg_name: The snapshot_cpg_name of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._snapshot_cpg_name = snapshot_cpg_name

    @property
    def snapshot_space(self):
        """Gets the snapshot_space of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The snapshot_space of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Space
        """
        return self._snapshot_space

    @snapshot_space.setter
    def snapshot_space(self, snapshot_space):
        """Sets the snapshot_space of this PrimeraVolumeDetailsList.


        :param snapshot_space: The snapshot_space of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Space
        """

        self._snapshot_space = snapshot_space

    @property
    def snapshot_tdvv_size(self):
        """Gets the snapshot_tdvv_size of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The snapshot_tdvv_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: SnapshotTdvvsize
        """
        return self._snapshot_tdvv_size

    @snapshot_tdvv_size.setter
    def snapshot_tdvv_size(self, snapshot_tdvv_size):
        """Sets the snapshot_tdvv_size of this PrimeraVolumeDetailsList.


        :param snapshot_tdvv_size: The snapshot_tdvv_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: SnapshotTdvvsize
        """

        self._snapshot_tdvv_size = snapshot_tdvv_size

    @property
    def snapshot_used_to_virtual_percent(self):
        """Gets the snapshot_used_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501

        Snapshot used to virtual percent  # noqa: E501

        :return: The snapshot_used_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._snapshot_used_to_virtual_percent

    @snapshot_used_to_virtual_percent.setter
    def snapshot_used_to_virtual_percent(self, snapshot_used_to_virtual_percent):
        """Sets the snapshot_used_to_virtual_percent of this PrimeraVolumeDetailsList.

        Snapshot used to virtual percent  # noqa: E501

        :param snapshot_used_to_virtual_percent: The snapshot_used_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._snapshot_used_to_virtual_percent = snapshot_used_to_virtual_percent

    @property
    def space_calculation_time(self):
        """Gets the space_calculation_time of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The space_calculation_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Calendar
        """
        return self._space_calculation_time

    @space_calculation_time.setter
    def space_calculation_time(self, space_calculation_time):
        """Sets the space_calculation_time of this PrimeraVolumeDetailsList.


        :param space_calculation_time: The space_calculation_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Calendar
        """

        self._space_calculation_time = space_calculation_time

    @property
    def started(self):
        """Gets the started of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The started of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this PrimeraVolumeDetailsList.


        :param started: The started of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: bool
        """

        self._started = started

    @property
    def state(self):
        """Gets the state of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The state of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PrimeraVolumeDetailsList.


        :param state: The state of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def storage_tier(self):
        """Gets the storage_tier of this PrimeraVolumeDetailsList.  # noqa: E501

        Storage Tier  # noqa: E501

        :return: The storage_tier of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._storage_tier

    @storage_tier.setter
    def storage_tier(self, storage_tier):
        """Sets the storage_tier of this PrimeraVolumeDetailsList.

        Storage Tier  # noqa: E501

        :param storage_tier: The storage_tier of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._storage_tier = storage_tier

    @property
    def system_id(self):
        """Gets the system_id of this PrimeraVolumeDetailsList.  # noqa: E501

        SystemUid/serialNumber of the array.  # noqa: E501

        :return: The system_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this PrimeraVolumeDetailsList.

        SystemUid/serialNumber of the array.  # noqa: E501

        :param system_id: The system_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def thin_provisioned(self):
        """Gets the thin_provisioned of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The thin_provisioned of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: bool
        """
        return self._thin_provisioned

    @thin_provisioned.setter
    def thin_provisioned(self, thin_provisioned):
        """Sets the thin_provisioned of this PrimeraVolumeDetailsList.


        :param thin_provisioned: The thin_provisioned of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: bool
        """

        self._thin_provisioned = thin_provisioned

    @property
    def thin_savings(self):
        """Gets the thin_savings of this PrimeraVolumeDetailsList.  # noqa: E501

        Thin savings for the detailed volume object  # noqa: E501

        :return: The thin_savings of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._thin_savings

    @thin_savings.setter
    def thin_savings(self, thin_savings):
        """Sets the thin_savings of this PrimeraVolumeDetailsList.

        Thin savings for the detailed volume object  # noqa: E501

        :param thin_savings: The thin_savings of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._thin_savings = thin_savings

    @property
    def total_raw_reserved_mi_b(self):
        """Gets the total_raw_reserved_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501

        Total Raw Reserved Space in MiB  # noqa: E501

        :return: The total_raw_reserved_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._total_raw_reserved_mi_b

    @total_raw_reserved_mi_b.setter
    def total_raw_reserved_mi_b(self, total_raw_reserved_mi_b):
        """Sets the total_raw_reserved_mi_b of this PrimeraVolumeDetailsList.

        Total Raw Reserved Space in MiB  # noqa: E501

        :param total_raw_reserved_mi_b: The total_raw_reserved_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._total_raw_reserved_mi_b = total_raw_reserved_mi_b

    @property
    def total_reserved_mi_b(self):
        """Gets the total_reserved_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501

        Description  # noqa: E501

        :return: The total_reserved_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._total_reserved_mi_b

    @total_reserved_mi_b.setter
    def total_reserved_mi_b(self, total_reserved_mi_b):
        """Sets the total_reserved_mi_b of this PrimeraVolumeDetailsList.

        Description  # noqa: E501

        :param total_reserved_mi_b: The total_reserved_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._total_reserved_mi_b = total_reserved_mi_b

    @property
    def total_space_mi_b(self):
        """Gets the total_space_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501

        Total Space in MiB  # noqa: E501

        :return: The total_space_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._total_space_mi_b

    @total_space_mi_b.setter
    def total_space_mi_b(self, total_space_mi_b):
        """Sets the total_space_mi_b of this PrimeraVolumeDetailsList.

        Total Space in MiB  # noqa: E501

        :param total_space_mi_b: The total_space_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._total_space_mi_b = total_space_mi_b

    @property
    def type(self):
        """Gets the type of this PrimeraVolumeDetailsList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrimeraVolumeDetailsList.

        type  # noqa: E501

        :param type: The type of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unref_space_freed_time(self):
        """Gets the unref_space_freed_time of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The unref_space_freed_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Calendar
        """
        return self._unref_space_freed_time

    @unref_space_freed_time.setter
    def unref_space_freed_time(self, unref_space_freed_time):
        """Sets the unref_space_freed_time of this PrimeraVolumeDetailsList.


        :param unref_space_freed_time: The unref_space_freed_time of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Calendar
        """

        self._unref_space_freed_time = unref_space_freed_time

    @property
    def used_capacity(self):
        """Gets the used_capacity of this PrimeraVolumeDetailsList.  # noqa: E501

        Used volume capacity. `Filter, Sort`  # noqa: E501

        :return: The used_capacity of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """Sets the used_capacity of this PrimeraVolumeDetailsList.

        Used volume capacity. `Filter, Sort`  # noqa: E501

        :param used_capacity: The used_capacity of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._used_capacity = used_capacity

    @property
    def used_size_mi_b(self):
        """Gets the used_size_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501

        Used Size in MiB  # noqa: E501

        :return: The used_size_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._used_size_mi_b

    @used_size_mi_b.setter
    def used_size_mi_b(self, used_size_mi_b):
        """Sets the used_size_mi_b of this PrimeraVolumeDetailsList.

        Used Size in MiB  # noqa: E501

        :param used_size_mi_b: The used_size_mi_b of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._used_size_mi_b = used_size_mi_b

    @property
    def user_alloc_limit(self):
        """Gets the user_alloc_limit of this PrimeraVolumeDetailsList.  # noqa: E501

        User alloc limit  # noqa: E501

        :return: The user_alloc_limit of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._user_alloc_limit

    @user_alloc_limit.setter
    def user_alloc_limit(self, user_alloc_limit):
        """Sets the user_alloc_limit of this PrimeraVolumeDetailsList.

        User alloc limit  # noqa: E501

        :param user_alloc_limit: The user_alloc_limit of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._user_alloc_limit = user_alloc_limit

    @property
    def user_alloc_warning(self):
        """Gets the user_alloc_warning of this PrimeraVolumeDetailsList.  # noqa: E501

        User alloc space limit warning  # noqa: E501

        :return: The user_alloc_warning of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._user_alloc_warning

    @user_alloc_warning.setter
    def user_alloc_warning(self, user_alloc_warning):
        """Sets the user_alloc_warning of this PrimeraVolumeDetailsList.

        User alloc space limit warning  # noqa: E501

        :param user_alloc_warning: The user_alloc_warning of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._user_alloc_warning = user_alloc_warning

    @property
    def user_allocation_settings(self):
        """Gets the user_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The user_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: UserAllocationSettings
        """
        return self._user_allocation_settings

    @user_allocation_settings.setter
    def user_allocation_settings(self, user_allocation_settings):
        """Sets the user_allocation_settings of this PrimeraVolumeDetailsList.


        :param user_allocation_settings: The user_allocation_settings of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: UserAllocationSettings
        """

        self._user_allocation_settings = user_allocation_settings

    @property
    def user_cpg_id(self):
        """Gets the user_cpg_id of this PrimeraVolumeDetailsList.  # noqa: E501

        User CPG Id `Filter`  # noqa: E501

        :return: The user_cpg_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._user_cpg_id

    @user_cpg_id.setter
    def user_cpg_id(self, user_cpg_id):
        """Sets the user_cpg_id of this PrimeraVolumeDetailsList.

        User CPG Id `Filter`  # noqa: E501

        :param user_cpg_id: The user_cpg_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._user_cpg_id = user_cpg_id

    @property
    def user_cpg_name(self):
        """Gets the user_cpg_name of this PrimeraVolumeDetailsList.  # noqa: E501

        User CPG Name  # noqa: E501

        :return: The user_cpg_name of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._user_cpg_name

    @user_cpg_name.setter
    def user_cpg_name(self, user_cpg_name):
        """Sets the user_cpg_name of this PrimeraVolumeDetailsList.

        User CPG Name  # noqa: E501

        :param user_cpg_name: The user_cpg_name of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._user_cpg_name = user_cpg_name

    @property
    def user_reserved_to_virtual_percent(self):
        """Gets the user_reserved_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501

        User reseved to virtual percent  # noqa: E501

        :return: The user_reserved_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._user_reserved_to_virtual_percent

    @user_reserved_to_virtual_percent.setter
    def user_reserved_to_virtual_percent(self, user_reserved_to_virtual_percent):
        """Sets the user_reserved_to_virtual_percent of this PrimeraVolumeDetailsList.

        User reseved to virtual percent  # noqa: E501

        :param user_reserved_to_virtual_percent: The user_reserved_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._user_reserved_to_virtual_percent = user_reserved_to_virtual_percent

    @property
    def user_space(self):
        """Gets the user_space of this PrimeraVolumeDetailsList.  # noqa: E501


        :return: The user_space of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: Space
        """
        return self._user_space

    @user_space.setter
    def user_space(self, user_space):
        """Sets the user_space of this PrimeraVolumeDetailsList.


        :param user_space: The user_space of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: Space
        """

        self._user_space = user_space

    @property
    def user_used_to_virtual_percent(self):
        """Gets the user_used_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501

        User used to virtual percent  # noqa: E501

        :return: The user_used_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: float
        """
        return self._user_used_to_virtual_percent

    @user_used_to_virtual_percent.setter
    def user_used_to_virtual_percent(self, user_used_to_virtual_percent):
        """Sets the user_used_to_virtual_percent of this PrimeraVolumeDetailsList.

        User used to virtual percent  # noqa: E501

        :param user_used_to_virtual_percent: The user_used_to_virtual_percent of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: float
        """

        self._user_used_to_virtual_percent = user_used_to_virtual_percent

    @property
    def vlun_sector_size(self):
        """Gets the vlun_sector_size of this PrimeraVolumeDetailsList.  # noqa: E501

        VLUN sector size  # noqa: E501

        :return: The vlun_sector_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._vlun_sector_size

    @vlun_sector_size.setter
    def vlun_sector_size(self, vlun_sector_size):
        """Sets the vlun_sector_size of this PrimeraVolumeDetailsList.

        VLUN sector size  # noqa: E501

        :param vlun_sector_size: The vlun_sector_size of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._vlun_sector_size = vlun_sector_size

    @property
    def volume_id(self):
        """Gets the volume_id of this PrimeraVolumeDetailsList.  # noqa: E501

        Numeric ID of the resource  # noqa: E501

        :return: The volume_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: int
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this PrimeraVolumeDetailsList.

        Numeric ID of the resource  # noqa: E501

        :param volume_id: The volume_id of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: int
        """

        self._volume_id = volume_id

    @property
    def volume_type(self):
        """Gets the volume_type of this PrimeraVolumeDetailsList.  # noqa: E501

        VV Type  # noqa: E501

        :return: The volume_type of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this PrimeraVolumeDetailsList.

        VV Type  # noqa: E501

        :param volume_type: The volume_type of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._volume_type = volume_type

    @property
    def wwn(self):
        """Gets the wwn of this PrimeraVolumeDetailsList.  # noqa: E501

        Volume wwn. `Filter`  # noqa: E501

        :return: The wwn of this PrimeraVolumeDetailsList.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this PrimeraVolumeDetailsList.

        Volume wwn. `Filter`  # noqa: E501

        :param wwn: The wwn of this PrimeraVolumeDetailsList.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimeraVolumeDetailsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
