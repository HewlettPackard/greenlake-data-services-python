# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NodeMemoryDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'list[AssociatedLinksInner]',
        'cache_type': 'str',
        'cas_latency': 'str',
        'console_uri': 'str',
        'customer_id': 'str',
        'displayname': 'str',
        'domain': 'str',
        'generation': 'int',
        'id': 'str',
        'jedec_id': 'str',
        'manufacturing': 'ManufacturingSingle',
        'name': 'str',
        'node_device_id': 'int',
        'node_id': 'str',
        'node_memory_type': 'str',
        'part_number': 'str',
        'request_uri': 'str',
        'resource_uri': 'str',
        'revision': 'str',
        'riser': 'str',
        'size': 'str',
        'slot': 'int',
        'slot_id': 'str',
        'system_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'cache_type': 'cacheType',
        'cas_latency': 'casLatency',
        'console_uri': 'consoleUri',
        'customer_id': 'customerId',
        'displayname': 'displayname',
        'domain': 'domain',
        'generation': 'generation',
        'id': 'id',
        'jedec_id': 'jedecId',
        'manufacturing': 'manufacturing',
        'name': 'name',
        'node_device_id': 'nodeDeviceId',
        'node_id': 'nodeId',
        'node_memory_type': 'nodeMemoryType',
        'part_number': 'partNumber',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'revision': 'revision',
        'riser': 'riser',
        'size': 'size',
        'slot': 'slot',
        'slot_id': 'slotId',
        'system_id': 'systemId',
        'type': 'type'
    }

    def __init__(self, associated_links=None, cache_type=None, cas_latency=None, console_uri=None, customer_id=None, displayname=None, domain=None, generation=None, id=None, jedec_id=None, manufacturing=None, name=None, node_device_id=None, node_id=None, node_memory_type=None, part_number=None, request_uri=None, resource_uri=None, revision=None, riser=None, size=None, slot=None, slot_id=None, system_id=None, type=None):  # noqa: E501
        """NodeMemoryDetails - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._cache_type = None
        self._cas_latency = None
        self._console_uri = None
        self._customer_id = None
        self._displayname = None
        self._domain = None
        self._generation = None
        self._id = None
        self._jedec_id = None
        self._manufacturing = None
        self._name = None
        self._node_device_id = None
        self._node_id = None
        self._node_memory_type = None
        self._part_number = None
        self._request_uri = None
        self._resource_uri = None
        self._revision = None
        self._riser = None
        self._size = None
        self._slot = None
        self._slot_id = None
        self._system_id = None
        self._type = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if cache_type is not None:
            self.cache_type = cache_type
        if cas_latency is not None:
            self.cas_latency = cas_latency
        if console_uri is not None:
            self.console_uri = console_uri
        if customer_id is not None:
            self.customer_id = customer_id
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if jedec_id is not None:
            self.jedec_id = jedec_id
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if name is not None:
            self.name = name
        if node_device_id is not None:
            self.node_device_id = node_device_id
        if node_id is not None:
            self.node_id = node_id
        if node_memory_type is not None:
            self.node_memory_type = node_memory_type
        if part_number is not None:
            self.part_number = part_number
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if revision is not None:
            self.revision = revision
        if riser is not None:
            self.riser = riser
        if size is not None:
            self.size = size
        if slot is not None:
            self.slot = slot
        if slot_id is not None:
            self.slot_id = slot_id
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type

    @property
    def associated_links(self):
        """Gets the associated_links of this NodeMemoryDetails.  # noqa: E501

        Associated Links Details  # noqa: E501

        :return: The associated_links of this NodeMemoryDetails.  # noqa: E501
        :rtype: list[AssociatedLinksInner]
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NodeMemoryDetails.

        Associated Links Details  # noqa: E501

        :param associated_links: The associated_links of this NodeMemoryDetails.  # noqa: E501
        :type: list[AssociatedLinksInner]
        """

        self._associated_links = associated_links

    @property
    def cache_type(self):
        """Gets the cache_type of this NodeMemoryDetails.  # noqa: E501

        Type of the cache memory is used for  # noqa: E501

        :return: The cache_type of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._cache_type

    @cache_type.setter
    def cache_type(self, cache_type):
        """Sets the cache_type of this NodeMemoryDetails.

        Type of the cache memory is used for  # noqa: E501

        :param cache_type: The cache_type of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._cache_type = cache_type

    @property
    def cas_latency(self):
        """Gets the cas_latency of this NodeMemoryDetails.  # noqa: E501

        CAS latency  # noqa: E501

        :return: The cas_latency of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._cas_latency

    @cas_latency.setter
    def cas_latency(self, cas_latency):
        """Sets the cas_latency of this NodeMemoryDetails.

        CAS latency  # noqa: E501

        :param cas_latency: The cas_latency of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._cas_latency = cas_latency

    @property
    def console_uri(self):
        """Gets the console_uri of this NodeMemoryDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NodeMemoryDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def customer_id(self):
        """Gets the customer_id of this NodeMemoryDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NodeMemoryDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def displayname(self):
        """Gets the displayname of this NodeMemoryDetails.  # noqa: E501

        Name to be used for display purposes  # noqa: E501

        :return: The displayname of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this NodeMemoryDetails.

        Name to be used for display purposes  # noqa: E501

        :param displayname: The displayname of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this NodeMemoryDetails.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this NodeMemoryDetails.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def generation(self):
        """Gets the generation of this NodeMemoryDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NodeMemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NodeMemoryDetails.

        generation  # noqa: E501

        :param generation: The generation of this NodeMemoryDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this NodeMemoryDetails.  # noqa: E501

        UUID string uniquely identifying the node object.  # noqa: E501

        :return: The id of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeMemoryDetails.

        UUID string uniquely identifying the node object.  # noqa: E501

        :param id: The id of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def jedec_id(self):
        """Gets the jedec_id of this NodeMemoryDetails.  # noqa: E501

        JEDEC ID  # noqa: E501

        :return: The jedec_id of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._jedec_id

    @jedec_id.setter
    def jedec_id(self, jedec_id):
        """Sets the jedec_id of this NodeMemoryDetails.

        JEDEC ID  # noqa: E501

        :param jedec_id: The jedec_id of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._jedec_id = jedec_id

    @property
    def manufacturing(self):
        """Gets the manufacturing of this NodeMemoryDetails.  # noqa: E501


        :return: The manufacturing of this NodeMemoryDetails.  # noqa: E501
        :rtype: ManufacturingSingle
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this NodeMemoryDetails.


        :param manufacturing: The manufacturing of this NodeMemoryDetails.  # noqa: E501
        :type: ManufacturingSingle
        """

        self._manufacturing = manufacturing

    @property
    def name(self):
        """Gets the name of this NodeMemoryDetails.  # noqa: E501

        Name of the resource.  # noqa: E501

        :return: The name of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeMemoryDetails.

        Name of the resource.  # noqa: E501

        :param name: The name of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def node_device_id(self):
        """Gets the node_device_id of this NodeMemoryDetails.  # noqa: E501

        ID of the node  # noqa: E501

        :return: The node_device_id of this NodeMemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._node_device_id

    @node_device_id.setter
    def node_device_id(self, node_device_id):
        """Sets the node_device_id of this NodeMemoryDetails.

        ID of the node  # noqa: E501

        :param node_device_id: The node_device_id of this NodeMemoryDetails.  # noqa: E501
        :type: int
        """

        self._node_device_id = node_device_id

    @property
    def node_id(self):
        """Gets the node_id of this NodeMemoryDetails.  # noqa: E501

        Unique Identifier of the node.  # noqa: E501

        :return: The node_id of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeMemoryDetails.

        Unique Identifier of the node.  # noqa: E501

        :param node_id: The node_id of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def node_memory_type(self):
        """Gets the node_memory_type of this NodeMemoryDetails.  # noqa: E501

        Type of the physical memory  # noqa: E501

        :return: The node_memory_type of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._node_memory_type

    @node_memory_type.setter
    def node_memory_type(self, node_memory_type):
        """Sets the node_memory_type of this NodeMemoryDetails.

        Type of the physical memory  # noqa: E501

        :param node_memory_type: The node_memory_type of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._node_memory_type = node_memory_type

    @property
    def part_number(self):
        """Gets the part_number of this NodeMemoryDetails.  # noqa: E501

        Part number  # noqa: E501

        :return: The part_number of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this NodeMemoryDetails.

        Part number  # noqa: E501

        :param part_number: The part_number of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def request_uri(self):
        """Gets the request_uri of this NodeMemoryDetails.  # noqa: E501

        requestUri for detailed node memory object  # noqa: E501

        :return: The request_uri of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this NodeMemoryDetails.

        requestUri for detailed node memory object  # noqa: E501

        :param request_uri: The request_uri of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NodeMemoryDetails.  # noqa: E501

        resourceUri for detailed node memory object  # noqa: E501

        :return: The resource_uri of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NodeMemoryDetails.

        resourceUri for detailed node memory object  # noqa: E501

        :param resource_uri: The resource_uri of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def revision(self):
        """Gets the revision of this NodeMemoryDetails.  # noqa: E501

        Revision  # noqa: E501

        :return: The revision of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this NodeMemoryDetails.

        Revision  # noqa: E501

        :param revision: The revision of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def riser(self):
        """Gets the riser of this NodeMemoryDetails.  # noqa: E501

        Riser  # noqa: E501

        :return: The riser of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._riser

    @riser.setter
    def riser(self, riser):
        """Sets the riser of this NodeMemoryDetails.

        Riser  # noqa: E501

        :param riser: The riser of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._riser = riser

    @property
    def size(self):
        """Gets the size of this NodeMemoryDetails.  # noqa: E501

        Size in MiB  # noqa: E501

        :return: The size of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NodeMemoryDetails.

        Size in MiB  # noqa: E501

        :param size: The size of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def slot(self):
        """Gets the slot of this NodeMemoryDetails.  # noqa: E501

        Slot of the node physical memory  # noqa: E501

        :return: The slot of this NodeMemoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this NodeMemoryDetails.

        Slot of the node physical memory  # noqa: E501

        :param slot: The slot of this NodeMemoryDetails.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def slot_id(self):
        """Gets the slot_id of this NodeMemoryDetails.  # noqa: E501

        Slot ID of the node physical memory  # noqa: E501

        :return: The slot_id of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """Sets the slot_id of this NodeMemoryDetails.

        Slot ID of the node physical memory  # noqa: E501

        :param slot_id: The slot_id of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._slot_id = slot_id

    @property
    def system_id(self):
        """Gets the system_id of this NodeMemoryDetails.  # noqa: E501

        SystemId/Serial Number  of the array.  # noqa: E501

        :return: The system_id of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this NodeMemoryDetails.

        SystemId/Serial Number  of the array.  # noqa: E501

        :param system_id: The system_id of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this NodeMemoryDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NodeMemoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeMemoryDetails.

        type  # noqa: E501

        :param type: The type of this NodeMemoryDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeMemoryDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
