# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleFolderDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_protocol': 'str',
        'agent_type': 'str',
        'app_uuid': 'str',
        'appserver_id': 'str',
        'appserver_name': 'str',
        'associated_links': 'AssociatedLinks',
        'capacity_bytes': 'int',
        'compressed_snap_usage_bytes': 'int',
        'compressed_vol_usage_bytes': 'int',
        'compression_ratio': 'float',
        'console_uri': 'str',
        'creation_time': 'int',
        'customer_id': 'str',
        'description': 'str',
        'folset_id': 'str',
        'folset_name': 'str',
        'fqn': 'str',
        'free_space_bytes': 'int',
        'full_name': 'str',
        'generation': 'int',
        'inherited_vol_perfpol_id': 'str',
        'inherited_vol_perfpol_name': 'str',
        'last_modified': 'int',
        'limit_bytes': 'int',
        'limit_bytes_specified': 'bool',
        'limit_iops': 'int',
        'limit_mbps': 'int',
        'limit_size_bytes': 'int',
        'num_snapcolls': 'int',
        'num_snaps': 'int',
        'overdraft_limit_pct': 'int',
        'provisioned_bytes': 'int',
        'provisioned_limit_size_bytes': 'int',
        'resource_uri': 'str',
        'search_name': 'str',
        'snap_compression_ratio': 'float',
        'tenant_id': 'str',
        'type': 'str',
        'uncompressed_snap_usage_bytes': 'int',
        'uncompressed_vol_usage_bytes': 'int',
        'unused_reserve_bytes': 'str',
        'unused_snap_reserve_bytes': 'int',
        'usage_bytes': 'int',
        'usage_valid': 'bool',
        'vol_compression_ratio': 'float',
        'volume_list': 'list[NimbleVolumeSummary]',
        'volume_mapped_bytes': 'int'
    }

    attribute_map = {
        'access_protocol': 'access_protocol',
        'agent_type': 'agent_type',
        'app_uuid': 'app_uuid',
        'appserver_id': 'appserver_id',
        'appserver_name': 'appserver_name',
        'associated_links': 'associated_links',
        'capacity_bytes': 'capacity_bytes',
        'compressed_snap_usage_bytes': 'compressed_snap_usage_bytes',
        'compressed_vol_usage_bytes': 'compressed_vol_usage_bytes',
        'compression_ratio': 'compression_ratio',
        'console_uri': 'consoleUri',
        'creation_time': 'creation_time',
        'customer_id': 'customerId',
        'description': 'description',
        'folset_id': 'folset_id',
        'folset_name': 'folset_name',
        'fqn': 'fqn',
        'free_space_bytes': 'free_space_bytes',
        'full_name': 'full_name',
        'generation': 'generation',
        'inherited_vol_perfpol_id': 'inherited_vol_perfpol_id',
        'inherited_vol_perfpol_name': 'inherited_vol_perfpol_name',
        'last_modified': 'last_modified',
        'limit_bytes': 'limit_bytes',
        'limit_bytes_specified': 'limit_bytes_specified',
        'limit_iops': 'limit_iops',
        'limit_mbps': 'limit_mbps',
        'limit_size_bytes': 'limit_size_bytes',
        'num_snapcolls': 'num_snapcolls',
        'num_snaps': 'num_snaps',
        'overdraft_limit_pct': 'overdraft_limit_pct',
        'provisioned_bytes': 'provisioned_bytes',
        'provisioned_limit_size_bytes': 'provisioned_limit_size_bytes',
        'resource_uri': 'resourceUri',
        'search_name': 'search_name',
        'snap_compression_ratio': 'snap_compression_ratio',
        'tenant_id': 'tenant_id',
        'type': 'type',
        'uncompressed_snap_usage_bytes': 'uncompressed_snap_usage_bytes',
        'uncompressed_vol_usage_bytes': 'uncompressed_vol_usage_bytes',
        'unused_reserve_bytes': 'unused_reserve_bytes',
        'unused_snap_reserve_bytes': 'unused_snap_reserve_bytes',
        'usage_bytes': 'usage_bytes',
        'usage_valid': 'usage_valid',
        'vol_compression_ratio': 'vol_compression_ratio',
        'volume_list': 'volume_list',
        'volume_mapped_bytes': 'volume_mapped_bytes'
    }

    def __init__(self, access_protocol=None, agent_type=None, app_uuid=None, appserver_id=None, appserver_name=None, associated_links=None, capacity_bytes=None, compressed_snap_usage_bytes=None, compressed_vol_usage_bytes=None, compression_ratio=None, console_uri=None, creation_time=None, customer_id=None, description=None, folset_id=None, folset_name=None, fqn=None, free_space_bytes=None, full_name=None, generation=None, inherited_vol_perfpol_id=None, inherited_vol_perfpol_name=None, last_modified=None, limit_bytes=None, limit_bytes_specified=None, limit_iops=None, limit_mbps=None, limit_size_bytes=None, num_snapcolls=None, num_snaps=None, overdraft_limit_pct=None, provisioned_bytes=None, provisioned_limit_size_bytes=None, resource_uri=None, search_name=None, snap_compression_ratio=None, tenant_id=None, type=None, uncompressed_snap_usage_bytes=None, uncompressed_vol_usage_bytes=None, unused_reserve_bytes=None, unused_snap_reserve_bytes=None, usage_bytes=None, usage_valid=None, vol_compression_ratio=None, volume_list=None, volume_mapped_bytes=None):  # noqa: E501
        """NimbleFolderDetails - a model defined in OpenAPI"""  # noqa: E501

        self._access_protocol = None
        self._agent_type = None
        self._app_uuid = None
        self._appserver_id = None
        self._appserver_name = None
        self._associated_links = None
        self._capacity_bytes = None
        self._compressed_snap_usage_bytes = None
        self._compressed_vol_usage_bytes = None
        self._compression_ratio = None
        self._console_uri = None
        self._creation_time = None
        self._customer_id = None
        self._description = None
        self._folset_id = None
        self._folset_name = None
        self._fqn = None
        self._free_space_bytes = None
        self._full_name = None
        self._generation = None
        self._inherited_vol_perfpol_id = None
        self._inherited_vol_perfpol_name = None
        self._last_modified = None
        self._limit_bytes = None
        self._limit_bytes_specified = None
        self._limit_iops = None
        self._limit_mbps = None
        self._limit_size_bytes = None
        self._num_snapcolls = None
        self._num_snaps = None
        self._overdraft_limit_pct = None
        self._provisioned_bytes = None
        self._provisioned_limit_size_bytes = None
        self._resource_uri = None
        self._search_name = None
        self._snap_compression_ratio = None
        self._tenant_id = None
        self._type = None
        self._uncompressed_snap_usage_bytes = None
        self._uncompressed_vol_usage_bytes = None
        self._unused_reserve_bytes = None
        self._unused_snap_reserve_bytes = None
        self._usage_bytes = None
        self._usage_valid = None
        self._vol_compression_ratio = None
        self._volume_list = None
        self._volume_mapped_bytes = None
        self.discriminator = None

        if access_protocol is not None:
            self.access_protocol = access_protocol
        if agent_type is not None:
            self.agent_type = agent_type
        if app_uuid is not None:
            self.app_uuid = app_uuid
        if appserver_id is not None:
            self.appserver_id = appserver_id
        if appserver_name is not None:
            self.appserver_name = appserver_name
        if associated_links is not None:
            self.associated_links = associated_links
        if capacity_bytes is not None:
            self.capacity_bytes = capacity_bytes
        if compressed_snap_usage_bytes is not None:
            self.compressed_snap_usage_bytes = compressed_snap_usage_bytes
        if compressed_vol_usage_bytes is not None:
            self.compressed_vol_usage_bytes = compressed_vol_usage_bytes
        if compression_ratio is not None:
            self.compression_ratio = compression_ratio
        if console_uri is not None:
            self.console_uri = console_uri
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if description is not None:
            self.description = description
        if folset_id is not None:
            self.folset_id = folset_id
        if folset_name is not None:
            self.folset_name = folset_name
        if fqn is not None:
            self.fqn = fqn
        if free_space_bytes is not None:
            self.free_space_bytes = free_space_bytes
        if full_name is not None:
            self.full_name = full_name
        if generation is not None:
            self.generation = generation
        if inherited_vol_perfpol_id is not None:
            self.inherited_vol_perfpol_id = inherited_vol_perfpol_id
        if inherited_vol_perfpol_name is not None:
            self.inherited_vol_perfpol_name = inherited_vol_perfpol_name
        if last_modified is not None:
            self.last_modified = last_modified
        if limit_bytes is not None:
            self.limit_bytes = limit_bytes
        if limit_bytes_specified is not None:
            self.limit_bytes_specified = limit_bytes_specified
        if limit_iops is not None:
            self.limit_iops = limit_iops
        if limit_mbps is not None:
            self.limit_mbps = limit_mbps
        if limit_size_bytes is not None:
            self.limit_size_bytes = limit_size_bytes
        if num_snapcolls is not None:
            self.num_snapcolls = num_snapcolls
        if num_snaps is not None:
            self.num_snaps = num_snaps
        if overdraft_limit_pct is not None:
            self.overdraft_limit_pct = overdraft_limit_pct
        if provisioned_bytes is not None:
            self.provisioned_bytes = provisioned_bytes
        if provisioned_limit_size_bytes is not None:
            self.provisioned_limit_size_bytes = provisioned_limit_size_bytes
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if search_name is not None:
            self.search_name = search_name
        if snap_compression_ratio is not None:
            self.snap_compression_ratio = snap_compression_ratio
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if type is not None:
            self.type = type
        if uncompressed_snap_usage_bytes is not None:
            self.uncompressed_snap_usage_bytes = uncompressed_snap_usage_bytes
        if uncompressed_vol_usage_bytes is not None:
            self.uncompressed_vol_usage_bytes = uncompressed_vol_usage_bytes
        if unused_reserve_bytes is not None:
            self.unused_reserve_bytes = unused_reserve_bytes
        if unused_snap_reserve_bytes is not None:
            self.unused_snap_reserve_bytes = unused_snap_reserve_bytes
        if usage_bytes is not None:
            self.usage_bytes = usage_bytes
        if usage_valid is not None:
            self.usage_valid = usage_valid
        if vol_compression_ratio is not None:
            self.vol_compression_ratio = vol_compression_ratio
        if volume_list is not None:
            self.volume_list = volume_list
        if volume_mapped_bytes is not None:
            self.volume_mapped_bytes = volume_mapped_bytes

    @property
    def access_protocol(self):
        """Gets the access_protocol of this NimbleFolderDetails.  # noqa: E501

        Access protocol of the folder. This attribute is used by the VASA Provider to determine the access protocol of the bind request. If not specified in the creation request, it will be the access protocol supported by the group. If the group supports multiple protocols, the default will be Fibre Channel. This field is meaningful only to VVol folder. Possible values: 'iscsi', 'fc'.  # noqa: E501

        :return: The access_protocol of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._access_protocol

    @access_protocol.setter
    def access_protocol(self, access_protocol):
        """Sets the access_protocol of this NimbleFolderDetails.

        Access protocol of the folder. This attribute is used by the VASA Provider to determine the access protocol of the bind request. If not specified in the creation request, it will be the access protocol supported by the group. If the group supports multiple protocols, the default will be Fibre Channel. This field is meaningful only to VVol folder. Possible values: 'iscsi', 'fc'.  # noqa: E501

        :param access_protocol: The access_protocol of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._access_protocol = access_protocol

    @property
    def agent_type(self):
        """Gets the agent_type of this NimbleFolderDetails.  # noqa: E501

        External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack'.  # noqa: E501

        :return: The agent_type of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """Sets the agent_type of this NimbleFolderDetails.

        External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack'.  # noqa: E501

        :param agent_type: The agent_type of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._agent_type = agent_type

    @property
    def app_uuid(self):
        """Gets the app_uuid of this NimbleFolderDetails.  # noqa: E501

        Application identifier of the folder.  # noqa: E501

        :return: The app_uuid of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid):
        """Sets the app_uuid of this NimbleFolderDetails.

        Application identifier of the folder.  # noqa: E501

        :param app_uuid: The app_uuid of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._app_uuid = app_uuid

    @property
    def appserver_id(self):
        """Gets the appserver_id of this NimbleFolderDetails.  # noqa: E501

        Identifier of the application server associated with the folder.  # noqa: E501

        :return: The appserver_id of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._appserver_id

    @appserver_id.setter
    def appserver_id(self, appserver_id):
        """Sets the appserver_id of this NimbleFolderDetails.

        Identifier of the application server associated with the folder.  # noqa: E501

        :param appserver_id: The appserver_id of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._appserver_id = appserver_id

    @property
    def appserver_name(self):
        """Gets the appserver_name of this NimbleFolderDetails.  # noqa: E501

        Name of the application server associated with the folder.  # noqa: E501

        :return: The appserver_name of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._appserver_name

    @appserver_name.setter
    def appserver_name(self, appserver_name):
        """Sets the appserver_name of this NimbleFolderDetails.

        Name of the application server associated with the folder.  # noqa: E501

        :param appserver_name: The appserver_name of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._appserver_name = appserver_name

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleFolderDetails.  # noqa: E501


        :return: The associated_links of this NimbleFolderDetails.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleFolderDetails.


        :param associated_links: The associated_links of this NimbleFolderDetails.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def capacity_bytes(self):
        """Gets the capacity_bytes of this NimbleFolderDetails.  # noqa: E501

        Capacity of the folder in bytes. If the folder's size has a usage limit, capacity_bytes will be the folder's usage limit. If the folder's size does not have a usage limit, capacity_bytes will be the pool's capacity. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The capacity_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """Sets the capacity_bytes of this NimbleFolderDetails.

        Capacity of the folder in bytes. If the folder's size has a usage limit, capacity_bytes will be the folder's usage limit. If the folder's size does not have a usage limit, capacity_bytes will be the pool's capacity. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param capacity_bytes: The capacity_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._capacity_bytes = capacity_bytes

    @property
    def compressed_snap_usage_bytes(self):
        """Gets the compressed_snap_usage_bytes of this NimbleFolderDetails.  # noqa: E501

        Compressed usage of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The compressed_snap_usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._compressed_snap_usage_bytes

    @compressed_snap_usage_bytes.setter
    def compressed_snap_usage_bytes(self, compressed_snap_usage_bytes):
        """Sets the compressed_snap_usage_bytes of this NimbleFolderDetails.

        Compressed usage of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param compressed_snap_usage_bytes: The compressed_snap_usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._compressed_snap_usage_bytes = compressed_snap_usage_bytes

    @property
    def compressed_vol_usage_bytes(self):
        """Gets the compressed_vol_usage_bytes of this NimbleFolderDetails.  # noqa: E501

        Compressed usage of volumes in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The compressed_vol_usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._compressed_vol_usage_bytes

    @compressed_vol_usage_bytes.setter
    def compressed_vol_usage_bytes(self, compressed_vol_usage_bytes):
        """Sets the compressed_vol_usage_bytes of this NimbleFolderDetails.

        Compressed usage of volumes in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param compressed_vol_usage_bytes: The compressed_vol_usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._compressed_vol_usage_bytes = compressed_vol_usage_bytes

    @property
    def compression_ratio(self):
        """Gets the compression_ratio of this NimbleFolderDetails.  # noqa: E501

        Compression savings for the folder expressed as ratio. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The compression_ratio of this NimbleFolderDetails.  # noqa: E501
        :rtype: float
        """
        return self._compression_ratio

    @compression_ratio.setter
    def compression_ratio(self, compression_ratio):
        """Sets the compression_ratio of this NimbleFolderDetails.

        Compression savings for the folder expressed as ratio. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param compression_ratio: The compression_ratio of this NimbleFolderDetails.  # noqa: E501
        :type: float
        """

        self._compression_ratio = compression_ratio

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleFolderDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleFolderDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleFolderDetails.  # noqa: E501

        Time when this folder was created.  # noqa: E501

        :return: The creation_time of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleFolderDetails.

        Time when this folder was created.  # noqa: E501

        :param creation_time: The creation_time of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleFolderDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleFolderDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this NimbleFolderDetails.  # noqa: E501

        Text description of folder.  # noqa: E501

        :return: The description of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleFolderDetails.

        Text description of folder.  # noqa: E501

        :param description: The description of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def folset_id(self):
        """Gets the folset_id of this NimbleFolderDetails.  # noqa: E501

        Identifier of the folder set associated with the folder. Only VVol folder can be associated with the folder set. The folder and the containing folder set must be associated with the same application server.  # noqa: E501

        :return: The folset_id of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._folset_id

    @folset_id.setter
    def folset_id(self, folset_id):
        """Sets the folset_id of this NimbleFolderDetails.

        Identifier of the folder set associated with the folder. Only VVol folder can be associated with the folder set. The folder and the containing folder set must be associated with the same application server.  # noqa: E501

        :param folset_id: The folset_id of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._folset_id = folset_id

    @property
    def folset_name(self):
        """Gets the folset_name of this NimbleFolderDetails.  # noqa: E501

        Name of the folder set associated with the folder. Only VVol folder can be associated with the folder set. The folder and the containing folder set must be associated with the same application server.  # noqa: E501

        :return: The folset_name of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._folset_name

    @folset_name.setter
    def folset_name(self, folset_name):
        """Sets the folset_name of this NimbleFolderDetails.

        Name of the folder set associated with the folder. Only VVol folder can be associated with the folder set. The folder and the containing folder set must be associated with the same application server.  # noqa: E501

        :param folset_name: The folset_name of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._folset_name = folset_name

    @property
    def fqn(self):
        """Gets the fqn of this NimbleFolderDetails.  # noqa: E501

        Fully qualified name of folder in the pool.  # noqa: E501

        :return: The fqn of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._fqn

    @fqn.setter
    def fqn(self, fqn):
        """Sets the fqn of this NimbleFolderDetails.

        Fully qualified name of folder in the pool.  # noqa: E501

        :param fqn: The fqn of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._fqn = fqn

    @property
    def free_space_bytes(self):
        """Gets the free_space_bytes of this NimbleFolderDetails.  # noqa: E501

        Free space in the folder in bytes. If the folder has a usage limit, free_space_bytes will be the folder's free space (the folder's usage limit minus the folder's space usage). If the folder does not have a usage limit, free_space_bytes will be the pool's free space. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The free_space_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._free_space_bytes

    @free_space_bytes.setter
    def free_space_bytes(self, free_space_bytes):
        """Sets the free_space_bytes of this NimbleFolderDetails.

        Free space in the folder in bytes. If the folder has a usage limit, free_space_bytes will be the folder's free space (the folder's usage limit minus the folder's space usage). If the folder does not have a usage limit, free_space_bytes will be the pool's free space. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param free_space_bytes: The free_space_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._free_space_bytes = free_space_bytes

    @property
    def full_name(self):
        """Gets the full_name of this NimbleFolderDetails.  # noqa: E501

        Fully qualified name of folder in the group.  # noqa: E501

        :return: The full_name of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this NimbleFolderDetails.

        Fully qualified name of folder in the group.  # noqa: E501

        :param full_name: The full_name of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def generation(self):
        """Gets the generation of this NimbleFolderDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleFolderDetails.

        generation  # noqa: E501

        :param generation: The generation of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def inherited_vol_perfpol_id(self):
        """Gets the inherited_vol_perfpol_id of this NimbleFolderDetails.  # noqa: E501

        Identifier of the default performance policy for a newly created volume.  # noqa: E501

        :return: The inherited_vol_perfpol_id of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._inherited_vol_perfpol_id

    @inherited_vol_perfpol_id.setter
    def inherited_vol_perfpol_id(self, inherited_vol_perfpol_id):
        """Sets the inherited_vol_perfpol_id of this NimbleFolderDetails.

        Identifier of the default performance policy for a newly created volume.  # noqa: E501

        :param inherited_vol_perfpol_id: The inherited_vol_perfpol_id of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._inherited_vol_perfpol_id = inherited_vol_perfpol_id

    @property
    def inherited_vol_perfpol_name(self):
        """Gets the inherited_vol_perfpol_name of this NimbleFolderDetails.  # noqa: E501

        Name of the default performance policy for a newly created volume.  # noqa: E501

        :return: The inherited_vol_perfpol_name of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._inherited_vol_perfpol_name

    @inherited_vol_perfpol_name.setter
    def inherited_vol_perfpol_name(self, inherited_vol_perfpol_name):
        """Sets the inherited_vol_perfpol_name of this NimbleFolderDetails.

        Name of the default performance policy for a newly created volume.  # noqa: E501

        :param inherited_vol_perfpol_name: The inherited_vol_perfpol_name of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._inherited_vol_perfpol_name = inherited_vol_perfpol_name

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleFolderDetails.  # noqa: E501

        Identifier of the default performance policy for a newly created volume.  # noqa: E501

        :return: The last_modified of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleFolderDetails.

        Identifier of the default performance policy for a newly created volume.  # noqa: E501

        :param last_modified: The last_modified of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def limit_bytes(self):
        """Gets the limit_bytes of this NimbleFolderDetails.  # noqa: E501

        Folder limit size in bytes. By default, a folder (except SMIS and VVol types) does not have a limit. If limit_bytes is not specified when a folder is created, or if limit_bytes is set to the largest possible 64-bit signed integer (9223372036854775807), then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. On output, if the folder has a limit, the limit_bytes_specified attribute will be true and limit_bytes will be the limit. If the folder does not have a limit, the limit_bytes_specified attribute will be false and limit_bytes will be interpreted based on the value of the usage_valid attribute. If the usage_valid attribute is true, limits_byte will be the capacity of the pool. Otherwise, limits_bytes is not meaningful and can be null. SMIS and VVol folders require a size limit. This attribute is superseded by limit_size_bytes.  # noqa: E501

        :return: The limit_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._limit_bytes

    @limit_bytes.setter
    def limit_bytes(self, limit_bytes):
        """Sets the limit_bytes of this NimbleFolderDetails.

        Folder limit size in bytes. By default, a folder (except SMIS and VVol types) does not have a limit. If limit_bytes is not specified when a folder is created, or if limit_bytes is set to the largest possible 64-bit signed integer (9223372036854775807), then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. On output, if the folder has a limit, the limit_bytes_specified attribute will be true and limit_bytes will be the limit. If the folder does not have a limit, the limit_bytes_specified attribute will be false and limit_bytes will be interpreted based on the value of the usage_valid attribute. If the usage_valid attribute is true, limits_byte will be the capacity of the pool. Otherwise, limits_bytes is not meaningful and can be null. SMIS and VVol folders require a size limit. This attribute is superseded by limit_size_bytes.  # noqa: E501

        :param limit_bytes: The limit_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._limit_bytes = limit_bytes

    @property
    def limit_bytes_specified(self):
        """Gets the limit_bytes_specified of this NimbleFolderDetails.  # noqa: E501

        Indicates whether the folder has a limit.  # noqa: E501

        :return: The limit_bytes_specified of this NimbleFolderDetails.  # noqa: E501
        :rtype: bool
        """
        return self._limit_bytes_specified

    @limit_bytes_specified.setter
    def limit_bytes_specified(self, limit_bytes_specified):
        """Sets the limit_bytes_specified of this NimbleFolderDetails.

        Indicates whether the folder has a limit.  # noqa: E501

        :param limit_bytes_specified: The limit_bytes_specified of this NimbleFolderDetails.  # noqa: E501
        :type: bool
        """

        self._limit_bytes_specified = limit_bytes_specified

    @property
    def limit_iops(self):
        """Gets the limit_iops of this NimbleFolderDetails.  # noqa: E501

        IOPS limit for this folder. If limit_iops is not specified when a folder is created, or if limit_iops is set to -1, then the folder has no IOPS limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited.  # noqa: E501

        :return: The limit_iops of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._limit_iops

    @limit_iops.setter
    def limit_iops(self, limit_iops):
        """Sets the limit_iops of this NimbleFolderDetails.

        IOPS limit for this folder. If limit_iops is not specified when a folder is created, or if limit_iops is set to -1, then the folder has no IOPS limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited.  # noqa: E501

        :param limit_iops: The limit_iops of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._limit_iops = limit_iops

    @property
    def limit_mbps(self):
        """Gets the limit_mbps of this NimbleFolderDetails.  # noqa: E501

        Throughput limit for this folder in MB/s. If limit_mbps is not specified when a folder is created, or if limit_mbps is set to -1, then the folder has no throughput limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited.  # noqa: E501

        :return: The limit_mbps of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._limit_mbps

    @limit_mbps.setter
    def limit_mbps(self, limit_mbps):
        """Sets the limit_mbps of this NimbleFolderDetails.

        Throughput limit for this folder in MB/s. If limit_mbps is not specified when a folder is created, or if limit_mbps is set to -1, then the folder has no throughput limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited.  # noqa: E501

        :param limit_mbps: The limit_mbps of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._limit_mbps = limit_mbps

    @property
    def limit_size_bytes(self):
        """Gets the limit_size_bytes of this NimbleFolderDetails.  # noqa: E501

        Folder size limit in bytes. If limit_size_bytes is not specified when a folder is created, or if limit_size_bytes is set to -1, then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. Folders with an agent_type of 'smis' or 'vvol' must have a size limit.  # noqa: E501

        :return: The limit_size_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._limit_size_bytes

    @limit_size_bytes.setter
    def limit_size_bytes(self, limit_size_bytes):
        """Sets the limit_size_bytes of this NimbleFolderDetails.

        Folder size limit in bytes. If limit_size_bytes is not specified when a folder is created, or if limit_size_bytes is set to -1, then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. Folders with an agent_type of 'smis' or 'vvol' must have a size limit.  # noqa: E501

        :param limit_size_bytes: The limit_size_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._limit_size_bytes = limit_size_bytes

    @property
    def num_snapcolls(self):
        """Gets the num_snapcolls of this NimbleFolderDetails.  # noqa: E501

        Number of snapshot collections inside the folder. This attribute is deprecated and has no meaningful value.  # noqa: E501

        :return: The num_snapcolls of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_snapcolls

    @num_snapcolls.setter
    def num_snapcolls(self, num_snapcolls):
        """Sets the num_snapcolls of this NimbleFolderDetails.

        Number of snapshot collections inside the folder. This attribute is deprecated and has no meaningful value.  # noqa: E501

        :param num_snapcolls: The num_snapcolls of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._num_snapcolls = num_snapcolls

    @property
    def num_snaps(self):
        """Gets the num_snaps of this NimbleFolderDetails.  # noqa: E501

        Number of snapshots inside the folder. This attribute is deprecated and has no meaningful value.  # noqa: E501

        :return: The num_snaps of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_snaps

    @num_snaps.setter
    def num_snaps(self, num_snaps):
        """Sets the num_snaps of this NimbleFolderDetails.

        Number of snapshots inside the folder. This attribute is deprecated and has no meaningful value.  # noqa: E501

        :param num_snaps: The num_snaps of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._num_snaps = num_snaps

    @property
    def overdraft_limit_pct(self):
        """Gets the overdraft_limit_pct of this NimbleFolderDetails.  # noqa: E501

        Amount of space to consider as overdraft range for this folder as a percentage of folder used limit. Valid values are from 0% - 200%. This is the limit above the folder usage limit beyond which enforcement action(volume offline/non-writable) is issued.  # noqa: E501

        :return: The overdraft_limit_pct of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._overdraft_limit_pct

    @overdraft_limit_pct.setter
    def overdraft_limit_pct(self, overdraft_limit_pct):
        """Sets the overdraft_limit_pct of this NimbleFolderDetails.

        Amount of space to consider as overdraft range for this folder as a percentage of folder used limit. Valid values are from 0% - 200%. This is the limit above the folder usage limit beyond which enforcement action(volume offline/non-writable) is issued.  # noqa: E501

        :param overdraft_limit_pct: The overdraft_limit_pct of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._overdraft_limit_pct = overdraft_limit_pct

    @property
    def provisioned_bytes(self):
        """Gets the provisioned_bytes of this NimbleFolderDetails.  # noqa: E501

        Sum of provisioned size of volumes in the folder.  # noqa: E501

        :return: The provisioned_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._provisioned_bytes

    @provisioned_bytes.setter
    def provisioned_bytes(self, provisioned_bytes):
        """Sets the provisioned_bytes of this NimbleFolderDetails.

        Sum of provisioned size of volumes in the folder.  # noqa: E501

        :param provisioned_bytes: The provisioned_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._provisioned_bytes = provisioned_bytes

    @property
    def provisioned_limit_size_bytes(self):
        """Gets the provisioned_limit_size_bytes of this NimbleFolderDetails.  # noqa: E501

        Limit on the provisioned size of volumes in a folder. If provisioned_limit_size_bytes is not specified when a folder is created, or if provisioned_limit_size_bytes is set to -1, then the folder has no provisioned size limit.  # noqa: E501

        :return: The provisioned_limit_size_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._provisioned_limit_size_bytes

    @provisioned_limit_size_bytes.setter
    def provisioned_limit_size_bytes(self, provisioned_limit_size_bytes):
        """Sets the provisioned_limit_size_bytes of this NimbleFolderDetails.

        Limit on the provisioned size of volumes in a folder. If provisioned_limit_size_bytes is not specified when a folder is created, or if provisioned_limit_size_bytes is set to -1, then the folder has no provisioned size limit.  # noqa: E501

        :param provisioned_limit_size_bytes: The provisioned_limit_size_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._provisioned_limit_size_bytes = provisioned_limit_size_bytes

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleFolderDetails.  # noqa: E501


        :return: The resource_uri of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleFolderDetails.


        :param resource_uri: The resource_uri of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def search_name(self):
        """Gets the search_name of this NimbleFolderDetails.  # noqa: E501

        Name of folder used for object search.  # noqa: E501

        :return: The search_name of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._search_name

    @search_name.setter
    def search_name(self, search_name):
        """Sets the search_name of this NimbleFolderDetails.

        Name of folder used for object search.  # noqa: E501

        :param search_name: The search_name of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._search_name = search_name

    @property
    def snap_compression_ratio(self):
        """Gets the snap_compression_ratio of this NimbleFolderDetails.  # noqa: E501

        Identifier of the default performance policy for a newly created volume.  # noqa: E501

        :return: The snap_compression_ratio of this NimbleFolderDetails.  # noqa: E501
        :rtype: float
        """
        return self._snap_compression_ratio

    @snap_compression_ratio.setter
    def snap_compression_ratio(self, snap_compression_ratio):
        """Sets the snap_compression_ratio of this NimbleFolderDetails.

        Identifier of the default performance policy for a newly created volume.  # noqa: E501

        :param snap_compression_ratio: The snap_compression_ratio of this NimbleFolderDetails.  # noqa: E501
        :type: float
        """

        self._snap_compression_ratio = snap_compression_ratio

    @property
    def tenant_id(self):
        """Gets the tenant_id of this NimbleFolderDetails.  # noqa: E501

        Tenant ID of the folder. This is used to determine what tenant context the folder belongs to.  # noqa: E501

        :return: The tenant_id of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this NimbleFolderDetails.

        Tenant ID of the folder. This is used to determine what tenant context the folder belongs to.  # noqa: E501

        :param tenant_id: The tenant_id of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def type(self):
        """Gets the type of this NimbleFolderDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleFolderDetails.

        type  # noqa: E501

        :param type: The type of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uncompressed_snap_usage_bytes(self):
        """Gets the uncompressed_snap_usage_bytes of this NimbleFolderDetails.  # noqa: E501

        Uncompressed usage of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The uncompressed_snap_usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._uncompressed_snap_usage_bytes

    @uncompressed_snap_usage_bytes.setter
    def uncompressed_snap_usage_bytes(self, uncompressed_snap_usage_bytes):
        """Sets the uncompressed_snap_usage_bytes of this NimbleFolderDetails.

        Uncompressed usage of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param uncompressed_snap_usage_bytes: The uncompressed_snap_usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._uncompressed_snap_usage_bytes = uncompressed_snap_usage_bytes

    @property
    def uncompressed_vol_usage_bytes(self):
        """Gets the uncompressed_vol_usage_bytes of this NimbleFolderDetails.  # noqa: E501

        Uncompressed usage of volumes in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The uncompressed_vol_usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._uncompressed_vol_usage_bytes

    @uncompressed_vol_usage_bytes.setter
    def uncompressed_vol_usage_bytes(self, uncompressed_vol_usage_bytes):
        """Sets the uncompressed_vol_usage_bytes of this NimbleFolderDetails.

        Uncompressed usage of volumes in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param uncompressed_vol_usage_bytes: The uncompressed_vol_usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._uncompressed_vol_usage_bytes = uncompressed_vol_usage_bytes

    @property
    def unused_reserve_bytes(self):
        """Gets the unused_reserve_bytes of this NimbleFolderDetails.  # noqa: E501

        Unused reserve of volumes in the folder in bytes. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The unused_reserve_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: str
        """
        return self._unused_reserve_bytes

    @unused_reserve_bytes.setter
    def unused_reserve_bytes(self, unused_reserve_bytes):
        """Sets the unused_reserve_bytes of this NimbleFolderDetails.

        Unused reserve of volumes in the folder in bytes. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param unused_reserve_bytes: The unused_reserve_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: str
        """

        self._unused_reserve_bytes = unused_reserve_bytes

    @property
    def unused_snap_reserve_bytes(self):
        """Gets the unused_snap_reserve_bytes of this NimbleFolderDetails.  # noqa: E501

        Unused reserve of snapshots of volumes in the folder in bytes. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The unused_snap_reserve_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._unused_snap_reserve_bytes

    @unused_snap_reserve_bytes.setter
    def unused_snap_reserve_bytes(self, unused_snap_reserve_bytes):
        """Sets the unused_snap_reserve_bytes of this NimbleFolderDetails.

        Unused reserve of snapshots of volumes in the folder in bytes. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param unused_snap_reserve_bytes: The unused_snap_reserve_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._unused_snap_reserve_bytes = unused_snap_reserve_bytes

    @property
    def usage_bytes(self):
        """Gets the usage_bytes of this NimbleFolderDetails.  # noqa: E501

        Sum of mapped usage and snapshot uncompressed usage of volumes in the folder.  # noqa: E501

        :return: The usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._usage_bytes

    @usage_bytes.setter
    def usage_bytes(self, usage_bytes):
        """Sets the usage_bytes of this NimbleFolderDetails.

        Sum of mapped usage and snapshot uncompressed usage of volumes in the folder.  # noqa: E501

        :param usage_bytes: The usage_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._usage_bytes = usage_bytes

    @property
    def usage_valid(self):
        """Gets the usage_valid of this NimbleFolderDetails.  # noqa: E501

        Indicate whether the space usage attributes of folder are valid.  # noqa: E501

        :return: The usage_valid of this NimbleFolderDetails.  # noqa: E501
        :rtype: bool
        """
        return self._usage_valid

    @usage_valid.setter
    def usage_valid(self, usage_valid):
        """Sets the usage_valid of this NimbleFolderDetails.

        Indicate whether the space usage attributes of folder are valid.  # noqa: E501

        :param usage_valid: The usage_valid of this NimbleFolderDetails.  # noqa: E501
        :type: bool
        """

        self._usage_valid = usage_valid

    @property
    def vol_compression_ratio(self):
        """Gets the vol_compression_ratio of this NimbleFolderDetails.  # noqa: E501

        Compression ratio of volumes in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :return: The vol_compression_ratio of this NimbleFolderDetails.  # noqa: E501
        :rtype: float
        """
        return self._vol_compression_ratio

    @vol_compression_ratio.setter
    def vol_compression_ratio(self, vol_compression_ratio):
        """Sets the vol_compression_ratio of this NimbleFolderDetails.

        Compression ratio of volumes in the folder. This field is meaningful only when the usage_valid attribute is true.  # noqa: E501

        :param vol_compression_ratio: The vol_compression_ratio of this NimbleFolderDetails.  # noqa: E501
        :type: float
        """

        self._vol_compression_ratio = vol_compression_ratio

    @property
    def volume_list(self):
        """Gets the volume_list of this NimbleFolderDetails.  # noqa: E501

        List of volumes contained by the folder.  # noqa: E501

        :return: The volume_list of this NimbleFolderDetails.  # noqa: E501
        :rtype: list[NimbleVolumeSummary]
        """
        return self._volume_list

    @volume_list.setter
    def volume_list(self, volume_list):
        """Sets the volume_list of this NimbleFolderDetails.

        List of volumes contained by the folder.  # noqa: E501

        :param volume_list: The volume_list of this NimbleFolderDetails.  # noqa: E501
        :type: list[NimbleVolumeSummary]
        """

        self._volume_list = volume_list

    @property
    def volume_mapped_bytes(self):
        """Gets the volume_mapped_bytes of this NimbleFolderDetails.  # noqa: E501

        Sum of mapped usage of volumes in the folder.  # noqa: E501

        :return: The volume_mapped_bytes of this NimbleFolderDetails.  # noqa: E501
        :rtype: int
        """
        return self._volume_mapped_bytes

    @volume_mapped_bytes.setter
    def volume_mapped_bytes(self, volume_mapped_bytes):
        """Sets the volume_mapped_bytes of this NimbleFolderDetails.

        Sum of mapped usage of volumes in the folder.  # noqa: E501

        :param volume_mapped_bytes: The volume_mapped_bytes of this NimbleFolderDetails.  # noqa: E501
        :type: int
        """

        self._volume_mapped_bytes = volume_mapped_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleFolderDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
