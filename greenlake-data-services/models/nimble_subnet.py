# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleSubnet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_group': 'bool',
        'allow_iscsi': 'bool',
        'discovery_ip': 'str',
        'failover': 'bool',
        'failover_enable_time': 'int',
        'label': 'str',
        'mtu': 'int',
        'netmask': 'str',
        'network': 'str',
        'netzone_type': 'str',
        'type': 'str',
        'vlan_id': 'int'
    }

    attribute_map = {
        'allow_group': 'allow_group',
        'allow_iscsi': 'allow_iscsi',
        'discovery_ip': 'discovery_ip',
        'failover': 'failover',
        'failover_enable_time': 'failover_enable_time',
        'label': 'label',
        'mtu': 'mtu',
        'netmask': 'netmask',
        'network': 'network',
        'netzone_type': 'netzone_type',
        'type': 'type',
        'vlan_id': 'vlan_id'
    }

    def __init__(self, allow_group=None, allow_iscsi=None, discovery_ip=None, failover=None, failover_enable_time=None, label=None, mtu=None, netmask=None, network=None, netzone_type=None, type=None, vlan_id=None):  # noqa: E501
        """NimbleSubnet - a model defined in OpenAPI"""  # noqa: E501

        self._allow_group = None
        self._allow_iscsi = None
        self._discovery_ip = None
        self._failover = None
        self._failover_enable_time = None
        self._label = None
        self._mtu = None
        self._netmask = None
        self._network = None
        self._netzone_type = None
        self._type = None
        self._vlan_id = None
        self.discriminator = None

        if allow_group is not None:
            self.allow_group = allow_group
        if allow_iscsi is not None:
            self.allow_iscsi = allow_iscsi
        if discovery_ip is not None:
            self.discovery_ip = discovery_ip
        if failover is not None:
            self.failover = failover
        if failover_enable_time is not None:
            self.failover_enable_time = failover_enable_time
        if label is not None:
            self.label = label
        if mtu is not None:
            self.mtu = mtu
        if netmask is not None:
            self.netmask = netmask
        if network is not None:
            self.network = network
        if netzone_type is not None:
            self.netzone_type = netzone_type
        if type is not None:
            self.type = type
        if vlan_id is not None:
            self.vlan_id = vlan_id

    @property
    def allow_group(self):
        """Gets the allow_group of this NimbleSubnet.  # noqa: E501

        Indicates whether group is allowed.  # noqa: E501

        :return: The allow_group of this NimbleSubnet.  # noqa: E501
        :rtype: bool
        """
        return self._allow_group

    @allow_group.setter
    def allow_group(self, allow_group):
        """Sets the allow_group of this NimbleSubnet.

        Indicates whether group is allowed.  # noqa: E501

        :param allow_group: The allow_group of this NimbleSubnet.  # noqa: E501
        :type: bool
        """

        self._allow_group = allow_group

    @property
    def allow_iscsi(self):
        """Gets the allow_iscsi of this NimbleSubnet.  # noqa: E501

        Indicates whether iSCSI is allowed.  # noqa: E501

        :return: The allow_iscsi of this NimbleSubnet.  # noqa: E501
        :rtype: bool
        """
        return self._allow_iscsi

    @allow_iscsi.setter
    def allow_iscsi(self, allow_iscsi):
        """Sets the allow_iscsi of this NimbleSubnet.

        Indicates whether iSCSI is allowed.  # noqa: E501

        :param allow_iscsi: The allow_iscsi of this NimbleSubnet.  # noqa: E501
        :type: bool
        """

        self._allow_iscsi = allow_iscsi

    @property
    def discovery_ip(self):
        """Gets the discovery_ip of this NimbleSubnet.  # noqa: E501

        Discovery IP address.  # noqa: E501

        :return: The discovery_ip of this NimbleSubnet.  # noqa: E501
        :rtype: str
        """
        return self._discovery_ip

    @discovery_ip.setter
    def discovery_ip(self, discovery_ip):
        """Sets the discovery_ip of this NimbleSubnet.

        Discovery IP address.  # noqa: E501

        :param discovery_ip: The discovery_ip of this NimbleSubnet.  # noqa: E501
        :type: str
        """

        self._discovery_ip = discovery_ip

    @property
    def failover(self):
        """Gets the failover of this NimbleSubnet.  # noqa: E501

        Failover setting of the subnet.  # noqa: E501

        :return: The failover of this NimbleSubnet.  # noqa: E501
        :rtype: bool
        """
        return self._failover

    @failover.setter
    def failover(self, failover):
        """Sets the failover of this NimbleSubnet.

        Failover setting of the subnet.  # noqa: E501

        :param failover: The failover of this NimbleSubnet.  # noqa: E501
        :type: bool
        """

        self._failover = failover

    @property
    def failover_enable_time(self):
        """Gets the failover_enable_time of this NimbleSubnet.  # noqa: E501

        Failover for this subnet will be enabled again at the time specified by failover_enable_time.  # noqa: E501

        :return: The failover_enable_time of this NimbleSubnet.  # noqa: E501
        :rtype: int
        """
        return self._failover_enable_time

    @failover_enable_time.setter
    def failover_enable_time(self, failover_enable_time):
        """Sets the failover_enable_time of this NimbleSubnet.

        Failover for this subnet will be enabled again at the time specified by failover_enable_time.  # noqa: E501

        :param failover_enable_time: The failover_enable_time of this NimbleSubnet.  # noqa: E501
        :type: int
        """

        self._failover_enable_time = failover_enable_time

    @property
    def label(self):
        """Gets the label of this NimbleSubnet.  # noqa: E501

        Subnet label.  # noqa: E501

        :return: The label of this NimbleSubnet.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NimbleSubnet.

        Subnet label.  # noqa: E501

        :param label: The label of this NimbleSubnet.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def mtu(self):
        """Gets the mtu of this NimbleSubnet.  # noqa: E501

        MTU for specified subnet.  # noqa: E501

        :return: The mtu of this NimbleSubnet.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NimbleSubnet.

        MTU for specified subnet.  # noqa: E501

        :param mtu: The mtu of this NimbleSubnet.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def netmask(self):
        """Gets the netmask of this NimbleSubnet.  # noqa: E501

        Subnet netmask address.  # noqa: E501

        :return: The netmask of this NimbleSubnet.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this NimbleSubnet.

        Subnet netmask address.  # noqa: E501

        :param netmask: The netmask of this NimbleSubnet.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def network(self):
        """Gets the network of this NimbleSubnet.  # noqa: E501

        Network IP address.  # noqa: E501

        :return: The network of this NimbleSubnet.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NimbleSubnet.

        Network IP address.  # noqa: E501

        :param network: The network of this NimbleSubnet.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def netzone_type(self):
        """Gets the netzone_type of this NimbleSubnet.  # noqa: E501

        Netzone type. Possible values: 'single', 'evenodd', 'bisect', 'none'.  # noqa: E501

        :return: The netzone_type of this NimbleSubnet.  # noqa: E501
        :rtype: str
        """
        return self._netzone_type

    @netzone_type.setter
    def netzone_type(self, netzone_type):
        """Sets the netzone_type of this NimbleSubnet.

        Netzone type. Possible values: 'single', 'evenodd', 'bisect', 'none'.  # noqa: E501

        :param netzone_type: The netzone_type of this NimbleSubnet.  # noqa: E501
        :type: str
        """

        self._netzone_type = netzone_type

    @property
    def type(self):
        """Gets the type of this NimbleSubnet.  # noqa: E501

        Subnet type. Possible values: 'mgmt', 'unconfigured', 'data', 'mgmt_data', 'invalid'.  # noqa: E501

        :return: The type of this NimbleSubnet.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleSubnet.

        Subnet type. Possible values: 'mgmt', 'unconfigured', 'data', 'mgmt_data', 'invalid'.  # noqa: E501

        :param type: The type of this NimbleSubnet.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vlan_id(self):
        """Gets the vlan_id of this NimbleSubnet.  # noqa: E501

        VLAN ID for specified subnet.  # noqa: E501

        :return: The vlan_id of this NimbleSubnet.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this NimbleSubnet.

        VLAN ID for specified subnet.  # noqa: E501

        :param vlan_id: The vlan_id of this NimbleSubnet.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleSubnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
