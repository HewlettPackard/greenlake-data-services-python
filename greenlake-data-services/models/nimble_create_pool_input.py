# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleCreatePoolInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'array_list': 'list[CreatePoolNimbleArrayDetail]',
        'dedupe_all_volumes': 'bool',
        'description': 'str',
        'name': 'str'
    }

    attribute_map = {
        'array_list': 'array_list',
        'dedupe_all_volumes': 'dedupe_all_volumes',
        'description': 'description',
        'name': 'name'
    }

    def __init__(self, array_list=None, dedupe_all_volumes=None, description=None, name=None):  # noqa: E501
        """NimbleCreatePoolInput - a model defined in OpenAPI"""  # noqa: E501

        self._array_list = None
        self._dedupe_all_volumes = None
        self._description = None
        self._name = None
        self.discriminator = None

        self.array_list = array_list
        if dedupe_all_volumes is not None:
            self.dedupe_all_volumes = dedupe_all_volumes
        if description is not None:
            self.description = description
        self.name = name

    @property
    def array_list(self):
        """Gets the array_list of this NimbleCreatePoolInput.  # noqa: E501

        List of arrays identified by their IDs, in the pool.  # noqa: E501

        :return: The array_list of this NimbleCreatePoolInput.  # noqa: E501
        :rtype: list[CreatePoolNimbleArrayDetail]
        """
        return self._array_list

    @array_list.setter
    def array_list(self, array_list):
        """Sets the array_list of this NimbleCreatePoolInput.

        List of arrays identified by their IDs, in the pool.  # noqa: E501

        :param array_list: The array_list of this NimbleCreatePoolInput.  # noqa: E501
        :type: list[CreatePoolNimbleArrayDetail]
        """
        if array_list is None:
            raise ValueError("Invalid value for `array_list`, must not be `None`")  # noqa: E501

        self._array_list = array_list

    @property
    def dedupe_all_volumes(self):
        """Gets the dedupe_all_volumes of this NimbleCreatePoolInput.  # noqa: E501

        Indicates if dedupe is enabled by default for new volumes on this pool. Defaults to false.  # noqa: E501

        :return: The dedupe_all_volumes of this NimbleCreatePoolInput.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_all_volumes

    @dedupe_all_volumes.setter
    def dedupe_all_volumes(self, dedupe_all_volumes):
        """Sets the dedupe_all_volumes of this NimbleCreatePoolInput.

        Indicates if dedupe is enabled by default for new volumes on this pool. Defaults to false.  # noqa: E501

        :param dedupe_all_volumes: The dedupe_all_volumes of this NimbleCreatePoolInput.  # noqa: E501
        :type: bool
        """

        self._dedupe_all_volumes = dedupe_all_volumes

    @property
    def description(self):
        """Gets the description of this NimbleCreatePoolInput.  # noqa: E501

        Text description of pool. String of up to 255 printable ASCII characters. Defaults to empty string.  # noqa: E501

        :return: The description of this NimbleCreatePoolInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleCreatePoolInput.

        Text description of pool. String of up to 255 printable ASCII characters. Defaults to empty string.  # noqa: E501

        :param description: The description of this NimbleCreatePoolInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this NimbleCreatePoolInput.  # noqa: E501

        Name of pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The name of this NimbleCreatePoolInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleCreatePoolInput.

        Name of pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param name: The name of this NimbleCreatePoolInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleCreatePoolInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
