# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditNetworkSettingsInputProxyParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authentication_required': 'str',
        'proxy_password': 'str',
        'proxy_port': 'int',
        'proxy_protocol': 'str',
        'proxy_server': 'str',
        'proxy_user': 'str'
    }

    attribute_map = {
        'authentication_required': 'authenticationRequired',
        'proxy_password': 'proxyPassword',
        'proxy_port': 'proxyPort',
        'proxy_protocol': 'proxyProtocol',
        'proxy_server': 'proxyServer',
        'proxy_user': 'proxyUser'
    }

    def __init__(self, authentication_required=None, proxy_password=None, proxy_port=None, proxy_protocol=None, proxy_server=None, proxy_user=None):  # noqa: E501
        """EditNetworkSettingsInputProxyParams - a model defined in OpenAPI"""  # noqa: E501

        self._authentication_required = None
        self._proxy_password = None
        self._proxy_port = None
        self._proxy_protocol = None
        self._proxy_server = None
        self._proxy_user = None
        self.discriminator = None

        if authentication_required is not None:
            self.authentication_required = authentication_required
        if proxy_password is not None:
            self.proxy_password = proxy_password
        if proxy_port is not None:
            self.proxy_port = proxy_port
        if proxy_protocol is not None:
            self.proxy_protocol = proxy_protocol
        if proxy_server is not None:
            self.proxy_server = proxy_server
        if proxy_user is not None:
            self.proxy_user = proxy_user

    @property
    def authentication_required(self):
        """Gets the authentication_required of this EditNetworkSettingsInputProxyParams.  # noqa: E501

        Is authentication required. Allowed values are enabled or disabled  # noqa: E501

        :return: The authentication_required of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :rtype: str
        """
        return self._authentication_required

    @authentication_required.setter
    def authentication_required(self, authentication_required):
        """Sets the authentication_required of this EditNetworkSettingsInputProxyParams.

        Is authentication required. Allowed values are enabled or disabled  # noqa: E501

        :param authentication_required: The authentication_required of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :type: str
        """

        self._authentication_required = authentication_required

    @property
    def proxy_password(self):
        """Gets the proxy_password of this EditNetworkSettingsInputProxyParams.  # noqa: E501

        Password for authentication. (Required only if Authentication required is enabled)  # noqa: E501

        :return: The proxy_password of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :rtype: str
        """
        return self._proxy_password

    @proxy_password.setter
    def proxy_password(self, proxy_password):
        """Sets the proxy_password of this EditNetworkSettingsInputProxyParams.

        Password for authentication. (Required only if Authentication required is enabled)  # noqa: E501

        :param proxy_password: The proxy_password of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :type: str
        """

        self._proxy_password = proxy_password

    @property
    def proxy_port(self):
        """Gets the proxy_port of this EditNetworkSettingsInputProxyParams.  # noqa: E501

        Proxy Server Port. Allowed values are 1-65535  # noqa: E501

        :return: The proxy_port of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :rtype: int
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """Sets the proxy_port of this EditNetworkSettingsInputProxyParams.

        Proxy Server Port. Allowed values are 1-65535  # noqa: E501

        :param proxy_port: The proxy_port of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :type: int
        """

        self._proxy_port = proxy_port

    @property
    def proxy_protocol(self):
        """Gets the proxy_protocol of this EditNetworkSettingsInputProxyParams.  # noqa: E501

        Supported proxy protocols are HTTP, SOCKS4 and SOCKS5.  # noqa: E501

        :return: The proxy_protocol of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :rtype: str
        """
        return self._proxy_protocol

    @proxy_protocol.setter
    def proxy_protocol(self, proxy_protocol):
        """Sets the proxy_protocol of this EditNetworkSettingsInputProxyParams.

        Supported proxy protocols are HTTP, SOCKS4 and SOCKS5.  # noqa: E501

        :param proxy_protocol: The proxy_protocol of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :type: str
        """

        self._proxy_protocol = proxy_protocol

    @property
    def proxy_server(self):
        """Gets the proxy_server of this EditNetworkSettingsInputProxyParams.  # noqa: E501

        Proxy server IP address  # noqa: E501

        :return: The proxy_server of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server

    @proxy_server.setter
    def proxy_server(self, proxy_server):
        """Sets the proxy_server of this EditNetworkSettingsInputProxyParams.

        Proxy server IP address  # noqa: E501

        :param proxy_server: The proxy_server of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :type: str
        """

        self._proxy_server = proxy_server

    @property
    def proxy_user(self):
        """Gets the proxy_user of this EditNetworkSettingsInputProxyParams.  # noqa: E501

        Username for authentication. (Required only if Authentication required is enabled)  # noqa: E501

        :return: The proxy_user of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :rtype: str
        """
        return self._proxy_user

    @proxy_user.setter
    def proxy_user(self, proxy_user):
        """Sets the proxy_user of this EditNetworkSettingsInputProxyParams.

        Username for authentication. (Required only if Authentication required is enabled)  # noqa: E501

        :param proxy_user: The proxy_user of this EditNetworkSettingsInputProxyParams.  # noqa: E501
        :type: str
        """

        self._proxy_user = proxy_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditNetworkSettingsInputProxyParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
