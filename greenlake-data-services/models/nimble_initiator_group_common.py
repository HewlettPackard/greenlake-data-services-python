# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleInitiatorGroupCommon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_links': 'AssociatedLinks',
        'console_uri': 'str',
        'creation_time': 'int',
        'customer_id': 'str',
        'description': 'str',
        'fc_initiators': 'list[NimbleFCInitiator]',
        'fc_sessions': 'list[NimbleFCSessionDetails]',
        'fc_tdz_ports': 'list[NimbleFCTdzPorts]',
        'full_name': 'str',
        'generation': 'int',
        'iscsi_initiators': 'list[NimbleISCSIInitiator]',
        'last_modified': 'int',
        'metadata': 'list[NimbleMetadata]',
        'num_connections': 'int',
        'resource_uri': 'str',
        'sc_host_id': 'str',
        'search_name': 'str',
        'target_subnets': 'list[NimbleTargetSubnets]',
        'type': 'str',
        'volume_count': 'int',
        'volume_list': 'list[NimbleVolList]'
    }

    attribute_map = {
        'associated_links': 'associatedLinks',
        'console_uri': 'consoleUri',
        'creation_time': 'creation_time',
        'customer_id': 'customerId',
        'description': 'description',
        'fc_initiators': 'fc_initiators',
        'fc_sessions': 'fc_sessions',
        'fc_tdz_ports': 'fc_tdz_ports',
        'full_name': 'full_name',
        'generation': 'generation',
        'iscsi_initiators': 'iscsi_initiators',
        'last_modified': 'last_modified',
        'metadata': 'metadata',
        'num_connections': 'num_connections',
        'resource_uri': 'resourceUri',
        'sc_host_id': 'sc_HostId',
        'search_name': 'search_name',
        'target_subnets': 'target_subnets',
        'type': 'type',
        'volume_count': 'volume_count',
        'volume_list': 'volume_list'
    }

    def __init__(self, associated_links=None, console_uri=None, creation_time=None, customer_id=None, description=None, fc_initiators=None, fc_sessions=None, fc_tdz_ports=None, full_name=None, generation=None, iscsi_initiators=None, last_modified=None, metadata=None, num_connections=None, resource_uri=None, sc_host_id=None, search_name=None, target_subnets=None, type=None, volume_count=None, volume_list=None):  # noqa: E501
        """NimbleInitiatorGroupCommon - a model defined in OpenAPI"""  # noqa: E501

        self._associated_links = None
        self._console_uri = None
        self._creation_time = None
        self._customer_id = None
        self._description = None
        self._fc_initiators = None
        self._fc_sessions = None
        self._fc_tdz_ports = None
        self._full_name = None
        self._generation = None
        self._iscsi_initiators = None
        self._last_modified = None
        self._metadata = None
        self._num_connections = None
        self._resource_uri = None
        self._sc_host_id = None
        self._search_name = None
        self._target_subnets = None
        self._type = None
        self._volume_count = None
        self._volume_list = None
        self.discriminator = None

        if associated_links is not None:
            self.associated_links = associated_links
        if console_uri is not None:
            self.console_uri = console_uri
        if creation_time is not None:
            self.creation_time = creation_time
        if customer_id is not None:
            self.customer_id = customer_id
        if description is not None:
            self.description = description
        if fc_initiators is not None:
            self.fc_initiators = fc_initiators
        if fc_sessions is not None:
            self.fc_sessions = fc_sessions
        if fc_tdz_ports is not None:
            self.fc_tdz_ports = fc_tdz_ports
        if full_name is not None:
            self.full_name = full_name
        if generation is not None:
            self.generation = generation
        if iscsi_initiators is not None:
            self.iscsi_initiators = iscsi_initiators
        if last_modified is not None:
            self.last_modified = last_modified
        if metadata is not None:
            self.metadata = metadata
        if num_connections is not None:
            self.num_connections = num_connections
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if sc_host_id is not None:
            self.sc_host_id = sc_host_id
        if search_name is not None:
            self.search_name = search_name
        if target_subnets is not None:
            self.target_subnets = target_subnets
        if type is not None:
            self.type = type
        if volume_count is not None:
            self.volume_count = volume_count
        if volume_list is not None:
            self.volume_list = volume_list

    @property
    def associated_links(self):
        """Gets the associated_links of this NimbleInitiatorGroupCommon.  # noqa: E501


        :return: The associated_links of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: AssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this NimbleInitiatorGroupCommon.


        :param associated_links: The associated_links of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: AssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def console_uri(self):
        """Gets the console_uri of this NimbleInitiatorGroupCommon.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this NimbleInitiatorGroupCommon.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def creation_time(self):
        """Gets the creation_time of this NimbleInitiatorGroupCommon.  # noqa: E501

        Time when this initiator group was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The creation_time of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NimbleInitiatorGroupCommon.

        Time when this initiator group was created. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param creation_time: The creation_time of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def customer_id(self):
        """Gets the customer_id of this NimbleInitiatorGroupCommon.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NimbleInitiatorGroupCommon.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this NimbleInitiatorGroupCommon.  # noqa: E501

        Text description of initiator group. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The description of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NimbleInitiatorGroupCommon.

        Text description of initiator group. String of up to 255 printable ASCII characters.  # noqa: E501

        :param description: The description of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fc_initiators(self):
        """Gets the fc_initiators of this NimbleInitiatorGroupCommon.  # noqa: E501

        List of FC initiators. When create/update fc_initiators, wwpn is required. List of Fibre Channel initiators.  # noqa: E501

        :return: The fc_initiators of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: list[NimbleFCInitiator]
        """
        return self._fc_initiators

    @fc_initiators.setter
    def fc_initiators(self, fc_initiators):
        """Sets the fc_initiators of this NimbleInitiatorGroupCommon.

        List of FC initiators. When create/update fc_initiators, wwpn is required. List of Fibre Channel initiators.  # noqa: E501

        :param fc_initiators: The fc_initiators of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: list[NimbleFCInitiator]
        """

        self._fc_initiators = fc_initiators

    @property
    def fc_sessions(self):
        """Gets the fc_sessions of this NimbleInitiatorGroupCommon.  # noqa: E501

        List of FC sessions.  # noqa: E501

        :return: The fc_sessions of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: list[NimbleFCSessionDetails]
        """
        return self._fc_sessions

    @fc_sessions.setter
    def fc_sessions(self, fc_sessions):
        """Sets the fc_sessions of this NimbleInitiatorGroupCommon.

        List of FC sessions.  # noqa: E501

        :param fc_sessions: The fc_sessions of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: list[NimbleFCSessionDetails]
        """

        self._fc_sessions = fc_sessions

    @property
    def fc_tdz_ports(self):
        """Gets the fc_tdz_ports of this NimbleInitiatorGroupCommon.  # noqa: E501

        List of target Fibre Channel ports with Target Driven Zoning configured on this initiator group.  # noqa: E501

        :return: The fc_tdz_ports of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: list[NimbleFCTdzPorts]
        """
        return self._fc_tdz_ports

    @fc_tdz_ports.setter
    def fc_tdz_ports(self, fc_tdz_ports):
        """Sets the fc_tdz_ports of this NimbleInitiatorGroupCommon.

        List of target Fibre Channel ports with Target Driven Zoning configured on this initiator group.  # noqa: E501

        :param fc_tdz_ports: The fc_tdz_ports of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: list[NimbleFCTdzPorts]
        """

        self._fc_tdz_ports = fc_tdz_ports

    @property
    def full_name(self):
        """Gets the full_name of this NimbleInitiatorGroupCommon.  # noqa: E501

        Initiator group's full name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The full_name of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this NimbleInitiatorGroupCommon.

        Initiator group's full name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param full_name: The full_name of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def generation(self):
        """Gets the generation of this NimbleInitiatorGroupCommon.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this NimbleInitiatorGroupCommon.

        generation  # noqa: E501

        :param generation: The generation of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def iscsi_initiators(self):
        """Gets the iscsi_initiators of this NimbleInitiatorGroupCommon.  # noqa: E501

        List of ISCSI initiators. When create/update iscsi_initiators, either iqn or ip_address is always required with label.  # noqa: E501

        :return: The iscsi_initiators of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: list[NimbleISCSIInitiator]
        """
        return self._iscsi_initiators

    @iscsi_initiators.setter
    def iscsi_initiators(self, iscsi_initiators):
        """Sets the iscsi_initiators of this NimbleInitiatorGroupCommon.

        List of ISCSI initiators. When create/update iscsi_initiators, either iqn or ip_address is always required with label.  # noqa: E501

        :param iscsi_initiators: The iscsi_initiators of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: list[NimbleISCSIInitiator]
        """

        self._iscsi_initiators = iscsi_initiators

    @property
    def last_modified(self):
        """Gets the last_modified of this NimbleInitiatorGroupCommon.  # noqa: E501

        Time when this initiator group was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :return: The last_modified of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this NimbleInitiatorGroupCommon.

        Time when this initiator group was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.  # noqa: E501

        :param last_modified: The last_modified of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def metadata(self):
        """Gets the metadata of this NimbleInitiatorGroupCommon.  # noqa: E501

        Key-value pairs that augment an initiator group's attributes.  # noqa: E501

        :return: The metadata of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: list[NimbleMetadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NimbleInitiatorGroupCommon.

        Key-value pairs that augment an initiator group's attributes.  # noqa: E501

        :param metadata: The metadata of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: list[NimbleMetadata]
        """

        self._metadata = metadata

    @property
    def num_connections(self):
        """Gets the num_connections of this NimbleInitiatorGroupCommon.  # noqa: E501

        Total number of connections from initiators in the initiator group.  # noqa: E501

        :return: The num_connections of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: int
        """
        return self._num_connections

    @num_connections.setter
    def num_connections(self, num_connections):
        """Sets the num_connections of this NimbleInitiatorGroupCommon.

        Total number of connections from initiators in the initiator group.  # noqa: E501

        :param num_connections: The num_connections of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: int
        """

        self._num_connections = num_connections

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NimbleInitiatorGroupCommon.  # noqa: E501


        :return: The resource_uri of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NimbleInitiatorGroupCommon.


        :param resource_uri: The resource_uri of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def sc_host_id(self):
        """Gets the sc_host_id of this NimbleInitiatorGroupCommon.  # noqa: E501

        Host Service Host Id  # noqa: E501

        :return: The sc_host_id of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: str
        """
        return self._sc_host_id

    @sc_host_id.setter
    def sc_host_id(self, sc_host_id):
        """Sets the sc_host_id of this NimbleInitiatorGroupCommon.

        Host Service Host Id  # noqa: E501

        :param sc_host_id: The sc_host_id of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: str
        """

        self._sc_host_id = sc_host_id

    @property
    def search_name(self):
        """Gets the search_name of this NimbleInitiatorGroupCommon.  # noqa: E501

        Initiator group name used for search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :return: The search_name of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: str
        """
        return self._search_name

    @search_name.setter
    def search_name(self, search_name):
        """Sets the search_name of this NimbleInitiatorGroupCommon.

        Initiator group name used for search. Alphanumeric string, up to 64 characters including hyphen, period, colon.  # noqa: E501

        :param search_name: The search_name of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: str
        """

        self._search_name = search_name

    @property
    def target_subnets(self):
        """Gets the target_subnets of this NimbleInitiatorGroupCommon.  # noqa: E501

        List of target subnet labels. If specified, discovery and access to volumes will be restricted to the specified subnets. List of target subnet tables.  # noqa: E501

        :return: The target_subnets of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: list[NimbleTargetSubnets]
        """
        return self._target_subnets

    @target_subnets.setter
    def target_subnets(self, target_subnets):
        """Sets the target_subnets of this NimbleInitiatorGroupCommon.

        List of target subnet labels. If specified, discovery and access to volumes will be restricted to the specified subnets. List of target subnet tables.  # noqa: E501

        :param target_subnets: The target_subnets of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: list[NimbleTargetSubnets]
        """

        self._target_subnets = target_subnets

    @property
    def type(self):
        """Gets the type of this NimbleInitiatorGroupCommon.  # noqa: E501

        type  # noqa: E501

        :return: The type of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NimbleInitiatorGroupCommon.

        type  # noqa: E501

        :param type: The type of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def volume_count(self):
        """Gets the volume_count of this NimbleInitiatorGroupCommon.  # noqa: E501

        Number of volumes that are accessible by the initiator group.  # noqa: E501

        :return: The volume_count of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this NimbleInitiatorGroupCommon.

        Number of volumes that are accessible by the initiator group.  # noqa: E501

        :param volume_count: The volume_count of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: int
        """

        self._volume_count = volume_count

    @property
    def volume_list(self):
        """Gets the volume_list of this NimbleInitiatorGroupCommon.  # noqa: E501

        List of volumes that are accessible by the initiator group. List of volumes.  # noqa: E501

        :return: The volume_list of this NimbleInitiatorGroupCommon.  # noqa: E501
        :rtype: list[NimbleVolList]
        """
        return self._volume_list

    @volume_list.setter
    def volume_list(self, volume_list):
        """Sets the volume_list of this NimbleInitiatorGroupCommon.

        List of volumes that are accessible by the initiator group. List of volumes.  # noqa: E501

        :param volume_list: The volume_list of this NimbleInitiatorGroupCommon.  # noqa: E501
        :type: list[NimbleVolList]
        """

        self._volume_list = volume_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleInitiatorGroupCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
