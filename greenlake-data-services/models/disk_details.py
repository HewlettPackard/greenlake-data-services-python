# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DiskDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'admit_time': 'AdmitTime',
        'associated_links': 'DiskAssociatedLinks',
        'capacity': 'DiskCapacity',
        'console_uri': 'str',
        'consumable_size_mi_b': 'int',
        'customer_id': 'str',
        'dev_type': 'str',
        'disk_id': 'int',
        'displayname': 'str',
        'domain': 'str',
        'fw_status': 'str',
        'fw_version': 'str',
        'generation': 'int',
        'id': 'str',
        'life_left_pct': 'float',
        'loop_a0': 'DiskLoop',
        'loop_a1': 'DiskLoop',
        'loop_b0': 'DiskLoop',
        'loop_b1': 'DiskLoop',
        'manufacturing': 'ManufacturingSingle',
        'media_type': 'str',
        'mfg_capacity_gb': 'int',
        'position_last': 'DiskPosition',
        'position_now': 'DiskPositionNow',
        'protocol': 'str',
        'raw_size_mi_b': 'int',
        'read_errors': 'ErrorCount',
        'request_uri': 'str',
        'resource_uri': 'str',
        'sed_status': 'str',
        'speed': 'int',
        'state': 'STATE',
        'system_id': 'str',
        'temp_max': 'int',
        'temp_min': 'int',
        'temp_now': 'int',
        'type': 'str',
        'write_errors': 'ErrorCount',
        'wwn': 'str'
    }

    attribute_map = {
        'admit_time': 'admitTime',
        'associated_links': 'associatedLinks',
        'capacity': 'capacity',
        'console_uri': 'consoleUri',
        'consumable_size_mi_b': 'consumableSizeMiB',
        'customer_id': 'customerId',
        'dev_type': 'devType',
        'disk_id': 'diskId',
        'displayname': 'displayname',
        'domain': 'domain',
        'fw_status': 'fwStatus',
        'fw_version': 'fwVersion',
        'generation': 'generation',
        'id': 'id',
        'life_left_pct': 'lifeLeftPCT',
        'loop_a0': 'loopA0',
        'loop_a1': 'loopA1',
        'loop_b0': 'loopB0',
        'loop_b1': 'loopB1',
        'manufacturing': 'manufacturing',
        'media_type': 'mediaType',
        'mfg_capacity_gb': 'mfgCapacityGB',
        'position_last': 'positionLast',
        'position_now': 'positionNow',
        'protocol': 'protocol',
        'raw_size_mi_b': 'rawSizeMiB',
        'read_errors': 'readErrors',
        'request_uri': 'requestUri',
        'resource_uri': 'resourceUri',
        'sed_status': 'sedStatus',
        'speed': 'speed',
        'state': 'state',
        'system_id': 'systemId',
        'temp_max': 'tempMax',
        'temp_min': 'tempMin',
        'temp_now': 'tempNow',
        'type': 'type',
        'write_errors': 'writeErrors',
        'wwn': 'wwn'
    }

    def __init__(self, admit_time=None, associated_links=None, capacity=None, console_uri=None, consumable_size_mi_b=None, customer_id=None, dev_type=None, disk_id=None, displayname=None, domain=None, fw_status=None, fw_version=None, generation=None, id=None, life_left_pct=None, loop_a0=None, loop_a1=None, loop_b0=None, loop_b1=None, manufacturing=None, media_type=None, mfg_capacity_gb=None, position_last=None, position_now=None, protocol=None, raw_size_mi_b=None, read_errors=None, request_uri=None, resource_uri=None, sed_status=None, speed=None, state=None, system_id=None, temp_max=None, temp_min=None, temp_now=None, type=None, write_errors=None, wwn=None):  # noqa: E501
        """DiskDetails - a model defined in OpenAPI"""  # noqa: E501

        self._admit_time = None
        self._associated_links = None
        self._capacity = None
        self._console_uri = None
        self._consumable_size_mi_b = None
        self._customer_id = None
        self._dev_type = None
        self._disk_id = None
        self._displayname = None
        self._domain = None
        self._fw_status = None
        self._fw_version = None
        self._generation = None
        self._id = None
        self._life_left_pct = None
        self._loop_a0 = None
        self._loop_a1 = None
        self._loop_b0 = None
        self._loop_b1 = None
        self._manufacturing = None
        self._media_type = None
        self._mfg_capacity_gb = None
        self._position_last = None
        self._position_now = None
        self._protocol = None
        self._raw_size_mi_b = None
        self._read_errors = None
        self._request_uri = None
        self._resource_uri = None
        self._sed_status = None
        self._speed = None
        self._state = None
        self._system_id = None
        self._temp_max = None
        self._temp_min = None
        self._temp_now = None
        self._type = None
        self._write_errors = None
        self._wwn = None
        self.discriminator = None

        if admit_time is not None:
            self.admit_time = admit_time
        if associated_links is not None:
            self.associated_links = associated_links
        if capacity is not None:
            self.capacity = capacity
        if console_uri is not None:
            self.console_uri = console_uri
        if consumable_size_mi_b is not None:
            self.consumable_size_mi_b = consumable_size_mi_b
        if customer_id is not None:
            self.customer_id = customer_id
        if dev_type is not None:
            self.dev_type = dev_type
        if disk_id is not None:
            self.disk_id = disk_id
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if fw_status is not None:
            self.fw_status = fw_status
        if fw_version is not None:
            self.fw_version = fw_version
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if life_left_pct is not None:
            self.life_left_pct = life_left_pct
        if loop_a0 is not None:
            self.loop_a0 = loop_a0
        if loop_a1 is not None:
            self.loop_a1 = loop_a1
        if loop_b0 is not None:
            self.loop_b0 = loop_b0
        if loop_b1 is not None:
            self.loop_b1 = loop_b1
        if manufacturing is not None:
            self.manufacturing = manufacturing
        if media_type is not None:
            self.media_type = media_type
        if mfg_capacity_gb is not None:
            self.mfg_capacity_gb = mfg_capacity_gb
        if position_last is not None:
            self.position_last = position_last
        if position_now is not None:
            self.position_now = position_now
        if protocol is not None:
            self.protocol = protocol
        if raw_size_mi_b is not None:
            self.raw_size_mi_b = raw_size_mi_b
        if read_errors is not None:
            self.read_errors = read_errors
        if request_uri is not None:
            self.request_uri = request_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if sed_status is not None:
            self.sed_status = sed_status
        if speed is not None:
            self.speed = speed
        if state is not None:
            self.state = state
        if system_id is not None:
            self.system_id = system_id
        if temp_max is not None:
            self.temp_max = temp_max
        if temp_min is not None:
            self.temp_min = temp_min
        if temp_now is not None:
            self.temp_now = temp_now
        if type is not None:
            self.type = type
        if write_errors is not None:
            self.write_errors = write_errors
        if wwn is not None:
            self.wwn = wwn

    @property
    def admit_time(self):
        """Gets the admit_time of this DiskDetails.  # noqa: E501


        :return: The admit_time of this DiskDetails.  # noqa: E501
        :rtype: AdmitTime
        """
        return self._admit_time

    @admit_time.setter
    def admit_time(self, admit_time):
        """Sets the admit_time of this DiskDetails.


        :param admit_time: The admit_time of this DiskDetails.  # noqa: E501
        :type: AdmitTime
        """

        self._admit_time = admit_time

    @property
    def associated_links(self):
        """Gets the associated_links of this DiskDetails.  # noqa: E501


        :return: The associated_links of this DiskDetails.  # noqa: E501
        :rtype: DiskAssociatedLinks
        """
        return self._associated_links

    @associated_links.setter
    def associated_links(self, associated_links):
        """Sets the associated_links of this DiskDetails.


        :param associated_links: The associated_links of this DiskDetails.  # noqa: E501
        :type: DiskAssociatedLinks
        """

        self._associated_links = associated_links

    @property
    def capacity(self):
        """Gets the capacity of this DiskDetails.  # noqa: E501


        :return: The capacity of this DiskDetails.  # noqa: E501
        :rtype: DiskCapacity
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this DiskDetails.


        :param capacity: The capacity of this DiskDetails.  # noqa: E501
        :type: DiskCapacity
        """

        self._capacity = capacity

    @property
    def console_uri(self):
        """Gets the console_uri of this DiskDetails.  # noqa: E501

        consoleUri for detailed storage object  # noqa: E501

        :return: The console_uri of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._console_uri

    @console_uri.setter
    def console_uri(self, console_uri):
        """Sets the console_uri of this DiskDetails.

        consoleUri for detailed storage object  # noqa: E501

        :param console_uri: The console_uri of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._console_uri = console_uri

    @property
    def consumable_size_mi_b(self):
        """Gets the consumable_size_mi_b of this DiskDetails.  # noqa: E501

        consumable size of disk in MiB  # noqa: E501

        :return: The consumable_size_mi_b of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._consumable_size_mi_b

    @consumable_size_mi_b.setter
    def consumable_size_mi_b(self, consumable_size_mi_b):
        """Sets the consumable_size_mi_b of this DiskDetails.

        consumable size of disk in MiB  # noqa: E501

        :param consumable_size_mi_b: The consumable_size_mi_b of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._consumable_size_mi_b = consumable_size_mi_b

    @property
    def customer_id(self):
        """Gets the customer_id of this DiskDetails.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this DiskDetails.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def dev_type(self):
        """Gets the dev_type of this DiskDetails.  # noqa: E501

        Type of the disk  # noqa: E501

        :return: The dev_type of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._dev_type

    @dev_type.setter
    def dev_type(self, dev_type):
        """Sets the dev_type of this DiskDetails.

        Type of the disk  # noqa: E501

        :param dev_type: The dev_type of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._dev_type = dev_type

    @property
    def disk_id(self):
        """Gets the disk_id of this DiskDetails.  # noqa: E501

        id of the disk  # noqa: E501

        :return: The disk_id of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """Sets the disk_id of this DiskDetails.

        id of the disk  # noqa: E501

        :param disk_id: The disk_id of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._disk_id = disk_id

    @property
    def displayname(self):
        """Gets the displayname of this DiskDetails.  # noqa: E501

        Name to be used for display purposes  # noqa: E501

        :return: The displayname of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this DiskDetails.

        Name to be used for display purposes  # noqa: E501

        :param displayname: The displayname of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this DiskDetails.  # noqa: E501

        Domain that the resource belongs to  # noqa: E501

        :return: The domain of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DiskDetails.

        Domain that the resource belongs to  # noqa: E501

        :param domain: The domain of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def fw_status(self):
        """Gets the fw_status of this DiskDetails.  # noqa: E501

        firmware status  # noqa: E501

        :return: The fw_status of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._fw_status

    @fw_status.setter
    def fw_status(self, fw_status):
        """Sets the fw_status of this DiskDetails.

        firmware status  # noqa: E501

        :param fw_status: The fw_status of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._fw_status = fw_status

    @property
    def fw_version(self):
        """Gets the fw_version of this DiskDetails.  # noqa: E501

        firmware version  # noqa: E501

        :return: The fw_version of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._fw_version

    @fw_version.setter
    def fw_version(self, fw_version):
        """Sets the fw_version of this DiskDetails.

        firmware version  # noqa: E501

        :param fw_version: The fw_version of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._fw_version = fw_version

    @property
    def generation(self):
        """Gets the generation of this DiskDetails.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this DiskDetails.

        generation  # noqa: E501

        :param generation: The generation of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this DiskDetails.  # noqa: E501

        Unique Identifier of the resource  # noqa: E501

        :return: The id of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiskDetails.

        Unique Identifier of the resource  # noqa: E501

        :param id: The id of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def life_left_pct(self):
        """Gets the life_left_pct of this DiskDetails.  # noqa: E501

        Life Left Percentage  # noqa: E501

        :return: The life_left_pct of this DiskDetails.  # noqa: E501
        :rtype: float
        """
        return self._life_left_pct

    @life_left_pct.setter
    def life_left_pct(self, life_left_pct):
        """Sets the life_left_pct of this DiskDetails.

        Life Left Percentage  # noqa: E501

        :param life_left_pct: The life_left_pct of this DiskDetails.  # noqa: E501
        :type: float
        """

        self._life_left_pct = life_left_pct

    @property
    def loop_a0(self):
        """Gets the loop_a0 of this DiskDetails.  # noqa: E501


        :return: The loop_a0 of this DiskDetails.  # noqa: E501
        :rtype: DiskLoop
        """
        return self._loop_a0

    @loop_a0.setter
    def loop_a0(self, loop_a0):
        """Sets the loop_a0 of this DiskDetails.


        :param loop_a0: The loop_a0 of this DiskDetails.  # noqa: E501
        :type: DiskLoop
        """

        self._loop_a0 = loop_a0

    @property
    def loop_a1(self):
        """Gets the loop_a1 of this DiskDetails.  # noqa: E501


        :return: The loop_a1 of this DiskDetails.  # noqa: E501
        :rtype: DiskLoop
        """
        return self._loop_a1

    @loop_a1.setter
    def loop_a1(self, loop_a1):
        """Sets the loop_a1 of this DiskDetails.


        :param loop_a1: The loop_a1 of this DiskDetails.  # noqa: E501
        :type: DiskLoop
        """

        self._loop_a1 = loop_a1

    @property
    def loop_b0(self):
        """Gets the loop_b0 of this DiskDetails.  # noqa: E501


        :return: The loop_b0 of this DiskDetails.  # noqa: E501
        :rtype: DiskLoop
        """
        return self._loop_b0

    @loop_b0.setter
    def loop_b0(self, loop_b0):
        """Sets the loop_b0 of this DiskDetails.


        :param loop_b0: The loop_b0 of this DiskDetails.  # noqa: E501
        :type: DiskLoop
        """

        self._loop_b0 = loop_b0

    @property
    def loop_b1(self):
        """Gets the loop_b1 of this DiskDetails.  # noqa: E501


        :return: The loop_b1 of this DiskDetails.  # noqa: E501
        :rtype: DiskLoop
        """
        return self._loop_b1

    @loop_b1.setter
    def loop_b1(self, loop_b1):
        """Sets the loop_b1 of this DiskDetails.


        :param loop_b1: The loop_b1 of this DiskDetails.  # noqa: E501
        :type: DiskLoop
        """

        self._loop_b1 = loop_b1

    @property
    def manufacturing(self):
        """Gets the manufacturing of this DiskDetails.  # noqa: E501


        :return: The manufacturing of this DiskDetails.  # noqa: E501
        :rtype: ManufacturingSingle
        """
        return self._manufacturing

    @manufacturing.setter
    def manufacturing(self, manufacturing):
        """Sets the manufacturing of this DiskDetails.


        :param manufacturing: The manufacturing of this DiskDetails.  # noqa: E501
        :type: ManufacturingSingle
        """

        self._manufacturing = manufacturing

    @property
    def media_type(self):
        """Gets the media_type of this DiskDetails.  # noqa: E501

        Media Type of the disk  # noqa: E501

        :return: The media_type of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this DiskDetails.

        Media Type of the disk  # noqa: E501

        :param media_type: The media_type of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def mfg_capacity_gb(self):
        """Gets the mfg_capacity_gb of this DiskDetails.  # noqa: E501

        manufacturing capacity of disk in GB  # noqa: E501

        :return: The mfg_capacity_gb of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._mfg_capacity_gb

    @mfg_capacity_gb.setter
    def mfg_capacity_gb(self, mfg_capacity_gb):
        """Sets the mfg_capacity_gb of this DiskDetails.

        manufacturing capacity of disk in GB  # noqa: E501

        :param mfg_capacity_gb: The mfg_capacity_gb of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._mfg_capacity_gb = mfg_capacity_gb

    @property
    def position_last(self):
        """Gets the position_last of this DiskDetails.  # noqa: E501


        :return: The position_last of this DiskDetails.  # noqa: E501
        :rtype: DiskPosition
        """
        return self._position_last

    @position_last.setter
    def position_last(self, position_last):
        """Sets the position_last of this DiskDetails.


        :param position_last: The position_last of this DiskDetails.  # noqa: E501
        :type: DiskPosition
        """

        self._position_last = position_last

    @property
    def position_now(self):
        """Gets the position_now of this DiskDetails.  # noqa: E501


        :return: The position_now of this DiskDetails.  # noqa: E501
        :rtype: DiskPositionNow
        """
        return self._position_now

    @position_now.setter
    def position_now(self, position_now):
        """Sets the position_now of this DiskDetails.


        :param position_now: The position_now of this DiskDetails.  # noqa: E501
        :type: DiskPositionNow
        """

        self._position_now = position_now

    @property
    def protocol(self):
        """Gets the protocol of this DiskDetails.  # noqa: E501

        protocol over the disk  # noqa: E501

        :return: The protocol of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DiskDetails.

        protocol over the disk  # noqa: E501

        :param protocol: The protocol of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def raw_size_mi_b(self):
        """Gets the raw_size_mi_b of this DiskDetails.  # noqa: E501

        raw Size of disk in GB  # noqa: E501

        :return: The raw_size_mi_b of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._raw_size_mi_b

    @raw_size_mi_b.setter
    def raw_size_mi_b(self, raw_size_mi_b):
        """Sets the raw_size_mi_b of this DiskDetails.

        raw Size of disk in GB  # noqa: E501

        :param raw_size_mi_b: The raw_size_mi_b of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._raw_size_mi_b = raw_size_mi_b

    @property
    def read_errors(self):
        """Gets the read_errors of this DiskDetails.  # noqa: E501


        :return: The read_errors of this DiskDetails.  # noqa: E501
        :rtype: ErrorCount
        """
        return self._read_errors

    @read_errors.setter
    def read_errors(self, read_errors):
        """Sets the read_errors of this DiskDetails.


        :param read_errors: The read_errors of this DiskDetails.  # noqa: E501
        :type: ErrorCount
        """

        self._read_errors = read_errors

    @property
    def request_uri(self):
        """Gets the request_uri of this DiskDetails.  # noqa: E501

        requestUri for detailed disk object  # noqa: E501

        :return: The request_uri of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this DiskDetails.

        requestUri for detailed disk object  # noqa: E501

        :param request_uri: The request_uri of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this DiskDetails.  # noqa: E501

        resourceUri for detailed disk object  # noqa: E501

        :return: The resource_uri of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this DiskDetails.

        resourceUri for detailed disk object  # noqa: E501

        :param resource_uri: The resource_uri of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def sed_status(self):
        """Gets the sed_status of this DiskDetails.  # noqa: E501

        SED Status  # noqa: E501

        :return: The sed_status of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._sed_status

    @sed_status.setter
    def sed_status(self, sed_status):
        """Sets the sed_status of this DiskDetails.

        SED Status  # noqa: E501

        :param sed_status: The sed_status of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._sed_status = sed_status

    @property
    def speed(self):
        """Gets the speed of this DiskDetails.  # noqa: E501

        speed  # noqa: E501

        :return: The speed of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this DiskDetails.

        speed  # noqa: E501

        :param speed: The speed of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._speed = speed

    @property
    def state(self):
        """Gets the state of this DiskDetails.  # noqa: E501


        :return: The state of this DiskDetails.  # noqa: E501
        :rtype: STATE
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DiskDetails.


        :param state: The state of this DiskDetails.  # noqa: E501
        :type: STATE
        """

        self._state = state

    @property
    def system_id(self):
        """Gets the system_id of this DiskDetails.  # noqa: E501

        SystemId / SerialNumber of the array  # noqa: E501

        :return: The system_id of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this DiskDetails.

        SystemId / SerialNumber of the array  # noqa: E501

        :param system_id: The system_id of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def temp_max(self):
        """Gets the temp_max of this DiskDetails.  # noqa: E501

        Max Temp of the disk  # noqa: E501

        :return: The temp_max of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._temp_max

    @temp_max.setter
    def temp_max(self, temp_max):
        """Sets the temp_max of this DiskDetails.

        Max Temp of the disk  # noqa: E501

        :param temp_max: The temp_max of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._temp_max = temp_max

    @property
    def temp_min(self):
        """Gets the temp_min of this DiskDetails.  # noqa: E501

        Min Temp of the disk  # noqa: E501

        :return: The temp_min of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._temp_min

    @temp_min.setter
    def temp_min(self, temp_min):
        """Sets the temp_min of this DiskDetails.

        Min Temp of the disk  # noqa: E501

        :param temp_min: The temp_min of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._temp_min = temp_min

    @property
    def temp_now(self):
        """Gets the temp_now of this DiskDetails.  # noqa: E501

        Current Temp of the disk, will be updated at most once in an hour  # noqa: E501

        :return: The temp_now of this DiskDetails.  # noqa: E501
        :rtype: int
        """
        return self._temp_now

    @temp_now.setter
    def temp_now(self, temp_now):
        """Sets the temp_now of this DiskDetails.

        Current Temp of the disk, will be updated at most once in an hour  # noqa: E501

        :param temp_now: The temp_now of this DiskDetails.  # noqa: E501
        :type: int
        """

        self._temp_now = temp_now

    @property
    def type(self):
        """Gets the type of this DiskDetails.  # noqa: E501

        type  # noqa: E501

        :return: The type of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DiskDetails.

        type  # noqa: E501

        :param type: The type of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def write_errors(self):
        """Gets the write_errors of this DiskDetails.  # noqa: E501


        :return: The write_errors of this DiskDetails.  # noqa: E501
        :rtype: ErrorCount
        """
        return self._write_errors

    @write_errors.setter
    def write_errors(self, write_errors):
        """Sets the write_errors of this DiskDetails.


        :param write_errors: The write_errors of this DiskDetails.  # noqa: E501
        :type: ErrorCount
        """

        self._write_errors = write_errors

    @property
    def wwn(self):
        """Gets the wwn of this DiskDetails.  # noqa: E501

        unique WWN of the disk  # noqa: E501

        :return: The wwn of this DiskDetails.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this DiskDetails.

        unique WWN of the disk  # noqa: E501

        :param wwn: The wwn of this DiskDetails.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
