# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NwSnmpMgrEdit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'manager_ip': 'str',
        'notify': 'str',
        'port': 'int',
        'retry': 'int',
        'timeout_secs': 'int',
        'user': 'str',
        'version': 'int'
    }

    attribute_map = {
        'manager_ip': 'managerIP',
        'notify': 'notify',
        'port': 'port',
        'retry': 'retry',
        'timeout_secs': 'timeoutSecs',
        'user': 'user',
        'version': 'version'
    }

    def __init__(self, manager_ip=None, notify=None, port=None, retry=None, timeout_secs=None, user=None, version=None):  # noqa: E501
        """NwSnmpMgrEdit - a model defined in OpenAPI"""  # noqa: E501

        self._manager_ip = None
        self._notify = None
        self._port = None
        self._retry = None
        self._timeout_secs = None
        self._user = None
        self._version = None
        self.discriminator = None

        if manager_ip is not None:
            self.manager_ip = manager_ip
        if notify is not None:
            self.notify = notify
        if port is not None:
            self.port = port
        if retry is not None:
            self.retry = retry
        if timeout_secs is not None:
            self.timeout_secs = timeout_secs
        if user is not None:
            self.user = user
        if version is not None:
            self.version = version

    @property
    def manager_ip(self):
        """Gets the manager_ip of this NwSnmpMgrEdit.  # noqa: E501

        Specify the IP address of the host from which the manager runs  # noqa: E501

        :return: The manager_ip of this NwSnmpMgrEdit.  # noqa: E501
        :rtype: str
        """
        return self._manager_ip

    @manager_ip.setter
    def manager_ip(self, manager_ip):
        """Sets the manager_ip of this NwSnmpMgrEdit.

        Specify the IP address of the host from which the manager runs  # noqa: E501

        :param manager_ip: The manager_ip of this NwSnmpMgrEdit.  # noqa: E501
        :type: str
        """

        self._manager_ip = manager_ip

    @property
    def notify(self):
        """Gets the notify of this NwSnmpMgrEdit.  # noqa: E501

        Indicates the trap notification types defined by the HPE deviceType1 MIB  # noqa: E501

        :return: The notify of this NwSnmpMgrEdit.  # noqa: E501
        :rtype: str
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this NwSnmpMgrEdit.

        Indicates the trap notification types defined by the HPE deviceType1 MIB  # noqa: E501

        :param notify: The notify of this NwSnmpMgrEdit.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "NODUP", "STANDARD"]  # noqa: E501
        if notify not in allowed_values:
            raise ValueError(
                "Invalid value for `notify` ({0}), must be one of {1}"  # noqa: E501
                .format(notify, allowed_values)
            )

        self._notify = notify

    @property
    def port(self):
        """Gets the port of this NwSnmpMgrEdit.  # noqa: E501

        Specify the port number where the SNMP manager receives traps  # noqa: E501

        :return: The port of this NwSnmpMgrEdit.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NwSnmpMgrEdit.

        Specify the port number where the SNMP manager receives traps  # noqa: E501

        :param port: The port of this NwSnmpMgrEdit.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def retry(self):
        """Gets the retry of this NwSnmpMgrEdit.  # noqa: E501

        Specify the number of times to send a trap (retry) if the SNMP manager is not available.  # noqa: E501

        :return: The retry of this NwSnmpMgrEdit.  # noqa: E501
        :rtype: int
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this NwSnmpMgrEdit.

        Specify the number of times to send a trap (retry) if the SNMP manager is not available.  # noqa: E501

        :param retry: The retry of this NwSnmpMgrEdit.  # noqa: E501
        :type: int
        """

        self._retry = retry

    @property
    def timeout_secs(self):
        """Gets the timeout_secs of this NwSnmpMgrEdit.  # noqa: E501

        Specify the number of seconds to wait before sending a trap (timeout).  # noqa: E501

        :return: The timeout_secs of this NwSnmpMgrEdit.  # noqa: E501
        :rtype: int
        """
        return self._timeout_secs

    @timeout_secs.setter
    def timeout_secs(self, timeout_secs):
        """Sets the timeout_secs of this NwSnmpMgrEdit.

        Specify the number of seconds to wait before sending a trap (timeout).  # noqa: E501

        :param timeout_secs: The timeout_secs of this NwSnmpMgrEdit.  # noqa: E501
        :type: int
        """

        self._timeout_secs = timeout_secs

    @property
    def user(self):
        """Gets the user of this NwSnmpMgrEdit.  # noqa: E501

        Specify the SNMPv3 user name  # noqa: E501

        :return: The user of this NwSnmpMgrEdit.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this NwSnmpMgrEdit.

        Specify the SNMPv3 user name  # noqa: E501

        :param user: The user of this NwSnmpMgrEdit.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def version(self):
        """Gets the version of this NwSnmpMgrEdit.  # noqa: E501

        Specify the SNMP version supported  # noqa: E501

        :return: The version of this NwSnmpMgrEdit.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NwSnmpMgrEdit.

        Specify the SNMP version supported  # noqa: E501

        :param version: The version of this NwSnmpMgrEdit.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NwSnmpMgrEdit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
