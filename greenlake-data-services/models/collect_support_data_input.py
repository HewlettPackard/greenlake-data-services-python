# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CollectSupportDataInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'options': 'list[str]'
    }

    attribute_map = {
        'action': 'action',
        'options': 'options'
    }

    def __init__(self, action=None, options=None):  # noqa: E501
        """CollectSupportDataInput - a model defined in OpenAPI"""  # noqa: E501

        self._action = None
        self._options = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if options is not None:
            self.options = options

    @property
    def action(self):
        """Gets the action of this CollectSupportDataInput.  # noqa: E501

        Type of a collection.  # noqa: E501

        :return: The action of this CollectSupportDataInput.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CollectSupportDataInput.

        Type of a collection.  # noqa: E501

        :param action: The action of this CollectSupportDataInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["PERFCOLLECTION", "INSPLORECOLLECTION", "APPDUMPCOLLECTION", "CRASHDUMPCOLLECTION", "SPLORCOLLECTION", "WEEKLYCOLLECTION"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def options(self):
        """Gets the options of this CollectSupportDataInput.  # noqa: E501

        Options needed for the collection. If options are not specified, default values will be used.   INSPLORECOLLECTION can have any or all of \"clidata\", \"nodedata\" and \"tocdata\"     Default options - [\"clidata\",\"nodedata\",\"tocdata\"]   PERFCOLLECTION should have 3 options,   * Iteration - a number between 1 to 1000 as a string,   * Interval - a number in seconds between 1 to 172800 as a string   * Type of collection -default or -comprehensive   Default options - [\"60\",\"10\",\"-default\"]  Other collection types won't require any options, if provided will be ignored.  # noqa: E501

        :return: The options of this CollectSupportDataInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CollectSupportDataInput.

        Options needed for the collection. If options are not specified, default values will be used.   INSPLORECOLLECTION can have any or all of \"clidata\", \"nodedata\" and \"tocdata\"     Default options - [\"clidata\",\"nodedata\",\"tocdata\"]   PERFCOLLECTION should have 3 options,   * Iteration - a number between 1 to 1000 as a string,   * Interval - a number in seconds between 1 to 172800 as a string   * Type of collection -default or -comprehensive   Default options - [\"60\",\"10\",\"-default\"]  Other collection types won't require any options, if provided will be ignored.  # noqa: E501

        :param options: The options of this CollectSupportDataInput.  # noqa: E501
        :type: list[str]
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectSupportDataInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
