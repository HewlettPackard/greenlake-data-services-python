# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditIsnsSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'isns_enabled': 'bool',
        'isns_port': 'int',
        'isns_server': 'str'
    }

    attribute_map = {
        'isns_enabled': 'isns_enabled',
        'isns_port': 'isns_port',
        'isns_server': 'isns_server'
    }

    def __init__(self, isns_enabled=None, isns_port=None, isns_server=None):  # noqa: E501
        """EditIsnsSettings - a model defined in OpenAPI"""  # noqa: E501

        self._isns_enabled = None
        self._isns_port = None
        self._isns_server = None
        self.discriminator = None

        if isns_enabled is not None:
            self.isns_enabled = isns_enabled
        if isns_port is not None:
            self.isns_port = isns_port
        if isns_server is not None:
            self.isns_server = isns_server

    @property
    def isns_enabled(self):
        """Gets the isns_enabled of this EditIsnsSettings.  # noqa: E501

        Enable or disable iSNS.  # noqa: E501

        :return: The isns_enabled of this EditIsnsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._isns_enabled

    @isns_enabled.setter
    def isns_enabled(self, isns_enabled):
        """Sets the isns_enabled of this EditIsnsSettings.

        Enable or disable iSNS.  # noqa: E501

        :param isns_enabled: The isns_enabled of this EditIsnsSettings.  # noqa: E501
        :type: bool
        """

        self._isns_enabled = isns_enabled

    @property
    def isns_port(self):
        """Gets the isns_port of this EditIsnsSettings.  # noqa: E501

        Port number for iSNS Server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The isns_port of this EditIsnsSettings.  # noqa: E501
        :rtype: int
        """
        return self._isns_port

    @isns_port.setter
    def isns_port(self, isns_port):
        """Sets the isns_port of this EditIsnsSettings.

        Port number for iSNS Server. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param isns_port: The isns_port of this EditIsnsSettings.  # noqa: E501
        :type: int
        """

        self._isns_port = isns_port

    @property
    def isns_server(self):
        """Gets the isns_server of this EditIsnsSettings.  # noqa: E501

        Hostname or IP Address of iSNS Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :return: The isns_server of this EditIsnsSettings.  # noqa: E501
        :rtype: str
        """
        return self._isns_server

    @isns_server.setter
    def isns_server(self, isns_server):
        """Sets the isns_server of this EditIsnsSettings.

        Hostname or IP Address of iSNS Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.  # noqa: E501

        :param isns_server: The isns_server of this EditIsnsSettings.  # noqa: E501
        :type: str
        """

        self._isns_server = isns_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditIsnsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
