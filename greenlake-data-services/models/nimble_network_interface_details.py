# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleNetworkInterfaceDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'array_name_or_serial': 'str',
        'controller_id': 'str',
        'ip_list': 'IpListInfo',
        'is_present': 'bool',
        'link_speed': 'str',
        'link_status': 'str',
        'mac': 'str',
        'max_link_speed': 'str',
        'mtu': 'int',
        'nic_type': 'str',
        'partial_response_ok': 'bool',
        'port': 'int',
        'slot': 'int'
    }

    attribute_map = {
        'array_name_or_serial': 'array_name_or_serial',
        'controller_id': 'controller_id',
        'ip_list': 'ip_list',
        'is_present': 'is_present',
        'link_speed': 'link_speed',
        'link_status': 'link_status',
        'mac': 'mac',
        'max_link_speed': 'max_link_speed',
        'mtu': 'mtu',
        'nic_type': 'nic_type',
        'partial_response_ok': 'partial_response_ok',
        'port': 'port',
        'slot': 'slot'
    }

    def __init__(self, array_name_or_serial=None, controller_id=None, ip_list=None, is_present=None, link_speed=None, link_status=None, mac=None, max_link_speed=None, mtu=None, nic_type=None, partial_response_ok=None, port=None, slot=None):  # noqa: E501
        """NimbleNetworkInterfaceDetails - a model defined in OpenAPI"""  # noqa: E501

        self._array_name_or_serial = None
        self._controller_id = None
        self._ip_list = None
        self._is_present = None
        self._link_speed = None
        self._link_status = None
        self._mac = None
        self._max_link_speed = None
        self._mtu = None
        self._nic_type = None
        self._partial_response_ok = None
        self._port = None
        self._slot = None
        self.discriminator = None

        if array_name_or_serial is not None:
            self.array_name_or_serial = array_name_or_serial
        if controller_id is not None:
            self.controller_id = controller_id
        if ip_list is not None:
            self.ip_list = ip_list
        if is_present is not None:
            self.is_present = is_present
        if link_speed is not None:
            self.link_speed = link_speed
        if link_status is not None:
            self.link_status = link_status
        if mac is not None:
            self.mac = mac
        if max_link_speed is not None:
            self.max_link_speed = max_link_speed
        if mtu is not None:
            self.mtu = mtu
        if nic_type is not None:
            self.nic_type = nic_type
        if partial_response_ok is not None:
            self.partial_response_ok = partial_response_ok
        if port is not None:
            self.port = port
        if slot is not None:
            self.slot = slot

    @property
    def array_name_or_serial(self):
        """Gets the array_name_or_serial of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Name or serial of the array where the interface is hosted. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The array_name_or_serial of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._array_name_or_serial

    @array_name_or_serial.setter
    def array_name_or_serial(self, array_name_or_serial):
        """Sets the array_name_or_serial of this NimbleNetworkInterfaceDetails.

        Name or serial of the array where the interface is hosted. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param array_name_or_serial: The array_name_or_serial of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._array_name_or_serial = array_name_or_serial

    @property
    def controller_id(self):
        """Gets the controller_id of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Identifier of the controller where the interface is hosted. A 42 digit hexadecimal number.  # noqa: E501

        :return: The controller_id of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._controller_id

    @controller_id.setter
    def controller_id(self, controller_id):
        """Sets the controller_id of this NimbleNetworkInterfaceDetails.

        Identifier of the controller where the interface is hosted. A 42 digit hexadecimal number.  # noqa: E501

        :param controller_id: The controller_id of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._controller_id = controller_id

    @property
    def ip_list(self):
        """Gets the ip_list of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Information about the Fibre Channel link at which interface is operating.  # noqa: E501

        :return: The ip_list of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: IpListInfo
        """
        return self._ip_list

    @ip_list.setter
    def ip_list(self, ip_list):
        """Sets the ip_list of this NimbleNetworkInterfaceDetails.

        Information about the Fibre Channel link at which interface is operating.  # noqa: E501

        :param ip_list: The ip_list of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: IpListInfo
        """

        self._ip_list = ip_list

    @property
    def is_present(self):
        """Gets the is_present of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Whether this interface is present on this controller. Possible values: true, false.  # noqa: E501

        :return: The is_present of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_present

    @is_present.setter
    def is_present(self, is_present):
        """Sets the is_present of this NimbleNetworkInterfaceDetails.

        Whether this interface is present on this controller. Possible values: true, false.  # noqa: E501

        :param is_present: The is_present of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: bool
        """

        self._is_present = is_present

    @property
    def link_speed(self):
        """Gets the link_speed of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Speed of the link. Possible values: link_speed_unknown, link_speed_10M, link_speed_100M, link_speed_1000M, link_speed_10000M.  # noqa: E501

        :return: The link_speed of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this NimbleNetworkInterfaceDetails.

        Speed of the link. Possible values: link_speed_unknown, link_speed_10M, link_speed_100M, link_speed_1000M, link_speed_10000M.  # noqa: E501

        :param link_speed: The link_speed of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._link_speed = link_speed

    @property
    def link_status(self):
        """Gets the link_status of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Status of the link. Possible values: link_status_unknown, link_status_down, link_status_up.  # noqa: E501

        :return: The link_status of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """Sets the link_status of this NimbleNetworkInterfaceDetails.

        Status of the link. Possible values: link_status_unknown, link_status_down, link_status_up.  # noqa: E501

        :param link_status: The link_status of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._link_status = link_status

    @property
    def mac(self):
        """Gets the mac of this NimbleNetworkInterfaceDetails.  # noqa: E501

        MAC address of the interface. Mac address of an interface.  # noqa: E501

        :return: The mac of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this NimbleNetworkInterfaceDetails.

        MAC address of the interface. Mac address of an interface.  # noqa: E501

        :param mac: The mac of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def max_link_speed(self):
        """Gets the max_link_speed of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Maximum speed of the link. Possible values: link_speed_unknown, link_speed_10M, link_speed_100M, link_speed_1000M, link_speed_10000M.  # noqa: E501

        :return: The max_link_speed of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._max_link_speed

    @max_link_speed.setter
    def max_link_speed(self, max_link_speed):
        """Sets the max_link_speed of this NimbleNetworkInterfaceDetails.

        Maximum speed of the link. Possible values: link_speed_unknown, link_speed_10M, link_speed_100M, link_speed_1000M, link_speed_10000M.  # noqa: E501

        :param max_link_speed: The max_link_speed of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._max_link_speed = max_link_speed

    @property
    def mtu(self):
        """Gets the mtu of this NimbleNetworkInterfaceDetails.  # noqa: E501

        MTU on the link.  # noqa: E501

        :return: The mtu of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NimbleNetworkInterfaceDetails.

        MTU on the link.  # noqa: E501

        :param mtu: The mtu of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def nic_type(self):
        """Gets the nic_type of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Interface type. Possible values: nic_type_unknown, nic_type_tp, nic_type_sfp.  # noqa: E501

        :return: The nic_type of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._nic_type

    @nic_type.setter
    def nic_type(self, nic_type):
        """Sets the nic_type of this NimbleNetworkInterfaceDetails.

        Interface type. Possible values: nic_type_unknown, nic_type_tp, nic_type_sfp.  # noqa: E501

        :param nic_type: The nic_type of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: str
        """

        self._nic_type = nic_type

    @property
    def partial_response_ok(self):
        """Gets the partial_response_ok of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Port response.  # noqa: E501

        :return: The partial_response_ok of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._partial_response_ok

    @partial_response_ok.setter
    def partial_response_ok(self, partial_response_ok):
        """Sets the partial_response_ok of this NimbleNetworkInterfaceDetails.

        Port response.  # noqa: E501

        :param partial_response_ok: The partial_response_ok of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: bool
        """

        self._partial_response_ok = partial_response_ok

    @property
    def port(self):
        """Gets the port of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Port number for this interface.  # noqa: E501

        :return: The port of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NimbleNetworkInterfaceDetails.

        Port number for this interface.  # noqa: E501

        :param port: The port of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def slot(self):
        """Gets the slot of this NimbleNetworkInterfaceDetails.  # noqa: E501

        Slot number for this interface.  # noqa: E501

        :return: The slot of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this NimbleNetworkInterfaceDetails.

        Slot number for this interface.  # noqa: E501

        :param slot: The slot of this NimbleNetworkInterfaceDetails.  # noqa: E501
        :type: int
        """

        self._slot = slot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleNetworkInterfaceDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
