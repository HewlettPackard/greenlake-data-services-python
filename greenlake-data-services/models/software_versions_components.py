# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SoftwareVersionsComponents(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_version': 'str',
        'full_version': 'str',
        'name': 'str',
        'release': 'str'
    }

    attribute_map = {
        'base_version': 'baseVersion',
        'full_version': 'fullVersion',
        'name': 'name',
        'release': 'release'
    }

    def __init__(self, base_version=None, full_version=None, name=None, release=None):  # noqa: E501
        """SoftwareVersionsComponents - a model defined in OpenAPI"""  # noqa: E501

        self._base_version = None
        self._full_version = None
        self._name = None
        self._release = None
        self.discriminator = None

        if base_version is not None:
            self.base_version = base_version
        if full_version is not None:
            self.full_version = full_version
        if name is not None:
            self.name = name
        if release is not None:
            self.release = release

    @property
    def base_version(self):
        """Gets the base_version of this SoftwareVersionsComponents.  # noqa: E501

        Base Version  # noqa: E501

        :return: The base_version of this SoftwareVersionsComponents.  # noqa: E501
        :rtype: str
        """
        return self._base_version

    @base_version.setter
    def base_version(self, base_version):
        """Sets the base_version of this SoftwareVersionsComponents.

        Base Version  # noqa: E501

        :param base_version: The base_version of this SoftwareVersionsComponents.  # noqa: E501
        :type: str
        """

        self._base_version = base_version

    @property
    def full_version(self):
        """Gets the full_version of this SoftwareVersionsComponents.  # noqa: E501

        Full Version  # noqa: E501

        :return: The full_version of this SoftwareVersionsComponents.  # noqa: E501
        :rtype: str
        """
        return self._full_version

    @full_version.setter
    def full_version(self, full_version):
        """Sets the full_version of this SoftwareVersionsComponents.

        Full Version  # noqa: E501

        :param full_version: The full_version of this SoftwareVersionsComponents.  # noqa: E501
        :type: str
        """

        self._full_version = full_version

    @property
    def name(self):
        """Gets the name of this SoftwareVersionsComponents.  # noqa: E501

        Name of the Component  # noqa: E501

        :return: The name of this SoftwareVersionsComponents.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SoftwareVersionsComponents.

        Name of the Component  # noqa: E501

        :param name: The name of this SoftwareVersionsComponents.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def release(self):
        """Gets the release of this SoftwareVersionsComponents.  # noqa: E501

        Release Version  # noqa: E501

        :return: The release of this SoftwareVersionsComponents.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this SoftwareVersionsComponents.

        Release Version  # noqa: E501

        :param release: The release of this SoftwareVersionsComponents.  # noqa: E501
        :type: str
        """

        self._release = release

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwareVersionsComponents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
