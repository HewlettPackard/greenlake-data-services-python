# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PrimeraPoolList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alert': 'CpgAlert',
        'allocation_settings': 'Allocation',
        'ao_config_id': 'float',
        'base_size_mi_b': 'int',
        'base_size_private_mi_b': 'float',
        'base_size_raw_mi_b': 'float',
        'compact_ratio': 'float',
        'compress_ratio': 'float',
        'customer_id': 'str',
        'data_reduce_ratio': 'float',
        'dedup_capable': 'bool',
        'dedup_ratio': 'float',
        'dedup_version': 'PrimeraPoolDetailsDedupVersion',
        'displayname': 'str',
        'domain': 'str',
        'free_for_allocation_mi_b': 'float',
        'free_size_mi_b': 'float',
        'free_size_raw_mi_b': 'float',
        'generation': 'int',
        'id': 'str',
        'name': 'str',
        'number_of_snap_rc': 'float',
        'number_of_tdvv': 'float',
        'number_of_tpvv': 'float',
        'number_of_user_rc': 'float',
        'over_prov_ratio': 'float',
        'resource_uri': 'str',
        'sa_grow': 'CpgGrow',
        'sd_grow': 'CpgGrow',
        'shared_size_mi_b': 'float',
        'snap_size_private_mi_b': 'float',
        'snap_size_raw_mi_b': 'float',
        'snap_space_admin': 'SnapSpace',
        'snap_space_data': 'SnapSpace',
        'state': 'State',
        'storage_pool_id': 'float',
        'system_id': 'str',
        'total_reserved_mi_b': 'float',
        'total_size_mi_b': 'int',
        'total_size_raw_mi_b': 'float',
        'type': 'str',
        'user_space': 'SnapSpace',
        'warn_percent': 'float'
    }

    attribute_map = {
        'alert': 'alert',
        'allocation_settings': 'allocationSettings',
        'ao_config_id': 'aoConfigID',
        'base_size_mi_b': 'baseSizeMiB',
        'base_size_private_mi_b': 'baseSizePrivateMiB',
        'base_size_raw_mi_b': 'baseSizeRawMiB',
        'compact_ratio': 'compactRatio',
        'compress_ratio': 'compressRatio',
        'customer_id': 'customerId',
        'data_reduce_ratio': 'dataReduceRatio',
        'dedup_capable': 'dedupCapable',
        'dedup_ratio': 'dedupRatio',
        'dedup_version': 'dedupVersion',
        'displayname': 'displayname',
        'domain': 'domain',
        'free_for_allocation_mi_b': 'freeForAllocationMiB',
        'free_size_mi_b': 'freeSizeMiB',
        'free_size_raw_mi_b': 'freeSizeRawMiB',
        'generation': 'generation',
        'id': 'id',
        'name': 'name',
        'number_of_snap_rc': 'numberOfSnapRC',
        'number_of_tdvv': 'numberOfTDVV',
        'number_of_tpvv': 'numberOfTPVV',
        'number_of_user_rc': 'numberOfUserRC',
        'over_prov_ratio': 'overProvRatio',
        'resource_uri': 'resourceUri',
        'sa_grow': 'saGrow',
        'sd_grow': 'sdGrow',
        'shared_size_mi_b': 'sharedSizeMiB',
        'snap_size_private_mi_b': 'snapSizePrivateMiB',
        'snap_size_raw_mi_b': 'snapSizeRawMiB',
        'snap_space_admin': 'snapSpaceAdmin',
        'snap_space_data': 'snapSpaceData',
        'state': 'state',
        'storage_pool_id': 'storagePoolId',
        'system_id': 'systemId',
        'total_reserved_mi_b': 'totalReservedMiB',
        'total_size_mi_b': 'totalSizeMiB',
        'total_size_raw_mi_b': 'totalSizeRawMiB',
        'type': 'type',
        'user_space': 'userSpace',
        'warn_percent': 'warnPercent'
    }

    def __init__(self, alert=None, allocation_settings=None, ao_config_id=None, base_size_mi_b=None, base_size_private_mi_b=None, base_size_raw_mi_b=None, compact_ratio=None, compress_ratio=None, customer_id=None, data_reduce_ratio=None, dedup_capable=None, dedup_ratio=None, dedup_version=None, displayname=None, domain=None, free_for_allocation_mi_b=None, free_size_mi_b=None, free_size_raw_mi_b=None, generation=None, id=None, name=None, number_of_snap_rc=None, number_of_tdvv=None, number_of_tpvv=None, number_of_user_rc=None, over_prov_ratio=None, resource_uri=None, sa_grow=None, sd_grow=None, shared_size_mi_b=None, snap_size_private_mi_b=None, snap_size_raw_mi_b=None, snap_space_admin=None, snap_space_data=None, state=None, storage_pool_id=None, system_id=None, total_reserved_mi_b=None, total_size_mi_b=None, total_size_raw_mi_b=None, type=None, user_space=None, warn_percent=None):  # noqa: E501
        """PrimeraPoolList - a model defined in OpenAPI"""  # noqa: E501

        self._alert = None
        self._allocation_settings = None
        self._ao_config_id = None
        self._base_size_mi_b = None
        self._base_size_private_mi_b = None
        self._base_size_raw_mi_b = None
        self._compact_ratio = None
        self._compress_ratio = None
        self._customer_id = None
        self._data_reduce_ratio = None
        self._dedup_capable = None
        self._dedup_ratio = None
        self._dedup_version = None
        self._displayname = None
        self._domain = None
        self._free_for_allocation_mi_b = None
        self._free_size_mi_b = None
        self._free_size_raw_mi_b = None
        self._generation = None
        self._id = None
        self._name = None
        self._number_of_snap_rc = None
        self._number_of_tdvv = None
        self._number_of_tpvv = None
        self._number_of_user_rc = None
        self._over_prov_ratio = None
        self._resource_uri = None
        self._sa_grow = None
        self._sd_grow = None
        self._shared_size_mi_b = None
        self._snap_size_private_mi_b = None
        self._snap_size_raw_mi_b = None
        self._snap_space_admin = None
        self._snap_space_data = None
        self._state = None
        self._storage_pool_id = None
        self._system_id = None
        self._total_reserved_mi_b = None
        self._total_size_mi_b = None
        self._total_size_raw_mi_b = None
        self._type = None
        self._user_space = None
        self._warn_percent = None
        self.discriminator = None

        if alert is not None:
            self.alert = alert
        if allocation_settings is not None:
            self.allocation_settings = allocation_settings
        if ao_config_id is not None:
            self.ao_config_id = ao_config_id
        if base_size_mi_b is not None:
            self.base_size_mi_b = base_size_mi_b
        if base_size_private_mi_b is not None:
            self.base_size_private_mi_b = base_size_private_mi_b
        if base_size_raw_mi_b is not None:
            self.base_size_raw_mi_b = base_size_raw_mi_b
        if compact_ratio is not None:
            self.compact_ratio = compact_ratio
        if compress_ratio is not None:
            self.compress_ratio = compress_ratio
        if customer_id is not None:
            self.customer_id = customer_id
        if data_reduce_ratio is not None:
            self.data_reduce_ratio = data_reduce_ratio
        if dedup_capable is not None:
            self.dedup_capable = dedup_capable
        if dedup_ratio is not None:
            self.dedup_ratio = dedup_ratio
        if dedup_version is not None:
            self.dedup_version = dedup_version
        if displayname is not None:
            self.displayname = displayname
        if domain is not None:
            self.domain = domain
        if free_for_allocation_mi_b is not None:
            self.free_for_allocation_mi_b = free_for_allocation_mi_b
        if free_size_mi_b is not None:
            self.free_size_mi_b = free_size_mi_b
        if free_size_raw_mi_b is not None:
            self.free_size_raw_mi_b = free_size_raw_mi_b
        if generation is not None:
            self.generation = generation
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if number_of_snap_rc is not None:
            self.number_of_snap_rc = number_of_snap_rc
        if number_of_tdvv is not None:
            self.number_of_tdvv = number_of_tdvv
        if number_of_tpvv is not None:
            self.number_of_tpvv = number_of_tpvv
        if number_of_user_rc is not None:
            self.number_of_user_rc = number_of_user_rc
        if over_prov_ratio is not None:
            self.over_prov_ratio = over_prov_ratio
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if sa_grow is not None:
            self.sa_grow = sa_grow
        if sd_grow is not None:
            self.sd_grow = sd_grow
        if shared_size_mi_b is not None:
            self.shared_size_mi_b = shared_size_mi_b
        if snap_size_private_mi_b is not None:
            self.snap_size_private_mi_b = snap_size_private_mi_b
        if snap_size_raw_mi_b is not None:
            self.snap_size_raw_mi_b = snap_size_raw_mi_b
        if snap_space_admin is not None:
            self.snap_space_admin = snap_space_admin
        if snap_space_data is not None:
            self.snap_space_data = snap_space_data
        if state is not None:
            self.state = state
        if storage_pool_id is not None:
            self.storage_pool_id = storage_pool_id
        if system_id is not None:
            self.system_id = system_id
        if total_reserved_mi_b is not None:
            self.total_reserved_mi_b = total_reserved_mi_b
        if total_size_mi_b is not None:
            self.total_size_mi_b = total_size_mi_b
        if total_size_raw_mi_b is not None:
            self.total_size_raw_mi_b = total_size_raw_mi_b
        if type is not None:
            self.type = type
        if user_space is not None:
            self.user_space = user_space
        if warn_percent is not None:
            self.warn_percent = warn_percent

    @property
    def alert(self):
        """Gets the alert of this PrimeraPoolList.  # noqa: E501


        :return: The alert of this PrimeraPoolList.  # noqa: E501
        :rtype: CpgAlert
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this PrimeraPoolList.


        :param alert: The alert of this PrimeraPoolList.  # noqa: E501
        :type: CpgAlert
        """

        self._alert = alert

    @property
    def allocation_settings(self):
        """Gets the allocation_settings of this PrimeraPoolList.  # noqa: E501


        :return: The allocation_settings of this PrimeraPoolList.  # noqa: E501
        :rtype: Allocation
        """
        return self._allocation_settings

    @allocation_settings.setter
    def allocation_settings(self, allocation_settings):
        """Sets the allocation_settings of this PrimeraPoolList.


        :param allocation_settings: The allocation_settings of this PrimeraPoolList.  # noqa: E501
        :type: Allocation
        """

        self._allocation_settings = allocation_settings

    @property
    def ao_config_id(self):
        """Gets the ao_config_id of this PrimeraPoolList.  # noqa: E501

        Numeric ID of the AO config where the CPG is a member  # noqa: E501

        :return: The ao_config_id of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._ao_config_id

    @ao_config_id.setter
    def ao_config_id(self, ao_config_id):
        """Sets the ao_config_id of this PrimeraPoolList.

        Numeric ID of the AO config where the CPG is a member  # noqa: E501

        :param ao_config_id: The ao_config_id of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._ao_config_id = ao_config_id

    @property
    def base_size_mi_b(self):
        """Gets the base_size_mi_b of this PrimeraPoolList.  # noqa: E501

        Number of LD MiB used in base virtual volumes  # noqa: E501

        :return: The base_size_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: int
        """
        return self._base_size_mi_b

    @base_size_mi_b.setter
    def base_size_mi_b(self, base_size_mi_b):
        """Sets the base_size_mi_b of this PrimeraPoolList.

        Number of LD MiB used in base virtual volumes  # noqa: E501

        :param base_size_mi_b: The base_size_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: int
        """

        self._base_size_mi_b = base_size_mi_b

    @property
    def base_size_private_mi_b(self):
        """Gets the base_size_private_mi_b of this PrimeraPoolList.  # noqa: E501

        Number of LD MiB private to individual base virtual volumes, not shared by deduplication  # noqa: E501

        :return: The base_size_private_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._base_size_private_mi_b

    @base_size_private_mi_b.setter
    def base_size_private_mi_b(self, base_size_private_mi_b):
        """Sets the base_size_private_mi_b of this PrimeraPoolList.

        Number of LD MiB private to individual base virtual volumes, not shared by deduplication  # noqa: E501

        :param base_size_private_mi_b: The base_size_private_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._base_size_private_mi_b = base_size_private_mi_b

    @property
    def base_size_raw_mi_b(self):
        """Gets the base_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501

        Number of physical (raw) MiB used in base virtual volumes  # noqa: E501

        :return: The base_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._base_size_raw_mi_b

    @base_size_raw_mi_b.setter
    def base_size_raw_mi_b(self, base_size_raw_mi_b):
        """Sets the base_size_raw_mi_b of this PrimeraPoolList.

        Number of physical (raw) MiB used in base virtual volumes  # noqa: E501

        :param base_size_raw_mi_b: The base_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._base_size_raw_mi_b = base_size_raw_mi_b

    @property
    def compact_ratio(self):
        """Gets the compact_ratio of this PrimeraPoolList.  # noqa: E501

        Ratio between the virtual sizes of all volumes in the CPG and the amount of disk space they are currently using  # noqa: E501

        :return: The compact_ratio of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._compact_ratio

    @compact_ratio.setter
    def compact_ratio(self, compact_ratio):
        """Sets the compact_ratio of this PrimeraPoolList.

        Ratio between the virtual sizes of all volumes in the CPG and the amount of disk space they are currently using  # noqa: E501

        :param compact_ratio: The compact_ratio of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._compact_ratio = compact_ratio

    @property
    def compress_ratio(self):
        """Gets the compress_ratio of this PrimeraPoolList.  # noqa: E501

        Ratio between the amount of data written to Dedup Volumes and the amount that is not duplicated  # noqa: E501

        :return: The compress_ratio of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._compress_ratio

    @compress_ratio.setter
    def compress_ratio(self, compress_ratio):
        """Sets the compress_ratio of this PrimeraPoolList.

        Ratio between the amount of data written to Dedup Volumes and the amount that is not duplicated  # noqa: E501

        :param compress_ratio: The compress_ratio of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._compress_ratio = compress_ratio

    @property
    def customer_id(self):
        """Gets the customer_id of this PrimeraPoolList.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this PrimeraPoolList.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PrimeraPoolList.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this PrimeraPoolList.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def data_reduce_ratio(self):
        """Gets the data_reduce_ratio of this PrimeraPoolList.  # noqa: E501

        Ratio between the amount written to all volumes in the CPG and the amount of disk space used after compression and deduplication  # noqa: E501

        :return: The data_reduce_ratio of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._data_reduce_ratio

    @data_reduce_ratio.setter
    def data_reduce_ratio(self, data_reduce_ratio):
        """Sets the data_reduce_ratio of this PrimeraPoolList.

        Ratio between the amount written to all volumes in the CPG and the amount of disk space used after compression and deduplication  # noqa: E501

        :param data_reduce_ratio: The data_reduce_ratio of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._data_reduce_ratio = data_reduce_ratio

    @property
    def dedup_capable(self):
        """Gets the dedup_capable of this PrimeraPoolList.  # noqa: E501

        Indicates whether the CPG supports dedup  # noqa: E501

        :return: The dedup_capable of this PrimeraPoolList.  # noqa: E501
        :rtype: bool
        """
        return self._dedup_capable

    @dedup_capable.setter
    def dedup_capable(self, dedup_capable):
        """Sets the dedup_capable of this PrimeraPoolList.

        Indicates whether the CPG supports dedup  # noqa: E501

        :param dedup_capable: The dedup_capable of this PrimeraPoolList.  # noqa: E501
        :type: bool
        """

        self._dedup_capable = dedup_capable

    @property
    def dedup_ratio(self):
        """Gets the dedup_ratio of this PrimeraPoolList.  # noqa: E501

        Ratio between the amount of data written to Dedup Volumes and the amount that is not duplicated  # noqa: E501

        :return: The dedup_ratio of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._dedup_ratio

    @dedup_ratio.setter
    def dedup_ratio(self, dedup_ratio):
        """Sets the dedup_ratio of this PrimeraPoolList.

        Ratio between the amount of data written to Dedup Volumes and the amount that is not duplicated  # noqa: E501

        :param dedup_ratio: The dedup_ratio of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._dedup_ratio = dedup_ratio

    @property
    def dedup_version(self):
        """Gets the dedup_version of this PrimeraPoolList.  # noqa: E501


        :return: The dedup_version of this PrimeraPoolList.  # noqa: E501
        :rtype: PrimeraPoolDetailsDedupVersion
        """
        return self._dedup_version

    @dedup_version.setter
    def dedup_version(self, dedup_version):
        """Sets the dedup_version of this PrimeraPoolList.


        :param dedup_version: The dedup_version of this PrimeraPoolList.  # noqa: E501
        :type: PrimeraPoolDetailsDedupVersion
        """

        self._dedup_version = dedup_version

    @property
    def displayname(self):
        """Gets the displayname of this PrimeraPoolList.  # noqa: E501

        Name to be used for display purposes  # noqa: E501

        :return: The displayname of this PrimeraPoolList.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this PrimeraPoolList.

        Name to be used for display purposes  # noqa: E501

        :param displayname: The displayname of this PrimeraPoolList.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def domain(self):
        """Gets the domain of this PrimeraPoolList.  # noqa: E501

        Name of the domain that the CPG belongs to  # noqa: E501

        :return: The domain of this PrimeraPoolList.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PrimeraPoolList.

        Name of the domain that the CPG belongs to  # noqa: E501

        :param domain: The domain of this PrimeraPoolList.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def free_for_allocation_mi_b(self):
        """Gets the free_for_allocation_mi_b of this PrimeraPoolList.  # noqa: E501

        Estimated free space for volume allocation (MiB)  # noqa: E501

        :return: The free_for_allocation_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._free_for_allocation_mi_b

    @free_for_allocation_mi_b.setter
    def free_for_allocation_mi_b(self, free_for_allocation_mi_b):
        """Sets the free_for_allocation_mi_b of this PrimeraPoolList.

        Estimated free space for volume allocation (MiB)  # noqa: E501

        :param free_for_allocation_mi_b: The free_for_allocation_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._free_for_allocation_mi_b = free_for_allocation_mi_b

    @property
    def free_size_mi_b(self):
        """Gets the free_size_mi_b of this PrimeraPoolList.  # noqa: E501

        Number of LD MiB allocated and available in the CPG  # noqa: E501

        :return: The free_size_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._free_size_mi_b

    @free_size_mi_b.setter
    def free_size_mi_b(self, free_size_mi_b):
        """Sets the free_size_mi_b of this PrimeraPoolList.

        Number of LD MiB allocated and available in the CPG  # noqa: E501

        :param free_size_mi_b: The free_size_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._free_size_mi_b = free_size_mi_b

    @property
    def free_size_raw_mi_b(self):
        """Gets the free_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501

        Number of physical (raw) MiB allocated and available in the CPG  # noqa: E501

        :return: The free_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._free_size_raw_mi_b

    @free_size_raw_mi_b.setter
    def free_size_raw_mi_b(self, free_size_raw_mi_b):
        """Sets the free_size_raw_mi_b of this PrimeraPoolList.

        Number of physical (raw) MiB allocated and available in the CPG  # noqa: E501

        :param free_size_raw_mi_b: The free_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._free_size_raw_mi_b = free_size_raw_mi_b

    @property
    def generation(self):
        """Gets the generation of this PrimeraPoolList.  # noqa: E501

        generation  # noqa: E501

        :return: The generation of this PrimeraPoolList.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this PrimeraPoolList.

        generation  # noqa: E501

        :param generation: The generation of this PrimeraPoolList.  # noqa: E501
        :type: int
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this PrimeraPoolList.  # noqa: E501

        Unique Identifier of the resource            # noqa: E501

        :return: The id of this PrimeraPoolList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrimeraPoolList.

        Unique Identifier of the resource            # noqa: E501

        :param id: The id of this PrimeraPoolList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PrimeraPoolList.  # noqa: E501

        Name of the resource  # noqa: E501

        :return: The name of this PrimeraPoolList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrimeraPoolList.

        Name of the resource  # noqa: E501

        :param name: The name of this PrimeraPoolList.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def number_of_snap_rc(self):
        """Gets the number_of_snap_rc of this PrimeraPoolList.  # noqa: E501

        Number of VVs used for Remote copy snapshot CPG usage  # noqa: E501

        :return: The number_of_snap_rc of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._number_of_snap_rc

    @number_of_snap_rc.setter
    def number_of_snap_rc(self, number_of_snap_rc):
        """Sets the number_of_snap_rc of this PrimeraPoolList.

        Number of VVs used for Remote copy snapshot CPG usage  # noqa: E501

        :param number_of_snap_rc: The number_of_snap_rc of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._number_of_snap_rc = number_of_snap_rc

    @property
    def number_of_tdvv(self):
        """Gets the number_of_tdvv of this PrimeraPoolList.  # noqa: E501

        Number of TDVVs using the CPG  # noqa: E501

        :return: The number_of_tdvv of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._number_of_tdvv

    @number_of_tdvv.setter
    def number_of_tdvv(self, number_of_tdvv):
        """Sets the number_of_tdvv of this PrimeraPoolList.

        Number of TDVVs using the CPG  # noqa: E501

        :param number_of_tdvv: The number_of_tdvv of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._number_of_tdvv = number_of_tdvv

    @property
    def number_of_tpvv(self):
        """Gets the number_of_tpvv of this PrimeraPoolList.  # noqa: E501

        Number of TPVVs using the CPG  # noqa: E501

        :return: The number_of_tpvv of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._number_of_tpvv

    @number_of_tpvv.setter
    def number_of_tpvv(self, number_of_tpvv):
        """Sets the number_of_tpvv of this PrimeraPoolList.

        Number of TPVVs using the CPG  # noqa: E501

        :param number_of_tpvv: The number_of_tpvv of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._number_of_tpvv = number_of_tpvv

    @property
    def number_of_user_rc(self):
        """Gets the number_of_user_rc of this PrimeraPoolList.  # noqa: E501

        Number of VVs used for Remote copy user CPG usage  # noqa: E501

        :return: The number_of_user_rc of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._number_of_user_rc

    @number_of_user_rc.setter
    def number_of_user_rc(self, number_of_user_rc):
        """Sets the number_of_user_rc of this PrimeraPoolList.

        Number of VVs used for Remote copy user CPG usage  # noqa: E501

        :param number_of_user_rc: The number_of_user_rc of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._number_of_user_rc = number_of_user_rc

    @property
    def over_prov_ratio(self):
        """Gets the over_prov_ratio of this PrimeraPoolList.  # noqa: E501

        Ratio between the virtual sizes of all volumes and the amount of used and free disk spaces  # noqa: E501

        :return: The over_prov_ratio of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._over_prov_ratio

    @over_prov_ratio.setter
    def over_prov_ratio(self, over_prov_ratio):
        """Sets the over_prov_ratio of this PrimeraPoolList.

        Ratio between the virtual sizes of all volumes and the amount of used and free disk spaces  # noqa: E501

        :param over_prov_ratio: The over_prov_ratio of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._over_prov_ratio = over_prov_ratio

    @property
    def resource_uri(self):
        """Gets the resource_uri of this PrimeraPoolList.  # noqa: E501

        resourceUri for detailed storage-pool object  # noqa: E501

        :return: The resource_uri of this PrimeraPoolList.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this PrimeraPoolList.

        resourceUri for detailed storage-pool object  # noqa: E501

        :param resource_uri: The resource_uri of this PrimeraPoolList.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def sa_grow(self):
        """Gets the sa_grow of this PrimeraPoolList.  # noqa: E501


        :return: The sa_grow of this PrimeraPoolList.  # noqa: E501
        :rtype: CpgGrow
        """
        return self._sa_grow

    @sa_grow.setter
    def sa_grow(self, sa_grow):
        """Sets the sa_grow of this PrimeraPoolList.


        :param sa_grow: The sa_grow of this PrimeraPoolList.  # noqa: E501
        :type: CpgGrow
        """

        self._sa_grow = sa_grow

    @property
    def sd_grow(self):
        """Gets the sd_grow of this PrimeraPoolList.  # noqa: E501


        :return: The sd_grow of this PrimeraPoolList.  # noqa: E501
        :rtype: CpgGrow
        """
        return self._sd_grow

    @sd_grow.setter
    def sd_grow(self, sd_grow):
        """Sets the sd_grow of this PrimeraPoolList.


        :param sd_grow: The sd_grow of this PrimeraPoolList.  # noqa: E501
        :type: CpgGrow
        """

        self._sd_grow = sd_grow

    @property
    def shared_size_mi_b(self):
        """Gets the shared_size_mi_b of this PrimeraPoolList.  # noqa: E501

        Number of LD MiB shared between volumes via deduplication  # noqa: E501

        :return: The shared_size_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._shared_size_mi_b

    @shared_size_mi_b.setter
    def shared_size_mi_b(self, shared_size_mi_b):
        """Sets the shared_size_mi_b of this PrimeraPoolList.

        Number of LD MiB shared between volumes via deduplication  # noqa: E501

        :param shared_size_mi_b: The shared_size_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._shared_size_mi_b = shared_size_mi_b

    @property
    def snap_size_private_mi_b(self):
        """Gets the snap_size_private_mi_b of this PrimeraPoolList.  # noqa: E501

        Number of LD MiB private to individual snapshot virtual volumes, not shared by deduplication  # noqa: E501

        :return: The snap_size_private_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._snap_size_private_mi_b

    @snap_size_private_mi_b.setter
    def snap_size_private_mi_b(self, snap_size_private_mi_b):
        """Sets the snap_size_private_mi_b of this PrimeraPoolList.

        Number of LD MiB private to individual snapshot virtual volumes, not shared by deduplication  # noqa: E501

        :param snap_size_private_mi_b: The snap_size_private_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._snap_size_private_mi_b = snap_size_private_mi_b

    @property
    def snap_size_raw_mi_b(self):
        """Gets the snap_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501

        Number of physical (raw) MiB used in snapshot virtual volumes  # noqa: E501

        :return: The snap_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._snap_size_raw_mi_b

    @snap_size_raw_mi_b.setter
    def snap_size_raw_mi_b(self, snap_size_raw_mi_b):
        """Sets the snap_size_raw_mi_b of this PrimeraPoolList.

        Number of physical (raw) MiB used in snapshot virtual volumes  # noqa: E501

        :param snap_size_raw_mi_b: The snap_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._snap_size_raw_mi_b = snap_size_raw_mi_b

    @property
    def snap_space_admin(self):
        """Gets the snap_space_admin of this PrimeraPoolList.  # noqa: E501


        :return: The snap_space_admin of this PrimeraPoolList.  # noqa: E501
        :rtype: SnapSpace
        """
        return self._snap_space_admin

    @snap_space_admin.setter
    def snap_space_admin(self, snap_space_admin):
        """Sets the snap_space_admin of this PrimeraPoolList.


        :param snap_space_admin: The snap_space_admin of this PrimeraPoolList.  # noqa: E501
        :type: SnapSpace
        """

        self._snap_space_admin = snap_space_admin

    @property
    def snap_space_data(self):
        """Gets the snap_space_data of this PrimeraPoolList.  # noqa: E501


        :return: The snap_space_data of this PrimeraPoolList.  # noqa: E501
        :rtype: SnapSpace
        """
        return self._snap_space_data

    @snap_space_data.setter
    def snap_space_data(self, snap_space_data):
        """Sets the snap_space_data of this PrimeraPoolList.


        :param snap_space_data: The snap_space_data of this PrimeraPoolList.  # noqa: E501
        :type: SnapSpace
        """

        self._snap_space_data = snap_space_data

    @property
    def state(self):
        """Gets the state of this PrimeraPoolList.  # noqa: E501


        :return: The state of this PrimeraPoolList.  # noqa: E501
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PrimeraPoolList.


        :param state: The state of this PrimeraPoolList.  # noqa: E501
        :type: State
        """

        self._state = state

    @property
    def storage_pool_id(self):
        """Gets the storage_pool_id of this PrimeraPoolList.  # noqa: E501

        Numeric ID of the resource  # noqa: E501

        :return: The storage_pool_id of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._storage_pool_id

    @storage_pool_id.setter
    def storage_pool_id(self, storage_pool_id):
        """Sets the storage_pool_id of this PrimeraPoolList.

        Numeric ID of the resource  # noqa: E501

        :param storage_pool_id: The storage_pool_id of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._storage_pool_id = storage_pool_id

    @property
    def system_id(self):
        """Gets the system_id of this PrimeraPoolList.  # noqa: E501

        SystemID of the array  # noqa: E501

        :return: The system_id of this PrimeraPoolList.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this PrimeraPoolList.

        SystemID of the array  # noqa: E501

        :param system_id: The system_id of this PrimeraPoolList.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def total_reserved_mi_b(self):
        """Gets the total_reserved_mi_b of this PrimeraPoolList.  # noqa: E501

        Total amount of space reserved by CPG  (MiB)  # noqa: E501

        :return: The total_reserved_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._total_reserved_mi_b

    @total_reserved_mi_b.setter
    def total_reserved_mi_b(self, total_reserved_mi_b):
        """Sets the total_reserved_mi_b of this PrimeraPoolList.

        Total amount of space reserved by CPG  (MiB)  # noqa: E501

        :param total_reserved_mi_b: The total_reserved_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._total_reserved_mi_b = total_reserved_mi_b

    @property
    def total_size_mi_b(self):
        """Gets the total_size_mi_b of this PrimeraPoolList.  # noqa: E501

        Total logical capacity in the user/snapshot space (MiB)  # noqa: E501

        :return: The total_size_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: int
        """
        return self._total_size_mi_b

    @total_size_mi_b.setter
    def total_size_mi_b(self, total_size_mi_b):
        """Sets the total_size_mi_b of this PrimeraPoolList.

        Total logical capacity in the user/snapshot space (MiB)  # noqa: E501

        :param total_size_mi_b: The total_size_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: int
        """

        self._total_size_mi_b = total_size_mi_b

    @property
    def total_size_raw_mi_b(self):
        """Gets the total_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501

        Total physical (raw) MiB in the user/snapshot space  # noqa: E501

        :return: The total_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._total_size_raw_mi_b

    @total_size_raw_mi_b.setter
    def total_size_raw_mi_b(self, total_size_raw_mi_b):
        """Sets the total_size_raw_mi_b of this PrimeraPoolList.

        Total physical (raw) MiB in the user/snapshot space  # noqa: E501

        :param total_size_raw_mi_b: The total_size_raw_mi_b of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._total_size_raw_mi_b = total_size_raw_mi_b

    @property
    def type(self):
        """Gets the type of this PrimeraPoolList.  # noqa: E501

        type  # noqa: E501

        :return: The type of this PrimeraPoolList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrimeraPoolList.

        type  # noqa: E501

        :param type: The type of this PrimeraPoolList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_space(self):
        """Gets the user_space of this PrimeraPoolList.  # noqa: E501


        :return: The user_space of this PrimeraPoolList.  # noqa: E501
        :rtype: SnapSpace
        """
        return self._user_space

    @user_space.setter
    def user_space(self, user_space):
        """Sets the user_space of this PrimeraPoolList.


        :param user_space: The user_space of this PrimeraPoolList.  # noqa: E501
        :type: SnapSpace
        """

        self._user_space = user_space

    @property
    def warn_percent(self):
        """Gets the warn_percent of this PrimeraPoolList.  # noqa: E501

        Allocation warning percentage  # noqa: E501

        :return: The warn_percent of this PrimeraPoolList.  # noqa: E501
        :rtype: float
        """
        return self._warn_percent

    @warn_percent.setter
    def warn_percent(self, warn_percent):
        """Sets the warn_percent of this PrimeraPoolList.

        Allocation warning percentage  # noqa: E501

        :param warn_percent: The warn_percent of this PrimeraPoolList.  # noqa: E501
        :type: float
        """

        self._warn_percent = warn_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimeraPoolList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
