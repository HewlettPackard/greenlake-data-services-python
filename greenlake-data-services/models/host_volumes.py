# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HostVolumes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'iops': 'float',
        'latency_ms': 'float',
        'path_count': 'int',
        'resource_uri': 'str',
        'system_id': 'str',
        'throughput_kbps': 'float',
        'volume_name': 'str'
    }

    attribute_map = {
        'iops': 'iops',
        'latency_ms': 'latencyMs',
        'path_count': 'pathCount',
        'resource_uri': 'resourceUri',
        'system_id': 'systemId',
        'throughput_kbps': 'throughputKbps',
        'volume_name': 'volumeName'
    }

    def __init__(self, iops=None, latency_ms=None, path_count=None, resource_uri=None, system_id=None, throughput_kbps=None, volume_name=None):  # noqa: E501
        """HostVolumes - a model defined in OpenAPI"""  # noqa: E501

        self._iops = None
        self._latency_ms = None
        self._path_count = None
        self._resource_uri = None
        self._system_id = None
        self._throughput_kbps = None
        self._volume_name = None
        self.discriminator = None

        if iops is not None:
            self.iops = iops
        if latency_ms is not None:
            self.latency_ms = latency_ms
        if path_count is not None:
            self.path_count = path_count
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if system_id is not None:
            self.system_id = system_id
        if throughput_kbps is not None:
            self.throughput_kbps = throughput_kbps
        if volume_name is not None:
            self.volume_name = volume_name

    @property
    def iops(self):
        """Gets the iops of this HostVolumes.  # noqa: E501

        IOPS  # noqa: E501

        :return: The iops of this HostVolumes.  # noqa: E501
        :rtype: float
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this HostVolumes.

        IOPS  # noqa: E501

        :param iops: The iops of this HostVolumes.  # noqa: E501
        :type: float
        """

        self._iops = iops

    @property
    def latency_ms(self):
        """Gets the latency_ms of this HostVolumes.  # noqa: E501

        Latency in ms  # noqa: E501

        :return: The latency_ms of this HostVolumes.  # noqa: E501
        :rtype: float
        """
        return self._latency_ms

    @latency_ms.setter
    def latency_ms(self, latency_ms):
        """Sets the latency_ms of this HostVolumes.

        Latency in ms  # noqa: E501

        :param latency_ms: The latency_ms of this HostVolumes.  # noqa: E501
        :type: float
        """

        self._latency_ms = latency_ms

    @property
    def path_count(self):
        """Gets the path_count of this HostVolumes.  # noqa: E501

        The number of connections from that volume  # noqa: E501

        :return: The path_count of this HostVolumes.  # noqa: E501
        :rtype: int
        """
        return self._path_count

    @path_count.setter
    def path_count(self, path_count):
        """Sets the path_count of this HostVolumes.

        The number of connections from that volume  # noqa: E501

        :param path_count: The path_count of this HostVolumes.  # noqa: E501
        :type: int
        """

        self._path_count = path_count

    @property
    def resource_uri(self):
        """Gets the resource_uri of this HostVolumes.  # noqa: E501

        resourceUri of the volume  # noqa: E501

        :return: The resource_uri of this HostVolumes.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this HostVolumes.

        resourceUri of the volume  # noqa: E501

        :param resource_uri: The resource_uri of this HostVolumes.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def system_id(self):
        """Gets the system_id of this HostVolumes.  # noqa: E501

        SystemUid of the system associated with the volume  # noqa: E501

        :return: The system_id of this HostVolumes.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this HostVolumes.

        SystemUid of the system associated with the volume  # noqa: E501

        :param system_id: The system_id of this HostVolumes.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def throughput_kbps(self):
        """Gets the throughput_kbps of this HostVolumes.  # noqa: E501

        The throughput in kbps  # noqa: E501

        :return: The throughput_kbps of this HostVolumes.  # noqa: E501
        :rtype: float
        """
        return self._throughput_kbps

    @throughput_kbps.setter
    def throughput_kbps(self, throughput_kbps):
        """Sets the throughput_kbps of this HostVolumes.

        The throughput in kbps  # noqa: E501

        :param throughput_kbps: The throughput_kbps of this HostVolumes.  # noqa: E501
        :type: float
        """

        self._throughput_kbps = throughput_kbps

    @property
    def volume_name(self):
        """Gets the volume_name of this HostVolumes.  # noqa: E501

        The name of the volume  # noqa: E501

        :return: The volume_name of this HostVolumes.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this HostVolumes.

        The name of the volume  # noqa: E501

        :param volume_name: The volume_name of this HostVolumes.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostVolumes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
