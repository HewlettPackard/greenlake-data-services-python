# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleCreateArrayInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_lower_limits': 'bool',
        'create_pool': 'bool',
        'ctrlr_a_support_ip': 'str',
        'ctrlr_b_support_ip': 'str',
        'dedupe_disabled': 'bool',
        'name': 'str',
        'nic_list': 'list[NICDetails]',
        'pool_description': 'str',
        'pool_name': 'str',
        'secondary_mgmt_ip': 'str',
        'serial': 'str'
    }

    attribute_map = {
        'allow_lower_limits': 'allow_lower_limits',
        'create_pool': 'create_pool',
        'ctrlr_a_support_ip': 'ctrlr_a_support_ip',
        'ctrlr_b_support_ip': 'ctrlr_b_support_ip',
        'dedupe_disabled': 'dedupe_disabled',
        'name': 'name',
        'nic_list': 'nic_list',
        'pool_description': 'pool_description',
        'pool_name': 'pool_name',
        'secondary_mgmt_ip': 'secondary_mgmt_ip',
        'serial': 'serial'
    }

    def __init__(self, allow_lower_limits=None, create_pool=None, ctrlr_a_support_ip=None, ctrlr_b_support_ip=None, dedupe_disabled=None, name=None, nic_list=None, pool_description=None, pool_name=None, secondary_mgmt_ip=None, serial=None):  # noqa: E501
        """NimbleCreateArrayInput - a model defined in OpenAPI"""  # noqa: E501

        self._allow_lower_limits = None
        self._create_pool = None
        self._ctrlr_a_support_ip = None
        self._ctrlr_b_support_ip = None
        self._dedupe_disabled = None
        self._name = None
        self._nic_list = None
        self._pool_description = None
        self._pool_name = None
        self._secondary_mgmt_ip = None
        self._serial = None
        self.discriminator = None

        if allow_lower_limits is not None:
            self.allow_lower_limits = allow_lower_limits
        if create_pool is not None:
            self.create_pool = create_pool
        self.ctrlr_a_support_ip = ctrlr_a_support_ip
        self.ctrlr_b_support_ip = ctrlr_b_support_ip
        if dedupe_disabled is not None:
            self.dedupe_disabled = dedupe_disabled
        self.name = name
        self.nic_list = nic_list
        if pool_description is not None:
            self.pool_description = pool_description
        self.pool_name = pool_name
        if secondary_mgmt_ip is not None:
            self.secondary_mgmt_ip = secondary_mgmt_ip
        self.serial = serial

    @property
    def allow_lower_limits(self):
        """Gets the allow_lower_limits of this NimbleCreateArrayInput.  # noqa: E501

        Whether to create associated pool during array create. Possible values: 'true', 'false'.  # noqa: E501

        :return: The allow_lower_limits of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: bool
        """
        return self._allow_lower_limits

    @allow_lower_limits.setter
    def allow_lower_limits(self, allow_lower_limits):
        """Sets the allow_lower_limits of this NimbleCreateArrayInput.

        Whether to create associated pool during array create. Possible values: 'true', 'false'.  # noqa: E501

        :param allow_lower_limits: The allow_lower_limits of this NimbleCreateArrayInput.  # noqa: E501
        :type: bool
        """

        self._allow_lower_limits = allow_lower_limits

    @property
    def create_pool(self):
        """Gets the create_pool of this NimbleCreateArrayInput.  # noqa: E501

        Whether to create associated pool during array create. Possible values: 'true', 'false'.  # noqa: E501

        :return: The create_pool of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: bool
        """
        return self._create_pool

    @create_pool.setter
    def create_pool(self, create_pool):
        """Sets the create_pool of this NimbleCreateArrayInput.

        Whether to create associated pool during array create. Possible values: 'true', 'false'.  # noqa: E501

        :param create_pool: The create_pool of this NimbleCreateArrayInput.  # noqa: E501
        :type: bool
        """

        self._create_pool = create_pool

    @property
    def ctrlr_a_support_ip(self):
        """Gets the ctrlr_a_support_ip of this NimbleCreateArrayInput.  # noqa: E501

        Controller A Support IP address.  # noqa: E501

        :return: The ctrlr_a_support_ip of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: str
        """
        return self._ctrlr_a_support_ip

    @ctrlr_a_support_ip.setter
    def ctrlr_a_support_ip(self, ctrlr_a_support_ip):
        """Sets the ctrlr_a_support_ip of this NimbleCreateArrayInput.

        Controller A Support IP address.  # noqa: E501

        :param ctrlr_a_support_ip: The ctrlr_a_support_ip of this NimbleCreateArrayInput.  # noqa: E501
        :type: str
        """
        if ctrlr_a_support_ip is None:
            raise ValueError("Invalid value for `ctrlr_a_support_ip`, must not be `None`")  # noqa: E501

        self._ctrlr_a_support_ip = ctrlr_a_support_ip

    @property
    def ctrlr_b_support_ip(self):
        """Gets the ctrlr_b_support_ip of this NimbleCreateArrayInput.  # noqa: E501

        Controller B Support IP address.  # noqa: E501

        :return: The ctrlr_b_support_ip of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: str
        """
        return self._ctrlr_b_support_ip

    @ctrlr_b_support_ip.setter
    def ctrlr_b_support_ip(self, ctrlr_b_support_ip):
        """Sets the ctrlr_b_support_ip of this NimbleCreateArrayInput.

        Controller B Support IP address.  # noqa: E501

        :param ctrlr_b_support_ip: The ctrlr_b_support_ip of this NimbleCreateArrayInput.  # noqa: E501
        :type: str
        """
        if ctrlr_b_support_ip is None:
            raise ValueError("Invalid value for `ctrlr_b_support_ip`, must not be `None`")  # noqa: E501

        self._ctrlr_b_support_ip = ctrlr_b_support_ip

    @property
    def dedupe_disabled(self):
        """Gets the dedupe_disabled of this NimbleCreateArrayInput.  # noqa: E501

        Is data deduplication disabled for this array. Possible values: 'true', 'false'.  # noqa: E501

        :return: The dedupe_disabled of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: bool
        """
        return self._dedupe_disabled

    @dedupe_disabled.setter
    def dedupe_disabled(self, dedupe_disabled):
        """Sets the dedupe_disabled of this NimbleCreateArrayInput.

        Is data deduplication disabled for this array. Possible values: 'true', 'false'.  # noqa: E501

        :param dedupe_disabled: The dedupe_disabled of this NimbleCreateArrayInput.  # noqa: E501
        :type: bool
        """

        self._dedupe_disabled = dedupe_disabled

    @property
    def name(self):
        """Gets the name of this NimbleCreateArrayInput.  # noqa: E501

        The user provided name of the array. It is also the array's hostname. String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.  # noqa: E501

        :return: The name of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NimbleCreateArrayInput.

        The user provided name of the array. It is also the array's hostname. String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.  # noqa: E501

        :param name: The name of this NimbleCreateArrayInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nic_list(self):
        """Gets the nic_list of this NimbleCreateArrayInput.  # noqa: E501

        List of NICs information. Used while creating an array.  # noqa: E501

        :return: The nic_list of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: list[NICDetails]
        """
        return self._nic_list

    @nic_list.setter
    def nic_list(self, nic_list):
        """Sets the nic_list of this NimbleCreateArrayInput.

        List of NICs information. Used while creating an array.  # noqa: E501

        :param nic_list: The nic_list of this NimbleCreateArrayInput.  # noqa: E501
        :type: list[NICDetails]
        """
        if nic_list is None:
            raise ValueError("Invalid value for `nic_list`, must not be `None`")  # noqa: E501

        self._nic_list = nic_list

    @property
    def pool_description(self):
        """Gets the pool_description of this NimbleCreateArrayInput.  # noqa: E501

        Text description of the pool to be created during array creation. String of up to 255 printable ASCII characters.  # noqa: E501

        :return: The pool_description of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: str
        """
        return self._pool_description

    @pool_description.setter
    def pool_description(self, pool_description):
        """Sets the pool_description of this NimbleCreateArrayInput.

        Text description of the pool to be created during array creation. String of up to 255 printable ASCII characters.  # noqa: E501

        :param pool_description: The pool_description of this NimbleCreateArrayInput.  # noqa: E501
        :type: str
        """

        self._pool_description = pool_description

    @property
    def pool_name(self):
        """Gets the pool_name of this NimbleCreateArrayInput.  # noqa: E501

        Name of pool to which this is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :return: The pool_name of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this NimbleCreateArrayInput.

        Name of pool to which this is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.  # noqa: E501

        :param pool_name: The pool_name of this NimbleCreateArrayInput.  # noqa: E501
        :type: str
        """
        if pool_name is None:
            raise ValueError("Invalid value for `pool_name`, must not be `None`")  # noqa: E501

        self._pool_name = pool_name

    @property
    def secondary_mgmt_ip(self):
        """Gets the secondary_mgmt_ip of this NimbleCreateArrayInput.  # noqa: E501

        Secondary management IP address for the Group.  # noqa: E501

        :return: The secondary_mgmt_ip of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: str
        """
        return self._secondary_mgmt_ip

    @secondary_mgmt_ip.setter
    def secondary_mgmt_ip(self, secondary_mgmt_ip):
        """Sets the secondary_mgmt_ip of this NimbleCreateArrayInput.

        Secondary management IP address for the Group.  # noqa: E501

        :param secondary_mgmt_ip: The secondary_mgmt_ip of this NimbleCreateArrayInput.  # noqa: E501
        :type: str
        """

        self._secondary_mgmt_ip = secondary_mgmt_ip

    @property
    def serial(self):
        """Gets the serial of this NimbleCreateArrayInput.  # noqa: E501

        Serial number of the array.  # noqa: E501

        :return: The serial of this NimbleCreateArrayInput.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this NimbleCreateArrayInput.

        Serial number of the array.  # noqa: E501

        :param serial: The serial of this NimbleCreateArrayInput.  # noqa: E501
        :type: str
        """
        if serial is None:
            raise ValueError("Invalid value for `serial`, must not be `None`")  # noqa: E501

        self._serial = serial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleCreateArrayInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
