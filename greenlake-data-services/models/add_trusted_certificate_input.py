# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AddTrustedCertificateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'parameters': 'TrustedCertParams'
    }

    attribute_map = {
        'action': 'action',
        'parameters': 'parameters'
    }

    def __init__(self, action=None, parameters=None):  # noqa: E501
        """AddTrustedCertificateInput - a model defined in OpenAPI"""  # noqa: E501

        self._action = None
        self._parameters = None
        self.discriminator = None

        self.action = action
        self.parameters = parameters

    @property
    def action(self):
        """Gets the action of this AddTrustedCertificateInput.  # noqa: E501

        Action to perform with trusted certificate  # noqa: E501

        :return: The action of this AddTrustedCertificateInput.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AddTrustedCertificateInput.

        Action to perform with trusted certificate  # noqa: E501

        :param action: The action of this AddTrustedCertificateInput.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["VERIFY_CERT_CHAIN", "INSTALL_CERT_CHAIN", "VERIFY_AND_INSTALL_CERT_CHAIN"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def parameters(self):
        """Gets the parameters of this AddTrustedCertificateInput.  # noqa: E501


        :return: The parameters of this AddTrustedCertificateInput.  # noqa: E501
        :rtype: TrustedCertParams
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AddTrustedCertificateInput.


        :param parameters: The parameters of this AddTrustedCertificateInput.  # noqa: E501
        :type: TrustedCertParams
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddTrustedCertificateInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
