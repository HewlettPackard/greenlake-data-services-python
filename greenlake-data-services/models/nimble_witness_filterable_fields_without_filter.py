# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NimbleWitnessFilterableFieldsWithoutFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host': 'str',
        'id': 'str',
        'port': 'int',
        'username': 'str'
    }

    attribute_map = {
        'host': 'host',
        'id': 'id',
        'port': 'port',
        'username': 'username'
    }

    def __init__(self, host=None, id=None, port=None, username=None):  # noqa: E501
        """NimbleWitnessFilterableFieldsWithoutFilter - a model defined in OpenAPI"""  # noqa: E501

        self._host = None
        self._id = None
        self._port = None
        self._username = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if port is not None:
            self.port = port
        if username is not None:
            self.username = username

    @property
    def host(self):
        """Gets the host of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501

        Hostname or ip addresses of witness. Comma separated strings of up to 63 characters of hostname and/or ip addresses. Total length cannot exceed 255 characters.  # noqa: E501

        :return: The host of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this NimbleWitnessFilterableFieldsWithoutFilter.

        Hostname or ip addresses of witness. Comma separated strings of up to 63 characters of hostname and/or ip addresses. Total length cannot exceed 255 characters.  # noqa: E501

        :param host: The host of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501

        Identifier for the witness configuration. A 42 digit hexadecimal number.  # noqa: E501

        :return: The id of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NimbleWitnessFilterableFieldsWithoutFilter.

        Identifier for the witness configuration. A 42 digit hexadecimal number.  # noqa: E501

        :param id: The id of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def port(self):
        """Gets the port of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501

        Port of witness. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :return: The port of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NimbleWitnessFilterableFieldsWithoutFilter.

        Port of witness. Positive integer value up to 65535 representing TCP/IP port.  # noqa: E501

        :param port: The port of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def username(self):
        """Gets the username of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501

        Username of witness. This has to be a non-root that can login to the witness host. String of up to 32 characters, beginning with a letter or number or period (.) or an underscore (_). It can include underscore (_), dash (-), period (.) and end with doller ($) sign.  # noqa: E501

        :return: The username of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NimbleWitnessFilterableFieldsWithoutFilter.

        Username of witness. This has to be a non-root that can login to the witness host. String of up to 32 characters, beginning with a letter or number or period (.) or an underscore (_). It can include underscore (_), dash (-), period (.) and end with doller ($) sign.  # noqa: E501

        :param username: The username of this NimbleWitnessFilterableFieldsWithoutFilter.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NimbleWitnessFilterableFieldsWithoutFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
