# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InitiatorGroupFilterableFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_protocol': 'str',
        'app_uuid': 'str',
        'host_type': 'str',
        'id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'access_protocol': 'access_protocol',
        'app_uuid': 'app_uuid',
        'host_type': 'host_type',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, access_protocol=None, app_uuid=None, host_type=None, id=None, name=None):  # noqa: E501
        """InitiatorGroupFilterableFields - a model defined in OpenAPI"""  # noqa: E501

        self._access_protocol = None
        self._app_uuid = None
        self._host_type = None
        self._id = None
        self._name = None
        self.discriminator = None

        if access_protocol is not None:
            self.access_protocol = access_protocol
        if app_uuid is not None:
            self.app_uuid = app_uuid
        if host_type is not None:
            self.host_type = host_type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def access_protocol(self):
        """Gets the access_protocol of this InitiatorGroupFilterableFields.  # noqa: E501

        Initiator group access protocol. Possible values: 'iscsi', 'fc'.`Filter, Sort`  # noqa: E501

        :return: The access_protocol of this InitiatorGroupFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._access_protocol

    @access_protocol.setter
    def access_protocol(self, access_protocol):
        """Sets the access_protocol of this InitiatorGroupFilterableFields.

        Initiator group access protocol. Possible values: 'iscsi', 'fc'.`Filter, Sort`  # noqa: E501

        :param access_protocol: The access_protocol of this InitiatorGroupFilterableFields.  # noqa: E501
        :type: str
        """

        self._access_protocol = access_protocol

    @property
    def app_uuid(self):
        """Gets the app_uuid of this InitiatorGroupFilterableFields.  # noqa: E501

        Application identifier of initiator group. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.`Filter, Sort`  # noqa: E501

        :return: The app_uuid of this InitiatorGroupFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._app_uuid

    @app_uuid.setter
    def app_uuid(self, app_uuid):
        """Sets the app_uuid of this InitiatorGroupFilterableFields.

        Application identifier of initiator group. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.`Filter, Sort`  # noqa: E501

        :param app_uuid: The app_uuid of this InitiatorGroupFilterableFields.  # noqa: E501
        :type: str
        """

        self._app_uuid = app_uuid

    @property
    def host_type(self):
        """Gets the host_type of this InitiatorGroupFilterableFields.  # noqa: E501

        Initiator group host type. Available options are auto and hpux. The default option is auto. This attribute will be applied to all the initiators in the initiator group. Initiators with different host OSes should not be kept in the same initiator group having a non-default host type attribute. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :return: The host_type of this InitiatorGroupFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """Sets the host_type of this InitiatorGroupFilterableFields.

        Initiator group host type. Available options are auto and hpux. The default option is auto. This attribute will be applied to all the initiators in the initiator group. Initiators with different host OSes should not be kept in the same initiator group having a non-default host type attribute. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`  # noqa: E501

        :param host_type: The host_type of this InitiatorGroupFilterableFields.  # noqa: E501
        :type: str
        """

        self._host_type = host_type

    @property
    def id(self):
        """Gets the id of this InitiatorGroupFilterableFields.  # noqa: E501

        Identifier for initiator group. A 42 digit hexadecimal number. `Filter`  # noqa: E501

        :return: The id of this InitiatorGroupFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InitiatorGroupFilterableFields.

        Identifier for initiator group. A 42 digit hexadecimal number. `Filter`  # noqa: E501

        :param id: The id of this InitiatorGroupFilterableFields.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InitiatorGroupFilterableFields.  # noqa: E501

        Name of initiator group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.`Filter, Sort`  # noqa: E501

        :return: The name of this InitiatorGroupFilterableFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InitiatorGroupFilterableFields.

        Name of initiator group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.`Filter, Sort`  # noqa: E501

        :param name: The name of this InitiatorGroupFilterableFields.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiatorGroupFilterableFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
